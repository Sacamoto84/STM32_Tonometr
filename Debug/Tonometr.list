
Tonometr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b18  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08006ca8  08006ca8  00016ca8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070b4  080070b4  000202cc  2**0
                  CONTENTS
  4 .ARM          00000000  080070b4  080070b4  000202cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080070b4  080070b4  000202cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070b4  080070b4  000170b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070b8  080070b8  000170b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002cc  20000000  080070bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000980  200002cc  08007388  000202cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20000c4c  08007388  00020c4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020cac  00000000  00000000  0002033f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b8e  00000000  00000000  00040feb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000ef8d  00000000  00000000  00045b79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ff8  00000000  00000000  00054b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000186c  00000000  00000000  00055b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021ca9  00000000  00000000  0005736c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002432e  00000000  00000000  00079015  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b10db  00000000  00000000  0009d343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000440c  00000000  00000000  0014e420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  0015282c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002cc 	.word	0x200002cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006c90 	.word	0x08006c90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d0 	.word	0x200002d0
 80001cc:	08006c90 	.word	0x08006c90

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c48:	b500      	push	{lr}

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c4a:	4817      	ldr	r0, [pc, #92]	; (8000ca8 <MX_ADC1_Init+0x60>)
 8000c4c:	4917      	ldr	r1, [pc, #92]	; (8000cac <MX_ADC1_Init+0x64>)
 8000c4e:	6001      	str	r1, [r0, #0]
{
 8000c50:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c52:	2300      	movs	r3, #0
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T19_TRGO;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 8000c54:	2201      	movs	r2, #1
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c56:	e9cd 3300 	strd	r3, r3, [sp]
 8000c5a:	9302      	str	r3, [sp, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c5c:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c5e:	7303      	strb	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c60:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T19_TRGO;
 8000c62:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c64:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000c66:	6102      	str	r2, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c68:	f000 fcb8 	bl	80015dc <HAL_ADC_Init>
 8000c6c:	b968      	cbnz	r0, 8000c8a <MX_ADC1_Init+0x42>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000c6e:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8000ca0 <MX_ADC1_Init+0x58>
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000c72:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c74:	480c      	ldr	r0, [pc, #48]	; (8000ca8 <MX_ADC1_Init+0x60>)
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000c76:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c78:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_6;
 8000c7a:	ed8d 7b00 	vstr	d7, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c7e:	f000 fdc3 	bl	8001808 <HAL_ADC_ConfigChannel>
 8000c82:	b928      	cbnz	r0, 8000c90 <MX_ADC1_Init+0x48>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c84:	b005      	add	sp, #20
 8000c86:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000c8a:	f000 f915 	bl	8000eb8 <Error_Handler>
 8000c8e:	e7ee      	b.n	8000c6e <MX_ADC1_Init+0x26>
    Error_Handler();
 8000c90:	f000 f912 	bl	8000eb8 <Error_Handler>
}
 8000c94:	b005      	add	sp, #20
 8000c96:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c9a:	bf00      	nop
 8000c9c:	f3af 8000 	nop.w
 8000ca0:	00000006 	.word	0x00000006
 8000ca4:	00000001 	.word	0x00000001
 8000ca8:	200002e8 	.word	0x200002e8
 8000cac:	40012400 	.word	0x40012400

08000cb0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000cb0:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(adcHandle->Instance==ADC1)
 8000cb2:	4b22      	ldr	r3, [pc, #136]	; (8000d3c <HAL_ADC_MspInit+0x8c>)
 8000cb4:	6802      	ldr	r2, [r0, #0]
{
 8000cb6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	2400      	movs	r4, #0
  if(adcHandle->Instance==ADC1)
 8000cba:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000cc0:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8000cc4:	9406      	str	r4, [sp, #24]
  if(adcHandle->Instance==ADC1)
 8000cc6:	d001      	beq.n	8000ccc <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000cc8:	b008      	add	sp, #32
 8000cca:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ccc:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8000cd0:	4605      	mov	r5, r0
 8000cd2:	699a      	ldr	r2, [r3, #24]
    hdma_adc1.Instance = DMA1_Channel1;
 8000cd4:	4e1a      	ldr	r6, [pc, #104]	; (8000d40 <HAL_ADC_MspInit+0x90>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cda:	619a      	str	r2, [r3, #24]
 8000cdc:	699a      	ldr	r2, [r3, #24]
 8000cde:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000ce2:	9200      	str	r2, [sp, #0]
 8000ce4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	695a      	ldr	r2, [r3, #20]
 8000ce8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000cec:	615a      	str	r2, [r3, #20]
 8000cee:	695b      	ldr	r3, [r3, #20]
 8000cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cf4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cf6:	2240      	movs	r2, #64	; 0x40
 8000cf8:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cfe:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d00:	e9cd 2302 	strd	r2, r3, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d04:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d06:	f000 ff87 	bl	8001c18 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8000d0a:	4a0e      	ldr	r2, [pc, #56]	; (8000d44 <HAL_ADC_MspInit+0x94>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d0c:	2380      	movs	r3, #128	; 0x80
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d0e:	e9c6 2400 	strd	r2, r4, [r6]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d12:	e9c6 4302 	strd	r4, r3, [r6, #8]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d1e:	4630      	mov	r0, r6
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d20:	e9c6 2304 	strd	r2, r3, [r6, #16]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d24:	e9c6 4406 	strd	r4, r4, [r6, #24]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d28:	f000 fe60 	bl	80019ec <HAL_DMA_Init>
 8000d2c:	b918      	cbnz	r0, 8000d36 <HAL_ADC_MspInit+0x86>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000d2e:	622e      	str	r6, [r5, #32]
 8000d30:	6275      	str	r5, [r6, #36]	; 0x24
}
 8000d32:	b008      	add	sp, #32
 8000d34:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8000d36:	f000 f8bf 	bl	8000eb8 <Error_Handler>
 8000d3a:	e7f8      	b.n	8000d2e <HAL_ADC_MspInit+0x7e>
 8000d3c:	40012400 	.word	0x40012400
 8000d40:	20000318 	.word	0x20000318
 8000d44:	40020008 	.word	0x40020008

08000d48 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d48:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <MX_DMA_Init+0x40>)
{
 8000d4a:	b500      	push	{lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d4c:	6958      	ldr	r0, [r3, #20]
 8000d4e:	f040 0001 	orr.w	r0, r0, #1
 8000d52:	6158      	str	r0, [r3, #20]
 8000d54:	695b      	ldr	r3, [r3, #20]
{
 8000d56:	b083      	sub	sp, #12

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d58:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d5a:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d5e:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d60:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d62:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d64:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d66:	f000 fdf5 	bl	8001954 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d6a:	200b      	movs	r0, #11
 8000d6c:	f000 fe30 	bl	80019d0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000d70:	2200      	movs	r2, #0
 8000d72:	2011      	movs	r0, #17
 8000d74:	4611      	mov	r1, r2
 8000d76:	f000 fded 	bl	8001954 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000d7a:	2011      	movs	r0, #17

}
 8000d7c:	b003      	add	sp, #12
 8000d7e:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000d82:	f000 be25 	b.w	80019d0 <HAL_NVIC_EnableIRQ>
 8000d86:	bf00      	nop
 8000d88:	40021000 	.word	0x40021000

08000d8c <MX_GPIO_Init>:
*/
void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <MX_GPIO_Init+0x40>)
 8000d8e:	695a      	ldr	r2, [r3, #20]
 8000d90:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000d94:	615a      	str	r2, [r3, #20]
 8000d96:	695a      	ldr	r2, [r3, #20]
{
 8000d98:	b084      	sub	sp, #16
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d9a:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8000d9e:	9201      	str	r2, [sp, #4]
 8000da0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	695a      	ldr	r2, [r3, #20]
 8000da4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000da8:	615a      	str	r2, [r3, #20]
 8000daa:	695a      	ldr	r2, [r3, #20]
 8000dac:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000db0:	9202      	str	r2, [sp, #8]
 8000db2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db4:	695a      	ldr	r2, [r3, #20]
 8000db6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000dba:	615a      	str	r2, [r3, #20]
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dc2:	9303      	str	r3, [sp, #12]
 8000dc4:	9b03      	ldr	r3, [sp, #12]

}
 8000dc6:	b004      	add	sp, #16
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd0:	b510      	push	{r4, lr}
 8000dd2:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dd4:	2100      	movs	r1, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dd6:	222c      	movs	r2, #44	; 0x2c
 8000dd8:	a810      	add	r0, sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dda:	e9cd 110b 	strd	r1, r1, [sp, #44]	; 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dde:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8000de2:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de6:	9108      	str	r1, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de8:	9101      	str	r1, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dea:	9109      	str	r1, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dec:	f003 fe57 	bl	8004a9e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000df0:	2201      	movs	r2, #1
 8000df2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000df6:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dfa:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dfc:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dfe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e02:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e06:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e08:	e9cd 420d 	strd	r4, r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e0c:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e0e:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e10:	f001 f800 	bl	8001e14 <HAL_RCC_OscConfig>
 8000e14:	b108      	cbz	r0, 8000e1a <SystemClock_Config+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e16:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e1a:	220f      	movs	r2, #15
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	9201      	str	r2, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e20:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e22:	f44f 6280 	mov.w	r2, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e26:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e28:	e9cd 3203 	strd	r3, r2, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e2c:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e2e:	9402      	str	r4, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e30:	f001 fab8 	bl	80023a4 <HAL_RCC_ClockConfig>
 8000e34:	4603      	mov	r3, r0
 8000e36:	b108      	cbz	r0, 8000e3c <SystemClock_Config+0x6c>
 8000e38:	b672      	cpsid	i
  while (1)
 8000e3a:	e7fe      	b.n	8000e3a <SystemClock_Config+0x6a>
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e3c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8000e70 <SystemClock_Config+0xa0>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000e40:	f640 0183 	movw	r1, #2179	; 0x883
  PeriphClkInit.SdadcClockSelection = RCC_SDADCSYSCLK_DIV48;
 8000e44:	f04f 4278 	mov.w	r2, #4160749568	; 0xf8000000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e48:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e4a:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PCLK2_DIV2;
 8000e4e:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000e52:	9110      	str	r1, [sp, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e54:	f001 fc12 	bl	800267c <HAL_RCCEx_PeriphCLKConfig>
 8000e58:	b108      	cbz	r0, 8000e5e <SystemClock_Config+0x8e>
 8000e5a:	b672      	cpsid	i
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <SystemClock_Config+0x8c>
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG1);
 8000e5e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e62:	f000 ffc1 	bl	8001de8 <HAL_PWREx_EnableSDADC>
}
 8000e66:	b01c      	add	sp, #112	; 0x70
 8000e68:	bd10      	pop	{r4, pc}
 8000e6a:	bf00      	nop
 8000e6c:	f3af 8000 	nop.w
	...

08000e78 <main>:
{
 8000e78:	b508      	push	{r3, lr}
  HAL_Init();
 8000e7a:	f000 fafb 	bl	8001474 <HAL_Init>
  SystemClock_Config();
 8000e7e:	f7ff ffa7 	bl	8000dd0 <SystemClock_Config>
  MX_GPIO_Init();
 8000e82:	f7ff ff83 	bl	8000d8c <MX_GPIO_Init>
  MX_DMA_Init();
 8000e86:	f7ff ff5f 	bl	8000d48 <MX_DMA_Init>
  MX_SDADC1_Init();
 8000e8a:	f000 f819 	bl	8000ec0 <MX_SDADC1_Init>
  MX_USART1_UART_Init();
 8000e8e:	f000 fa09 	bl	80012a4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000e92:	f000 fa25 	bl	80012e0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000e96:	f7ff fed7 	bl	8000c48 <MX_ADC1_Init>
  MX_TIM19_Init();
 8000e9a:	f000 f9b1 	bl	8001200 <MX_TIM19_Init>
   setup();
 8000e9e:	f003 f861 	bl	8003f64 <setup>
  while (1)
 8000ea2:	e7fe      	b.n	8000ea2 <main+0x2a>

08000ea4 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM18) {
 8000ea4:	4b03      	ldr	r3, [pc, #12]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000ea6:	6802      	ldr	r2, [r0, #0]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d000      	beq.n	8000eae <HAL_TIM_PeriodElapsedCallback+0xa>
}
 8000eac:	4770      	bx	lr
    HAL_IncTick();
 8000eae:	f000 baf3 	b.w	8001498 <HAL_IncTick>
 8000eb2:	bf00      	nop
 8000eb4:	40009c00 	.word	0x40009c00

08000eb8 <Error_Handler>:
 8000eb8:	b672      	cpsid	i
  while (1)
 8000eba:	e7fe      	b.n	8000eba <Error_Handler+0x2>
 8000ebc:	0000      	movs	r0, r0
	...

08000ec0 <MX_SDADC1_Init>:

SDADC_HandleTypeDef hsdadc1;

/* SDADC1 init function */
void MX_SDADC1_Init(void)
{
 8000ec0:	b500      	push	{lr}
  /* USER CODE END SDADC1_Init 1 */

  /** Configure the SDADC low power mode, fast conversion mode,
  slow clock mode and SDADC1 reference voltage
  */
  hsdadc1.Instance = SDADC1;
 8000ec2:	4829      	ldr	r0, [pc, #164]	; (8000f68 <MX_SDADC1_Init+0xa8>)
 8000ec4:	4929      	ldr	r1, [pc, #164]	; (8000f6c <MX_SDADC1_Init+0xac>)
  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 8000ec6:	2300      	movs	r3, #0
{
 8000ec8:	b085      	sub	sp, #20
  hsdadc1.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
  hsdadc1.Init.FastConversionMode = SDADC_FAST_CONV_DISABLE;
  hsdadc1.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
  hsdadc1.Init.ReferenceVoltage = SDADC_VREF_VDDA;
 8000eca:	f44f 7240 	mov.w	r2, #768	; 0x300
  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 8000ece:	e9cd 3300 	strd	r3, r3, [sp]
 8000ed2:	e9cd 3302 	strd	r3, r3, [sp, #8]
  hsdadc1.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 8000ed6:	e9c0 1300 	strd	r1, r3, [r0]
  hsdadc1.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 8000eda:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hsdadc1.Init.ReferenceVoltage = SDADC_VREF_VDDA;
 8000ede:	6102      	str	r2, [r0, #16]
  if (HAL_SDADC_Init(&hsdadc1) != HAL_OK)
 8000ee0:	f001 fcb4 	bl	800284c <HAL_SDADC_Init>
 8000ee4:	bb08      	cbnz	r0, 8000f2a <MX_SDADC1_Init+0x6a>
    Error_Handler();
  }

  /** Configure The Regular Mode
  */
  if (HAL_SDADC_SelectRegularTrigger(&hsdadc1, SDADC_SOFTWARE_TRIGGER) != HAL_OK)
 8000ee6:	4820      	ldr	r0, [pc, #128]	; (8000f68 <MX_SDADC1_Init+0xa8>)
 8000ee8:	2100      	movs	r1, #0
 8000eea:	f001 fd91 	bl	8002a10 <HAL_SDADC_SelectRegularTrigger>
 8000eee:	bb20      	cbnz	r0, 8000f3a <MX_SDADC1_Init+0x7a>
    Error_Handler();
  }

  /** Set parameters for SDADC configuration 0 Register
  */
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_SE_OFFSET;
 8000ef0:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8000f58 <MX_SDADC1_Init+0x98>
 8000ef4:	ed8d 7b00 	vstr	d7, [sp]
 8000ef8:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8000f60 <MX_SDADC1_Init+0xa0>
  ConfParamStruct.Gain = SDADC_GAIN_1_2;
  ConfParamStruct.CommonMode = SDADC_COMMON_MODE_VSSA;
  ConfParamStruct.Offset = 0;
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc1, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 8000efc:	481a      	ldr	r0, [pc, #104]	; (8000f68 <MX_SDADC1_Init+0xa8>)
 8000efe:	466a      	mov	r2, sp
 8000f00:	2100      	movs	r1, #0
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_SE_OFFSET;
 8000f02:	ed8d 7b02 	vstr	d7, [sp, #8]
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc1, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 8000f06:	f001 fced 	bl	80028e4 <HAL_SDADC_PrepareChannelConfig>
 8000f0a:	bb08      	cbnz	r0, 8000f50 <MX_SDADC1_Init+0x90>
    Error_Handler();
  }

  /** Configure the Regular Channel
  */
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_6, SDADC_CONF_INDEX_0) != HAL_OK)
 8000f0c:	4918      	ldr	r1, [pc, #96]	; (8000f70 <MX_SDADC1_Init+0xb0>)
 8000f0e:	4816      	ldr	r0, [pc, #88]	; (8000f68 <MX_SDADC1_Init+0xa8>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	f001 fd1b 	bl	800294c <HAL_SDADC_AssociateChannelConfig>
 8000f16:	b9c0      	cbnz	r0, 8000f4a <MX_SDADC1_Init+0x8a>
  {
    Error_Handler();
  }
  if (HAL_SDADC_ConfigChannel(&hsdadc1, SDADC_CHANNEL_6, SDADC_CONTINUOUS_CONV_ON) != HAL_OK)
 8000f18:	4915      	ldr	r1, [pc, #84]	; (8000f70 <MX_SDADC1_Init+0xb0>)
 8000f1a:	4813      	ldr	r0, [pc, #76]	; (8000f68 <MX_SDADC1_Init+0xa8>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	f001 fd51 	bl	80029c4 <HAL_SDADC_ConfigChannel>
 8000f22:	b968      	cbnz	r0, 8000f40 <MX_SDADC1_Init+0x80>
  }
  /* USER CODE BEGIN SDADC1_Init 2 */

  /* USER CODE END SDADC1_Init 2 */

}
 8000f24:	b005      	add	sp, #20
 8000f26:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000f2a:	f7ff ffc5 	bl	8000eb8 <Error_Handler>
  if (HAL_SDADC_SelectRegularTrigger(&hsdadc1, SDADC_SOFTWARE_TRIGGER) != HAL_OK)
 8000f2e:	480e      	ldr	r0, [pc, #56]	; (8000f68 <MX_SDADC1_Init+0xa8>)
 8000f30:	2100      	movs	r1, #0
 8000f32:	f001 fd6d 	bl	8002a10 <HAL_SDADC_SelectRegularTrigger>
 8000f36:	2800      	cmp	r0, #0
 8000f38:	d0da      	beq.n	8000ef0 <MX_SDADC1_Init+0x30>
    Error_Handler();
 8000f3a:	f7ff ffbd 	bl	8000eb8 <Error_Handler>
 8000f3e:	e7d7      	b.n	8000ef0 <MX_SDADC1_Init+0x30>
    Error_Handler();
 8000f40:	f7ff ffba 	bl	8000eb8 <Error_Handler>
}
 8000f44:	b005      	add	sp, #20
 8000f46:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000f4a:	f7ff ffb5 	bl	8000eb8 <Error_Handler>
 8000f4e:	e7e3      	b.n	8000f18 <MX_SDADC1_Init+0x58>
    Error_Handler();
 8000f50:	f7ff ffb2 	bl	8000eb8 <Error_Handler>
 8000f54:	e7da      	b.n	8000f0c <MX_SDADC1_Init+0x4c>
 8000f56:	bf00      	nop
 8000f58:	04000000 	.word	0x04000000
 8000f5c:	00700000 	.word	0x00700000
	...
 8000f68:	2000035c 	.word	0x2000035c
 8000f6c:	40016000 	.word	0x40016000
 8000f70:	00060040 	.word	0x00060040

08000f74 <HAL_SDADC_MspInit>:

void HAL_SDADC_MspInit(SDADC_HandleTypeDef* sdadcHandle)
{
 8000f74:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(sdadcHandle->Instance==SDADC1)
 8000f76:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <HAL_SDADC_MspInit+0x68>)
 8000f78:	6802      	ldr	r2, [r0, #0]
{
 8000f7a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	2400      	movs	r4, #0
  if(sdadcHandle->Instance==SDADC1)
 8000f7e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000f84:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8000f88:	9406      	str	r4, [sp, #24]
  if(sdadcHandle->Instance==SDADC1)
 8000f8a:	d001      	beq.n	8000f90 <HAL_SDADC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SDADC1_IRQn);
  /* USER CODE BEGIN SDADC1_MspInit 1 */

  /* USER CODE END SDADC1_MspInit 1 */
  }
}
 8000f8c:	b008      	add	sp, #32
 8000f8e:	bd10      	pop	{r4, pc}
    __HAL_RCC_SDADC1_CLK_ENABLE();
 8000f90:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f94:	a902      	add	r1, sp, #8
    __HAL_RCC_SDADC1_CLK_ENABLE();
 8000f96:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f98:	4811      	ldr	r0, [pc, #68]	; (8000fe0 <HAL_SDADC_MspInit+0x6c>)
    __HAL_RCC_SDADC1_CLK_ENABLE();
 8000f9a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000f9e:	619a      	str	r2, [r3, #24]
 8000fa0:	699a      	ldr	r2, [r3, #24]
 8000fa2:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 8000fa6:	9200      	str	r2, [sp, #0]
 8000fa8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000faa:	695a      	ldr	r2, [r3, #20]
 8000fac:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000fb0:	615a      	str	r2, [r3, #20]
 8000fb2:	695b      	ldr	r3, [r3, #20]
 8000fb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fb8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fba:	2201      	movs	r2, #1
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc2:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc4:	f000 fe28 	bl	8001c18 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDADC1_IRQn, 0, 0);
 8000fc8:	4622      	mov	r2, r4
 8000fca:	4621      	mov	r1, r4
 8000fcc:	203d      	movs	r0, #61	; 0x3d
 8000fce:	f000 fcc1 	bl	8001954 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDADC1_IRQn);
 8000fd2:	203d      	movs	r0, #61	; 0x3d
 8000fd4:	f000 fcfc 	bl	80019d0 <HAL_NVIC_EnableIRQ>
}
 8000fd8:	b008      	add	sp, #32
 8000fda:	bd10      	pop	{r4, pc}
 8000fdc:	40016000 	.word	0x40016000
 8000fe0:	48000400 	.word	0x48000400

08000fe4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe4:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <HAL_MspInit+0x2c>)
 8000fe6:	699a      	ldr	r2, [r3, #24]
 8000fe8:	f042 0201 	orr.w	r2, r2, #1
 8000fec:	619a      	str	r2, [r3, #24]
 8000fee:	699a      	ldr	r2, [r3, #24]
{
 8000ff0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff2:	f002 0201 	and.w	r2, r2, #1
 8000ff6:	9200      	str	r2, [sp, #0]
 8000ff8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffa:	69da      	ldr	r2, [r3, #28]
 8000ffc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001000:	61da      	str	r2, [r3, #28]
 8001002:	69db      	ldr	r3, [r3, #28]
 8001004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001008:	9301      	str	r3, [sp, #4]
 800100a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100c:	b002      	add	sp, #8
 800100e:	4770      	bx	lr
 8001010:	40021000 	.word	0x40021000

08001014 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM18 clock */
  __HAL_RCC_TIM18_CLK_ENABLE();
 8001014:	4b23      	ldr	r3, [pc, #140]	; (80010a4 <HAL_InitTick+0x90>)
{
 8001016:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM18_CLK_ENABLE();
 8001018:	69da      	ldr	r2, [r3, #28]
 800101a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800101e:	61da      	str	r2, [r3, #28]
 8001020:	69db      	ldr	r3, [r3, #28]
{
 8001022:	b088      	sub	sp, #32
  __HAL_RCC_TIM18_CLK_ENABLE();
 8001024:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001028:	9302      	str	r3, [sp, #8]
{
 800102a:	4605      	mov	r5, r0

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800102c:	a901      	add	r1, sp, #4
 800102e:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM18_CLK_ENABLE();
 8001030:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001032:	f001 fb01 	bl	8002638 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM18 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001036:	9b06      	ldr	r3, [sp, #24]
 8001038:	b9d3      	cbnz	r3, 8001070 <HAL_InitTick+0x5c>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800103a:	f001 facd 	bl	80025d8 <HAL_RCC_GetPCLK1Freq>
 800103e:	4603      	mov	r3, r0
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM18 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001040:	4a19      	ldr	r2, [pc, #100]	; (80010a8 <HAL_InitTick+0x94>)

  /* Initialize TIM18 */
  htim18.Instance = TIM18;
 8001042:	4c1a      	ldr	r4, [pc, #104]	; (80010ac <HAL_InitTick+0x98>)
 8001044:	491a      	ldr	r1, [pc, #104]	; (80010b0 <HAL_InitTick+0x9c>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001046:	fba2 2303 	umull	r2, r3, r2, r3
 800104a:	0c9b      	lsrs	r3, r3, #18
 800104c:	3b01      	subs	r3, #1
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim18.Init.Period = (1000000U / 1000U) - 1U;
  htim18.Init.Prescaler = uwPrescalerValue;
  htim18.Init.ClockDivision = 0;
 800104e:	2200      	movs	r2, #0
  htim18.Init.Prescaler = uwPrescalerValue;
 8001050:	e9c4 1300 	strd	r1, r3, [r4]
  htim18.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim18.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim18);
 8001054:	4620      	mov	r0, r4
  htim18.Init.Period = (1000000U / 1000U) - 1U;
 8001056:	f240 33e7 	movw	r3, #999	; 0x3e7
  htim18.Init.ClockDivision = 0;
 800105a:	6122      	str	r2, [r4, #16]
  htim18.Init.CounterMode = TIM_COUNTERMODE_UP;
 800105c:	60a2      	str	r2, [r4, #8]
  htim18.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800105e:	61a2      	str	r2, [r4, #24]
  htim18.Init.Period = (1000000U / 1000U) - 1U;
 8001060:	60e3      	str	r3, [r4, #12]
  status = HAL_TIM_Base_Init(&htim18);
 8001062:	f001 fdeb 	bl	8002c3c <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8001066:	4606      	mov	r6, r0
 8001068:	b130      	cbz	r0, 8001078 <HAL_InitTick+0x64>
    }
  }

 /* Return function status */
  return status;
}
 800106a:	4630      	mov	r0, r6
 800106c:	b008      	add	sp, #32
 800106e:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001070:	f001 fab2 	bl	80025d8 <HAL_RCC_GetPCLK1Freq>
 8001074:	0043      	lsls	r3, r0, #1
 8001076:	e7e3      	b.n	8001040 <HAL_InitTick+0x2c>
    status = HAL_TIM_Base_Start_IT(&htim18);
 8001078:	4620      	mov	r0, r4
 800107a:	f001 fe6f 	bl	8002d5c <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 800107e:	4606      	mov	r6, r0
 8001080:	2800      	cmp	r0, #0
 8001082:	d1f2      	bne.n	800106a <HAL_InitTick+0x56>
        HAL_NVIC_EnableIRQ(TIM18_DAC2_IRQn);
 8001084:	201b      	movs	r0, #27
 8001086:	f000 fca3 	bl	80019d0 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108a:	2d0f      	cmp	r5, #15
 800108c:	d901      	bls.n	8001092 <HAL_InitTick+0x7e>
        status = HAL_ERROR;
 800108e:	2601      	movs	r6, #1
 8001090:	e7eb      	b.n	800106a <HAL_InitTick+0x56>
        HAL_NVIC_SetPriority(TIM18_DAC2_IRQn, TickPriority, 0U);
 8001092:	4632      	mov	r2, r6
 8001094:	4629      	mov	r1, r5
 8001096:	201b      	movs	r0, #27
 8001098:	f000 fc5c 	bl	8001954 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <HAL_InitTick+0xa0>)
 800109e:	601d      	str	r5, [r3, #0]
 80010a0:	e7e3      	b.n	800106a <HAL_InitTick+0x56>
 80010a2:	bf00      	nop
 80010a4:	40021000 	.word	0x40021000
 80010a8:	431bde83 	.word	0x431bde83
 80010ac:	200003a0 	.word	0x200003a0
 80010b0:	40009c00 	.word	0x40009c00
 80010b4:	20000008 	.word	0x20000008

080010b8 <NMI_Handler>:
void NMI_Handler(void) {
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80010b8:	e7fe      	b.n	80010b8 <NMI_Handler>
 80010ba:	bf00      	nop

080010bc <HardFault_Handler>:
 */
void HardFault_Handler(void) {
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 80010bc:	e7fe      	b.n	80010bc <HardFault_Handler>
 80010be:	bf00      	nop

080010c0 <MemManage_Handler>:
 */
void MemManage_Handler(void) {
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 80010c0:	e7fe      	b.n	80010c0 <MemManage_Handler>
 80010c2:	bf00      	nop

080010c4 <BusFault_Handler>:
 */
void BusFault_Handler(void) {
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 80010c4:	e7fe      	b.n	80010c4 <BusFault_Handler>
 80010c6:	bf00      	nop

080010c8 <UsageFault_Handler>:
 */
void UsageFault_Handler(void) {
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 80010c8:	e7fe      	b.n	80010c8 <UsageFault_Handler>
 80010ca:	bf00      	nop

080010cc <SVC_Handler>:

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop

080010d0 <DebugMon_Handler>:
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop

080010d4 <PendSV_Handler>:
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop

080010d8 <SysTick_Handler>:
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop

080010dc <DMA1_Channel1_IRQHandler>:
 */
void DMA1_Channel1_IRQHandler(void) {
	/* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

	/* USER CODE END DMA1_Channel1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_adc1);
 80010dc:	4801      	ldr	r0, [pc, #4]	; (80010e4 <DMA1_Channel1_IRQHandler+0x8>)
 80010de:	f000 bd51 	b.w	8001b84 <HAL_DMA_IRQHandler>
 80010e2:	bf00      	nop
 80010e4:	20000318 	.word	0x20000318

080010e8 <DMA1_Channel7_IRQHandler>:
/**
 * @brief This function handles DMA1 channel7 global interrupt.
 */
void DMA1_Channel7_IRQHandler(void) {
	/* USER CODE BEGIN DMA1_Channel7_IRQn 0 */
	USART2_DMA_TX_Complete = 0;
 80010e8:	4b02      	ldr	r3, [pc, #8]	; (80010f4 <DMA1_Channel7_IRQHandler+0xc>)
	/* USER CODE END DMA1_Channel7_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80010ea:	4803      	ldr	r0, [pc, #12]	; (80010f8 <DMA1_Channel7_IRQHandler+0x10>)
	USART2_DMA_TX_Complete = 0;
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
	HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80010f0:	f000 bd48 	b.w	8001b84 <HAL_DMA_IRQHandler>
 80010f4:	200003ec 	.word	0x200003ec
 80010f8:	20000440 	.word	0x20000440

080010fc <TIM18_DAC2_IRQHandler>:
 */
void TIM18_DAC2_IRQHandler(void) {
	/* USER CODE BEGIN TIM18_DAC2_IRQn 0 */

	/* USER CODE END TIM18_DAC2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim18);
 80010fc:	4801      	ldr	r0, [pc, #4]	; (8001104 <TIM18_DAC2_IRQHandler+0x8>)
 80010fe:	f001 bf1d 	b.w	8002f3c <HAL_TIM_IRQHandler>
 8001102:	bf00      	nop
 8001104:	200003a0 	.word	0x200003a0

08001108 <USART2_IRQHandler>:
 */
void USART2_IRQHandler(void) {
	/* USER CODE BEGIN USART2_IRQn 0 */
	//При приеме помещаем в буффер данные

	if ((USART2->ISR &  USART_ISR_RXNE) && ((USART2->ISR & USART_ISR_ORE) == 0))
 8001108:	4b05      	ldr	r3, [pc, #20]	; (8001120 <USART2_IRQHandler+0x18>)
 800110a:	69da      	ldr	r2, [r3, #28]
 800110c:	0691      	lsls	r1, r2, #26
 800110e:	d503      	bpl.n	8001118 <USART2_IRQHandler+0x10>
 8001110:	69da      	ldr	r2, [r3, #28]
 8001112:	0712      	lsls	r2, r2, #28
	{
		uint8_t USART_data = USART2->RDR;
 8001114:	bf58      	it	pl
 8001116:	8c9b      	ldrhpl	r3, [r3, #36]	; 0x24
		//PutChar(USART_data);//принятый байт
	}

	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8001118:	4802      	ldr	r0, [pc, #8]	; (8001124 <USART2_IRQHandler+0x1c>)
 800111a:	f002 b939 	b.w	8003390 <HAL_UART_IRQHandler>
 800111e:	bf00      	nop
 8001120:	40004400 	.word	0x40004400
 8001124:	2000050c 	.word	0x2000050c

08001128 <SDADC1_IRQHandler>:
 */
void SDADC1_IRQHandler(void) {
	/* USER CODE BEGIN SDADC1_IRQn 0 */

	/* USER CODE END SDADC1_IRQn 0 */
	HAL_SDADC_IRQHandler(&hsdadc1);
 8001128:	4801      	ldr	r0, [pc, #4]	; (8001130 <SDADC1_IRQHandler+0x8>)
 800112a:	f001 bd11 	b.w	8002b50 <HAL_SDADC_IRQHandler>
 800112e:	bf00      	nop
 8001130:	2000035c 	.word	0x2000035c

08001134 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001134:	2001      	movs	r0, #1
 8001136:	4770      	bx	lr

08001138 <_kill>:

int _kill(int pid, int sig)
{
 8001138:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800113a:	f003 fd03 	bl	8004b44 <__errno>
 800113e:	2316      	movs	r3, #22
 8001140:	6003      	str	r3, [r0, #0]
  return -1;
}
 8001142:	f04f 30ff 	mov.w	r0, #4294967295
 8001146:	bd08      	pop	{r3, pc}

08001148 <_exit>:

void _exit (int status)
{
 8001148:	b508      	push	{r3, lr}
  errno = EINVAL;
 800114a:	f003 fcfb 	bl	8004b44 <__errno>
 800114e:	2316      	movs	r3, #22
 8001150:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8001152:	e7fe      	b.n	8001152 <_exit+0xa>

08001154 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001154:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001156:	1e16      	subs	r6, r2, #0
 8001158:	dd07      	ble.n	800116a <_read+0x16>
 800115a:	460c      	mov	r4, r1
 800115c:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 800115e:	f3af 8000 	nop.w
 8001162:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001166:	42a5      	cmp	r5, r4
 8001168:	d1f9      	bne.n	800115e <_read+0xa>
  }

  return len;
}
 800116a:	4630      	mov	r0, r6
 800116c:	bd70      	pop	{r4, r5, r6, pc}
 800116e:	bf00      	nop

08001170 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001170:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001172:	1e16      	subs	r6, r2, #0
 8001174:	dd07      	ble.n	8001186 <_write+0x16>
 8001176:	460c      	mov	r4, r1
 8001178:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 800117a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800117e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001182:	42ac      	cmp	r4, r5
 8001184:	d1f9      	bne.n	800117a <_write+0xa>
  }
  return len;
}
 8001186:	4630      	mov	r0, r6
 8001188:	bd70      	pop	{r4, r5, r6, pc}
 800118a:	bf00      	nop

0800118c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 800118c:	f04f 30ff 	mov.w	r0, #4294967295
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop

08001194 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001194:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001198:	604b      	str	r3, [r1, #4]
  return 0;
}
 800119a:	2000      	movs	r0, #0
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop

080011a0 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80011a0:	2001      	movs	r0, #1
 80011a2:	4770      	bx	lr

080011a4 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80011a4:	2000      	movs	r0, #0
 80011a6:	4770      	bx	lr

080011a8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011a8:	490c      	ldr	r1, [pc, #48]	; (80011dc <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011aa:	4a0d      	ldr	r2, [pc, #52]	; (80011e0 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 80011ac:	680b      	ldr	r3, [r1, #0]
{
 80011ae:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011b0:	4c0c      	ldr	r4, [pc, #48]	; (80011e4 <_sbrk+0x3c>)
 80011b2:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80011b4:	b12b      	cbz	r3, 80011c2 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011b6:	4418      	add	r0, r3
 80011b8:	4290      	cmp	r0, r2
 80011ba:	d807      	bhi.n	80011cc <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80011bc:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 80011be:	4618      	mov	r0, r3
 80011c0:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <_sbrk+0x40>)
 80011c4:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80011c6:	4418      	add	r0, r3
 80011c8:	4290      	cmp	r0, r2
 80011ca:	d9f7      	bls.n	80011bc <_sbrk+0x14>
    errno = ENOMEM;
 80011cc:	f003 fcba 	bl	8004b44 <__errno>
 80011d0:	230c      	movs	r3, #12
 80011d2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80011d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011d8:	4618      	mov	r0, r3
 80011da:	bd10      	pop	{r4, pc}
 80011dc:	200003f0 	.word	0x200003f0
 80011e0:	20008000 	.word	0x20008000
 80011e4:	00000800 	.word	0x00000800
 80011e8:	20000c50 	.word	0x20000c50

080011ec <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011ec:	4a03      	ldr	r2, [pc, #12]	; (80011fc <SystemInit+0x10>)
 80011ee:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80011f2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011f6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011fa:	4770      	bx	lr
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <MX_TIM19_Init>:

TIM_HandleTypeDef htim19;

/* TIM19 init function */
void MX_TIM19_Init(void)
{
 8001200:	b500      	push	{lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM19_Init 1 */

  /* USER CODE END TIM19_Init 1 */
  htim19.Instance = TIM19;
 8001202:	481b      	ldr	r0, [pc, #108]	; (8001270 <MX_TIM19_Init+0x70>)
 8001204:	4a1b      	ldr	r2, [pc, #108]	; (8001274 <MX_TIM19_Init+0x74>)
 8001206:	6002      	str	r2, [r0, #0]
  htim19.Init.Prescaler = 2;
 8001208:	2202      	movs	r2, #2
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800120a:	2300      	movs	r3, #0
  htim19.Init.Prescaler = 2;
 800120c:	6042      	str	r2, [r0, #4]
  htim19.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim19.Init.Period = 49999;
 800120e:	f24c 324f 	movw	r2, #49999	; 0xc34f
{
 8001212:	b087      	sub	sp, #28
  htim19.Init.Period = 49999;
 8001214:	e9c0 3202 	strd	r3, r2, [r0, #8]
  htim19.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim19.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001218:	2280      	movs	r2, #128	; 0x80
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800121a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800121e:	e9cd 3304 	strd	r3, r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001222:	e9cd 3300 	strd	r3, r3, [sp]
  htim19.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001226:	6103      	str	r3, [r0, #16]
  htim19.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001228:	6182      	str	r2, [r0, #24]
  if (HAL_TIM_Base_Init(&htim19) != HAL_OK)
 800122a:	f001 fd07 	bl	8002c3c <HAL_TIM_Base_Init>
 800122e:	b998      	cbnz	r0, 8001258 <MX_TIM19_Init+0x58>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001230:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim19, &sClockSourceConfig) != HAL_OK)
 8001234:	480e      	ldr	r0, [pc, #56]	; (8001270 <MX_TIM19_Init+0x70>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001236:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim19, &sClockSourceConfig) != HAL_OK)
 8001238:	a902      	add	r1, sp, #8
 800123a:	f001 fdc7 	bl	8002dcc <HAL_TIM_ConfigClockSource>
 800123e:	b998      	cbnz	r0, 8001268 <MX_TIM19_Init+0x68>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001240:	2220      	movs	r2, #32
 8001242:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim19, &sMasterConfig) != HAL_OK)
 8001244:	480a      	ldr	r0, [pc, #40]	; (8001270 <MX_TIM19_Init+0x70>)
 8001246:	4669      	mov	r1, sp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001248:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim19, &sMasterConfig) != HAL_OK)
 800124c:	f001 ff20 	bl	8003090 <HAL_TIMEx_MasterConfigSynchronization>
 8001250:	b928      	cbnz	r0, 800125e <MX_TIM19_Init+0x5e>
  }
  /* USER CODE BEGIN TIM19_Init 2 */

  /* USER CODE END TIM19_Init 2 */

}
 8001252:	b007      	add	sp, #28
 8001254:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001258:	f7ff fe2e 	bl	8000eb8 <Error_Handler>
 800125c:	e7e8      	b.n	8001230 <MX_TIM19_Init+0x30>
    Error_Handler();
 800125e:	f7ff fe2b 	bl	8000eb8 <Error_Handler>
}
 8001262:	b007      	add	sp, #28
 8001264:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001268:	f7ff fe26 	bl	8000eb8 <Error_Handler>
 800126c:	e7e8      	b.n	8001240 <MX_TIM19_Init+0x40>
 800126e:	bf00      	nop
 8001270:	200003f4 	.word	0x200003f4
 8001274:	40015c00 	.word	0x40015c00

08001278 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM19)
 8001278:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <HAL_TIM_Base_MspInit+0x28>)
 800127a:	6802      	ldr	r2, [r0, #0]
 800127c:	429a      	cmp	r2, r3
 800127e:	d000      	beq.n	8001282 <HAL_TIM_Base_MspInit+0xa>
 8001280:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM19_MspInit 0 */

  /* USER CODE END TIM19_MspInit 0 */
    /* TIM19 clock enable */
    __HAL_RCC_TIM19_CLK_ENABLE();
 8001282:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
{
 8001286:	b082      	sub	sp, #8
    __HAL_RCC_TIM19_CLK_ENABLE();
 8001288:	699a      	ldr	r2, [r3, #24]
 800128a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800128e:	619a      	str	r2, [r3, #24]
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001296:	9301      	str	r3, [sp, #4]
 8001298:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM19_MspInit 1 */

  /* USER CODE END TIM19_MspInit 1 */
  }
}
 800129a:	b002      	add	sp, #8
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	40015c00 	.word	0x40015c00

080012a4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80012a4:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012a6:	480b      	ldr	r0, [pc, #44]	; (80012d4 <MX_USART1_UART_Init+0x30>)
 80012a8:	4c0b      	ldr	r4, [pc, #44]	; (80012d8 <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 2000000;
 80012aa:	490c      	ldr	r1, [pc, #48]	; (80012dc <MX_USART1_UART_Init+0x38>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012ac:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012ae:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 2000000;
 80012b0:	e9c0 4100 	strd	r4, r1, [r0]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012b4:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012b8:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012bc:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012c0:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012c4:	f002 fb70 	bl	80039a8 <HAL_UART_Init>
 80012c8:	b900      	cbnz	r0, 80012cc <MX_USART1_UART_Init+0x28>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012ca:	bd10      	pop	{r4, pc}
 80012cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80012d0:	f7ff bdf2 	b.w	8000eb8 <Error_Handler>
 80012d4:	20000484 	.word	0x20000484
 80012d8:	40013800 	.word	0x40013800
 80012dc:	001e8480 	.word	0x001e8480

080012e0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80012e0:	b510      	push	{r4, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012e2:	480c      	ldr	r0, [pc, #48]	; (8001314 <MX_USART2_UART_Init+0x34>)
 80012e4:	4c0c      	ldr	r4, [pc, #48]	; (8001318 <MX_USART2_UART_Init+0x38>)
  huart2.Init.BaudRate = 230400;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012e6:	2300      	movs	r3, #0
  huart2.Init.BaudRate = 230400;
 80012e8:	f44f 3161 	mov.w	r1, #230400	; 0x38400
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012ec:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 230400;
 80012ee:	e9c0 4100 	strd	r4, r1, [r0]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012f2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012f6:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012fa:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012fe:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001302:	f002 fb51 	bl	80039a8 <HAL_UART_Init>
 8001306:	b900      	cbnz	r0, 800130a <MX_USART2_UART_Init+0x2a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001308:	bd10      	pop	{r4, pc}
 800130a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800130e:	f7ff bdd3 	b.w	8000eb8 <Error_Handler>
 8001312:	bf00      	nop
 8001314:	2000050c 	.word	0x2000050c
 8001318:	40004400 	.word	0x40004400

0800131c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800131c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART1)
 800131e:	6803      	ldr	r3, [r0, #0]
 8001320:	4a3a      	ldr	r2, [pc, #232]	; (800140c <HAL_UART_MspInit+0xf0>)
{
 8001322:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001324:	2400      	movs	r4, #0
  if(uartHandle->Instance==USART1)
 8001326:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800132c:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8001330:	9408      	str	r4, [sp, #32]
  if(uartHandle->Instance==USART1)
 8001332:	d004      	beq.n	800133e <HAL_UART_MspInit+0x22>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8001334:	4a36      	ldr	r2, [pc, #216]	; (8001410 <HAL_UART_MspInit+0xf4>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d026      	beq.n	8001388 <HAL_UART_MspInit+0x6c>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800133a:	b00a      	add	sp, #40	; 0x28
 800133c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 800133e:	4b35      	ldr	r3, [pc, #212]	; (8001414 <HAL_UART_MspInit+0xf8>)
 8001340:	699a      	ldr	r2, [r3, #24]
 8001342:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001346:	619a      	str	r2, [r3, #24]
 8001348:	699a      	ldr	r2, [r3, #24]
 800134a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800134e:	9200      	str	r2, [sp, #0]
 8001350:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001352:	695a      	ldr	r2, [r3, #20]
 8001354:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001358:	615a      	str	r2, [r3, #20]
 800135a:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800135c:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 8001360:	2502      	movs	r5, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001366:	e9cd 4504 	strd	r4, r5, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800136e:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001370:	2401      	movs	r4, #1
 8001372:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001374:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001378:	e9cd 4506 	strd	r4, r5, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137c:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800137e:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001380:	f000 fc4a 	bl	8001c18 <HAL_GPIO_Init>
}
 8001384:	b00a      	add	sp, #40	; 0x28
 8001386:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8001388:	4b22      	ldr	r3, [pc, #136]	; (8001414 <HAL_UART_MspInit+0xf8>)
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800138a:	4e23      	ldr	r6, [pc, #140]	; (8001418 <HAL_UART_MspInit+0xfc>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800138c:	69da      	ldr	r2, [r3, #28]
 800138e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001392:	61da      	str	r2, [r3, #28]
 8001394:	69da      	ldr	r2, [r3, #28]
 8001396:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800139a:	9202      	str	r2, [sp, #8]
 800139c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139e:	695a      	ldr	r2, [r3, #20]
 80013a0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80013a4:	615a      	str	r2, [r3, #20]
 80013a6:	695b      	ldr	r3, [r3, #20]
 80013a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013ae:	220c      	movs	r2, #12
 80013b0:	2302      	movs	r3, #2
 80013b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80013b6:	2201      	movs	r2, #1
 80013b8:	2303      	movs	r3, #3
 80013ba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80013be:	4605      	mov	r5, r0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013c0:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c6:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013c8:	9308      	str	r3, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ca:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013cc:	f000 fc24 	bl	8001c18 <HAL_GPIO_Init>
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013d0:	4a12      	ldr	r2, [pc, #72]	; (800141c <HAL_UART_MspInit+0x100>)
 80013d2:	2310      	movs	r3, #16
 80013d4:	e9c6 2300 	strd	r2, r3, [r6]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80013d8:	4630      	mov	r0, r6
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013da:	2380      	movs	r3, #128	; 0x80
 80013dc:	e9c6 4302 	strd	r4, r3, [r6, #8]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013e0:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013e4:	e9c6 4406 	strd	r4, r4, [r6, #24]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80013e8:	f000 fb00 	bl	80019ec <HAL_DMA_Init>
 80013ec:	b958      	cbnz	r0, 8001406 <HAL_UART_MspInit+0xea>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	4611      	mov	r1, r2
 80013f2:	2026      	movs	r0, #38	; 0x26
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80013f4:	672e      	str	r6, [r5, #112]	; 0x70
 80013f6:	6275      	str	r5, [r6, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013f8:	f000 faac 	bl	8001954 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013fc:	2026      	movs	r0, #38	; 0x26
 80013fe:	f000 fae7 	bl	80019d0 <HAL_NVIC_EnableIRQ>
}
 8001402:	b00a      	add	sp, #40	; 0x28
 8001404:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8001406:	f7ff fd57 	bl	8000eb8 <Error_Handler>
 800140a:	e7f0      	b.n	80013ee <HAL_UART_MspInit+0xd2>
 800140c:	40013800 	.word	0x40013800
 8001410:	40004400 	.word	0x40004400
 8001414:	40021000 	.word	0x40021000
 8001418:	20000440 	.word	0x20000440
 800141c:	40020080 	.word	0x40020080

08001420 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001420:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001458 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001424:	f7ff fee2 	bl	80011ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001428:	480c      	ldr	r0, [pc, #48]	; (800145c <LoopForever+0x6>)
  ldr r1, =_edata
 800142a:	490d      	ldr	r1, [pc, #52]	; (8001460 <LoopForever+0xa>)
  ldr r2, =_sidata
 800142c:	4a0d      	ldr	r2, [pc, #52]	; (8001464 <LoopForever+0xe>)
  movs r3, #0
 800142e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001430:	e002      	b.n	8001438 <LoopCopyDataInit>

08001432 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001432:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001434:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001436:	3304      	adds	r3, #4

08001438 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001438:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800143a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800143c:	d3f9      	bcc.n	8001432 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800143e:	4a0a      	ldr	r2, [pc, #40]	; (8001468 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001440:	4c0a      	ldr	r4, [pc, #40]	; (800146c <LoopForever+0x16>)
  movs r3, #0
 8001442:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001444:	e001      	b.n	800144a <LoopFillZerobss>

08001446 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001446:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001448:	3204      	adds	r2, #4

0800144a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800144a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800144c:	d3fb      	bcc.n	8001446 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800144e:	f003 fb7f 	bl	8004b50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001452:	f7ff fd11 	bl	8000e78 <main>

08001456 <LoopForever>:

LoopForever:
    b LoopForever
 8001456:	e7fe      	b.n	8001456 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001458:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800145c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001460:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 8001464:	080070bc 	.word	0x080070bc
  ldr r2, =_sbss
 8001468:	200002cc 	.word	0x200002cc
  ldr r4, =_ebss
 800146c:	20000c4c 	.word	0x20000c4c

08001470 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001470:	e7fe      	b.n	8001470 <ADC1_IRQHandler>
	...

08001474 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001474:	4a07      	ldr	r2, [pc, #28]	; (8001494 <HAL_Init+0x20>)
{
 8001476:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001478:	6813      	ldr	r3, [r2, #0]
 800147a:	f043 0310 	orr.w	r3, r3, #16
 800147e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001480:	2003      	movs	r0, #3
 8001482:	f000 fa55 	bl	8001930 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001486:	200f      	movs	r0, #15
 8001488:	f7ff fdc4 	bl	8001014 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800148c:	f7ff fdaa 	bl	8000fe4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001490:	2000      	movs	r0, #0
 8001492:	bd08      	pop	{r3, pc}
 8001494:	40022000 	.word	0x40022000

08001498 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001498:	4a03      	ldr	r2, [pc, #12]	; (80014a8 <HAL_IncTick+0x10>)
 800149a:	4b04      	ldr	r3, [pc, #16]	; (80014ac <HAL_IncTick+0x14>)
 800149c:	6811      	ldr	r1, [r2, #0]
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	440b      	add	r3, r1
 80014a2:	6013      	str	r3, [r2, #0]
}
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	20000594 	.word	0x20000594
 80014ac:	20000004 	.word	0x20000004

080014b0 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80014b0:	4b01      	ldr	r3, [pc, #4]	; (80014b8 <HAL_GetTick+0x8>)
 80014b2:	6818      	ldr	r0, [r3, #0]
}
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	20000594 	.word	0x20000594

080014bc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014bc:	b538      	push	{r3, r4, r5, lr}
 80014be:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80014c0:	f7ff fff6 	bl	80014b0 <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014c4:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80014c6:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80014c8:	d002      	beq.n	80014d0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ca:	4b04      	ldr	r3, [pc, #16]	; (80014dc <HAL_Delay+0x20>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	441c      	add	r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80014d0:	f7ff ffee 	bl	80014b0 <HAL_GetTick>
 80014d4:	1b43      	subs	r3, r0, r5
 80014d6:	42a3      	cmp	r3, r4
 80014d8:	d3fa      	bcc.n	80014d0 <HAL_Delay+0x14>
  {
  }
}
 80014da:	bd38      	pop	{r3, r4, r5, pc}
 80014dc:	20000004 	.word	0x20000004

080014e0 <HAL_ADC_ConvHalfCpltCallback>:
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop

080014e4 <HAL_ADC_ErrorCallback>:
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop

080014e8 <ADC_DMAError>:
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80014e8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80014ea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80014ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014f0:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80014f2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80014f4:	f043 0304 	orr.w	r3, r3, #4
 80014f8:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80014fa:	f7ff bff3 	b.w	80014e4 <HAL_ADC_ErrorCallback>
 80014fe:	bf00      	nop

08001500 <ADC_DMAHalfConvCplt>:
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001500:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001502:	f7ff bfed 	b.w	80014e0 <HAL_ADC_ConvHalfCpltCallback>
 8001506:	bf00      	nop

08001508 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001508:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800150a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800150c:	f012 0f50 	tst.w	r2, #80	; 0x50
 8001510:	d10d      	bne.n	800152e <ADC_DMAConvCplt+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001512:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001514:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001516:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800151a:	629a      	str	r2, [r3, #40]	; 0x28
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800151c:	688a      	ldr	r2, [r1, #8]
 800151e:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001522:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001526:	d005      	beq.n	8001534 <ADC_DMAConvCplt+0x2c>
      HAL_ADC_ConvCpltCallback(hadc);
 8001528:	4618      	mov	r0, r3
 800152a:	f002 bc5d 	b.w	8003de8 <HAL_ADC_ConvCpltCallback>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800152e:	6a1b      	ldr	r3, [r3, #32]
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4718      	bx	r3
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001534:	7b1a      	ldrb	r2, [r3, #12]
 8001536:	2a00      	cmp	r2, #0
 8001538:	d1f6      	bne.n	8001528 <ADC_DMAConvCplt+0x20>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800153a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800153c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001540:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001542:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001544:	04d2      	lsls	r2, r2, #19
 8001546:	d4ef      	bmi.n	8001528 <ADC_DMAConvCplt+0x20>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001548:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800154a:	f042 0201 	orr.w	r2, r2, #1
 800154e:	629a      	str	r2, [r3, #40]	; 0x28
 8001550:	e7ea      	b.n	8001528 <ADC_DMAConvCplt+0x20>
 8001552:	bf00      	nop

08001554 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001554:	b530      	push	{r4, r5, lr}
 8001556:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8001558:	2300      	movs	r3, #0
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800155a:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t wait_loop_index = 0U;
 800155c:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800155e:	6893      	ldr	r3, [r2, #8]
 8001560:	07d9      	lsls	r1, r3, #31
 8001562:	d427      	bmi.n	80015b4 <ADC_Enable+0x60>
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001564:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <ADC_Enable+0x80>)
    __HAL_ADC_ENABLE(hadc);
 8001566:	6891      	ldr	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4604      	mov	r4, r0
 800156c:	481a      	ldr	r0, [pc, #104]	; (80015d8 <ADC_Enable+0x84>)
 800156e:	fba0 0303 	umull	r0, r3, r0, r3
 8001572:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 8001574:	f041 0101 	orr.w	r1, r1, #1
 8001578:	6091      	str	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800157a:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800157c:	9b01      	ldr	r3, [sp, #4]
 800157e:	b12b      	cbz	r3, 800158c <ADC_Enable+0x38>
    {
      wait_loop_index--;
 8001580:	9b01      	ldr	r3, [sp, #4]
 8001582:	3b01      	subs	r3, #1
 8001584:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001586:	9b01      	ldr	r3, [sp, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1f9      	bne.n	8001580 <ADC_Enable+0x2c>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800158c:	f7ff ff90 	bl	80014b0 <HAL_GetTick>
    
    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001590:	6823      	ldr	r3, [r4, #0]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	07da      	lsls	r2, r3, #31
    tickstart = HAL_GetTick();
 8001596:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001598:	d40c      	bmi.n	80015b4 <ADC_Enable+0x60>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800159a:	f7ff ff89 	bl	80014b0 <HAL_GetTick>
 800159e:	1b43      	subs	r3, r0, r5
 80015a0:	2b02      	cmp	r3, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80015a2:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80015a4:	d903      	bls.n	80015ae <ADC_Enable+0x5a>
        if(ADC_IS_ENABLE(hadc) == RESET)
 80015a6:	689a      	ldr	r2, [r3, #8]
 80015a8:	f012 0201 	ands.w	r2, r2, #1
 80015ac:	d005      	beq.n	80015ba <ADC_Enable+0x66>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	07db      	lsls	r3, r3, #31
 80015b2:	d5f2      	bpl.n	800159a <ADC_Enable+0x46>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80015b4:	2000      	movs	r0, #0
}
 80015b6:	b003      	add	sp, #12
 80015b8:	bd30      	pop	{r4, r5, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 80015bc:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015c0:	f043 0310 	orr.w	r3, r3, #16
 80015c4:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 80015c8:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015ca:	4303      	orrs	r3, r0
 80015cc:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 80015ce:	b003      	add	sp, #12
 80015d0:	bd30      	pop	{r4, r5, pc}
 80015d2:	bf00      	nop
 80015d4:	20000000 	.word	0x20000000
 80015d8:	431bde83 	.word	0x431bde83

080015dc <HAL_ADC_Init>:
  if(hadc == NULL)
 80015dc:	2800      	cmp	r0, #0
 80015de:	f000 8087 	beq.w	80016f0 <HAL_ADC_Init+0x114>
{
 80015e2:	b538      	push	{r3, r4, r5, lr}
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015e4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80015e6:	4604      	mov	r4, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d069      	beq.n	80016c0 <HAL_ADC_Init+0xe4>
static HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80015ec:	6823      	ldr	r3, [r4, #0]
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	07d5      	lsls	r5, r2, #31
 80015f2:	d442      	bmi.n	800167a <HAL_ADC_Init+0x9e>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015f4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80015f6:	06d2      	lsls	r2, r2, #27
 80015f8:	d45c      	bmi.n	80016b4 <HAL_ADC_Init+0xd8>
    ADC_STATE_CLR_SET(hadc->State,
 80015fa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 80015fc:	6861      	ldr	r1, [r4, #4]
 80015fe:	69e0      	ldr	r0, [r4, #28]
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) );
 8001600:	7b25      	ldrb	r5, [r4, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8001602:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8001606:	f022 0202 	bic.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 800160a:	4301      	orrs	r1, r0
    ADC_STATE_CLR_SET(hadc->State,
 800160c:	f042 0202 	orr.w	r2, r2, #2
 8001610:	62a2      	str	r2, [r4, #40]	; 0x28
                hadc->Init.ExternalTrigConv                      |
 8001612:	ea41 0245 	orr.w	r2, r1, r5, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001616:	68a1      	ldr	r1, [r4, #8]
 8001618:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800161c:	d056      	beq.n	80016cc <HAL_ADC_Init+0xf0>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800161e:	f894 c014 	ldrb.w	ip, [r4, #20]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001622:	f1a1 0001 	sub.w	r0, r1, #1
 8001626:	fab0 f080 	clz	r0, r0
 800162a:	0940      	lsrs	r0, r0, #5
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800162c:	f1bc 0f01 	cmp.w	ip, #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001630:	ea4f 2000 	mov.w	r0, r0, lsl #8
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001634:	d068      	beq.n	8001708 <HAL_ADC_Init+0x12c>
      MODIFY_REG(hadc->Instance->CR1,
 8001636:	685d      	ldr	r5, [r3, #4]
 8001638:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 800163c:	4328      	orrs	r0, r5
 800163e:	6058      	str	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001640:	689d      	ldr	r5, [r3, #8]
 8001642:	4840      	ldr	r0, [pc, #256]	; (8001744 <HAL_ADC_Init+0x168>)
 8001644:	4028      	ands	r0, r5
 8001646:	4310      	orrs	r0, r2
 8001648:	6098      	str	r0, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800164a:	2901      	cmp	r1, #1
 800164c:	d04c      	beq.n	80016e8 <HAL_ADC_Init+0x10c>
  uint32_t tmp_sqr1 = 0U;
 800164e:	2000      	movs	r0, #0
    MODIFY_REG(hadc->Instance->SQR1,
 8001650:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001652:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 8001656:	4301      	orrs	r1, r0
 8001658:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800165a:	6899      	ldr	r1, [r3, #8]
 800165c:	4b3a      	ldr	r3, [pc, #232]	; (8001748 <HAL_ADC_Init+0x16c>)
 800165e:	400b      	ands	r3, r1
 8001660:	429a      	cmp	r2, r3
 8001662:	d047      	beq.n	80016f4 <HAL_ADC_Init+0x118>
      ADC_STATE_CLR_SET(hadc->State,
 8001664:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001666:	f023 0312 	bic.w	r3, r3, #18
 800166a:	f043 0310 	orr.w	r3, r3, #16
 800166e:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001670:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      tmp_hal_status = HAL_ERROR;
 8001672:	2001      	movs	r0, #1
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001674:	4303      	orrs	r3, r0
 8001676:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8001678:	bd38      	pop	{r3, r4, r5, pc}
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800167a:	689a      	ldr	r2, [r3, #8]
 800167c:	f022 0201 	bic.w	r2, r2, #1
 8001680:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001682:	f7ff ff15 	bl	80014b0 <HAL_GetTick>
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001686:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8001688:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800168a:	689a      	ldr	r2, [r3, #8]
 800168c:	07d0      	lsls	r0, r2, #31
 800168e:	d5b1      	bpl.n	80015f4 <HAL_ADC_Init+0x18>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001690:	f7ff ff0e 	bl	80014b0 <HAL_GetTick>
 8001694:	1b40      	subs	r0, r0, r5
 8001696:	2802      	cmp	r0, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001698:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800169a:	d9f6      	bls.n	800168a <HAL_ADC_Init+0xae>
        if(ADC_IS_ENABLE(hadc) != RESET)
 800169c:	689a      	ldr	r2, [r3, #8]
 800169e:	07d1      	lsls	r1, r2, #31
 80016a0:	d5f3      	bpl.n	800168a <HAL_ADC_Init+0xae>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80016a4:	f043 0310 	orr.w	r3, r3, #16
 80016a8:	62a3      	str	r3, [r4, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80016b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80016b6:	f043 0310 	orr.w	r3, r3, #16
    tmp_hal_status = HAL_ERROR;
 80016ba:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016bc:	62a3      	str	r3, [r4, #40]	; 0x28
}
 80016be:	bd38      	pop	{r3, r4, r5, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 80016c0:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80016c2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80016c6:	f7ff faf3 	bl	8000cb0 <HAL_ADC_MspInit>
 80016ca:	e78f      	b.n	80015ec <HAL_ADC_Init+0x10>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016cc:	7d20      	ldrb	r0, [r4, #20]
 80016ce:	2801      	cmp	r0, #1
 80016d0:	d019      	beq.n	8001706 <HAL_ADC_Init+0x12a>
      MODIFY_REG(hadc->Instance->CR1,
 80016d2:	6858      	ldr	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80016d4:	491b      	ldr	r1, [pc, #108]	; (8001744 <HAL_ADC_Init+0x168>)
      MODIFY_REG(hadc->Instance->CR1,
 80016d6:	f420 4069 	bic.w	r0, r0, #59648	; 0xe900
 80016da:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 80016de:	6058      	str	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80016e0:	6898      	ldr	r0, [r3, #8]
 80016e2:	4001      	ands	r1, r0
 80016e4:	4311      	orrs	r1, r2
 80016e6:	6099      	str	r1, [r3, #8]
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80016e8:	6920      	ldr	r0, [r4, #16]
 80016ea:	3801      	subs	r0, #1
 80016ec:	0500      	lsls	r0, r0, #20
 80016ee:	e7af      	b.n	8001650 <HAL_ADC_Init+0x74>
    return HAL_ERROR;
 80016f0:	2001      	movs	r0, #1
}
 80016f2:	4770      	bx	lr
      ADC_CLEAR_ERRORCODE(hadc);
 80016f4:	2000      	movs	r0, #0
 80016f6:	62e0      	str	r0, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80016f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80016fa:	f023 0303 	bic.w	r3, r3, #3
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8001704:	bd38      	pop	{r3, r4, r5, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001706:	4608      	mov	r0, r1
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001708:	b1ad      	cbz	r5, 8001736 <HAL_ADC_Init+0x15a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800170a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800170c:	f045 0520 	orr.w	r5, r5, #32
 8001710:	62a5      	str	r5, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001712:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8001714:	f045 0501 	orr.w	r5, r5, #1
 8001718:	62e5      	str	r5, [r4, #44]	; 0x2c
      MODIFY_REG(hadc->Instance->CR1,
 800171a:	685d      	ldr	r5, [r3, #4]
 800171c:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8001720:	4328      	orrs	r0, r5
 8001722:	6058      	str	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001724:	689d      	ldr	r5, [r3, #8]
 8001726:	4807      	ldr	r0, [pc, #28]	; (8001744 <HAL_ADC_Init+0x168>)
 8001728:	4028      	ands	r0, r5
 800172a:	4310      	orrs	r0, r2
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800172c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR2,
 8001730:	6098      	str	r0, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001732:	d18a      	bne.n	800164a <HAL_ADC_Init+0x6e>
 8001734:	e7d8      	b.n	80016e8 <HAL_ADC_Init+0x10c>
                  ADC_CR1_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion) );
 8001736:	69a5      	ldr	r5, [r4, #24]
 8001738:	3d01      	subs	r5, #1
      tmp_cr1 |= (ADC_CR1_DISCEN                                           |
 800173a:	ea40 3045 	orr.w	r0, r0, r5, lsl #13
 800173e:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8001742:	e7ea      	b.n	800171a <HAL_ADC_Init+0x13e>
 8001744:	ffe1f7fd 	.word	0xffe1f7fd
 8001748:	ff1f0efe 	.word	0xff1f0efe

0800174c <HAL_ADC_Start_DMA>:
{
 800174c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hadc);
 8001750:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
 8001754:	2d01      	cmp	r5, #1
 8001756:	d04d      	beq.n	80017f4 <HAL_ADC_Start_DMA+0xa8>
 8001758:	2301      	movs	r3, #1
 800175a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 800175e:	4604      	mov	r4, r0
 8001760:	4688      	mov	r8, r1
 8001762:	4617      	mov	r7, r2
 8001764:	f7ff fef6 	bl	8001554 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8001768:	4605      	mov	r5, r0
 800176a:	2800      	cmp	r0, #0
 800176c:	d13f      	bne.n	80017ee <HAL_ADC_Start_DMA+0xa2>
    ADC_STATE_CLR_SET(hadc->State,
 800176e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001770:	6826      	ldr	r6, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8001772:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001776:	f020 0001 	bic.w	r0, r0, #1
 800177a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 800177e:	62a0      	str	r0, [r4, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001780:	6873      	ldr	r3, [r6, #4]
 8001782:	055b      	lsls	r3, r3, #21
 8001784:	d505      	bpl.n	8001792 <HAL_ADC_Start_DMA+0x46>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001786:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001788:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800178c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001790:	62a3      	str	r3, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001792:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001794:	6a20      	ldr	r0, [r4, #32]
 8001796:	f8df c06c 	ldr.w	ip, [pc, #108]	; 8001804 <HAL_ADC_Start_DMA+0xb8>
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800179a:	4918      	ldr	r1, [pc, #96]	; (80017fc <HAL_ADC_Start_DMA+0xb0>)
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800179c:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80017a0:	bf1c      	itt	ne
 80017a2:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
 80017a4:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80017a8:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 80017aa:	f04f 0e00 	mov.w	lr, #0
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80017ae:	463b      	mov	r3, r7
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80017b0:	4f13      	ldr	r7, [pc, #76]	; (8001800 <HAL_ADC_Start_DMA+0xb4>)
    __HAL_UNLOCK(hadc);
 80017b2:	f884 e024 	strb.w	lr, [r4, #36]	; 0x24
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80017b6:	6301      	str	r1, [r0, #48]	; 0x30
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80017b8:	f06f 0102 	mvn.w	r1, #2
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80017bc:	e9c0 c70a 	strd	ip, r7, [r0, #40]	; 0x28
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80017c0:	6031      	str	r1, [r6, #0]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80017c2:	68b1      	ldr	r1, [r6, #8]
 80017c4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80017c8:	4642      	mov	r2, r8
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80017ca:	60b1      	str	r1, [r6, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80017cc:	f106 014c 	add.w	r1, r6, #76	; 0x4c
 80017d0:	f000 f950 	bl	8001a74 <HAL_DMA_Start_IT>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80017d4:	6822      	ldr	r2, [r4, #0]
 80017d6:	6893      	ldr	r3, [r2, #8]
 80017d8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80017dc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80017e0:	6893      	ldr	r3, [r2, #8]
 80017e2:	bf0c      	ite	eq
 80017e4:	f443 03a0 	orreq.w	r3, r3, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80017e8:	f443 1380 	orrne.w	r3, r3, #1048576	; 0x100000
 80017ec:	6093      	str	r3, [r2, #8]
}
 80017ee:	4628      	mov	r0, r5
 80017f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hadc);
 80017f4:	2502      	movs	r5, #2
}
 80017f6:	4628      	mov	r0, r5
 80017f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017fc:	080014e9 	.word	0x080014e9
 8001800:	08001501 	.word	0x08001501
 8001804:	08001509 	.word	0x08001509

08001808 <HAL_ADC_ConfigChannel>:
{ 
 8001808:	b430      	push	{r4, r5}
  __HAL_LOCK(hadc);
 800180a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{ 
 800180e:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8001810:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8001812:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0U;
 8001814:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001816:	f000 8081 	beq.w	800191c <HAL_ADC_ConfigChannel+0x114>
 800181a:	2301      	movs	r3, #1
 800181c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8001820:	684b      	ldr	r3, [r1, #4]
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001822:	6804      	ldr	r4, [r0, #0]
  if (sConfig->Rank < 7U)
 8001824:	2b06      	cmp	r3, #6
 8001826:	d925      	bls.n	8001874 <HAL_ADC_ConfigChannel+0x6c>
  else if (sConfig->Rank < 13U)
 8001828:	2b0c      	cmp	r3, #12
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800182a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  else if (sConfig->Rank < 13U)
 800182e:	d85f      	bhi.n	80018f0 <HAL_ADC_ConfigChannel+0xe8>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001830:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8001832:	680a      	ldr	r2, [r1, #0]
 8001834:	3b23      	subs	r3, #35	; 0x23
 8001836:	f04f 0c1f 	mov.w	ip, #31
 800183a:	fa0c fc03 	lsl.w	ip, ip, r3
 800183e:	ea25 050c 	bic.w	r5, r5, ip
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	432b      	orrs	r3, r5
 8001848:	6323      	str	r3, [r4, #48]	; 0x30
  if (sConfig->Channel > ADC_CHANNEL_10)
 800184a:	2a0a      	cmp	r2, #10
 800184c:	d824      	bhi.n	8001898 <HAL_ADC_ConfigChannel+0x90>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800184e:	6889      	ldr	r1, [r1, #8]
 8001850:	6923      	ldr	r3, [r4, #16]
 8001852:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001856:	2507      	movs	r5, #7
 8001858:	4091      	lsls	r1, r2
 800185a:	fa05 f202 	lsl.w	r2, r5, r2
 800185e:	ea23 0302 	bic.w	r3, r3, r2
 8001862:	430b      	orrs	r3, r1
 8001864:	6123      	str	r3, [r4, #16]
  __HAL_UNLOCK(hadc);
 8001866:	2300      	movs	r3, #0
 8001868:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  return tmp_hal_status;
 800186c:	4618      	mov	r0, r3
}
 800186e:	b002      	add	sp, #8
 8001870:	bc30      	pop	{r4, r5}
 8001872:	4770      	bx	lr
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001874:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001878:	680a      	ldr	r2, [r1, #0]
 800187a:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800187c:	3b05      	subs	r3, #5
 800187e:	f04f 0c1f 	mov.w	ip, #31
 8001882:	fa0c fc03 	lsl.w	ip, ip, r3
 8001886:	ea25 0c0c 	bic.w	ip, r5, ip
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	ea4c 0303 	orr.w	r3, ip, r3
  if (sConfig->Channel > ADC_CHANNEL_10)
 8001892:	2a0a      	cmp	r2, #10
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001894:	6363      	str	r3, [r4, #52]	; 0x34
  if (sConfig->Channel > ADC_CHANNEL_10)
 8001896:	d9da      	bls.n	800184e <HAL_ADC_ConfigChannel+0x46>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001898:	688d      	ldr	r5, [r1, #8]
 800189a:	68e3      	ldr	r3, [r4, #12]
 800189c:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80018a0:	391e      	subs	r1, #30
 80018a2:	f04f 0c07 	mov.w	ip, #7
 80018a6:	408d      	lsls	r5, r1
 80018a8:	fa0c f101 	lsl.w	r1, ip, r1
 80018ac:	ea23 0301 	bic.w	r3, r3, r1
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80018b0:	f1a2 0110 	sub.w	r1, r2, #16
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80018b4:	432b      	orrs	r3, r5
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80018b6:	2901      	cmp	r1, #1
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80018b8:	60e3      	str	r3, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80018ba:	d827      	bhi.n	800190c <HAL_ADC_ConfigChannel+0x104>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80018bc:	68a3      	ldr	r3, [r4, #8]
    if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80018be:	2a10      	cmp	r2, #16
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80018c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018c4:	60a3      	str	r3, [r4, #8]
    if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80018c6:	d1ce      	bne.n	8001866 <HAL_ADC_ConfigChannel+0x5e>
      wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018c8:	4b16      	ldr	r3, [pc, #88]	; (8001924 <HAL_ADC_ConfigChannel+0x11c>)
 80018ca:	4a17      	ldr	r2, [pc, #92]	; (8001928 <HAL_ADC_ConfigChannel+0x120>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	fba2 2303 	umull	r2, r3, r2, r3
 80018d2:	0c9b      	lsrs	r3, r3, #18
 80018d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0U)
 80018dc:	9b01      	ldr	r3, [sp, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d0c1      	beq.n	8001866 <HAL_ADC_ConfigChannel+0x5e>
        wait_loop_index--;
 80018e2:	9b01      	ldr	r3, [sp, #4]
 80018e4:	3b01      	subs	r3, #1
 80018e6:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0U)
 80018e8:	9b01      	ldr	r3, [sp, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1f9      	bne.n	80018e2 <HAL_ADC_ConfigChannel+0xda>
 80018ee:	e7ba      	b.n	8001866 <HAL_ADC_ConfigChannel+0x5e>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80018f0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80018f2:	680a      	ldr	r2, [r1, #0]
 80018f4:	3b41      	subs	r3, #65	; 0x41
 80018f6:	f04f 0c1f 	mov.w	ip, #31
 80018fa:	fa0c fc03 	lsl.w	ip, ip, r3
 80018fe:	ea25 050c 	bic.w	r5, r5, ip
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	432b      	orrs	r3, r5
 8001908:	62e3      	str	r3, [r4, #44]	; 0x2c
 800190a:	e79e      	b.n	800184a <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 800190c:	2a12      	cmp	r2, #18
 800190e:	d1aa      	bne.n	8001866 <HAL_ADC_ConfigChannel+0x5e>
    SET_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_VBAT);
 8001910:	4a06      	ldr	r2, [pc, #24]	; (800192c <HAL_ADC_ConfigChannel+0x124>)
 8001912:	6813      	ldr	r3, [r2, #0]
 8001914:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001918:	6013      	str	r3, [r2, #0]
 800191a:	e7a4      	b.n	8001866 <HAL_ADC_ConfigChannel+0x5e>
  __HAL_LOCK(hadc);
 800191c:	2002      	movs	r0, #2
}
 800191e:	b002      	add	sp, #8
 8001920:	bc30      	pop	{r4, r5}
 8001922:	4770      	bx	lr
 8001924:	20000000 	.word	0x20000000
 8001928:	431bde83 	.word	0x431bde83
 800192c:	40010000 	.word	0x40010000

08001930 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001930:	4907      	ldr	r1, [pc, #28]	; (8001950 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001932:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001934:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001936:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800193a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800193e:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001940:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001942:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001946:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800194a:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001954:	4b1c      	ldr	r3, [pc, #112]	; (80019c8 <HAL_NVIC_SetPriority+0x74>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800195c:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800195e:	f1c3 0e07 	rsb	lr, r3, #7
 8001962:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001966:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800196a:	bf28      	it	cs
 800196c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001970:	f1bc 0f06 	cmp.w	ip, #6
 8001974:	d91b      	bls.n	80019ae <HAL_NVIC_SetPriority+0x5a>
 8001976:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001978:	f04f 3cff 	mov.w	ip, #4294967295
 800197c:	fa0c fc03 	lsl.w	ip, ip, r3
 8001980:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001984:	f04f 3cff 	mov.w	ip, #4294967295
 8001988:	fa0c fc0e 	lsl.w	ip, ip, lr
 800198c:	ea21 010c 	bic.w	r1, r1, ip
 8001990:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001992:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001994:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001998:	db0c      	blt.n	80019b4 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800199e:	0109      	lsls	r1, r1, #4
 80019a0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80019a4:	b2c9      	uxtb	r1, r1
 80019a6:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80019aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80019ae:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019b0:	4613      	mov	r3, r2
 80019b2:	e7e7      	b.n	8001984 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b4:	4b05      	ldr	r3, [pc, #20]	; (80019cc <HAL_NVIC_SetPriority+0x78>)
 80019b6:	f000 000f 	and.w	r0, r0, #15
 80019ba:	0109      	lsls	r1, r1, #4
 80019bc:	4403      	add	r3, r0
 80019be:	b2c9      	uxtb	r1, r1
 80019c0:	7619      	strb	r1, [r3, #24]
 80019c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80019c6:	bf00      	nop
 80019c8:	e000ed00 	.word	0xe000ed00
 80019cc:	e000ecfc 	.word	0xe000ecfc

080019d0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80019d0:	2800      	cmp	r0, #0
 80019d2:	db07      	blt.n	80019e4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019d4:	0941      	lsrs	r1, r0, #5
 80019d6:	4a04      	ldr	r2, [pc, #16]	; (80019e8 <HAL_NVIC_EnableIRQ+0x18>)
 80019d8:	f000 001f 	and.w	r0, r0, #31
 80019dc:	2301      	movs	r3, #1
 80019de:	4083      	lsls	r3, r0
 80019e0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	e000e100 	.word	0xe000e100

080019ec <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80019ec:	2800      	cmp	r0, #0
 80019ee:	d035      	beq.n	8001a5c <HAL_DMA_Init+0x70>
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80019f0:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
{ 
 80019f4:	b410      	push	{r4}
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019f6:	68c4      	ldr	r4, [r0, #12]
  tmp = hdma->Instance->CCR;
 80019f8:	6801      	ldr	r1, [r0, #0]
  tmp |=  hdma->Init.Direction        |
 80019fa:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019fc:	6902      	ldr	r2, [r0, #16]
 80019fe:	4323      	orrs	r3, r4
 8001a00:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a02:	e9d0 4205 	ldrd	r4, r2, [r0, #20]
 8001a06:	4323      	orrs	r3, r4
 8001a08:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a0a:	69c2      	ldr	r2, [r0, #28]
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001a0c:	4c14      	ldr	r4, [pc, #80]	; (8001a60 <HAL_DMA_Init+0x74>)
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a0e:	4313      	orrs	r3, r2
  tmp = hdma->Instance->CCR;
 8001a10:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a12:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8001a16:	f022 0230 	bic.w	r2, r2, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8001a1a:	4313      	orrs	r3, r2
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001a1c:	42a1      	cmp	r1, r4
  hdma->Instance->CCR = tmp;  
 8001a1e:	600b      	str	r3, [r1, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001a20:	d912      	bls.n	8001a48 <HAL_DMA_Init+0x5c>
    hdma->DmaBaseAddress = DMA1;
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001a22:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <HAL_DMA_Init+0x78>)
 8001a24:	4a10      	ldr	r2, [pc, #64]	; (8001a68 <HAL_DMA_Init+0x7c>)
    hdma->DmaBaseAddress = DMA2;
 8001a26:	4c11      	ldr	r4, [pc, #68]	; (8001a6c <HAL_DMA_Init+0x80>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001a28:	440b      	add	r3, r1
 8001a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2e:	091b      	lsrs	r3, r3, #4
 8001a30:	009b      	lsls	r3, r3, #2
  hdma->Lock = HAL_UNLOCKED;
 8001a32:	f44f 7180 	mov.w	r1, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a36:	2200      	movs	r2, #0
  hdma->Lock = HAL_UNLOCKED;
 8001a38:	8401      	strh	r1, [r0, #32]
 8001a3a:	e9c0 430f 	strd	r4, r3, [r0, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a3e:	6382      	str	r2, [r0, #56]	; 0x38
}  
 8001a40:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 8001a44:	4610      	mov	r0, r2
}  
 8001a46:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001a48:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <HAL_DMA_Init+0x84>)
 8001a4a:	4a07      	ldr	r2, [pc, #28]	; (8001a68 <HAL_DMA_Init+0x7c>)
 8001a4c:	440b      	add	r3, r1
 8001a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a52:	091b      	lsrs	r3, r3, #4
    hdma->DmaBaseAddress = DMA1;
 8001a54:	f2a4 4407 	subw	r4, r4, #1031	; 0x407
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001a58:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 8001a5a:	e7ea      	b.n	8001a32 <HAL_DMA_Init+0x46>
    return HAL_ERROR;
 8001a5c:	2001      	movs	r0, #1
}  
 8001a5e:	4770      	bx	lr
 8001a60:	40020407 	.word	0x40020407
 8001a64:	bffdfbf8 	.word	0xbffdfbf8
 8001a68:	cccccccd 	.word	0xcccccccd
 8001a6c:	40020400 	.word	0x40020400
 8001a70:	bffdfff8 	.word	0xbffdfff8

08001a74 <HAL_DMA_Start_IT>:
{
 8001a74:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 8001a76:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001a7a:	2c01      	cmp	r4, #1
 8001a7c:	d039      	beq.n	8001af2 <HAL_DMA_Start_IT+0x7e>
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a7e:	f890 c021 	ldrb.w	ip, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8001a82:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a84:	45a4      	cmp	ip, r4
  __HAL_LOCK(hdma);
 8001a86:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a8a:	d005      	beq.n	8001a98 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma); 
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	f880 3020 	strb.w	r3, [r0, #32]
} 
 8001a92:	bc70      	pop	{r4, r5, r6}
    status = HAL_BUSY;
 8001a94:	2002      	movs	r0, #2
} 
 8001a96:	4770      	bx	lr
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001a98:	2502      	movs	r5, #2
 8001a9a:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001a9e:	6804      	ldr	r4, [r0, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001aa0:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aa2:	2500      	movs	r5, #0
 8001aa4:	6385      	str	r5, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001aa6:	6825      	ldr	r5, [r4, #0]
 8001aa8:	f025 0501 	bic.w	r5, r5, #1
 8001aac:	6025      	str	r5, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001aae:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8001ab0:	fa0c f505 	lsl.w	r5, ip, r5
 8001ab4:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8001ab6:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ab8:	6843      	ldr	r3, [r0, #4]
 8001aba:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8001abc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = DstAddress;
 8001abe:	bf0b      	itete	eq
 8001ac0:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8001ac2:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001ac4:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8001ac6:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8001ac8:	b153      	cbz	r3, 8001ae0 <HAL_DMA_Start_IT+0x6c>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001aca:	6823      	ldr	r3, [r4, #0]
 8001acc:	f043 030e 	orr.w	r3, r3, #14
 8001ad0:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001ad2:	6823      	ldr	r3, [r4, #0]
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
	HAL_StatusTypeDef status = HAL_OK;
 8001ad8:	2000      	movs	r0, #0
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001ada:	6023      	str	r3, [r4, #0]
} 
 8001adc:	bc70      	pop	{r4, r5, r6}
 8001ade:	4770      	bx	lr
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001ae0:	6823      	ldr	r3, [r4, #0]
 8001ae2:	f043 030a 	orr.w	r3, r3, #10
 8001ae6:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001ae8:	6823      	ldr	r3, [r4, #0]
 8001aea:	f023 0304 	bic.w	r3, r3, #4
 8001aee:	6023      	str	r3, [r4, #0]
 8001af0:	e7ef      	b.n	8001ad2 <HAL_DMA_Start_IT+0x5e>
  __HAL_LOCK(hdma);
 8001af2:	2002      	movs	r0, #2
} 
 8001af4:	bc70      	pop	{r4, r5, r6}
 8001af6:	4770      	bx	lr

08001af8 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001af8:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8001afc:	2a02      	cmp	r2, #2
{
 8001afe:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b00:	d006      	beq.n	8001b10 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b02:	2204      	movs	r2, #4
 8001b04:	6382      	str	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8001b06:	2200      	movs	r2, #0
    return HAL_ERROR;
 8001b08:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8001b0a:	f883 2020 	strb.w	r2, [r3, #32]
}
 8001b0e:	4770      	bx	lr
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b10:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001b12:	6c01      	ldr	r1, [r0, #64]	; 0x40
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b14:	6810      	ldr	r0, [r2, #0]
 8001b16:	f020 000e 	bic.w	r0, r0, #14
 8001b1a:	6010      	str	r0, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001b1c:	6810      	ldr	r0, [r2, #0]
 8001b1e:	f020 0001 	bic.w	r0, r0, #1
 8001b22:	6010      	str	r0, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001b24:	f04f 0c01 	mov.w	ip, #1
 8001b28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b2a:	fa0c f101 	lsl.w	r1, ip, r1
 8001b2e:	6051      	str	r1, [r2, #4]
    __HAL_UNLOCK(hdma);
 8001b30:	2200      	movs	r2, #0
  return HAL_OK;
 8001b32:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY; 
 8001b34:	f883 c021 	strb.w	ip, [r3, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001b38:	f883 2020 	strb.w	r2, [r3, #32]
}
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop

08001b40 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b40:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8001b44:	2a02      	cmp	r2, #2
 8001b46:	d003      	beq.n	8001b50 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b48:	2204      	movs	r2, #4
 8001b4a:	6382      	str	r2, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8001b4c:	2001      	movs	r0, #1
}
 8001b4e:	4770      	bx	lr
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b50:	6802      	ldr	r2, [r0, #0]
 8001b52:	6811      	ldr	r1, [r2, #0]
 8001b54:	f021 010e 	bic.w	r1, r1, #14
{  
 8001b58:	b510      	push	{r4, lr}
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001b5a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b5c:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001b5e:	6811      	ldr	r1, [r2, #0]
 8001b60:	f021 0101 	bic.w	r1, r1, #1
 8001b64:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001b66:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001b68:	2101      	movs	r1, #1
 8001b6a:	4091      	lsls	r1, r2
    if(hdma->XferAbortCallback != NULL)
 8001b6c:	6b42      	ldr	r2, [r0, #52]	; 0x34
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001b6e:	6061      	str	r1, [r4, #4]
    __HAL_UNLOCK(hdma);
 8001b70:	f44f 7c80 	mov.w	ip, #256	; 0x100
 8001b74:	f8a0 c020 	strh.w	ip, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001b78:	b112      	cbz	r2, 8001b80 <HAL_DMA_Abort_IT+0x40>
      hdma->XferAbortCallback(hdma);
 8001b7a:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8001b7c:	2000      	movs	r0, #0
}
 8001b7e:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8001b80:	4610      	mov	r0, r2
}
 8001b82:	bd10      	pop	{r4, pc}

08001b84 <HAL_DMA_IRQHandler>:
{
 8001b84:	b470      	push	{r4, r5, r6}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b86:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001b88:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b8a:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001b8c:	6804      	ldr	r4, [r0, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001b8e:	2304      	movs	r3, #4
 8001b90:	4093      	lsls	r3, r2
 8001b92:	420b      	tst	r3, r1
  uint32_t source_it = hdma->Instance->CCR;
 8001b94:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001b96:	d00e      	beq.n	8001bb6 <HAL_DMA_IRQHandler+0x32>
 8001b98:	f015 0f04 	tst.w	r5, #4
 8001b9c:	d00b      	beq.n	8001bb6 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b9e:	6822      	ldr	r2, [r4, #0]
 8001ba0:	0692      	lsls	r2, r2, #26
 8001ba2:	d403      	bmi.n	8001bac <HAL_DMA_IRQHandler+0x28>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001ba4:	6822      	ldr	r2, [r4, #0]
 8001ba6:	f022 0204 	bic.w	r2, r2, #4
 8001baa:	6022      	str	r2, [r4, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8001bac:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001bae:	6073      	str	r3, [r6, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8001bb0:	b1ca      	cbz	r2, 8001be6 <HAL_DMA_IRQHandler+0x62>
}  
 8001bb2:	bc70      	pop	{r4, r5, r6}
  		hdma->XferCpltCallback(hdma);
 8001bb4:	4710      	bx	r2
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	4093      	lsls	r3, r2
 8001bba:	420b      	tst	r3, r1
 8001bbc:	d015      	beq.n	8001bea <HAL_DMA_IRQHandler+0x66>
 8001bbe:	f015 0f02 	tst.w	r5, #2
 8001bc2:	d012      	beq.n	8001bea <HAL_DMA_IRQHandler+0x66>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bc4:	6822      	ldr	r2, [r4, #0]
 8001bc6:	0692      	lsls	r2, r2, #26
 8001bc8:	d406      	bmi.n	8001bd8 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001bca:	6822      	ldr	r2, [r4, #0]
 8001bcc:	f022 020a 	bic.w	r2, r2, #10
 8001bd0:	6022      	str	r2, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  	if(hdma->XferCpltCallback != NULL)
 8001bd8:	6a82      	ldr	r2, [r0, #40]	; 0x28
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001bda:	6073      	str	r3, [r6, #4]
  	__HAL_UNLOCK(hdma);
 8001bdc:	2100      	movs	r1, #0
 8001bde:	f880 1020 	strb.w	r1, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 8001be2:	2a00      	cmp	r2, #0
 8001be4:	d1e5      	bne.n	8001bb2 <HAL_DMA_IRQHandler+0x2e>
}  
 8001be6:	bc70      	pop	{r4, r5, r6}
 8001be8:	4770      	bx	lr
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001bea:	2308      	movs	r3, #8
 8001bec:	4093      	lsls	r3, r2
 8001bee:	420b      	tst	r3, r1
 8001bf0:	d0f9      	beq.n	8001be6 <HAL_DMA_IRQHandler+0x62>
 8001bf2:	072b      	lsls	r3, r5, #28
 8001bf4:	d5f7      	bpl.n	8001be6 <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001bf6:	6823      	ldr	r3, [r4, #0]
    if(hdma->XferErrorCallback != NULL)
 8001bf8:	6b01      	ldr	r1, [r0, #48]	; 0x30
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001bfa:	f023 030e 	bic.w	r3, r3, #14
 8001bfe:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001c00:	2301      	movs	r3, #1
 8001c02:	fa03 f202 	lsl.w	r2, r3, r2
    __HAL_UNLOCK(hdma); 
 8001c06:	f44f 7480 	mov.w	r4, #256	; 0x100
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001c0a:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma); 
 8001c0c:	8404      	strh	r4, [r0, #32]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c0e:	6383      	str	r3, [r0, #56]	; 0x38
    if(hdma->XferErrorCallback != NULL)
 8001c10:	2900      	cmp	r1, #0
 8001c12:	d0e8      	beq.n	8001be6 <HAL_DMA_IRQHandler+0x62>
}  
 8001c14:	bc70      	pop	{r4, r5, r6}
    	hdma->XferErrorCallback(hdma);
 8001c16:	4708      	bx	r1

08001c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c1c:	680c      	ldr	r4, [r1, #0]
{
 8001c1e:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c20:	2c00      	cmp	r4, #0
 8001c22:	d077      	beq.n	8001d14 <HAL_GPIO_Init+0xfc>
 8001c24:	f04f 0c00 	mov.w	ip, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c28:	4e69      	ldr	r6, [pc, #420]	; (8001dd0 <HAL_GPIO_Init+0x1b8>)
  uint32_t position = 0x00u;
 8001c2a:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c2c:	f04f 0b01 	mov.w	fp, #1
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c30:	468e      	mov	lr, r1
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c32:	fa0b f703 	lsl.w	r7, fp, r3
    if (iocurrent != 0x00u)
 8001c36:	ea17 0a04 	ands.w	sl, r7, r4
 8001c3a:	d065      	beq.n	8001d08 <HAL_GPIO_Init+0xf0>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c3c:	f8de 1004 	ldr.w	r1, [lr, #4]
 8001c40:	f001 0203 	and.w	r2, r1, #3
 8001c44:	1e55      	subs	r5, r2, #1
 8001c46:	2d01      	cmp	r5, #1
 8001c48:	d967      	bls.n	8001d1a <HAL_GPIO_Init+0x102>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c4a:	2a03      	cmp	r2, #3
 8001c4c:	f040 80ab 	bne.w	8001da6 <HAL_GPIO_Init+0x18e>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001c50:	fa02 f20c 	lsl.w	r2, r2, ip
 8001c54:	43d5      	mvns	r5, r2
      temp = GPIOx->MODER;
 8001c56:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001c58:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c5a:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c5c:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      GPIOx->MODER = temp;
 8001c60:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c62:	d051      	beq.n	8001d08 <HAL_GPIO_Init+0xf0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c64:	4d5b      	ldr	r5, [pc, #364]	; (8001dd4 <HAL_GPIO_Init+0x1bc>)
 8001c66:	69aa      	ldr	r2, [r5, #24]
 8001c68:	f042 0201 	orr.w	r2, r2, #1
 8001c6c:	61aa      	str	r2, [r5, #24]
 8001c6e:	69aa      	ldr	r2, [r5, #24]
 8001c70:	f002 0201 	and.w	r2, r2, #1
 8001c74:	9203      	str	r2, [sp, #12]
 8001c76:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001c78:	f023 0203 	bic.w	r2, r3, #3
 8001c7c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001c80:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c84:	f003 0503 	and.w	r5, r3, #3
 8001c88:	ea4f 0985 	mov.w	r9, r5, lsl #2
        temp = SYSCFG->EXTICR[position >> 2u];
 8001c8c:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c8e:	250f      	movs	r5, #15
 8001c90:	fa05 f809 	lsl.w	r8, r5, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c94:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c98:	ea27 0708 	bic.w	r7, r7, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c9c:	d015      	beq.n	8001cca <HAL_GPIO_Init+0xb2>
 8001c9e:	4d4e      	ldr	r5, [pc, #312]	; (8001dd8 <HAL_GPIO_Init+0x1c0>)
 8001ca0:	42a8      	cmp	r0, r5
 8001ca2:	f000 808b 	beq.w	8001dbc <HAL_GPIO_Init+0x1a4>
 8001ca6:	4d4d      	ldr	r5, [pc, #308]	; (8001ddc <HAL_GPIO_Init+0x1c4>)
 8001ca8:	42a8      	cmp	r0, r5
 8001caa:	f000 808b 	beq.w	8001dc4 <HAL_GPIO_Init+0x1ac>
 8001cae:	4d4c      	ldr	r5, [pc, #304]	; (8001de0 <HAL_GPIO_Init+0x1c8>)
 8001cb0:	42a8      	cmp	r0, r5
 8001cb2:	d07d      	beq.n	8001db0 <HAL_GPIO_Init+0x198>
 8001cb4:	4d4b      	ldr	r5, [pc, #300]	; (8001de4 <HAL_GPIO_Init+0x1cc>)
 8001cb6:	42a8      	cmp	r0, r5
 8001cb8:	bf13      	iteet	ne
 8001cba:	2505      	movne	r5, #5
 8001cbc:	f04f 0804 	moveq.w	r8, #4
 8001cc0:	fa08 f509 	lsleq.w	r5, r8, r9
 8001cc4:	fa05 f509 	lslne.w	r5, r5, r9
 8001cc8:	432f      	orrs	r7, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cca:	6097      	str	r7, [r2, #8]
        temp = EXTI->RTSR;
 8001ccc:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(iocurrent);
 8001cce:	ea6f 050a 	mvn.w	r5, sl
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cd2:	02cf      	lsls	r7, r1, #11
        temp &= ~(iocurrent);
 8001cd4:	bf54      	ite	pl
 8001cd6:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8001cd8:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->RTSR = temp;
 8001cdc:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 8001cde:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ce0:	028f      	lsls	r7, r1, #10
        temp &= ~(iocurrent);
 8001ce2:	bf54      	ite	pl
 8001ce4:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8001ce6:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR = temp;
 8001cea:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR;
 8001cec:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cee:	038f      	lsls	r7, r1, #14
        temp &= ~(iocurrent);
 8001cf0:	bf54      	ite	pl
 8001cf2:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8001cf4:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->EMR = temp;
 8001cf8:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cfa:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cfc:	03c9      	lsls	r1, r1, #15
        temp &= ~(iocurrent);
 8001cfe:	bf54      	ite	pl
 8001d00:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8001d02:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->IMR = temp;
 8001d06:	6032      	str	r2, [r6, #0]
      }
    }

    position++;
 8001d08:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d0a:	fa34 f203 	lsrs.w	r2, r4, r3
 8001d0e:	f10c 0c02 	add.w	ip, ip, #2
 8001d12:	d18e      	bne.n	8001c32 <HAL_GPIO_Init+0x1a>
  }
}
 8001d14:	b005      	add	sp, #20
 8001d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8001d1a:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d1e:	f8de 500c 	ldr.w	r5, [lr, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d22:	f04f 0803 	mov.w	r8, #3
 8001d26:	fa08 f80c 	lsl.w	r8, r8, ip
 8001d2a:	ea29 0908 	bic.w	r9, r9, r8
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d2e:	fa05 f50c 	lsl.w	r5, r5, ip
 8001d32:	ea45 0509 	orr.w	r5, r5, r9
        GPIOx->OSPEEDR = temp;
 8001d36:	6085      	str	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d38:	ea6f 0508 	mvn.w	r5, r8
        temp = GPIOx->OTYPER;
 8001d3c:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d40:	ea28 0807 	bic.w	r8, r8, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d44:	f3c1 1700 	ubfx	r7, r1, #4, #1
 8001d48:	409f      	lsls	r7, r3
 8001d4a:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8001d4e:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001d50:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001d52:	ea07 0805 	and.w	r8, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d56:	f8de 7008 	ldr.w	r7, [lr, #8]
 8001d5a:	fa07 f70c 	lsl.w	r7, r7, ip
 8001d5e:	ea47 0708 	orr.w	r7, r7, r8
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d62:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8001d64:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d66:	fa02 f20c 	lsl.w	r2, r2, ip
 8001d6a:	f47f af74 	bne.w	8001c56 <HAL_GPIO_Init+0x3e>
        temp = GPIOx->AFR[position >> 3u];
 8001d6e:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8001d72:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d76:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8001d7a:	f8d9 7020 	ldr.w	r7, [r9, #32]
 8001d7e:	9700      	str	r7, [sp, #0]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d80:	f8de 7010 	ldr.w	r7, [lr, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d84:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d88:	fa07 f708 	lsl.w	r7, r7, r8
 8001d8c:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d8e:	270f      	movs	r7, #15
 8001d90:	fa07 f808 	lsl.w	r8, r7, r8
 8001d94:	9f00      	ldr	r7, [sp, #0]
 8001d96:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d9a:	9f01      	ldr	r7, [sp, #4]
 8001d9c:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3u] = temp;
 8001da0:	f8c9 7020 	str.w	r7, [r9, #32]
 8001da4:	e757      	b.n	8001c56 <HAL_GPIO_Init+0x3e>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001da6:	2503      	movs	r5, #3
 8001da8:	fa05 f50c 	lsl.w	r5, r5, ip
 8001dac:	43ed      	mvns	r5, r5
 8001dae:	e7cf      	b.n	8001d50 <HAL_GPIO_Init+0x138>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001db0:	f04f 0803 	mov.w	r8, #3
 8001db4:	fa08 f509 	lsl.w	r5, r8, r9
 8001db8:	432f      	orrs	r7, r5
 8001dba:	e786      	b.n	8001cca <HAL_GPIO_Init+0xb2>
 8001dbc:	fa0b f509 	lsl.w	r5, fp, r9
 8001dc0:	432f      	orrs	r7, r5
 8001dc2:	e782      	b.n	8001cca <HAL_GPIO_Init+0xb2>
 8001dc4:	f04f 0802 	mov.w	r8, #2
 8001dc8:	fa08 f509 	lsl.w	r5, r8, r9
 8001dcc:	432f      	orrs	r7, r5
 8001dce:	e77c      	b.n	8001cca <HAL_GPIO_Init+0xb2>
 8001dd0:	40010400 	.word	0x40010400
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	48000400 	.word	0x48000400
 8001ddc:	48000800 	.word	0x48000800
 8001de0:	48000c00 	.word	0x48000c00
 8001de4:	48001000 	.word	0x48001000

08001de8 <HAL_PWREx_EnableSDADC>:
{
  /* Check the parameters */
  assert_param(IS_PWR_SDADC_ANALOG(Analogx));

  /* Enable PWR clock interface for SDADC use */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001de8:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <HAL_PWREx_EnableSDADC+0x24>)
    
  PWR->CR |= Analogx;
 8001dea:	4909      	ldr	r1, [pc, #36]	; (8001e10 <HAL_PWREx_EnableSDADC+0x28>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dec:	69da      	ldr	r2, [r3, #28]
 8001dee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001df2:	61da      	str	r2, [r3, #28]
 8001df4:	69db      	ldr	r3, [r3, #28]
{
 8001df6:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8001df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfc:	9301      	str	r3, [sp, #4]
 8001dfe:	9b01      	ldr	r3, [sp, #4]
  PWR->CR |= Analogx;
 8001e00:	680b      	ldr	r3, [r1, #0]
 8001e02:	4318      	orrs	r0, r3
 8001e04:	6008      	str	r0, [r1, #0]
}
 8001e06:	b002      	add	sp, #8
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	40007000 	.word	0x40007000

08001e14 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e14:	2800      	cmp	r0, #0
 8001e16:	f000 8270 	beq.w	80022fa <HAL_RCC_OscConfig+0x4e6>
{
 8001e1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e1e:	6803      	ldr	r3, [r0, #0]
 8001e20:	07d9      	lsls	r1, r3, #31
{
 8001e22:	b083      	sub	sp, #12
 8001e24:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e26:	d54d      	bpl.n	8001ec4 <HAL_RCC_OscConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e28:	49ae      	ldr	r1, [pc, #696]	; (80020e4 <HAL_RCC_OscConfig+0x2d0>)
 8001e2a:	684a      	ldr	r2, [r1, #4]
 8001e2c:	f002 020c 	and.w	r2, r2, #12
 8001e30:	2a04      	cmp	r2, #4
 8001e32:	f000 8161 	beq.w	80020f8 <HAL_RCC_OscConfig+0x2e4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e36:	684a      	ldr	r2, [r1, #4]
 8001e38:	f002 020c 	and.w	r2, r2, #12
 8001e3c:	2a08      	cmp	r2, #8
 8001e3e:	f000 8157 	beq.w	80020f0 <HAL_RCC_OscConfig+0x2dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e42:	6863      	ldr	r3, [r4, #4]
 8001e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e48:	d017      	beq.n	8001e7a <HAL_RCC_OscConfig+0x66>
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 818e 	beq.w	800216c <HAL_RCC_OscConfig+0x358>
 8001e50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e54:	f000 823c 	beq.w	80022d0 <HAL_RCC_OscConfig+0x4bc>
 8001e58:	4ba2      	ldr	r3, [pc, #648]	; (80020e4 <HAL_RCC_OscConfig+0x2d0>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e68:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e6a:	4a9e      	ldr	r2, [pc, #632]	; (80020e4 <HAL_RCC_OscConfig+0x2d0>)
 8001e6c:	68a1      	ldr	r1, [r4, #8]
 8001e6e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001e70:	f023 030f 	bic.w	r3, r3, #15
 8001e74:	430b      	orrs	r3, r1
 8001e76:	62d3      	str	r3, [r2, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e78:	e00a      	b.n	8001e90 <HAL_RCC_OscConfig+0x7c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e7a:	4a9a      	ldr	r2, [pc, #616]	; (80020e4 <HAL_RCC_OscConfig+0x2d0>)
 8001e7c:	6813      	ldr	r3, [r2, #0]
 8001e7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e82:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e84:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001e86:	68a1      	ldr	r1, [r4, #8]
 8001e88:	f023 030f 	bic.w	r3, r3, #15
 8001e8c:	430b      	orrs	r3, r1
 8001e8e:	62d3      	str	r3, [r2, #44]	; 0x2c
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e90:	f7ff fb0e 	bl	80014b0 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e94:	4f93      	ldr	r7, [pc, #588]	; (80020e4 <HAL_RCC_OscConfig+0x2d0>)
        tickstart = HAL_GetTick();
 8001e96:	4605      	mov	r5, r0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e98:	f44f 3800 	mov.w	r8, #131072	; 0x20000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9c:	2601      	movs	r6, #1
 8001e9e:	e005      	b.n	8001eac <HAL_RCC_OscConfig+0x98>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ea0:	f7ff fb06 	bl	80014b0 <HAL_GetTick>
 8001ea4:	1b40      	subs	r0, r0, r5
 8001ea6:	2864      	cmp	r0, #100	; 0x64
 8001ea8:	f200 815c 	bhi.w	8002164 <HAL_RCC_OscConfig+0x350>
 8001eac:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	fa98 f3a8 	rbit	r3, r8
 8001eb6:	fab3 f383 	clz	r3, r3
 8001eba:	fa06 f303 	lsl.w	r3, r6, r3
 8001ebe:	4213      	tst	r3, r2
 8001ec0:	d0ee      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x8c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ec2:	6823      	ldr	r3, [r4, #0]
 8001ec4:	079f      	lsls	r7, r3, #30
 8001ec6:	d53f      	bpl.n	8001f48 <HAL_RCC_OscConfig+0x134>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ec8:	4a86      	ldr	r2, [pc, #536]	; (80020e4 <HAL_RCC_OscConfig+0x2d0>)
 8001eca:	6851      	ldr	r1, [r2, #4]
 8001ecc:	f011 0f0c 	tst.w	r1, #12
 8001ed0:	f000 80c2 	beq.w	8002058 <HAL_RCC_OscConfig+0x244>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ed4:	6851      	ldr	r1, [r2, #4]
 8001ed6:	f001 010c 	and.w	r1, r1, #12
 8001eda:	2908      	cmp	r1, #8
 8001edc:	f000 80b8 	beq.w	8002050 <HAL_RCC_OscConfig+0x23c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ee0:	6922      	ldr	r2, [r4, #16]
 8001ee2:	2a00      	cmp	r2, #0
 8001ee4:	f000 8197 	beq.w	8002216 <HAL_RCC_OscConfig+0x402>
 8001ee8:	2501      	movs	r5, #1
 8001eea:	fa95 f3a5 	rbit	r3, r5
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eee:	fab3 f383 	clz	r3, r3
 8001ef2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ef6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001efa:	009b      	lsls	r3, r3, #2
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001efc:	4f79      	ldr	r7, [pc, #484]	; (80020e4 <HAL_RCC_OscConfig+0x2d0>)
        __HAL_RCC_HSI_ENABLE();
 8001efe:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8001f00:	f7ff fad6 	bl	80014b0 <HAL_GetTick>
 8001f04:	f04f 0802 	mov.w	r8, #2
 8001f08:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f0a:	e005      	b.n	8001f18 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f0c:	f7ff fad0 	bl	80014b0 <HAL_GetTick>
 8001f10:	1b80      	subs	r0, r0, r6
 8001f12:	2802      	cmp	r0, #2
 8001f14:	f200 8126 	bhi.w	8002164 <HAL_RCC_OscConfig+0x350>
 8001f18:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	fa98 f3a8 	rbit	r3, r8
 8001f22:	fab3 f383 	clz	r3, r3
 8001f26:	fa05 f303 	lsl.w	r3, r5, r3
 8001f2a:	4213      	tst	r3, r2
 8001f2c:	d0ee      	beq.n	8001f0c <HAL_RCC_OscConfig+0xf8>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f2e:	6839      	ldr	r1, [r7, #0]
 8001f30:	22f8      	movs	r2, #248	; 0xf8
 8001f32:	fa92 f2a2 	rbit	r2, r2
 8001f36:	6963      	ldr	r3, [r4, #20]
 8001f38:	fab2 f282 	clz	r2, r2
 8001f3c:	4093      	lsls	r3, r2
 8001f3e:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8001f42:	4313      	orrs	r3, r2
 8001f44:	603b      	str	r3, [r7, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f46:	6823      	ldr	r3, [r4, #0]
 8001f48:	071d      	lsls	r5, r3, #28
 8001f4a:	d420      	bmi.n	8001f8e <HAL_RCC_OscConfig+0x17a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f4c:	0758      	lsls	r0, r3, #29
 8001f4e:	d54a      	bpl.n	8001fe6 <HAL_RCC_OscConfig+0x1d2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f50:	4b64      	ldr	r3, [pc, #400]	; (80020e4 <HAL_RCC_OscConfig+0x2d0>)
 8001f52:	69da      	ldr	r2, [r3, #28]
 8001f54:	00d1      	lsls	r1, r2, #3
 8001f56:	f140 80ba 	bpl.w	80020ce <HAL_RCC_OscConfig+0x2ba>
    FlagStatus       pwrclkchanged = RESET;
 8001f5a:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f5c:	4e62      	ldr	r6, [pc, #392]	; (80020e8 <HAL_RCC_OscConfig+0x2d4>)
 8001f5e:	6833      	ldr	r3, [r6, #0]
 8001f60:	05da      	lsls	r2, r3, #23
 8001f62:	f140 80ef 	bpl.w	8002144 <HAL_RCC_OscConfig+0x330>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f66:	68e3      	ldr	r3, [r4, #12]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	f000 8178 	beq.w	800225e <HAL_RCC_OscConfig+0x44a>
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f000 8123 	beq.w	80021ba <HAL_RCC_OscConfig+0x3a6>
 8001f74:	2b05      	cmp	r3, #5
 8001f76:	4b5b      	ldr	r3, [pc, #364]	; (80020e4 <HAL_RCC_OscConfig+0x2d0>)
 8001f78:	6a1a      	ldr	r2, [r3, #32]
 8001f7a:	f000 81b6 	beq.w	80022ea <HAL_RCC_OscConfig+0x4d6>
 8001f7e:	f022 0201 	bic.w	r2, r2, #1
 8001f82:	621a      	str	r2, [r3, #32]
 8001f84:	6a1a      	ldr	r2, [r3, #32]
 8001f86:	f022 0204 	bic.w	r2, r2, #4
 8001f8a:	621a      	str	r2, [r3, #32]
 8001f8c:	e16c      	b.n	8002268 <HAL_RCC_OscConfig+0x454>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f8e:	69a2      	ldr	r2, [r4, #24]
 8001f90:	2a00      	cmp	r2, #0
 8001f92:	d076      	beq.n	8002082 <HAL_RCC_OscConfig+0x26e>
 8001f94:	2601      	movs	r6, #1
 8001f96:	fa96 f2a6 	rbit	r2, r6
      __HAL_RCC_LSI_ENABLE();
 8001f9a:	4b54      	ldr	r3, [pc, #336]	; (80020ec <HAL_RCC_OscConfig+0x2d8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f9c:	f8df 8144 	ldr.w	r8, [pc, #324]	; 80020e4 <HAL_RCC_OscConfig+0x2d0>
      __HAL_RCC_LSI_ENABLE();
 8001fa0:	fab2 f282 	clz	r2, r2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	2502      	movs	r5, #2
 8001faa:	601e      	str	r6, [r3, #0]
      tickstart = HAL_GetTick();
 8001fac:	f7ff fa80 	bl	80014b0 <HAL_GetTick>
 8001fb0:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fb2:	e005      	b.n	8001fc0 <HAL_RCC_OscConfig+0x1ac>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fb4:	f7ff fa7c 	bl	80014b0 <HAL_GetTick>
 8001fb8:	1bc0      	subs	r0, r0, r7
 8001fba:	2802      	cmp	r0, #2
 8001fbc:	f200 80d2 	bhi.w	8002164 <HAL_RCC_OscConfig+0x350>
 8001fc0:	fa95 f3a5 	rbit	r3, r5
 8001fc4:	fa95 f3a5 	rbit	r3, r5
 8001fc8:	fa95 f3a5 	rbit	r3, r5
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fcc:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8001fd0:	fa95 f3a5 	rbit	r3, r5
 8001fd4:	fab3 f383 	clz	r3, r3
 8001fd8:	fa06 f303 	lsl.w	r3, r6, r3
 8001fdc:	4213      	tst	r3, r2
 8001fde:	d0e9      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x1a0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fe0:	6823      	ldr	r3, [r4, #0]
 8001fe2:	0758      	lsls	r0, r3, #29
 8001fe4:	d4b4      	bmi.n	8001f50 <HAL_RCC_OscConfig+0x13c>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fe6:	69e0      	ldr	r0, [r4, #28]
 8001fe8:	b370      	cbz	r0, 8002048 <HAL_RCC_OscConfig+0x234>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fea:	4d3e      	ldr	r5, [pc, #248]	; (80020e4 <HAL_RCC_OscConfig+0x2d0>)
 8001fec:	686b      	ldr	r3, [r5, #4]
 8001fee:	f003 030c 	and.w	r3, r3, #12
 8001ff2:	2b08      	cmp	r3, #8
 8001ff4:	f000 815b 	beq.w	80022ae <HAL_RCC_OscConfig+0x49a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ff8:	2802      	cmp	r0, #2
 8001ffa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ffe:	f000 817e 	beq.w	80022fe <HAL_RCC_OscConfig+0x4ea>
 8002002:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002006:	fab3 f383 	clz	r3, r3
 800200a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800200e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002018:	f7ff fa4a 	bl	80014b0 <HAL_GetTick>
 800201c:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8002020:	4604      	mov	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002022:	2601      	movs	r6, #1
 8002024:	e005      	b.n	8002032 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002026:	f7ff fa43 	bl	80014b0 <HAL_GetTick>
 800202a:	1b00      	subs	r0, r0, r4
 800202c:	2802      	cmp	r0, #2
 800202e:	f200 8099 	bhi.w	8002164 <HAL_RCC_OscConfig+0x350>
 8002032:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002036:	682a      	ldr	r2, [r5, #0]
 8002038:	fa97 f3a7 	rbit	r3, r7
 800203c:	fab3 f383 	clz	r3, r3
 8002040:	fa06 f303 	lsl.w	r3, r6, r3
 8002044:	4213      	tst	r3, r2
 8002046:	d1ee      	bne.n	8002026 <HAL_RCC_OscConfig+0x212>
        }
      }
    }
  }

  return HAL_OK;
 8002048:	2000      	movs	r0, #0
}
 800204a:	b003      	add	sp, #12
 800204c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002050:	6852      	ldr	r2, [r2, #4]
 8002052:	03d6      	lsls	r6, r2, #15
 8002054:	f53f af44 	bmi.w	8001ee0 <HAL_RCC_OscConfig+0xcc>
 8002058:	2202      	movs	r2, #2
 800205a:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800205e:	4921      	ldr	r1, [pc, #132]	; (80020e4 <HAL_RCC_OscConfig+0x2d0>)
 8002060:	6808      	ldr	r0, [r1, #0]
 8002062:	fa92 f2a2 	rbit	r2, r2
 8002066:	2101      	movs	r1, #1
 8002068:	fab2 f282 	clz	r2, r2
 800206c:	fa01 f202 	lsl.w	r2, r1, r2
 8002070:	4202      	tst	r2, r0
 8002072:	d056      	beq.n	8002122 <HAL_RCC_OscConfig+0x30e>
 8002074:	6922      	ldr	r2, [r4, #16]
 8002076:	428a      	cmp	r2, r1
 8002078:	d053      	beq.n	8002122 <HAL_RCC_OscConfig+0x30e>
        return HAL_ERROR;
 800207a:	2001      	movs	r0, #1
}
 800207c:	b003      	add	sp, #12
 800207e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002082:	2701      	movs	r7, #1
 8002084:	fa97 f1a7 	rbit	r1, r7
      __HAL_RCC_LSI_DISABLE();
 8002088:	4b18      	ldr	r3, [pc, #96]	; (80020ec <HAL_RCC_OscConfig+0x2d8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800208a:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80020e4 <HAL_RCC_OscConfig+0x2d0>
      __HAL_RCC_LSI_DISABLE();
 800208e:	fab1 f181 	clz	r1, r1
 8002092:	440b      	add	r3, r1
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	2502      	movs	r5, #2
 8002098:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800209a:	f7ff fa09 	bl	80014b0 <HAL_GetTick>
 800209e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a0:	e004      	b.n	80020ac <HAL_RCC_OscConfig+0x298>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020a2:	f7ff fa05 	bl	80014b0 <HAL_GetTick>
 80020a6:	1b80      	subs	r0, r0, r6
 80020a8:	2802      	cmp	r0, #2
 80020aa:	d85b      	bhi.n	8002164 <HAL_RCC_OscConfig+0x350>
 80020ac:	fa95 f3a5 	rbit	r3, r5
 80020b0:	fa95 f3a5 	rbit	r3, r5
 80020b4:	fa95 f3a5 	rbit	r3, r5
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b8:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 80020bc:	fa95 f3a5 	rbit	r3, r5
 80020c0:	fab3 f383 	clz	r3, r3
 80020c4:	fa07 f303 	lsl.w	r3, r7, r3
 80020c8:	4213      	tst	r3, r2
 80020ca:	d1ea      	bne.n	80020a2 <HAL_RCC_OscConfig+0x28e>
 80020cc:	e788      	b.n	8001fe0 <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ce:	69da      	ldr	r2, [r3, #28]
 80020d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80020d4:	61da      	str	r2, [r3, #28]
 80020d6:	69db      	ldr	r3, [r3, #28]
 80020d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020dc:	9301      	str	r3, [sp, #4]
 80020de:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80020e0:	2501      	movs	r5, #1
 80020e2:	e73b      	b.n	8001f5c <HAL_RCC_OscConfig+0x148>
 80020e4:	40021000 	.word	0x40021000
 80020e8:	40007000 	.word	0x40007000
 80020ec:	10908120 	.word	0x10908120
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020f0:	684a      	ldr	r2, [r1, #4]
 80020f2:	03d2      	lsls	r2, r2, #15
 80020f4:	f57f aea5 	bpl.w	8001e42 <HAL_RCC_OscConfig+0x2e>
 80020f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020fc:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002100:	49a7      	ldr	r1, [pc, #668]	; (80023a0 <HAL_RCC_OscConfig+0x58c>)
 8002102:	6808      	ldr	r0, [r1, #0]
 8002104:	fa92 f2a2 	rbit	r2, r2
 8002108:	2101      	movs	r1, #1
 800210a:	fab2 f282 	clz	r2, r2
 800210e:	fa01 f202 	lsl.w	r2, r1, r2
 8002112:	4202      	tst	r2, r0
 8002114:	f43f aed6 	beq.w	8001ec4 <HAL_RCC_OscConfig+0xb0>
 8002118:	6862      	ldr	r2, [r4, #4]
 800211a:	2a00      	cmp	r2, #0
 800211c:	f47f aed2 	bne.w	8001ec4 <HAL_RCC_OscConfig+0xb0>
 8002120:	e7ab      	b.n	800207a <HAL_RCC_OscConfig+0x266>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002122:	4d9f      	ldr	r5, [pc, #636]	; (80023a0 <HAL_RCC_OscConfig+0x58c>)
 8002124:	21f8      	movs	r1, #248	; 0xf8
 8002126:	6828      	ldr	r0, [r5, #0]
 8002128:	fa91 f1a1 	rbit	r1, r1
 800212c:	6962      	ldr	r2, [r4, #20]
 800212e:	fab1 f181 	clz	r1, r1
 8002132:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 8002136:	408a      	lsls	r2, r1
 8002138:	4302      	orrs	r2, r0
 800213a:	602a      	str	r2, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800213c:	071d      	lsls	r5, r3, #28
 800213e:	f57f af05 	bpl.w	8001f4c <HAL_RCC_OscConfig+0x138>
 8002142:	e724      	b.n	8001f8e <HAL_RCC_OscConfig+0x17a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002144:	6833      	ldr	r3, [r6, #0]
 8002146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800214a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800214c:	f7ff f9b0 	bl	80014b0 <HAL_GetTick>
 8002150:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002152:	6833      	ldr	r3, [r6, #0]
 8002154:	05db      	lsls	r3, r3, #23
 8002156:	f53f af06 	bmi.w	8001f66 <HAL_RCC_OscConfig+0x152>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800215a:	f7ff f9a9 	bl	80014b0 <HAL_GetTick>
 800215e:	1bc0      	subs	r0, r0, r7
 8002160:	2864      	cmp	r0, #100	; 0x64
 8002162:	d9f6      	bls.n	8002152 <HAL_RCC_OscConfig+0x33e>
            return HAL_TIMEOUT;
 8002164:	2003      	movs	r0, #3
}
 8002166:	b003      	add	sp, #12
 8002168:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800216c:	4d8c      	ldr	r5, [pc, #560]	; (80023a0 <HAL_RCC_OscConfig+0x58c>)
 800216e:	682b      	ldr	r3, [r5, #0]
 8002170:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002174:	602b      	str	r3, [r5, #0]
 8002176:	682b      	ldr	r3, [r5, #0]
 8002178:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800217c:	602b      	str	r3, [r5, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800217e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002180:	68a2      	ldr	r2, [r4, #8]
 8002182:	f023 030f 	bic.w	r3, r3, #15
 8002186:	4313      	orrs	r3, r2
 8002188:	62eb      	str	r3, [r5, #44]	; 0x2c
        tickstart = HAL_GetTick();
 800218a:	f7ff f991 	bl	80014b0 <HAL_GetTick>
 800218e:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8002192:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002194:	2701      	movs	r7, #1
 8002196:	e004      	b.n	80021a2 <HAL_RCC_OscConfig+0x38e>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002198:	f7ff f98a 	bl	80014b0 <HAL_GetTick>
 800219c:	1b80      	subs	r0, r0, r6
 800219e:	2864      	cmp	r0, #100	; 0x64
 80021a0:	d8e0      	bhi.n	8002164 <HAL_RCC_OscConfig+0x350>
 80021a2:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021a6:	682a      	ldr	r2, [r5, #0]
 80021a8:	fa98 f3a8 	rbit	r3, r8
 80021ac:	fab3 f383 	clz	r3, r3
 80021b0:	fa07 f303 	lsl.w	r3, r7, r3
 80021b4:	4213      	tst	r3, r2
 80021b6:	d1ef      	bne.n	8002198 <HAL_RCC_OscConfig+0x384>
 80021b8:	e683      	b.n	8001ec2 <HAL_RCC_OscConfig+0xae>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021ba:	4e79      	ldr	r6, [pc, #484]	; (80023a0 <HAL_RCC_OscConfig+0x58c>)
 80021bc:	6a33      	ldr	r3, [r6, #32]
 80021be:	f023 0301 	bic.w	r3, r3, #1
 80021c2:	6233      	str	r3, [r6, #32]
 80021c4:	6a33      	ldr	r3, [r6, #32]
 80021c6:	f023 0304 	bic.w	r3, r3, #4
 80021ca:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 80021cc:	f7ff f970 	bl	80014b0 <HAL_GetTick>
 80021d0:	f04f 0902 	mov.w	r9, #2
 80021d4:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d6:	f04f 0801 	mov.w	r8, #1
 80021da:	e006      	b.n	80021ea <HAL_RCC_OscConfig+0x3d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021dc:	f7ff f968 	bl	80014b0 <HAL_GetTick>
 80021e0:	f241 3388 	movw	r3, #5000	; 0x1388
 80021e4:	1bc0      	subs	r0, r0, r7
 80021e6:	4298      	cmp	r0, r3
 80021e8:	d8bc      	bhi.n	8002164 <HAL_RCC_OscConfig+0x350>
 80021ea:	fa99 f3a9 	rbit	r3, r9
 80021ee:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f2:	6a32      	ldr	r2, [r6, #32]
 80021f4:	fa99 f3a9 	rbit	r3, r9
 80021f8:	fab3 f383 	clz	r3, r3
 80021fc:	fa08 f303 	lsl.w	r3, r8, r3
 8002200:	4213      	tst	r3, r2
 8002202:	d1eb      	bne.n	80021dc <HAL_RCC_OscConfig+0x3c8>
    if(pwrclkchanged == SET)
 8002204:	2d00      	cmp	r5, #0
 8002206:	f43f aeee 	beq.w	8001fe6 <HAL_RCC_OscConfig+0x1d2>
      __HAL_RCC_PWR_CLK_DISABLE();
 800220a:	4a65      	ldr	r2, [pc, #404]	; (80023a0 <HAL_RCC_OscConfig+0x58c>)
 800220c:	69d3      	ldr	r3, [r2, #28]
 800220e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002212:	61d3      	str	r3, [r2, #28]
 8002214:	e6e7      	b.n	8001fe6 <HAL_RCC_OscConfig+0x1d2>
 8002216:	2601      	movs	r6, #1
 8002218:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 800221c:	fab3 f383 	clz	r3, r3
 8002220:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002224:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002228:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800222a:	4f5d      	ldr	r7, [pc, #372]	; (80023a0 <HAL_RCC_OscConfig+0x58c>)
        __HAL_RCC_HSI_DISABLE();
 800222c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800222e:	f7ff f93f 	bl	80014b0 <HAL_GetTick>
 8002232:	f04f 0802 	mov.w	r8, #2
 8002236:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002238:	e004      	b.n	8002244 <HAL_RCC_OscConfig+0x430>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800223a:	f7ff f939 	bl	80014b0 <HAL_GetTick>
 800223e:	1b40      	subs	r0, r0, r5
 8002240:	2802      	cmp	r0, #2
 8002242:	d88f      	bhi.n	8002164 <HAL_RCC_OscConfig+0x350>
 8002244:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	fa98 f3a8 	rbit	r3, r8
 800224e:	fab3 f383 	clz	r3, r3
 8002252:	fa06 f303 	lsl.w	r3, r6, r3
 8002256:	4213      	tst	r3, r2
 8002258:	d1ef      	bne.n	800223a <HAL_RCC_OscConfig+0x426>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800225a:	6823      	ldr	r3, [r4, #0]
 800225c:	e674      	b.n	8001f48 <HAL_RCC_OscConfig+0x134>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800225e:	4a50      	ldr	r2, [pc, #320]	; (80023a0 <HAL_RCC_OscConfig+0x58c>)
 8002260:	6a13      	ldr	r3, [r2, #32]
 8002262:	f043 0301 	orr.w	r3, r3, #1
 8002266:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8002268:	f7ff f922 	bl	80014b0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800226c:	f8df 8130 	ldr.w	r8, [pc, #304]	; 80023a0 <HAL_RCC_OscConfig+0x58c>
      tickstart = HAL_GetTick();
 8002270:	4606      	mov	r6, r0
 8002272:	f04f 0902 	mov.w	r9, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002276:	2701      	movs	r7, #1
 8002278:	e007      	b.n	800228a <HAL_RCC_OscConfig+0x476>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800227a:	f7ff f919 	bl	80014b0 <HAL_GetTick>
 800227e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002282:	1b80      	subs	r0, r0, r6
 8002284:	4298      	cmp	r0, r3
 8002286:	f63f af6d 	bhi.w	8002164 <HAL_RCC_OscConfig+0x350>
 800228a:	fa99 f3a9 	rbit	r3, r9
 800228e:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002292:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8002296:	fa99 f3a9 	rbit	r3, r9
 800229a:	fab3 f383 	clz	r3, r3
 800229e:	fa07 f303 	lsl.w	r3, r7, r3
 80022a2:	4213      	tst	r3, r2
 80022a4:	d0e9      	beq.n	800227a <HAL_RCC_OscConfig+0x466>
    if(pwrclkchanged == SET)
 80022a6:	2d00      	cmp	r5, #0
 80022a8:	f43f ae9d 	beq.w	8001fe6 <HAL_RCC_OscConfig+0x1d2>
 80022ac:	e7ad      	b.n	800220a <HAL_RCC_OscConfig+0x3f6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022ae:	2801      	cmp	r0, #1
 80022b0:	f43f aecb 	beq.w	800204a <HAL_RCC_OscConfig+0x236>
        pll_config = RCC->CFGR;
 80022b4:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80022b6:	6a22      	ldr	r2, [r4, #32]
 80022b8:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80022bc:	4291      	cmp	r1, r2
 80022be:	f47f aedc 	bne.w	800207a <HAL_RCC_OscConfig+0x266>
 80022c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80022c4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    return HAL_ERROR;
 80022c8:	1a18      	subs	r0, r3, r0
 80022ca:	bf18      	it	ne
 80022cc:	2001      	movne	r0, #1
 80022ce:	e6bc      	b.n	800204a <HAL_RCC_OscConfig+0x236>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022d4:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	e5bf      	b.n	8001e6a <HAL_RCC_OscConfig+0x56>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ea:	f042 0204 	orr.w	r2, r2, #4
 80022ee:	621a      	str	r2, [r3, #32]
 80022f0:	6a1a      	ldr	r2, [r3, #32]
 80022f2:	f042 0201 	orr.w	r2, r2, #1
 80022f6:	621a      	str	r2, [r3, #32]
 80022f8:	e7b6      	b.n	8002268 <HAL_RCC_OscConfig+0x454>
    return HAL_ERROR;
 80022fa:	2001      	movs	r0, #1
}
 80022fc:	4770      	bx	lr
 80022fe:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8002302:	fab3 f383 	clz	r3, r3
 8002306:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800230a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002314:	f7ff f8cc 	bl	80014b0 <HAL_GetTick>
 8002318:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 800231c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800231e:	2701      	movs	r7, #1
 8002320:	e005      	b.n	800232e <HAL_RCC_OscConfig+0x51a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002322:	f7ff f8c5 	bl	80014b0 <HAL_GetTick>
 8002326:	1b80      	subs	r0, r0, r6
 8002328:	2802      	cmp	r0, #2
 800232a:	f63f af1b 	bhi.w	8002164 <HAL_RCC_OscConfig+0x350>
 800232e:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002332:	682a      	ldr	r2, [r5, #0]
 8002334:	fa98 f3a8 	rbit	r3, r8
 8002338:	fab3 f383 	clz	r3, r3
 800233c:	fa07 f303 	lsl.w	r3, r7, r3
 8002340:	4213      	tst	r3, r2
 8002342:	d1ee      	bne.n	8002322 <HAL_RCC_OscConfig+0x50e>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002344:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
 8002348:	686a      	ldr	r2, [r5, #4]
 800234a:	430b      	orrs	r3, r1
 800234c:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8002350:	4313      	orrs	r3, r2
 8002352:	606b      	str	r3, [r5, #4]
 8002354:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002358:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 800235c:	fab3 f383 	clz	r3, r3
 8002360:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002364:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002368:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800236a:	4d0d      	ldr	r5, [pc, #52]	; (80023a0 <HAL_RCC_OscConfig+0x58c>)
        __HAL_RCC_PLL_ENABLE();
 800236c:	601f      	str	r7, [r3, #0]
        tickstart = HAL_GetTick();
 800236e:	f7ff f89f 	bl	80014b0 <HAL_GetTick>
 8002372:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8002376:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002378:	2601      	movs	r6, #1
 800237a:	e005      	b.n	8002388 <HAL_RCC_OscConfig+0x574>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800237c:	f7ff f898 	bl	80014b0 <HAL_GetTick>
 8002380:	1b00      	subs	r0, r0, r4
 8002382:	2802      	cmp	r0, #2
 8002384:	f63f aeee 	bhi.w	8002164 <HAL_RCC_OscConfig+0x350>
 8002388:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800238c:	682a      	ldr	r2, [r5, #0]
 800238e:	fa97 f3a7 	rbit	r3, r7
 8002392:	fab3 f383 	clz	r3, r3
 8002396:	fa06 f303 	lsl.w	r3, r6, r3
 800239a:	4213      	tst	r3, r2
 800239c:	d0ee      	beq.n	800237c <HAL_RCC_OscConfig+0x568>
 800239e:	e653      	b.n	8002048 <HAL_RCC_OscConfig+0x234>
 80023a0:	40021000 	.word	0x40021000

080023a4 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0U;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023a4:	2800      	cmp	r0, #0
 80023a6:	f000 80b2 	beq.w	800250e <HAL_RCC_ClockConfig+0x16a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023aa:	4a65      	ldr	r2, [pc, #404]	; (8002540 <HAL_RCC_ClockConfig+0x19c>)
 80023ac:	6813      	ldr	r3, [r2, #0]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	428b      	cmp	r3, r1
{
 80023b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023b8:	460d      	mov	r5, r1
 80023ba:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023bc:	d20c      	bcs.n	80023d8 <HAL_RCC_ClockConfig+0x34>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023be:	6813      	ldr	r3, [r2, #0]
 80023c0:	f023 0307 	bic.w	r3, r3, #7
 80023c4:	430b      	orrs	r3, r1
 80023c6:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c8:	6813      	ldr	r3, [r2, #0]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	428b      	cmp	r3, r1
 80023d0:	d002      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80023d2:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
  
  return HAL_OK;
}
 80023d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023d8:	6823      	ldr	r3, [r4, #0]
 80023da:	079f      	lsls	r7, r3, #30
 80023dc:	d506      	bpl.n	80023ec <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023de:	4959      	ldr	r1, [pc, #356]	; (8002544 <HAL_RCC_ClockConfig+0x1a0>)
 80023e0:	68a0      	ldr	r0, [r4, #8]
 80023e2:	684a      	ldr	r2, [r1, #4]
 80023e4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80023e8:	4302      	orrs	r2, r0
 80023ea:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ec:	07de      	lsls	r6, r3, #31
 80023ee:	d52d      	bpl.n	800244c <HAL_RCC_ClockConfig+0xa8>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023f0:	6862      	ldr	r2, [r4, #4]
 80023f2:	2a01      	cmp	r2, #1
 80023f4:	f000 808d 	beq.w	8002512 <HAL_RCC_ClockConfig+0x16e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023f8:	2a02      	cmp	r2, #2
 80023fa:	bf0c      	ite	eq
 80023fc:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8002400:	2302      	movne	r3, #2
 8002402:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002406:	494f      	ldr	r1, [pc, #316]	; (8002544 <HAL_RCC_ClockConfig+0x1a0>)
 8002408:	6808      	ldr	r0, [r1, #0]
 800240a:	fa93 f3a3 	rbit	r3, r3
 800240e:	2101      	movs	r1, #1
 8002410:	fab3 f383 	clz	r3, r3
 8002414:	fa01 f303 	lsl.w	r3, r1, r3
 8002418:	4203      	tst	r3, r0
 800241a:	d0da      	beq.n	80023d2 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800241c:	4e49      	ldr	r6, [pc, #292]	; (8002544 <HAL_RCC_ClockConfig+0x1a0>)
 800241e:	6873      	ldr	r3, [r6, #4]
 8002420:	f023 0303 	bic.w	r3, r3, #3
 8002424:	4313      	orrs	r3, r2
 8002426:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002428:	f7ff f842 	bl	80014b0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800242c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002430:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002432:	e004      	b.n	800243e <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002434:	f7ff f83c 	bl	80014b0 <HAL_GetTick>
 8002438:	1bc0      	subs	r0, r0, r7
 800243a:	4540      	cmp	r0, r8
 800243c:	d879      	bhi.n	8002532 <HAL_RCC_ClockConfig+0x18e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243e:	6873      	ldr	r3, [r6, #4]
 8002440:	6862      	ldr	r2, [r4, #4]
 8002442:	f003 030c 	and.w	r3, r3, #12
 8002446:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800244a:	d1f3      	bne.n	8002434 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800244c:	4a3c      	ldr	r2, [pc, #240]	; (8002540 <HAL_RCC_ClockConfig+0x19c>)
 800244e:	6813      	ldr	r3, [r2, #0]
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	42ab      	cmp	r3, r5
 8002456:	d909      	bls.n	800246c <HAL_RCC_ClockConfig+0xc8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002458:	6813      	ldr	r3, [r2, #0]
 800245a:	f023 0307 	bic.w	r3, r3, #7
 800245e:	432b      	orrs	r3, r5
 8002460:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002462:	6813      	ldr	r3, [r2, #0]
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	42ab      	cmp	r3, r5
 800246a:	d1b2      	bne.n	80023d2 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800246c:	6823      	ldr	r3, [r4, #0]
 800246e:	0758      	lsls	r0, r3, #29
 8002470:	d506      	bpl.n	8002480 <HAL_RCC_ClockConfig+0xdc>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002472:	4934      	ldr	r1, [pc, #208]	; (8002544 <HAL_RCC_ClockConfig+0x1a0>)
 8002474:	68e0      	ldr	r0, [r4, #12]
 8002476:	684a      	ldr	r2, [r1, #4]
 8002478:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800247c:	4302      	orrs	r2, r0
 800247e:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002480:	0719      	lsls	r1, r3, #28
 8002482:	d507      	bpl.n	8002494 <HAL_RCC_ClockConfig+0xf0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002484:	4a2f      	ldr	r2, [pc, #188]	; (8002544 <HAL_RCC_ClockConfig+0x1a0>)
 8002486:	6921      	ldr	r1, [r4, #16]
 8002488:	6853      	ldr	r3, [r2, #4]
 800248a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800248e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002492:	6053      	str	r3, [r2, #4]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8002494:	492b      	ldr	r1, [pc, #172]	; (8002544 <HAL_RCC_ClockConfig+0x1a0>)
 8002496:	684a      	ldr	r2, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002498:	f002 030c 	and.w	r3, r2, #12
 800249c:	2b08      	cmp	r3, #8
 800249e:	d017      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x12c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024a0:	4929      	ldr	r1, [pc, #164]	; (8002548 <HAL_RCC_ClockConfig+0x1a4>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80024a2:	4b28      	ldr	r3, [pc, #160]	; (8002544 <HAL_RCC_ClockConfig+0x1a0>)
 80024a4:	22f0      	movs	r2, #240	; 0xf0
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	fa92 f2a2 	rbit	r2, r2
 80024ac:	fab2 f282 	clz	r2, r2
 80024b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024b4:	40d3      	lsrs	r3, r2
 80024b6:	4a25      	ldr	r2, [pc, #148]	; (800254c <HAL_RCC_ClockConfig+0x1a8>)
  HAL_InitTick (uwTickPrio);
 80024b8:	4825      	ldr	r0, [pc, #148]	; (8002550 <HAL_RCC_ClockConfig+0x1ac>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80024ba:	5cd3      	ldrb	r3, [r2, r3]
 80024bc:	4a25      	ldr	r2, [pc, #148]	; (8002554 <HAL_RCC_ClockConfig+0x1b0>)
  HAL_InitTick (uwTickPrio);
 80024be:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80024c0:	fa21 f303 	lsr.w	r3, r1, r3
 80024c4:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 80024c6:	f7fe fda5 	bl	8001014 <HAL_InitTick>
  return HAL_OK;
 80024ca:	2000      	movs	r0, #0
}
 80024cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80024d0:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80024d4:	fa93 f3a3 	rbit	r3, r3
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80024d8:	f402 1070 	and.w	r0, r2, #3932160	; 0x3c0000
 80024dc:	fab3 f383 	clz	r3, r3
 80024e0:	4c1d      	ldr	r4, [pc, #116]	; (8002558 <HAL_RCC_ClockConfig+0x1b4>)
 80024e2:	fa20 f303 	lsr.w	r3, r0, r3
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80024e6:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80024e8:	5ce3      	ldrb	r3, [r4, r3]
 80024ea:	210f      	movs	r1, #15
 80024ec:	fa91 f1a1 	rbit	r1, r1
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80024f0:	03d2      	lsls	r2, r2, #15
 80024f2:	d520      	bpl.n	8002536 <HAL_RCC_ClockConfig+0x192>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80024f4:	fab1 f181 	clz	r1, r1
 80024f8:	f000 000f 	and.w	r0, r0, #15
 80024fc:	4c17      	ldr	r4, [pc, #92]	; (800255c <HAL_RCC_ClockConfig+0x1b8>)
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80024fe:	4a12      	ldr	r2, [pc, #72]	; (8002548 <HAL_RCC_ClockConfig+0x1a4>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002500:	40c8      	lsrs	r0, r1
 8002502:	5c21      	ldrb	r1, [r4, r0]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002504:	fbb2 f2f1 	udiv	r2, r2, r1
 8002508:	fb03 f102 	mul.w	r1, r3, r2
 800250c:	e7c9      	b.n	80024a2 <HAL_RCC_ClockConfig+0xfe>
    return HAL_ERROR;
 800250e:	2001      	movs	r0, #1
}
 8002510:	4770      	bx	lr
 8002512:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002516:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800251a:	490a      	ldr	r1, [pc, #40]	; (8002544 <HAL_RCC_ClockConfig+0x1a0>)
 800251c:	6809      	ldr	r1, [r1, #0]
 800251e:	fa93 f3a3 	rbit	r3, r3
 8002522:	fab3 f383 	clz	r3, r3
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	420b      	tst	r3, r1
 800252c:	f47f af76 	bne.w	800241c <HAL_RCC_ClockConfig+0x78>
 8002530:	e74f      	b.n	80023d2 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8002532:	2003      	movs	r0, #3
 8002534:	e74e      	b.n	80023d4 <HAL_RCC_ClockConfig+0x30>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002536:	490a      	ldr	r1, [pc, #40]	; (8002560 <HAL_RCC_ClockConfig+0x1bc>)
 8002538:	fb03 f101 	mul.w	r1, r3, r1
 800253c:	e7b1      	b.n	80024a2 <HAL_RCC_ClockConfig+0xfe>
 800253e:	bf00      	nop
 8002540:	40022000 	.word	0x40022000
 8002544:	40021000 	.word	0x40021000
 8002548:	007a1200 	.word	0x007a1200
 800254c:	08006ca8 	.word	0x08006ca8
 8002550:	20000008 	.word	0x20000008
 8002554:	20000000 	.word	0x20000000
 8002558:	08006cc0 	.word	0x08006cc0
 800255c:	08006cd0 	.word	0x08006cd0
 8002560:	003d0900 	.word	0x003d0900

08002564 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8002564:	4917      	ldr	r1, [pc, #92]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x60>)
 8002566:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002568:	f003 020c 	and.w	r2, r3, #12
 800256c:	2a08      	cmp	r2, #8
 800256e:	d001      	beq.n	8002574 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8002570:	4815      	ldr	r0, [pc, #84]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x64>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002572:	4770      	bx	lr
{
 8002574:	b410      	push	{r4}
 8002576:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800257a:	fa92 f2a2 	rbit	r2, r2
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800257e:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 8002582:	fab2 f282 	clz	r2, r2
 8002586:	4c11      	ldr	r4, [pc, #68]	; (80025cc <HAL_RCC_GetSysClockFreq+0x68>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002588:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800258a:	fa20 f202 	lsr.w	r2, r0, r2
 800258e:	5ca0      	ldrb	r0, [r4, r2]
 8002590:	220f      	movs	r2, #15
 8002592:	fa92 f2a2 	rbit	r2, r2
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002596:	03db      	lsls	r3, r3, #15
 8002598:	d50e      	bpl.n	80025b8 <HAL_RCC_GetSysClockFreq+0x54>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800259a:	fab2 f282 	clz	r2, r2
 800259e:	f001 010f 	and.w	r1, r1, #15
 80025a2:	4c0b      	ldr	r4, [pc, #44]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x6c>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025a4:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x64>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80025a6:	40d1      	lsrs	r1, r2
 80025a8:	5c62      	ldrb	r2, [r4, r1]
}
 80025aa:	f85d 4b04 	ldr.w	r4, [sp], #4
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80025b2:	fb03 f000 	mul.w	r0, r3, r0
}
 80025b6:	4770      	bx	lr
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80025b8:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x70>)
}
 80025ba:	f85d 4b04 	ldr.w	r4, [sp], #4
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80025be:	fb03 f000 	mul.w	r0, r3, r0
}
 80025c2:	4770      	bx	lr
 80025c4:	40021000 	.word	0x40021000
 80025c8:	007a1200 	.word	0x007a1200
 80025cc:	08006cc0 	.word	0x08006cc0
 80025d0:	08006cd0 	.word	0x08006cd0
 80025d4:	003d0900 	.word	0x003d0900

080025d8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80025d8:	4b08      	ldr	r3, [pc, #32]	; (80025fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80025da:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	fa92 f2a2 	rbit	r2, r2
 80025e4:	fab2 f282 	clz	r2, r2
 80025e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80025ec:	4904      	ldr	r1, [pc, #16]	; (8002600 <HAL_RCC_GetPCLK1Freq+0x28>)
  return SystemCoreClock;
 80025ee:	4805      	ldr	r0, [pc, #20]	; (8002604 <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80025f0:	40d3      	lsrs	r3, r2
 80025f2:	6800      	ldr	r0, [r0, #0]
 80025f4:	5ccb      	ldrb	r3, [r1, r3]
}    
 80025f6:	40d8      	lsrs	r0, r3
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	40021000 	.word	0x40021000
 8002600:	08006cb8 	.word	0x08006cb8
 8002604:	20000000 	.word	0x20000000

08002608 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002608:	4b08      	ldr	r3, [pc, #32]	; (800262c <HAL_RCC_GetPCLK2Freq+0x24>)
 800260a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	fa92 f2a2 	rbit	r2, r2
 8002614:	fab2 f282 	clz	r2, r2
 8002618:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800261c:	4904      	ldr	r1, [pc, #16]	; (8002630 <HAL_RCC_GetPCLK2Freq+0x28>)
  return SystemCoreClock;
 800261e:	4805      	ldr	r0, [pc, #20]	; (8002634 <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002620:	40d3      	lsrs	r3, r2
 8002622:	6800      	ldr	r0, [r0, #0]
 8002624:	5ccb      	ldrb	r3, [r1, r3]
} 
 8002626:	40d8      	lsrs	r0, r3
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	40021000 	.word	0x40021000
 8002630:	08006cb8 	.word	0x08006cb8
 8002634:	20000000 	.word	0x20000000

08002638 <HAL_RCC_GetClockConfig>:

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002638:	4b0e      	ldr	r3, [pc, #56]	; (8002674 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800263a:	220f      	movs	r2, #15
 800263c:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	f002 0203 	and.w	r2, r2, #3
 8002644:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800264c:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002654:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	08db      	lsrs	r3, r3, #3
{
 800265a:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800265c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002660:	4c05      	ldr	r4, [pc, #20]	; (8002678 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002662:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002664:	6823      	ldr	r3, [r4, #0]
}
 8002666:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	600b      	str	r3, [r1, #0]
}
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	40021000 	.word	0x40021000
 8002678:	40022000 	.word	0x40022000

0800267c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800267c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002680:	6803      	ldr	r3, [r0, #0]
{
 8002682:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002684:	03d8      	lsls	r0, r3, #15
{
 8002686:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002688:	d540      	bpl.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x90>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800268a:	4b6d      	ldr	r3, [pc, #436]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800268c:	69da      	ldr	r2, [r3, #28]
 800268e:	00d1      	lsls	r1, r2, #3
 8002690:	f140 8096 	bpl.w	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002694:	4d6b      	ldr	r5, [pc, #428]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002696:	682b      	ldr	r3, [r5, #0]
 8002698:	05da      	lsls	r2, r3, #23
  FlagStatus       pwrclkchanged = RESET;
 800269a:	f04f 0600 	mov.w	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800269e:	f140 809f 	bpl.w	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x164>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026a2:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8002840 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 80026a6:	f8d8 3020 	ldr.w	r3, [r8, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026aa:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80026ae:	d020      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026b0:	6861      	ldr	r1, [r4, #4]
 80026b2:	f401 7240 	and.w	r2, r1, #768	; 0x300
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d01c      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026ba:	f8d8 1020 	ldr.w	r1, [r8, #32]
 80026be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026c2:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 80026c6:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026ca:	4f5f      	ldr	r7, [pc, #380]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80026cc:	fab2 f282 	clz	r2, r2
 80026d0:	443a      	add	r2, r7
 80026d2:	0092      	lsls	r2, r2, #2
 80026d4:	2501      	movs	r5, #1
 80026d6:	6015      	str	r5, [r2, #0]
 80026d8:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026dc:	fab3 f383 	clz	r3, r3
 80026e0:	443b      	add	r3, r7
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80026e8:	f8c8 0020 	str.w	r0, [r8, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80026ec:	07c8      	lsls	r0, r1, #31
 80026ee:	f100 808b 	bmi.w	8002808 <HAL_RCCEx_PeriphCLKConfig+0x18c>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80026f2:	6861      	ldr	r1, [r4, #4]
 80026f4:	4a52      	ldr	r2, [pc, #328]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80026f6:	6a13      	ldr	r3, [r2, #32]
 80026f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026fc:	430b      	orrs	r3, r1
 80026fe:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002700:	b11e      	cbz	r6, 800270a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002702:	69d3      	ldr	r3, [r2, #28]
 8002704:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002708:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800270a:	6823      	ldr	r3, [r4, #0]
 800270c:	07d9      	lsls	r1, r3, #31
 800270e:	d506      	bpl.n	800271e <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002710:	494b      	ldr	r1, [pc, #300]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002712:	68a0      	ldr	r0, [r4, #8]
 8002714:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8002716:	f022 0203 	bic.w	r2, r2, #3
 800271a:	4302      	orrs	r2, r0
 800271c:	630a      	str	r2, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800271e:	079a      	lsls	r2, r3, #30
 8002720:	d506      	bpl.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002722:	4947      	ldr	r1, [pc, #284]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002724:	68e0      	ldr	r0, [r4, #12]
 8002726:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8002728:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800272c:	4302      	orrs	r2, r0
 800272e:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002730:	075f      	lsls	r7, r3, #29
 8002732:	d506      	bpl.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002734:	4942      	ldr	r1, [pc, #264]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002736:	6920      	ldr	r0, [r4, #16]
 8002738:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800273a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800273e:	4302      	orrs	r2, r0
 8002740:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002742:	069e      	lsls	r6, r3, #26
 8002744:	d506      	bpl.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002746:	493e      	ldr	r1, [pc, #248]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002748:	6960      	ldr	r0, [r4, #20]
 800274a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800274c:	f022 0210 	bic.w	r2, r2, #16
 8002750:	4302      	orrs	r2, r0
 8002752:	630a      	str	r2, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002754:	039d      	lsls	r5, r3, #14
 8002756:	d506      	bpl.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002758:	4939      	ldr	r1, [pc, #228]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800275a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800275c:	684a      	ldr	r2, [r1, #4]
 800275e:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8002762:	4302      	orrs	r2, r0
 8002764:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002766:	0658      	lsls	r0, r3, #25
 8002768:	d506      	bpl.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800276a:	4935      	ldr	r1, [pc, #212]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800276c:	69a0      	ldr	r0, [r4, #24]
 800276e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8002770:	f022 0220 	bic.w	r2, r2, #32
 8002774:	4302      	orrs	r2, r0
 8002776:	630a      	str	r2, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002778:	0619      	lsls	r1, r3, #24
 800277a:	d506      	bpl.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 800277c:	4930      	ldr	r1, [pc, #192]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800277e:	69e0      	ldr	r0, [r4, #28]
 8002780:	684a      	ldr	r2, [r1, #4]
 8002782:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002786:	4302      	orrs	r2, r0
 8002788:	604a      	str	r2, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 800278a:	051a      	lsls	r2, r3, #20
 800278c:	d506      	bpl.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 800278e:	492c      	ldr	r1, [pc, #176]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002790:	6a20      	ldr	r0, [r4, #32]
 8002792:	684a      	ldr	r2, [r1, #4]
 8002794:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 8002798:	4302      	orrs	r2, r0
 800279a:	604a      	str	r2, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800279c:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80027a0:	d103      	bne.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x12e>
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80027a2:	4618      	mov	r0, r3
}
 80027a4:	b003      	add	sp, #12
 80027a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80027aa:	4a25      	ldr	r2, [pc, #148]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80027ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80027ae:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80027b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  return HAL_OK;
 80027b4:	2000      	movs	r0, #0
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80027b6:	430b      	orrs	r3, r1
 80027b8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80027ba:	b003      	add	sp, #12
 80027bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80027c0:	69da      	ldr	r2, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c2:	4d20      	ldr	r5, [pc, #128]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
      __HAL_RCC_PWR_CLK_ENABLE();
 80027c4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80027c8:	61da      	str	r2, [r3, #28]
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d0:	9301      	str	r3, [sp, #4]
 80027d2:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d4:	682b      	ldr	r3, [r5, #0]
 80027d6:	05da      	lsls	r2, r3, #23
      pwrclkchanged = SET;
 80027d8:	f04f 0601 	mov.w	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027dc:	f53f af61 	bmi.w	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x26>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027e0:	682b      	ldr	r3, [r5, #0]
 80027e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80027e8:	f7fe fe62 	bl	80014b0 <HAL_GetTick>
 80027ec:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ee:	682b      	ldr	r3, [r5, #0]
 80027f0:	05db      	lsls	r3, r3, #23
 80027f2:	f53f af56 	bmi.w	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x26>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f6:	f7fe fe5b 	bl	80014b0 <HAL_GetTick>
 80027fa:	1bc0      	subs	r0, r0, r7
 80027fc:	2864      	cmp	r0, #100	; 0x64
 80027fe:	d9f6      	bls.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x172>
          return HAL_TIMEOUT;
 8002800:	2003      	movs	r0, #3
}
 8002802:	b003      	add	sp, #12
 8002804:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        tickstart = HAL_GetTick();
 8002808:	f7fe fe52 	bl	80014b0 <HAL_GetTick>
 800280c:	f04f 0902 	mov.w	r9, #2
 8002810:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002812:	e006      	b.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002814:	f7fe fe4c 	bl	80014b0 <HAL_GetTick>
 8002818:	f241 3388 	movw	r3, #5000	; 0x1388
 800281c:	1bc0      	subs	r0, r0, r7
 800281e:	4298      	cmp	r0, r3
 8002820:	d8ee      	bhi.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x184>
 8002822:	fa99 f3a9 	rbit	r3, r9
 8002826:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800282a:	f8d8 2020 	ldr.w	r2, [r8, #32]
 800282e:	fa99 f3a9 	rbit	r3, r9
 8002832:	fab3 f383 	clz	r3, r3
 8002836:	fa05 f303 	lsl.w	r3, r5, r3
 800283a:	4213      	tst	r3, r2
 800283c:	d0ea      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800283e:	e758      	b.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002840:	40021000 	.word	0x40021000
 8002844:	40007000 	.word	0x40007000
 8002848:	10908100 	.word	0x10908100

0800284c <HAL_SDADC_Init>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_SDADC_Init(SDADC_HandleTypeDef* hsdadc)
{
  /* Check SDADC handle */
  if(hsdadc == NULL)
 800284c:	2800      	cmp	r0, #0
 800284e:	d044      	beq.n	80028da <HAL_SDADC_Init+0x8e>
{
 8002850:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_SDADC_VREF(hsdadc->Init.ReferenceVoltage));
  
  /* Initialize SDADC variables with default values */
  hsdadc->RegularContMode     = SDADC_CONTINUOUS_CONV_OFF;
  hsdadc->InjectedContMode    = SDADC_CONTINUOUS_CONV_OFF;
  hsdadc->InjectedChannelsNbr = 1U;
 8002852:	2201      	movs	r2, #1
  hsdadc->RegularContMode     = SDADC_CONTINUOUS_CONV_OFF;
 8002854:	2300      	movs	r3, #0
  hsdadc->InjConvRemaining    = 1U;
  hsdadc->RegularTrigger      = SDADC_SOFTWARE_TRIGGER;
  hsdadc->InjectedTrigger     = SDADC_SOFTWARE_TRIGGER;
  hsdadc->ExtTriggerEdge      = SDADC_EXT_TRIG_RISING_EDGE;
 8002856:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800285a:	4604      	mov	r4, r0
  hsdadc->RegularMultimode    = SDADC_MULTIMODE_SDADC1_SDADC2;
 800285c:	e9c0 130c 	strd	r1, r3, [r0, #48]	; 0x30
  hsdadc->InjectedContMode    = SDADC_CONTINUOUS_CONV_OFF;
 8002860:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hsdadc->InjConvRemaining    = 1U;
 8002864:	e9c0 2208 	strd	r2, r2, [r0, #32]
  hsdadc->InjectedTrigger     = SDADC_SOFTWARE_TRIGGER;
 8002868:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  hsdadc->InjectedMultimode   = SDADC_MULTIMODE_SDADC1_SDADC2;
 800286c:	6383      	str	r3, [r0, #56]	; 0x38
  hsdadc->ErrorCode           = SDADC_ERROR_NONE;
 800286e:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Init the low level hardware */
  hsdadc->MspInitCallback(hsdadc);
#else
  /* Init the low level hardware */
  HAL_SDADC_MspInit(hsdadc);
 8002870:	f7fe fb80 	bl	8000f74 <HAL_SDADC_MspInit>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */
  
  /* Set idle low power and slow clock modes */
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_SBI|SDADC_CR1_PDI|SDADC_CR1_SLOWCK);
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 8002874:	e9d4 2300 	ldrd	r2, r3, [r4]
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_SBI|SDADC_CR1_PDI|SDADC_CR1_SLOWCK);
 8002878:	6811      	ldr	r1, [r2, #0]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 800287a:	68e0      	ldr	r0, [r4, #12]
  hsdadc->Instance->CR2 &= ~(SDADC_CR2_FAST);
  hsdadc->Instance->CR2 |= hsdadc->Init.FastConversionMode;

  /* Set reference voltage common to all SDADC instances */
  /* Update this parameter only if needed to avoid unnecessary settling time */
  if((SDADC1->CR1 & SDADC_CR1_REFV) != hsdadc->Init.ReferenceVoltage)
 800287c:	6925      	ldr	r5, [r4, #16]
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_SBI|SDADC_CR1_PDI|SDADC_CR1_SLOWCK);
 800287e:	f421 51e0 	bic.w	r1, r1, #7168	; 0x1c00
 8002882:	6011      	str	r1, [r2, #0]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 8002884:	6811      	ldr	r1, [r2, #0]
 8002886:	4303      	orrs	r3, r0
 8002888:	430b      	orrs	r3, r1
 800288a:	6013      	str	r3, [r2, #0]
  hsdadc->Instance->CR2 &= ~(SDADC_CR2_FAST);
 800288c:	6853      	ldr	r3, [r2, #4]
  hsdadc->Instance->CR2 |= hsdadc->Init.FastConversionMode;
 800288e:	68a0      	ldr	r0, [r4, #8]
  if((SDADC1->CR1 & SDADC_CR1_REFV) != hsdadc->Init.ReferenceVoltage)
 8002890:	4913      	ldr	r1, [pc, #76]	; (80028e0 <HAL_SDADC_Init+0x94>)
  hsdadc->Instance->CR2 &= ~(SDADC_CR2_FAST);
 8002892:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002896:	6053      	str	r3, [r2, #4]
  hsdadc->Instance->CR2 |= hsdadc->Init.FastConversionMode;
 8002898:	6853      	ldr	r3, [r2, #4]
 800289a:	4303      	orrs	r3, r0
 800289c:	6053      	str	r3, [r2, #4]
  if((SDADC1->CR1 & SDADC_CR1_REFV) != hsdadc->Init.ReferenceVoltage)
 800289e:	680b      	ldr	r3, [r1, #0]
 80028a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028a4:	42ab      	cmp	r3, r5
 80028a6:	d10c      	bne.n	80028c2 <HAL_SDADC_Init+0x76>
    /* Wait at least 2ms before setting ADON */
    HAL_Delay(2U);
  }
  
  /* Enable SDADC */
  hsdadc->Instance->CR2 |= SDADC_CR2_ADON;
 80028a8:	6853      	ldr	r3, [r2, #4]
 80028aa:	f043 0301 	orr.w	r3, r3, #1
 80028ae:	6053      	str	r3, [r2, #4]

  /* Wait end of stabilization */
  while((hsdadc->Instance->ISR & SDADC_ISR_STABIP) != 0UL)
 80028b0:	6893      	ldr	r3, [r2, #8]
 80028b2:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
 80028b6:	d1fb      	bne.n	80028b0 <HAL_SDADC_Init+0x64>
  {
  }
  
  /* Set SDADC to ready state */
  hsdadc->State = HAL_SDADC_STATE_READY;
 80028b8:	2201      	movs	r2, #1
 80028ba:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  
  /* Return HAL status */
  return HAL_OK;
 80028be:	4618      	mov	r0, r3
}
 80028c0:	bd38      	pop	{r3, r4, r5, pc}
    SDADC1->CR1 &= ~(SDADC_CR1_REFV);
 80028c2:	680b      	ldr	r3, [r1, #0]
 80028c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028c8:	600b      	str	r3, [r1, #0]
    SDADC1->CR1 |= hsdadc->Init.ReferenceVoltage;
 80028ca:	680b      	ldr	r3, [r1, #0]
 80028cc:	431d      	orrs	r5, r3
    HAL_Delay(2U);
 80028ce:	2002      	movs	r0, #2
    SDADC1->CR1 |= hsdadc->Init.ReferenceVoltage;
 80028d0:	600d      	str	r5, [r1, #0]
    HAL_Delay(2U);
 80028d2:	f7fe fdf3 	bl	80014bc <HAL_Delay>
  hsdadc->Instance->CR2 |= SDADC_CR2_ADON;
 80028d6:	6822      	ldr	r2, [r4, #0]
 80028d8:	e7e6      	b.n	80028a8 <HAL_SDADC_Init+0x5c>
    return HAL_ERROR;
 80028da:	2001      	movs	r0, #1
}
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	40016000 	.word	0x40016000

080028e4 <HAL_SDADC_PrepareChannelConfig>:
  assert_param(IS_SDADC_GAIN(ConfParamStruct->Gain));
  assert_param(IS_SDADC_COMMON_MODE(ConfParamStruct->CommonMode));
  assert_param(IS_SDADC_OFFSET_VALUE(ConfParamStruct->Offset));

  /* Check SDADC state is ready */
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 80028e4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d001      	beq.n	80028f0 <HAL_SDADC_PrepareChannelConfig+0xc>
  {
    status = HAL_ERROR;
 80028ec:	2001      	movs	r0, #1
      SDADC_ExitInitMode(hsdadc);
    }
  }
  /* Return function status */
  return status;
}
 80028ee:	4770      	bx	lr
{
 80028f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028f4:	4617      	mov	r7, r2
static HAL_StatusTypeDef SDADC_EnterInitMode(SDADC_HandleTypeDef* hsdadc)
{
  uint32_t tickstart;
  
  /* Set INIT bit on SDADC_CR1 register */
  hsdadc->Instance->CR1 |= SDADC_CR1_INIT;
 80028f6:	6802      	ldr	r2, [r0, #0]
 80028f8:	6813      	ldr	r3, [r2, #0]
 80028fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80028fe:	6013      	str	r3, [r2, #0]

  /* Wait INITRDY bit on SDADC_ISR */
  tickstart = HAL_GetTick();
 8002900:	4604      	mov	r4, r0
 8002902:	460e      	mov	r6, r1
 8002904:	f7fe fdd4 	bl	80014b0 <HAL_GetTick>
 8002908:	4680      	mov	r8, r0
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 800290a:	e005      	b.n	8002918 <HAL_SDADC_PrepareChannelConfig+0x34>
  {
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 800290c:	f7fe fdd0 	bl	80014b0 <HAL_GetTick>
 8002910:	eba0 0308 	sub.w	r3, r0, r8
 8002914:	2bc8      	cmp	r3, #200	; 0xc8
 8002916:	d814      	bhi.n	8002942 <HAL_SDADC_PrepareChannelConfig+0x5e>
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 8002918:	6823      	ldr	r3, [r4, #0]
 800291a:	689d      	ldr	r5, [r3, #8]
 800291c:	2d00      	cmp	r5, #0
 800291e:	daf5      	bge.n	800290c <HAL_SDADC_PrepareChannelConfig+0x28>
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8002920:	e9d7 2100 	ldrd	r2, r1, [r7]
 8002924:	430a      	orrs	r2, r1
                                             ConfParamStruct->CommonMode | \
 8002926:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
                       (uint32_t)(ConfIndex << 2UL));
 800292a:	00b6      	lsls	r6, r6, #2
                                             ConfParamStruct->Gain | \
 800292c:	4302      	orrs	r2, r0
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 800292e:	3620      	adds	r6, #32
                                             ConfParamStruct->CommonMode | \
 8002930:	430a      	orrs	r2, r1
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8002932:	519a      	str	r2, [r3, r6]
  * @retval None.
  */
static void SDADC_ExitInitMode(SDADC_HandleTypeDef* hsdadc)
{
  /* Reset INIT bit in SDADC_CR1 register */
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_INIT);
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
  HAL_StatusTypeDef status = HAL_OK;
 800293a:	2000      	movs	r0, #0
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_INIT);
 800293c:	601a      	str	r2, [r3, #0]
}
 800293e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8002942:	23ff      	movs	r3, #255	; 0xff
 8002944:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8002948:	2003      	movs	r0, #3
 800294a:	e7f8      	b.n	800293e <HAL_SDADC_PrepareChannelConfig+0x5a>

0800294c <HAL_SDADC_AssociateChannelConfig>:
{
 800294c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 800294e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002952:	2b01      	cmp	r3, #1
 8002954:	d001      	beq.n	800295a <HAL_SDADC_AssociateChannelConfig+0xe>
    status = HAL_ERROR;
 8002956:	2001      	movs	r0, #1
}
 8002958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800295a:	4616      	mov	r6, r2
  hsdadc->Instance->CR1 |= SDADC_CR1_INIT;
 800295c:	6802      	ldr	r2, [r0, #0]
 800295e:	6813      	ldr	r3, [r2, #0]
 8002960:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002964:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8002966:	4604      	mov	r4, r0
 8002968:	460d      	mov	r5, r1
 800296a:	f7fe fda1 	bl	80014b0 <HAL_GetTick>
 800296e:	4607      	mov	r7, r0
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 8002970:	e004      	b.n	800297c <HAL_SDADC_AssociateChannelConfig+0x30>
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 8002972:	f7fe fd9d 	bl	80014b0 <HAL_GetTick>
 8002976:	1bc3      	subs	r3, r0, r7
 8002978:	2bc8      	cmp	r3, #200	; 0xc8
 800297a:	d81a      	bhi.n	80029b2 <HAL_SDADC_AssociateChannelConfig+0x66>
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 800297c:	6823      	ldr	r3, [r4, #0]
 800297e:	6899      	ldr	r1, [r3, #8]
 8002980:	2900      	cmp	r1, #0
 8002982:	daf6      	bge.n	8002972 <HAL_SDADC_AssociateChannelConfig+0x26>
      if(Channel != SDADC_CHANNEL_8)
 8002984:	4a0e      	ldr	r2, [pc, #56]	; (80029c0 <HAL_SDADC_AssociateChannelConfig+0x74>)
 8002986:	4295      	cmp	r5, r2
 8002988:	d018      	beq.n	80029bc <HAL_SDADC_AssociateChannelConfig+0x70>
        hsdadc->Instance->CONFCHR1 &= (uint32_t) ~((uint32_t)SDADC_CONFCHR1_CONFCH0 << ((channelnum << 2UL) & 0x1FUL));
 800298a:	0bad      	lsrs	r5, r5, #14
 800298c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800298e:	f005 051c 	and.w	r5, r5, #28
 8002992:	2103      	movs	r1, #3
 8002994:	40a9      	lsls	r1, r5
 8002996:	ea22 0201 	bic.w	r2, r2, r1
 800299a:	641a      	str	r2, [r3, #64]	; 0x40
        hsdadc->Instance->CONFCHR1 |= (uint32_t) (ConfIndex << ((channelnum << 2UL) & 0x1FUL));
 800299c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800299e:	fa06 f505 	lsl.w	r5, r6, r5
 80029a2:	4315      	orrs	r5, r2
 80029a4:	641d      	str	r5, [r3, #64]	; 0x40
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_INIT);
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
  HAL_StatusTypeDef status = HAL_OK;
 80029ac:	2000      	movs	r0, #0
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_INIT);
 80029ae:	601a      	str	r2, [r3, #0]
}
 80029b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 80029b2:	23ff      	movs	r3, #255	; 0xff
 80029b4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      status = HAL_TIMEOUT;
 80029b8:	2003      	movs	r0, #3
}
 80029ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hsdadc->Instance->CONFCHR2 = (uint32_t) (ConfIndex);
 80029bc:	645e      	str	r6, [r3, #68]	; 0x44
 80029be:	e7f2      	b.n	80029a6 <HAL_SDADC_AssociateChannelConfig+0x5a>
 80029c0:	00080100 	.word	0x00080100

080029c4 <HAL_SDADC_ConfigChannel>:
  if((hsdadc->State != HAL_SDADC_STATE_RESET) && (hsdadc->State != HAL_SDADC_STATE_ERROR))
 80029c4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80029c8:	3b01      	subs	r3, #1
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2bfd      	cmp	r3, #253	; 0xfd
 80029ce:	d810      	bhi.n	80029f2 <HAL_SDADC_ConfigChannel+0x2e>
    hsdadc->Instance->CR2 &= (uint32_t) ~(SDADC_CR2_RCH | SDADC_CR2_RCONT);
 80029d0:	6803      	ldr	r3, [r0, #0]
{
 80029d2:	b430      	push	{r4, r5}
    hsdadc->Instance->CR2 &= (uint32_t) ~(SDADC_CR2_RCH | SDADC_CR2_RCONT);
 80029d4:	685c      	ldr	r4, [r3, #4]
    if(ContinuousMode == SDADC_CONTINUOUS_CONV_ON)
 80029d6:	2a01      	cmp	r2, #1
    hsdadc->Instance->CR2 &= (uint32_t) ~(SDADC_CR2_RCH | SDADC_CR2_RCONT);
 80029d8:	f424 049e 	bic.w	r4, r4, #5177344	; 0x4f0000
 80029dc:	605c      	str	r4, [r3, #4]
    if(ContinuousMode == SDADC_CONTINUOUS_CONV_ON)
 80029de:	d00a      	beq.n	80029f6 <HAL_SDADC_ConfigChannel+0x32>
      hsdadc->Instance->CR2 |= (uint32_t) ((Channel & SDADC_MSB_MASK));    
 80029e0:	685c      	ldr	r4, [r3, #4]
 80029e2:	0c09      	lsrs	r1, r1, #16
 80029e4:	0409      	lsls	r1, r1, #16
 80029e6:	4321      	orrs	r1, r4
 80029e8:	6059      	str	r1, [r3, #4]
}
 80029ea:	bc30      	pop	{r4, r5}
    hsdadc->RegularContMode = ContinuousMode;
 80029ec:	6182      	str	r2, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80029ee:	2000      	movs	r0, #0
}
 80029f0:	4770      	bx	lr
    status = HAL_ERROR;
 80029f2:	2001      	movs	r0, #1
}
 80029f4:	4770      	bx	lr
      hsdadc->Instance->CR2 |= (uint32_t) ((Channel & SDADC_MSB_MASK) | SDADC_CR2_RCONT);    
 80029f6:	4c05      	ldr	r4, [pc, #20]	; (8002a0c <HAL_SDADC_ConfigChannel+0x48>)
 80029f8:	685d      	ldr	r5, [r3, #4]
 80029fa:	400c      	ands	r4, r1
 80029fc:	432c      	orrs	r4, r5
 80029fe:	f444 0480 	orr.w	r4, r4, #4194304	; 0x400000
 8002a02:	605c      	str	r4, [r3, #4]
    hsdadc->RegularContMode = ContinuousMode;
 8002a04:	6182      	str	r2, [r0, #24]
}
 8002a06:	bc30      	pop	{r4, r5}
  HAL_StatusTypeDef status = HAL_OK;
 8002a08:	2000      	movs	r0, #0
}
 8002a0a:	4770      	bx	lr
 8002a0c:	ffbf0000 	.word	0xffbf0000

08002a10 <HAL_SDADC_SelectRegularTrigger>:
  if((hsdadc->Instance == SDADC1) && (Trigger == SDADC_SYNCHRONOUS_TRIGGER))
 8002a10:	4b09      	ldr	r3, [pc, #36]	; (8002a38 <HAL_SDADC_SelectRegularTrigger+0x28>)
 8002a12:	6802      	ldr	r2, [r0, #0]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d00b      	beq.n	8002a30 <HAL_SDADC_SelectRegularTrigger+0x20>
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8002a18:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002a1c:	1e5a      	subs	r2, r3, #1
 8002a1e:	2a01      	cmp	r2, #1
 8002a20:	d903      	bls.n	8002a2a <HAL_SDADC_SelectRegularTrigger+0x1a>
          (hsdadc->State == HAL_SDADC_STATE_CALIB) || \
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d001      	beq.n	8002a2a <HAL_SDADC_SelectRegularTrigger+0x1a>
    status = HAL_ERROR;
 8002a26:	2001      	movs	r0, #1
}
 8002a28:	4770      	bx	lr
    hsdadc->RegularTrigger = Trigger;
 8002a2a:	6281      	str	r1, [r0, #40]	; 0x28
  HAL_StatusTypeDef status = HAL_OK;
 8002a2c:	2000      	movs	r0, #0
    hsdadc->RegularTrigger = Trigger;
 8002a2e:	4770      	bx	lr
  if((hsdadc->Instance == SDADC1) && (Trigger == SDADC_SYNCHRONOUS_TRIGGER))
 8002a30:	2901      	cmp	r1, #1
 8002a32:	d1f1      	bne.n	8002a18 <HAL_SDADC_SelectRegularTrigger+0x8>
    status = HAL_ERROR;
 8002a34:	2001      	movs	r0, #1
}
 8002a36:	4770      	bx	lr
 8002a38:	40016000 	.word	0x40016000

08002a3c <HAL_SDADC_Start>:
{
 8002a3c:	b538      	push	{r3, r4, r5, lr}
  if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8002a3e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002a42:	2b01      	cmp	r3, #1
{
 8002a44:	4604      	mov	r4, r0
  if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8002a46:	d003      	beq.n	8002a50 <HAL_SDADC_Start+0x14>
 8002a48:	2b04      	cmp	r3, #4
 8002a4a:	d001      	beq.n	8002a50 <HAL_SDADC_Start+0x14>
    status = HAL_ERROR;
 8002a4c:	2001      	movs	r0, #1
}
 8002a4e:	bd38      	pop	{r3, r4, r5, pc}
static HAL_StatusTypeDef SDADC_RegConvStart(SDADC_HandleTypeDef* hsdadc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check regular trigger */
  if(hsdadc->RegularTrigger == SDADC_SOFTWARE_TRIGGER)
 8002a50:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002a52:	b962      	cbnz	r2, 8002a6e <HAL_SDADC_Start+0x32>
  {
    /* Set RSWSTART bit in SDADC_CR2 register */
    hsdadc->Instance->CR2 |= SDADC_CR2_RSWSTART;
 8002a54:	6821      	ldr	r1, [r4, #0]
 8002a56:	684a      	ldr	r2, [r1, #4]
 8002a58:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002a5c:	604a      	str	r2, [r1, #4]
  }
  /* Update SDADC state only if status is OK */
  if(status == HAL_OK)
  {
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
                    HAL_SDADC_STATE_REG : HAL_SDADC_STATE_REG_INJ;
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	bf0c      	ite	eq
 8002a62:	2303      	moveq	r3, #3
 8002a64:	2305      	movne	r3, #5
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 8002a66:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8002a6a:	2000      	movs	r0, #0
}
 8002a6c:	bd38      	pop	{r3, r4, r5, pc}
  hsdadc->Instance->CR1 |= SDADC_CR1_INIT;
 8002a6e:	6822      	ldr	r2, [r4, #0]
 8002a70:	6813      	ldr	r3, [r2, #0]
 8002a72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a76:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8002a78:	f7fe fd1a 	bl	80014b0 <HAL_GetTick>
 8002a7c:	4605      	mov	r5, r0
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 8002a7e:	e004      	b.n	8002a8a <HAL_SDADC_Start+0x4e>
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 8002a80:	f7fe fd16 	bl	80014b0 <HAL_GetTick>
 8002a84:	1b40      	subs	r0, r0, r5
 8002a86:	28c8      	cmp	r0, #200	; 0xc8
 8002a88:	d80e      	bhi.n	8002aa8 <HAL_SDADC_Start+0x6c>
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 8002a8a:	6823      	ldr	r3, [r4, #0]
 8002a8c:	689a      	ldr	r2, [r3, #8]
 8002a8e:	2a00      	cmp	r2, #0
 8002a90:	daf6      	bge.n	8002a80 <HAL_SDADC_Start+0x44>
      hsdadc->Instance->CR1 |= SDADC_CR1_RSYNC;
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a98:	601a      	str	r2, [r3, #0]
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_INIT);
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002aa0:	601a      	str	r2, [r3, #0]
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 8002aa2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002aa6:	e7da      	b.n	8002a5e <HAL_SDADC_Start+0x22>
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8002aa8:	23ff      	movs	r3, #255	; 0xff
 8002aaa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8002aae:	2003      	movs	r0, #3
}
 8002ab0:	bd38      	pop	{r3, r4, r5, pc}
 8002ab2:	bf00      	nop

08002ab4 <HAL_SDADC_GetValue>:
  return hsdadc->Instance->RDATAR;
 8002ab4:	6803      	ldr	r3, [r0, #0]
 8002ab6:	6e58      	ldr	r0, [r3, #100]	; 0x64
}
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop

08002abc <HAL_SDADC_CalibrationCpltCallback>:
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop

08002ac0 <HAL_SDADC_ConvCpltCallback>:
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop

08002ac4 <HAL_SDADC_InjectedConvCpltCallback>:
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop

08002ac8 <HAL_SDADC_ErrorCallback>:
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop

08002acc <HAL_SDADC_PollForConversion>:
{
 8002acc:	b570      	push	{r4, r5, r6, lr}
  if((hsdadc->State != HAL_SDADC_STATE_REG) && \
 8002ace:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002ad2:	2b03      	cmp	r3, #3
{
 8002ad4:	4604      	mov	r4, r0
 8002ad6:	460d      	mov	r5, r1
  if((hsdadc->State != HAL_SDADC_STATE_REG) && \
 8002ad8:	d001      	beq.n	8002ade <HAL_SDADC_PollForConversion+0x12>
 8002ada:	2b05      	cmp	r3, #5
 8002adc:	d125      	bne.n	8002b2a <HAL_SDADC_PollForConversion+0x5e>
    tickstart = HAL_GetTick();  
 8002ade:	f7fe fce7 	bl	80014b0 <HAL_GetTick>
 8002ae2:	4606      	mov	r6, r0
    while((hsdadc->Instance->ISR & SDADC_ISR_REOCF) != SDADC_ISR_REOCF)
 8002ae4:	1c6b      	adds	r3, r5, #1
 8002ae6:	6822      	ldr	r2, [r4, #0]
 8002ae8:	d113      	bne.n	8002b12 <HAL_SDADC_PollForConversion+0x46>
 8002aea:	6893      	ldr	r3, [r2, #8]
 8002aec:	0718      	lsls	r0, r3, #28
 8002aee:	d5fc      	bpl.n	8002aea <HAL_SDADC_PollForConversion+0x1e>
    if((hsdadc->Instance->ISR & SDADC_ISR_ROVRF) == SDADC_ISR_ROVRF)
 8002af0:	6893      	ldr	r3, [r2, #8]
 8002af2:	06db      	lsls	r3, r3, #27
 8002af4:	d41d      	bmi.n	8002b32 <HAL_SDADC_PollForConversion+0x66>
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8002af6:	69a0      	ldr	r0, [r4, #24]
 8002af8:	b9c8      	cbnz	r0, 8002b2e <HAL_SDADC_PollForConversion+0x62>
 8002afa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002afc:	b943      	cbnz	r3, 8002b10 <HAL_SDADC_PollForConversion+0x44>
                      HAL_SDADC_STATE_READY : HAL_SDADC_STATE_INJ;
 8002afe:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8002b02:	2a03      	cmp	r2, #3
    return HAL_OK;
 8002b04:	4618      	mov	r0, r3
                      HAL_SDADC_STATE_READY : HAL_SDADC_STATE_INJ;
 8002b06:	bf0c      	ite	eq
 8002b08:	2301      	moveq	r3, #1
 8002b0a:	2304      	movne	r3, #4
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_REG) ? \
 8002b0c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002b10:	bd70      	pop	{r4, r5, r6, pc}
    while((hsdadc->Instance->ISR & SDADC_ISR_REOCF) != SDADC_ISR_REOCF)
 8002b12:	6893      	ldr	r3, [r2, #8]
 8002b14:	0719      	lsls	r1, r3, #28
 8002b16:	d4eb      	bmi.n	8002af0 <HAL_SDADC_PollForConversion+0x24>
        if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0UL))
 8002b18:	f7fe fcca 	bl	80014b0 <HAL_GetTick>
 8002b1c:	1b80      	subs	r0, r0, r6
 8002b1e:	42a8      	cmp	r0, r5
 8002b20:	d801      	bhi.n	8002b26 <HAL_SDADC_PollForConversion+0x5a>
 8002b22:	2d00      	cmp	r5, #0
 8002b24:	d1de      	bne.n	8002ae4 <HAL_SDADC_PollForConversion+0x18>
          return HAL_TIMEOUT;
 8002b26:	2003      	movs	r0, #3
}
 8002b28:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002b2a:	2001      	movs	r0, #1
}
 8002b2c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_OK;
 8002b2e:	2000      	movs	r0, #0
}
 8002b30:	bd70      	pop	{r4, r5, r6, pc}
      hsdadc->ErrorCode = SDADC_ERROR_REGULAR_OVERRUN;
 8002b32:	2301      	movs	r3, #1
 8002b34:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_SDADC_ErrorCallback(hsdadc);
 8002b36:	4620      	mov	r0, r4
 8002b38:	f7ff ffc6 	bl	8002ac8 <HAL_SDADC_ErrorCallback>
      hsdadc->Instance->CLRISR |= SDADC_ISR_CLRROVRF;
 8002b3c:	6822      	ldr	r2, [r4, #0]
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8002b3e:	69a0      	ldr	r0, [r4, #24]
      hsdadc->Instance->CLRISR |= SDADC_ISR_CLRROVRF;
 8002b40:	68d3      	ldr	r3, [r2, #12]
 8002b42:	f043 0310 	orr.w	r3, r3, #16
 8002b46:	60d3      	str	r3, [r2, #12]
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8002b48:	2800      	cmp	r0, #0
 8002b4a:	d1f0      	bne.n	8002b2e <HAL_SDADC_PollForConversion+0x62>
 8002b4c:	e7d5      	b.n	8002afa <HAL_SDADC_PollForConversion+0x2e>
 8002b4e:	bf00      	nop

08002b50 <HAL_SDADC_IRQHandler>:
  uint32_t tmp_isr = hsdadc->Instance->ISR;
 8002b50:	6802      	ldr	r2, [r0, #0]
 8002b52:	6891      	ldr	r1, [r2, #8]
  uint32_t tmp_cr1 = hsdadc->Instance->CR1;
 8002b54:	6813      	ldr	r3, [r2, #0]
  if(((tmp_cr1 & SDADC_CR1_REOCIE) == SDADC_CR1_REOCIE) &&
 8002b56:	f013 0f08 	tst.w	r3, #8
{
 8002b5a:	b510      	push	{r4, lr}
 8002b5c:	4604      	mov	r4, r0
  if(((tmp_cr1 & SDADC_CR1_REOCIE) == SDADC_CR1_REOCIE) &&
 8002b5e:	d002      	beq.n	8002b66 <HAL_SDADC_IRQHandler+0x16>
 8002b60:	f011 0f08 	tst.w	r1, #8
 8002b64:	d11a      	bne.n	8002b9c <HAL_SDADC_IRQHandler+0x4c>
  else if(((tmp_cr1 & SDADC_CR1_JEOCIE) == SDADC_CR1_JEOCIE) &&
 8002b66:	0798      	lsls	r0, r3, #30
 8002b68:	d501      	bpl.n	8002b6e <HAL_SDADC_IRQHandler+0x1e>
 8002b6a:	0788      	lsls	r0, r1, #30
 8002b6c:	d42c      	bmi.n	8002bc8 <HAL_SDADC_IRQHandler+0x78>
  else if(((tmp_cr1 & SDADC_CR1_EOCALIE) == SDADC_CR1_EOCALIE) &&
 8002b6e:	07d8      	lsls	r0, r3, #31
 8002b70:	d501      	bpl.n	8002b76 <HAL_SDADC_IRQHandler+0x26>
 8002b72:	07c8      	lsls	r0, r1, #31
 8002b74:	d448      	bmi.n	8002c08 <HAL_SDADC_IRQHandler+0xb8>
  else if(((tmp_cr1 & SDADC_CR1_ROVRIE) == SDADC_CR1_ROVRIE) &&
 8002b76:	06d8      	lsls	r0, r3, #27
 8002b78:	d404      	bmi.n	8002b84 <HAL_SDADC_IRQHandler+0x34>
  else if(((tmp_cr1 & SDADC_CR1_JOVRIE) == SDADC_CR1_JOVRIE) &&
 8002b7a:	0758      	lsls	r0, r3, #29
 8002b7c:	d501      	bpl.n	8002b82 <HAL_SDADC_IRQHandler+0x32>
 8002b7e:	074b      	lsls	r3, r1, #29
 8002b80:	d451      	bmi.n	8002c26 <HAL_SDADC_IRQHandler+0xd6>
}
 8002b82:	bd10      	pop	{r4, pc}
  else if(((tmp_cr1 & SDADC_CR1_ROVRIE) == SDADC_CR1_ROVRIE) &&
 8002b84:	06c8      	lsls	r0, r1, #27
 8002b86:	d5f8      	bpl.n	8002b7a <HAL_SDADC_IRQHandler+0x2a>
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLRROVRF;
 8002b88:	68d3      	ldr	r3, [r2, #12]
    hsdadc->ErrorCode = SDADC_ERROR_REGULAR_OVERRUN;
 8002b8a:	2101      	movs	r1, #1
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLRROVRF;
 8002b8c:	f043 0310 	orr.w	r3, r3, #16
 8002b90:	60d3      	str	r3, [r2, #12]
    HAL_SDADC_ErrorCallback(hsdadc);
 8002b92:	4620      	mov	r0, r4
    hsdadc->ErrorCode = SDADC_ERROR_REGULAR_OVERRUN;
 8002b94:	6421      	str	r1, [r4, #64]	; 0x40
    HAL_SDADC_ErrorCallback(hsdadc);
 8002b96:	f7ff ff97 	bl	8002ac8 <HAL_SDADC_ErrorCallback>
}
 8002b9a:	bd10      	pop	{r4, pc}
    HAL_SDADC_ConvCpltCallback(hsdadc);
 8002b9c:	f7ff ff90 	bl	8002ac0 <HAL_SDADC_ConvCpltCallback>
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8002ba0:	69a3      	ldr	r3, [r4, #24]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1ed      	bne.n	8002b82 <HAL_SDADC_IRQHandler+0x32>
 8002ba6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1ea      	bne.n	8002b82 <HAL_SDADC_IRQHandler+0x32>
      hsdadc->Instance->CR1 &= ~(SDADC_CR1_REOCIE | SDADC_CR1_ROVRIE);
 8002bac:	6822      	ldr	r2, [r4, #0]
 8002bae:	6813      	ldr	r3, [r2, #0]
 8002bb0:	f023 0318 	bic.w	r3, r3, #24
 8002bb4:	6013      	str	r3, [r2, #0]
                      HAL_SDADC_STATE_READY : HAL_SDADC_STATE_INJ;
 8002bb6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002bba:	2b03      	cmp	r3, #3
 8002bbc:	bf0c      	ite	eq
 8002bbe:	2301      	moveq	r3, #1
 8002bc0:	2304      	movne	r3, #4
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_REG) ? \
 8002bc2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002bc6:	bd10      	pop	{r4, pc}
    HAL_SDADC_InjectedConvCpltCallback(hsdadc);
 8002bc8:	4620      	mov	r0, r4
 8002bca:	f7ff ff7b 	bl	8002ac4 <HAL_SDADC_InjectedConvCpltCallback>
    hsdadc->InjConvRemaining--;
 8002bce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	6263      	str	r3, [r4, #36]	; 0x24
    if(hsdadc->InjConvRemaining ==0UL)
 8002bd4:	b90b      	cbnz	r3, 8002bda <HAL_SDADC_IRQHandler+0x8a>
      hsdadc->InjConvRemaining = hsdadc->InjectedChannelsNbr;
 8002bd6:	6a23      	ldr	r3, [r4, #32]
 8002bd8:	6263      	str	r3, [r4, #36]	; 0x24
    if((hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8002bda:	69e2      	ldr	r2, [r4, #28]
 8002bdc:	2a00      	cmp	r2, #0
 8002bde:	d1d0      	bne.n	8002b82 <HAL_SDADC_IRQHandler+0x32>
 8002be0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002be2:	2a00      	cmp	r2, #0
 8002be4:	d1cd      	bne.n	8002b82 <HAL_SDADC_IRQHandler+0x32>
       (hsdadc->InjectedTrigger == SDADC_SOFTWARE_TRIGGER) && \
 8002be6:	6a22      	ldr	r2, [r4, #32]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d1ca      	bne.n	8002b82 <HAL_SDADC_IRQHandler+0x32>
      hsdadc->Instance->CR1 &= ~(SDADC_CR1_JEOCIE | SDADC_CR1_JOVRIE);
 8002bec:	6822      	ldr	r2, [r4, #0]
 8002bee:	6813      	ldr	r3, [r2, #0]
 8002bf0:	f023 0306 	bic.w	r3, r3, #6
 8002bf4:	6013      	str	r3, [r2, #0]
                      HAL_SDADC_STATE_READY : HAL_SDADC_STATE_REG;
 8002bf6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	bf0c      	ite	eq
 8002bfe:	2301      	moveq	r3, #1
 8002c00:	2303      	movne	r3, #3
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_INJ) ? \
 8002c02:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002c06:	bd10      	pop	{r4, pc}
    hsdadc->Instance->CR1 &= ~(SDADC_CR1_EOCALIE);
 8002c08:	6813      	ldr	r3, [r2, #0]
 8002c0a:	f023 0301 	bic.w	r3, r3, #1
 8002c0e:	6013      	str	r3, [r2, #0]
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLREOCALF;
 8002c10:	68d3      	ldr	r3, [r2, #12]
 8002c12:	f043 0301 	orr.w	r3, r3, #1
 8002c16:	60d3      	str	r3, [r2, #12]
    HAL_SDADC_CalibrationCpltCallback(hsdadc);
 8002c18:	4620      	mov	r0, r4
 8002c1a:	f7ff ff4f 	bl	8002abc <HAL_SDADC_CalibrationCpltCallback>
    hsdadc->State = HAL_SDADC_STATE_READY;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002c24:	bd10      	pop	{r4, pc}
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLRJOVRF;
 8002c26:	68d3      	ldr	r3, [r2, #12]
    hsdadc->ErrorCode = SDADC_ERROR_INJECTED_OVERRUN;
 8002c28:	2102      	movs	r1, #2
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLRJOVRF;
 8002c2a:	f043 0304 	orr.w	r3, r3, #4
 8002c2e:	60d3      	str	r3, [r2, #12]
    HAL_SDADC_ErrorCallback(hsdadc);
 8002c30:	4620      	mov	r0, r4
    hsdadc->ErrorCode = SDADC_ERROR_INJECTED_OVERRUN;
 8002c32:	6421      	str	r1, [r4, #64]	; 0x40
    HAL_SDADC_ErrorCallback(hsdadc);
 8002c34:	f7ff ff48 	bl	8002ac8 <HAL_SDADC_ErrorCallback>
}
 8002c38:	bd10      	pop	{r4, pc}
 8002c3a:	bf00      	nop

08002c3c <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c3c:	2800      	cmp	r0, #0
 8002c3e:	d071      	beq.n	8002d24 <HAL_TIM_Base_Init+0xe8>
{
 8002c40:	b510      	push	{r4, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c42:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002c46:	4604      	mov	r4, r0
 8002c48:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d064      	beq.n	8002d1a <HAL_TIM_Base_Init+0xde>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c50:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002c52:	2302      	movs	r3, #2
 8002c54:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c58:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 8002c5c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c5e:	d04a      	beq.n	8002cf6 <HAL_TIM_Base_Init+0xba>
 8002c60:	493c      	ldr	r1, [pc, #240]	; (8002d54 <HAL_TIM_Base_Init+0x118>)
 8002c62:	428a      	cmp	r2, r1
 8002c64:	d047      	beq.n	8002cf6 <HAL_TIM_Base_Init+0xba>
 8002c66:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002c6a:	428a      	cmp	r2, r1
 8002c6c:	d043      	beq.n	8002cf6 <HAL_TIM_Base_Init+0xba>
 8002c6e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002c72:	428a      	cmp	r2, r1
 8002c74:	d03f      	beq.n	8002cf6 <HAL_TIM_Base_Init+0xba>
 8002c76:	f501 31a8 	add.w	r1, r1, #86016	; 0x15000
 8002c7a:	428a      	cmp	r2, r1
 8002c7c:	d054      	beq.n	8002d28 <HAL_TIM_Base_Init+0xec>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c7e:	4936      	ldr	r1, [pc, #216]	; (8002d58 <HAL_TIM_Base_Init+0x11c>)
 8002c80:	428a      	cmp	r2, r1
 8002c82:	d03c      	beq.n	8002cfe <HAL_TIM_Base_Init+0xc2>
 8002c84:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002c88:	428a      	cmp	r2, r1
 8002c8a:	d038      	beq.n	8002cfe <HAL_TIM_Base_Init+0xc2>
 8002c8c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002c90:	428a      	cmp	r2, r1
 8002c92:	d034      	beq.n	8002cfe <HAL_TIM_Base_Init+0xc2>
 8002c94:	f501 3190 	add.w	r1, r1, #73728	; 0x12000
 8002c98:	428a      	cmp	r2, r1
 8002c9a:	d04a      	beq.n	8002d32 <HAL_TIM_Base_Init+0xf6>
 8002c9c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002ca0:	428a      	cmp	r2, r1
 8002ca2:	d046      	beq.n	8002d32 <HAL_TIM_Base_Init+0xf6>
 8002ca4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002ca8:	428a      	cmp	r2, r1
 8002caa:	d042      	beq.n	8002d32 <HAL_TIM_Base_Init+0xf6>
 8002cac:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
 8002cb0:	428a      	cmp	r2, r1
 8002cb2:	d024      	beq.n	8002cfe <HAL_TIM_Base_Init+0xc2>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cb4:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cb6:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cbc:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8002cbe:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cc0:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cc2:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002cc4:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cca:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cce:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002cd2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002cd6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002cda:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cde:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002ce2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002ce6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8002cea:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8002cee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002cf2:	2000      	movs	r0, #0
}
 8002cf4:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8002cf6:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002cfc:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cfe:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d00:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d06:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d0c:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d0e:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8002d10:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8002d12:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d14:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002d16:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d18:	e7d5      	b.n	8002cc6 <HAL_TIM_Base_Init+0x8a>
    htim->Lock = HAL_UNLOCKED;
 8002d1a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002d1e:	f7fe faab 	bl	8001278 <HAL_TIM_Base_MspInit>
 8002d22:	e795      	b.n	8002c50 <HAL_TIM_Base_Init+0x14>
    return HAL_ERROR;
 8002d24:	2001      	movs	r0, #1
}
 8002d26:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8002d28:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002d2e:	430b      	orrs	r3, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d30:	e7a5      	b.n	8002c7e <HAL_TIM_Base_Init+0x42>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d32:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d34:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d3a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d40:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8002d42:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d44:	68e3      	ldr	r3, [r4, #12]
 8002d46:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002d48:	6863      	ldr	r3, [r4, #4]
 8002d4a:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8002d4c:	6963      	ldr	r3, [r4, #20]
 8002d4e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d50:	e7b9      	b.n	8002cc6 <HAL_TIM_Base_Init+0x8a>
 8002d52:	bf00      	nop
 8002d54:	40000400 	.word	0x40000400
 8002d58:	40001800 	.word	0x40001800

08002d5c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002d5c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d12c      	bne.n	8002dbe <HAL_TIM_Base_Start_IT+0x62>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d64:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002d66:	2202      	movs	r2, #2
 8002d68:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d6c:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d72:	f042 0201 	orr.w	r2, r2, #1
 8002d76:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d78:	d016      	beq.n	8002da8 <HAL_TIM_Base_Start_IT+0x4c>
 8002d7a:	4a13      	ldr	r2, [pc, #76]	; (8002dc8 <HAL_TIM_Base_Start_IT+0x6c>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d013      	beq.n	8002da8 <HAL_TIM_Base_Start_IT+0x4c>
 8002d80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d00f      	beq.n	8002da8 <HAL_TIM_Base_Start_IT+0x4c>
 8002d88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d00b      	beq.n	8002da8 <HAL_TIM_Base_Start_IT+0x4c>
 8002d90:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d007      	beq.n	8002da8 <HAL_TIM_Base_Start_IT+0x4c>
 8002d98:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d003      	beq.n	8002da8 <HAL_TIM_Base_Start_IT+0x4c>
 8002da0:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d104      	bne.n	8002db2 <HAL_TIM_Base_Start_IT+0x56>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002da8:	689a      	ldr	r2, [r3, #8]
 8002daa:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dae:	2a06      	cmp	r2, #6
 8002db0:	d007      	beq.n	8002dc2 <HAL_TIM_Base_Start_IT+0x66>
    __HAL_TIM_ENABLE(htim);
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 8002db8:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	4770      	bx	lr
    return HAL_ERROR;
 8002dbe:	2001      	movs	r0, #1
 8002dc0:	4770      	bx	lr
  return HAL_OK;
 8002dc2:	2000      	movs	r0, #0
}
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	40000400 	.word	0x40000400

08002dcc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002dcc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d075      	beq.n	8002ec0 <HAL_TIM_ConfigClockSource+0xf4>
 8002dd4:	4602      	mov	r2, r0
{
 8002dd6:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8002dd8:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8002dda:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002ddc:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002de0:	2001      	movs	r0, #1
 8002de2:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002de6:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002de8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dec:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002df0:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8002df2:	680b      	ldr	r3, [r1, #0]
 8002df4:	2b60      	cmp	r3, #96	; 0x60
 8002df6:	d065      	beq.n	8002ec4 <HAL_TIM_ConfigClockSource+0xf8>
 8002df8:	d824      	bhi.n	8002e44 <HAL_TIM_ConfigClockSource+0x78>
 8002dfa:	2b40      	cmp	r3, #64	; 0x40
 8002dfc:	d07c      	beq.n	8002ef8 <HAL_TIM_ConfigClockSource+0x12c>
 8002dfe:	d94b      	bls.n	8002e98 <HAL_TIM_ConfigClockSource+0xcc>
 8002e00:	2b50      	cmp	r3, #80	; 0x50
 8002e02:	d117      	bne.n	8002e34 <HAL_TIM_ConfigClockSource+0x68>
                               sClockSourceConfig->ClockPolarity,
 8002e04:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8002e06:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e08:	6a21      	ldr	r1, [r4, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e0a:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8002e0e:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e10:	6a23      	ldr	r3, [r4, #32]
 8002e12:	f023 0301 	bic.w	r3, r3, #1
 8002e16:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e18:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e1e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e22:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8002e24:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e26:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e2c:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 8002e30:	2000      	movs	r0, #0
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e32:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002e34:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8002e36:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8002e38:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002e3c:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8002e40:	bc30      	pop	{r4, r5}
 8002e42:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8002e44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e48:	d038      	beq.n	8002ebc <HAL_TIM_ConfigClockSource+0xf0>
 8002e4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e4e:	d110      	bne.n	8002e72 <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e50:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002e54:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e56:	432b      	orrs	r3, r5
 8002e58:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e5a:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e5e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8002e62:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e64:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e66:	68a3      	ldr	r3, [r4, #8]
 8002e68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 8002e6c:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e6e:	60a3      	str	r3, [r4, #8]
      break;
 8002e70:	e7e0      	b.n	8002e34 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8002e72:	2b70      	cmp	r3, #112	; 0x70
 8002e74:	d1de      	bne.n	8002e34 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e76:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002e7a:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e7c:	432b      	orrs	r3, r5
 8002e7e:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e80:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e84:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8002e88:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8002e8a:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002e8c:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e8e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 8002e92:	2000      	movs	r0, #0
      htim->Instance->SMCR = tmpsmcr;
 8002e94:	60a3      	str	r3, [r4, #8]
      break;
 8002e96:	e7cd      	b.n	8002e34 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8002e98:	2b20      	cmp	r3, #32
 8002e9a:	d002      	beq.n	8002ea2 <HAL_TIM_ConfigClockSource+0xd6>
 8002e9c:	d90a      	bls.n	8002eb4 <HAL_TIM_ConfigClockSource+0xe8>
 8002e9e:	2b30      	cmp	r3, #48	; 0x30
 8002ea0:	d1c8      	bne.n	8002e34 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 8002ea2:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ea4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ea8:	430b      	orrs	r3, r1
 8002eaa:	f043 0307 	orr.w	r3, r3, #7
  HAL_StatusTypeDef status = HAL_OK;
 8002eae:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8002eb0:	60a3      	str	r3, [r4, #8]
}
 8002eb2:	e7bf      	b.n	8002e34 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8002eb4:	f033 0110 	bics.w	r1, r3, #16
 8002eb8:	d1bc      	bne.n	8002e34 <HAL_TIM_ConfigClockSource+0x68>
 8002eba:	e7f2      	b.n	8002ea2 <HAL_TIM_ConfigClockSource+0xd6>
  HAL_StatusTypeDef status = HAL_OK;
 8002ebc:	2000      	movs	r0, #0
 8002ebe:	e7b9      	b.n	8002e34 <HAL_TIM_ConfigClockSource+0x68>
  __HAL_LOCK(htim);
 8002ec0:	2002      	movs	r0, #2
}
 8002ec2:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ec4:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockPolarity,
 8002ec6:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8002ec8:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002eca:	f023 0310 	bic.w	r3, r3, #16
 8002ece:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ed0:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 8002ed2:	6a23      	ldr	r3, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ed4:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ed8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002edc:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ee0:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002ee4:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8002ee6:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8002ee8:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002eee:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 8002ef2:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8002ef4:	60a3      	str	r3, [r4, #8]
}
 8002ef6:	e79d      	b.n	8002e34 <HAL_TIM_ConfigClockSource+0x68>
                               sClockSourceConfig->ClockPolarity,
 8002ef8:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8002efa:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8002efc:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002efe:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8002f02:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f04:	6a23      	ldr	r3, [r4, #32]
 8002f06:	f023 0301 	bic.w	r3, r3, #1
 8002f0a:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f0c:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f12:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002f16:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8002f18:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8002f1a:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f20:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 8002f24:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8002f26:	60a3      	str	r3, [r4, #8]
}
 8002f28:	e784      	b.n	8002e34 <HAL_TIM_ConfigClockSource+0x68>
 8002f2a:	bf00      	nop

08002f2c <HAL_TIM_OC_DelayElapsedCallback>:
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop

08002f30 <HAL_TIM_IC_CaptureCallback>:
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop

08002f34 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop

08002f38 <HAL_TIM_TriggerCallback>:
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop

08002f3c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f3c:	6803      	ldr	r3, [r0, #0]
 8002f3e:	691a      	ldr	r2, [r3, #16]
 8002f40:	0791      	lsls	r1, r2, #30
{
 8002f42:	b510      	push	{r4, lr}
 8002f44:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f46:	d502      	bpl.n	8002f4e <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f48:	68da      	ldr	r2, [r3, #12]
 8002f4a:	0792      	lsls	r2, r2, #30
 8002f4c:	d45f      	bmi.n	800300e <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	0750      	lsls	r0, r2, #29
 8002f52:	d502      	bpl.n	8002f5a <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f54:	68da      	ldr	r2, [r3, #12]
 8002f56:	0751      	lsls	r1, r2, #29
 8002f58:	d446      	bmi.n	8002fe8 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f5a:	691a      	ldr	r2, [r3, #16]
 8002f5c:	0712      	lsls	r2, r2, #28
 8002f5e:	d502      	bpl.n	8002f66 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f60:	68da      	ldr	r2, [r3, #12]
 8002f62:	0710      	lsls	r0, r2, #28
 8002f64:	d42e      	bmi.n	8002fc4 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f66:	691a      	ldr	r2, [r3, #16]
 8002f68:	06d2      	lsls	r2, r2, #27
 8002f6a:	d502      	bpl.n	8002f72 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f6c:	68da      	ldr	r2, [r3, #12]
 8002f6e:	06d0      	lsls	r0, r2, #27
 8002f70:	d418      	bmi.n	8002fa4 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f72:	691a      	ldr	r2, [r3, #16]
 8002f74:	07d1      	lsls	r1, r2, #31
 8002f76:	d502      	bpl.n	8002f7e <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f78:	68da      	ldr	r2, [r3, #12]
 8002f7a:	07d2      	lsls	r2, r2, #31
 8002f7c:	d45d      	bmi.n	800303a <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f7e:	691a      	ldr	r2, [r3, #16]
 8002f80:	0610      	lsls	r0, r2, #24
 8002f82:	d502      	bpl.n	8002f8a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f84:	68da      	ldr	r2, [r3, #12]
 8002f86:	0611      	lsls	r1, r2, #24
 8002f88:	d45f      	bmi.n	800304a <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f8a:	691a      	ldr	r2, [r3, #16]
 8002f8c:	0652      	lsls	r2, r2, #25
 8002f8e:	d502      	bpl.n	8002f96 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f90:	68da      	ldr	r2, [r3, #12]
 8002f92:	0650      	lsls	r0, r2, #25
 8002f94:	d461      	bmi.n	800305a <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f96:	691a      	ldr	r2, [r3, #16]
 8002f98:	0691      	lsls	r1, r2, #26
 8002f9a:	d502      	bpl.n	8002fa2 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f9c:	68da      	ldr	r2, [r3, #12]
 8002f9e:	0692      	lsls	r2, r2, #26
 8002fa0:	d443      	bmi.n	800302a <HAL_TIM_IRQHandler+0xee>
}
 8002fa2:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fa4:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fa8:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002faa:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fac:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fae:	69db      	ldr	r3, [r3, #28]
 8002fb0:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002fb4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fb6:	d064      	beq.n	8003082 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8002fb8:	f7ff ffba 	bl	8002f30 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fbc:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fbe:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fc0:	7722      	strb	r2, [r4, #28]
 8002fc2:	e7d6      	b.n	8002f72 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fc4:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fc8:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fca:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fcc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fce:	69db      	ldr	r3, [r3, #28]
 8002fd0:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8002fd2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fd4:	d152      	bne.n	800307c <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd6:	f7ff ffa9 	bl	8002f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fda:	4620      	mov	r0, r4
 8002fdc:	f7ff ffaa 	bl	8002f34 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fe0:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fe2:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fe4:	7722      	strb	r2, [r4, #28]
 8002fe6:	e7be      	b.n	8002f66 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fe8:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fec:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fee:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ff0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002ff8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ffa:	d13c      	bne.n	8003076 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ffc:	f7ff ff96 	bl	8002f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003000:	4620      	mov	r0, r4
 8003002:	f7ff ff97 	bl	8002f34 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003006:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003008:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800300a:	7722      	strb	r2, [r4, #28]
 800300c:	e7a5      	b.n	8002f5a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800300e:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003012:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003014:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003016:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	079b      	lsls	r3, r3, #30
 800301c:	d025      	beq.n	800306a <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 800301e:	f7ff ff87 	bl	8002f30 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003022:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003024:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003026:	7722      	strb	r2, [r4, #28]
 8003028:	e791      	b.n	8002f4e <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800302a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800302e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003030:	611a      	str	r2, [r3, #16]
}
 8003032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8003036:	f000 b867 	b.w	8003108 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800303a:	f06f 0201 	mvn.w	r2, #1
 800303e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003040:	4620      	mov	r0, r4
 8003042:	f7fd ff2f 	bl	8000ea4 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003046:	6823      	ldr	r3, [r4, #0]
 8003048:	e799      	b.n	8002f7e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800304a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800304e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003050:	4620      	mov	r0, r4
 8003052:	f000 f85b 	bl	800310c <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003056:	6823      	ldr	r3, [r4, #0]
 8003058:	e797      	b.n	8002f8a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800305a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800305e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003060:	4620      	mov	r0, r4
 8003062:	f7ff ff69 	bl	8002f38 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003066:	6823      	ldr	r3, [r4, #0]
 8003068:	e795      	b.n	8002f96 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800306a:	f7ff ff5f 	bl	8002f2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800306e:	4620      	mov	r0, r4
 8003070:	f7ff ff60 	bl	8002f34 <HAL_TIM_PWM_PulseFinishedCallback>
 8003074:	e7d5      	b.n	8003022 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8003076:	f7ff ff5b 	bl	8002f30 <HAL_TIM_IC_CaptureCallback>
 800307a:	e7c4      	b.n	8003006 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 800307c:	f7ff ff58 	bl	8002f30 <HAL_TIM_IC_CaptureCallback>
 8003080:	e7ae      	b.n	8002fe0 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003082:	f7ff ff53 	bl	8002f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003086:	4620      	mov	r0, r4
 8003088:	f7ff ff54 	bl	8002f34 <HAL_TIM_PWM_PulseFinishedCallback>
 800308c:	e796      	b.n	8002fbc <HAL_TIM_IRQHandler+0x80>
 800308e:	bf00      	nop

08003090 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003090:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003094:	2b01      	cmp	r3, #1
 8003096:	d033      	beq.n	8003100 <HAL_TIMEx_MasterConfigSynchronization+0x70>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003098:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800309a:	2202      	movs	r2, #2
{
 800309c:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 800309e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80030a2:	685a      	ldr	r2, [r3, #4]
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030a4:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 80030a6:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80030a8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030ac:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 80030b2:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030b4:	d016      	beq.n	80030e4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80030b6:	4a13      	ldr	r2, [pc, #76]	; (8003104 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d013      	beq.n	80030e4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80030bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d00f      	beq.n	80030e4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80030c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d00b      	beq.n	80030e4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80030cc:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d007      	beq.n	80030e4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80030d4:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80030d8:	4293      	cmp	r3, r2
 80030da:	d003      	beq.n	80030e4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80030dc:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d104      	bne.n	80030ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030e4:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030e6:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030ea:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030ec:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80030ee:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80030f0:	2201      	movs	r2, #1
 80030f2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80030f6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 80030fa:	bc30      	pop	{r4, r5}
  return HAL_OK;
 80030fc:	4618      	mov	r0, r3
}
 80030fe:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003100:	2002      	movs	r0, #2
}
 8003102:	4770      	bx	lr
 8003104:	40000400 	.word	0x40000400

08003108 <HAL_TIMEx_CommutCallback>:
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop

0800310c <HAL_TIMEx_BreakCallback>:
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop

08003110 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003114:	4604      	mov	r4, r0
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003116:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8003118:	2820      	cmp	r0, #32
 800311a:	f040 8088 	bne.w	800322e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800311e:	4688      	mov	r8, r1
 8003120:	b109      	cbz	r1, 8003126 <HAL_UART_Transmit+0x16>
 8003122:	4617      	mov	r7, r2
 8003124:	b912      	cbnz	r2, 800312c <HAL_UART_Transmit+0x1c>
    {
      return  HAL_ERROR;
 8003126:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003128:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800312c:	461d      	mov	r5, r3
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800312e:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003132:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003134:	f8c4 9084 	str.w	r9, [r4, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003138:	67e3      	str	r3, [r4, #124]	; 0x7c
    tickstart = HAL_GetTick();
 800313a:	f7fe f9b9 	bl	80014b0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800313e:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8003140:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8003148:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    tickstart = HAL_GetTick();
 800314c:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800314e:	d071      	beq.n	8003234 <HAL_UART_Transmit+0x124>
    while (huart->TxXferCount > 0U)
 8003150:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003154:	6820      	ldr	r0, [r4, #0]
    while (huart->TxXferCount > 0U)
 8003156:	b29b      	uxth	r3, r3
 8003158:	b1ab      	cbz	r3, 8003186 <HAL_UART_Transmit+0x76>
 800315a:	1c6a      	adds	r2, r5, #1
 800315c:	d11c      	bne.n	8003198 <HAL_UART_Transmit+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800315e:	69c2      	ldr	r2, [r0, #28]
 8003160:	0613      	lsls	r3, r2, #24
 8003162:	d5fc      	bpl.n	800315e <HAL_UART_Transmit+0x4e>
      if (pdata8bits == NULL)
 8003164:	f1b8 0f00 	cmp.w	r8, #0
 8003168:	d05c      	beq.n	8003224 <HAL_UART_Transmit+0x114>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800316a:	f818 3b01 	ldrb.w	r3, [r8], #1
 800316e:	8503      	strh	r3, [r0, #40]	; 0x28
      huart->TxXferCount--;
 8003170:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8003174:	3b01      	subs	r3, #1
 8003176:	b29b      	uxth	r3, r3
 8003178:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800317c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8003180:	b29b      	uxth	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1e9      	bne.n	800315a <HAL_UART_Transmit+0x4a>
 8003186:	1c69      	adds	r1, r5, #1
 8003188:	d15a      	bne.n	8003240 <HAL_UART_Transmit+0x130>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800318a:	69c3      	ldr	r3, [r0, #28]
 800318c:	065a      	lsls	r2, r3, #25
 800318e:	d5fc      	bpl.n	800318a <HAL_UART_Transmit+0x7a>
    huart->gState = HAL_UART_STATE_READY;
 8003190:	2320      	movs	r3, #32
 8003192:	67e3      	str	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 8003194:	2000      	movs	r0, #0
 8003196:	e7c7      	b.n	8003128 <HAL_UART_Transmit+0x18>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003198:	69c3      	ldr	r3, [r0, #28]
 800319a:	061f      	lsls	r7, r3, #24
 800319c:	d4e2      	bmi.n	8003164 <HAL_UART_Transmit+0x54>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800319e:	f7fe f987 	bl	80014b0 <HAL_GetTick>
 80031a2:	1b80      	subs	r0, r0, r6
 80031a4:	4285      	cmp	r5, r0
 80031a6:	d338      	bcc.n	800321a <HAL_UART_Transmit+0x10a>
 80031a8:	2d00      	cmp	r5, #0
 80031aa:	d036      	beq.n	800321a <HAL_UART_Transmit+0x10a>
      {

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80031ac:	6823      	ldr	r3, [r4, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	0752      	lsls	r2, r2, #29
 80031b2:	4618      	mov	r0, r3
 80031b4:	d5d1      	bpl.n	800315a <HAL_UART_Transmit+0x4a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80031b6:	69da      	ldr	r2, [r3, #28]
 80031b8:	0717      	lsls	r7, r2, #28
 80031ba:	f100 8089 	bmi.w	80032d0 <HAL_UART_Transmit+0x1c0>
           /* Process Unlocked */
           __HAL_UNLOCK(huart);

           return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031be:	69da      	ldr	r2, [r3, #28]
 80031c0:	0511      	lsls	r1, r2, #20
 80031c2:	d5ca      	bpl.n	800315a <HAL_UART_Transmit+0x4a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031c8:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ca:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031ce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d2:	e843 2100 	strex	r1, r2, [r3]
 80031d6:	b139      	cbz	r1, 80031e8 <HAL_UART_Transmit+0xd8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d8:	e853 2f00 	ldrex	r2, [r3]
 80031dc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e0:	e843 2100 	strex	r1, r2, [r3]
 80031e4:	2900      	cmp	r1, #0
 80031e6:	d1f7      	bne.n	80031d8 <HAL_UART_Transmit+0xc8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e8:	f103 0208 	add.w	r2, r3, #8
 80031ec:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031f0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f4:	f103 0008 	add.w	r0, r3, #8
 80031f8:	e840 2100 	strex	r1, r2, [r0]
 80031fc:	2900      	cmp	r1, #0
 80031fe:	d1f3      	bne.n	80031e8 <HAL_UART_Transmit+0xd8>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003200:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003202:	2a01      	cmp	r2, #1
 8003204:	d05b      	beq.n	80032be <HAL_UART_Transmit+0x1ae>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003206:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8003208:	2220      	movs	r2, #32
 800320a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800320e:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003210:	6623      	str	r3, [r4, #96]	; 0x60
          __HAL_UNLOCK(huart);
 8003212:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003216:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      huart->gState = HAL_UART_STATE_READY;
 800321a:	2320      	movs	r3, #32
 800321c:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 800321e:	2003      	movs	r0, #3
}
 8003220:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003224:	f839 3b02 	ldrh.w	r3, [r9], #2
 8003228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800322c:	e79f      	b.n	800316e <HAL_UART_Transmit+0x5e>
    return HAL_BUSY;
 800322e:	2002      	movs	r0, #2
}
 8003230:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003234:	6923      	ldr	r3, [r4, #16]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d18a      	bne.n	8003150 <HAL_UART_Transmit+0x40>
 800323a:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 800323c:	4698      	mov	r8, r3
 800323e:	e787      	b.n	8003150 <HAL_UART_Transmit+0x40>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003240:	69c3      	ldr	r3, [r0, #28]
 8003242:	065b      	lsls	r3, r3, #25
 8003244:	d4a4      	bmi.n	8003190 <HAL_UART_Transmit+0x80>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003246:	f7fe f933 	bl	80014b0 <HAL_GetTick>
 800324a:	1b80      	subs	r0, r0, r6
 800324c:	4285      	cmp	r5, r0
 800324e:	d3e4      	bcc.n	800321a <HAL_UART_Transmit+0x10a>
 8003250:	2d00      	cmp	r5, #0
 8003252:	d0e2      	beq.n	800321a <HAL_UART_Transmit+0x10a>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003254:	6823      	ldr	r3, [r4, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	0751      	lsls	r1, r2, #29
 800325a:	4618      	mov	r0, r3
 800325c:	d593      	bpl.n	8003186 <HAL_UART_Transmit+0x76>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800325e:	69da      	ldr	r2, [r3, #28]
 8003260:	0712      	lsls	r2, r2, #28
 8003262:	d463      	bmi.n	800332c <HAL_UART_Transmit+0x21c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003264:	69da      	ldr	r2, [r3, #28]
 8003266:	0517      	lsls	r7, r2, #20
 8003268:	d58d      	bpl.n	8003186 <HAL_UART_Transmit+0x76>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800326a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800326e:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003270:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003274:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003278:	e843 2100 	strex	r1, r2, [r3]
 800327c:	b139      	cbz	r1, 800328e <HAL_UART_Transmit+0x17e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800327e:	e853 2f00 	ldrex	r2, [r3]
 8003282:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003286:	e843 2100 	strex	r1, r2, [r3]
 800328a:	2900      	cmp	r1, #0
 800328c:	d1f7      	bne.n	800327e <HAL_UART_Transmit+0x16e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800328e:	f103 0208 	add.w	r2, r3, #8
 8003292:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003296:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329a:	f103 0008 	add.w	r0, r3, #8
 800329e:	e840 2100 	strex	r1, r2, [r0]
 80032a2:	2900      	cmp	r1, #0
 80032a4:	d1f3      	bne.n	800328e <HAL_UART_Transmit+0x17e>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032a6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80032a8:	2a01      	cmp	r2, #1
 80032aa:	d1ac      	bne.n	8003206 <HAL_UART_Transmit+0xf6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ac:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032b0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b4:	e843 2100 	strex	r1, r2, [r3]
 80032b8:	2900      	cmp	r1, #0
 80032ba:	d1f7      	bne.n	80032ac <HAL_UART_Transmit+0x19c>
 80032bc:	e7a3      	b.n	8003206 <HAL_UART_Transmit+0xf6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032be:	e853 2f00 	ldrex	r2, [r3]
 80032c2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c6:	e843 2100 	strex	r1, r2, [r3]
 80032ca:	2900      	cmp	r1, #0
 80032cc:	d1f7      	bne.n	80032be <HAL_UART_Transmit+0x1ae>
 80032ce:	e79a      	b.n	8003206 <HAL_UART_Transmit+0xf6>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80032d0:	2208      	movs	r2, #8
 80032d2:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d4:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032d8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032dc:	e843 2100 	strex	r1, r2, [r3]
 80032e0:	2900      	cmp	r1, #0
 80032e2:	d1f7      	bne.n	80032d4 <HAL_UART_Transmit+0x1c4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e4:	f103 0208 	add.w	r2, r3, #8
 80032e8:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ec:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f0:	f103 0008 	add.w	r0, r3, #8
 80032f4:	e840 2100 	strex	r1, r2, [r0]
 80032f8:	2900      	cmp	r1, #0
 80032fa:	d1f3      	bne.n	80032e4 <HAL_UART_Transmit+0x1d4>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032fc:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80032fe:	2a01      	cmp	r2, #1
 8003300:	d00b      	beq.n	800331a <HAL_UART_Transmit+0x20a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003302:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8003304:	2120      	movs	r1, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003306:	2208      	movs	r2, #8
  huart->RxState = HAL_UART_STATE_READY;
 8003308:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 800330c:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800330e:	6623      	str	r3, [r4, #96]	; 0x60
           __HAL_UNLOCK(huart);
 8003310:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003314:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
           return HAL_ERROR;
 8003318:	e77f      	b.n	800321a <HAL_UART_Transmit+0x10a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331a:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800331e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003322:	e843 2100 	strex	r1, r2, [r3]
 8003326:	2900      	cmp	r1, #0
 8003328:	d1f7      	bne.n	800331a <HAL_UART_Transmit+0x20a>
 800332a:	e7ea      	b.n	8003302 <HAL_UART_Transmit+0x1f2>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800332c:	2208      	movs	r2, #8
 800332e:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003330:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003334:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003338:	e843 2100 	strex	r1, r2, [r3]
 800333c:	2900      	cmp	r1, #0
 800333e:	d1f7      	bne.n	8003330 <HAL_UART_Transmit+0x220>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003340:	f103 0208 	add.w	r2, r3, #8
 8003344:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003348:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800334c:	f103 0008 	add.w	r0, r3, #8
 8003350:	e840 2100 	strex	r1, r2, [r0]
 8003354:	2900      	cmp	r1, #0
 8003356:	d1f3      	bne.n	8003340 <HAL_UART_Transmit+0x230>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003358:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800335a:	2a01      	cmp	r2, #1
 800335c:	d1d1      	bne.n	8003302 <HAL_UART_Transmit+0x1f2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800335e:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003362:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003366:	e843 2100 	strex	r1, r2, [r3]
 800336a:	2900      	cmp	r1, #0
 800336c:	d1f7      	bne.n	800335e <HAL_UART_Transmit+0x24e>
 800336e:	e7c8      	b.n	8003302 <HAL_UART_Transmit+0x1f2>

08003370 <HAL_UART_TxCpltCallback>:
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop

08003374 <HAL_UART_ErrorCallback>:
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop

08003378 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003378:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800337a:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 800337c:	2300      	movs	r3, #0
 800337e:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003382:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003386:	f7ff fff5 	bl	8003374 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800338a:	bd08      	pop	{r3, pc}

0800338c <HAL_UARTEx_RxEventCallback>:
}
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop

08003390 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003390:	6803      	ldr	r3, [r0, #0]
 8003392:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003394:	6819      	ldr	r1, [r3, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003396:	f640 0c0f 	movw	ip, #2063	; 0x80f
  if (errorflags == 0U)
 800339a:	ea12 0f0c 	tst.w	r2, ip
{
 800339e:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033a0:	689d      	ldr	r5, [r3, #8]
{
 80033a2:	4604      	mov	r4, r0
  if (errorflags == 0U)
 80033a4:	d17f      	bne.n	80034a6 <HAL_UART_IRQHandler+0x116>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80033a6:	0696      	lsls	r6, r2, #26
 80033a8:	d502      	bpl.n	80033b0 <HAL_UART_IRQHandler+0x20>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80033aa:	068e      	lsls	r6, r1, #26
 80033ac:	f100 8117 	bmi.w	80035de <HAL_UART_IRQHandler+0x24e>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033b0:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80033b2:	2801      	cmp	r0, #1
 80033b4:	d024      	beq.n	8003400 <HAL_UART_IRQHandler+0x70>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80033b6:	02d6      	lsls	r6, r2, #11
 80033b8:	d502      	bpl.n	80033c0 <HAL_UART_IRQHandler+0x30>
 80033ba:	0268      	lsls	r0, r5, #9
 80033bc:	f100 8114 	bmi.w	80035e8 <HAL_UART_IRQHandler+0x258>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80033c0:	0616      	lsls	r6, r2, #24
 80033c2:	d414      	bmi.n	80033ee <HAL_UART_IRQHandler+0x5e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80033c4:	0650      	lsls	r0, r2, #25
 80033c6:	d501      	bpl.n	80033cc <HAL_UART_IRQHandler+0x3c>
 80033c8:	064a      	lsls	r2, r1, #25
 80033ca:	d400      	bmi.n	80033ce <HAL_UART_IRQHandler+0x3e>
}
 80033cc:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ce:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80033d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d6:	e843 2100 	strex	r1, r2, [r3]
 80033da:	2900      	cmp	r1, #0
 80033dc:	d1f7      	bne.n	80033ce <HAL_UART_IRQHandler+0x3e>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80033de:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80033e0:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80033e2:	67e2      	str	r2, [r4, #124]	; 0x7c
  huart->TxISR = NULL;
 80033e4:	66e3      	str	r3, [r4, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80033e6:	4620      	mov	r0, r4
 80033e8:	f7ff ffc2 	bl	8003370 <HAL_UART_TxCpltCallback>
}
 80033ec:	bd70      	pop	{r4, r5, r6, pc}
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80033ee:	060d      	lsls	r5, r1, #24
 80033f0:	d5e8      	bpl.n	80033c4 <HAL_UART_IRQHandler+0x34>
    if (huart->TxISR != NULL)
 80033f2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d0e9      	beq.n	80033cc <HAL_UART_IRQHandler+0x3c>
      huart->TxISR(huart);
 80033f8:	4620      	mov	r0, r4
}
 80033fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 80033fe:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003400:	06d6      	lsls	r6, r2, #27
 8003402:	d5d8      	bpl.n	80033b6 <HAL_UART_IRQHandler+0x26>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003404:	06c8      	lsls	r0, r1, #27
 8003406:	d5d6      	bpl.n	80033b6 <HAL_UART_IRQHandler+0x26>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003408:	2210      	movs	r2, #16
 800340a:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800340c:	689a      	ldr	r2, [r3, #8]
 800340e:	0652      	lsls	r2, r2, #25
 8003410:	f140 8107 	bpl.w	8003622 <HAL_UART_IRQHandler+0x292>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003414:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003416:	6802      	ldr	r2, [r0, #0]
 8003418:	6852      	ldr	r2, [r2, #4]
 800341a:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 800341c:	2a00      	cmp	r2, #0
 800341e:	d0d5      	beq.n	80033cc <HAL_UART_IRQHandler+0x3c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003420:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8003424:	4291      	cmp	r1, r2
 8003426:	d9d1      	bls.n	80033cc <HAL_UART_IRQHandler+0x3c>
        huart->RxXferCount = nb_remaining_rx_data;
 8003428:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800342c:	6982      	ldr	r2, [r0, #24]
 800342e:	2a20      	cmp	r2, #32
 8003430:	d02f      	beq.n	8003492 <HAL_UART_IRQHandler+0x102>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003432:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003436:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800343a:	e843 2100 	strex	r1, r2, [r3]
 800343e:	2900      	cmp	r1, #0
 8003440:	d1f7      	bne.n	8003432 <HAL_UART_IRQHandler+0xa2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003442:	f103 0208 	add.w	r2, r3, #8
 8003446:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800344a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344e:	f103 0508 	add.w	r5, r3, #8
 8003452:	e845 2100 	strex	r1, r2, [r5]
 8003456:	2900      	cmp	r1, #0
 8003458:	d1f3      	bne.n	8003442 <HAL_UART_IRQHandler+0xb2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800345a:	f103 0208 	add.w	r2, r3, #8
 800345e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003462:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003466:	f103 0508 	add.w	r5, r3, #8
 800346a:	e845 2100 	strex	r1, r2, [r5]
 800346e:	2900      	cmp	r1, #0
 8003470:	d1f3      	bne.n	800345a <HAL_UART_IRQHandler+0xca>
          huart->RxState = HAL_UART_STATE_READY;
 8003472:	2220      	movs	r2, #32
 8003474:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003478:	6621      	str	r1, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800347a:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800347e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003482:	e843 2100 	strex	r1, r2, [r3]
 8003486:	2900      	cmp	r1, #0
 8003488:	d1f7      	bne.n	800347a <HAL_UART_IRQHandler+0xea>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800348a:	f7fe fb35 	bl	8001af8 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800348e:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003492:	2302      	movs	r3, #2
 8003494:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003496:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800349a:	1ac9      	subs	r1, r1, r3
 800349c:	4620      	mov	r0, r4
 800349e:	b289      	uxth	r1, r1
 80034a0:	f7ff ff74 	bl	800338c <HAL_UARTEx_RxEventCallback>
}
 80034a4:	bd70      	pop	{r4, r5, r6, pc}
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80034a6:	487d      	ldr	r0, [pc, #500]	; (800369c <HAL_UART_IRQHandler+0x30c>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 80034a8:	f005 0601 	and.w	r6, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80034ac:	4008      	ands	r0, r1
 80034ae:	4330      	orrs	r0, r6
 80034b0:	f43f af7e 	beq.w	80033b0 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80034b4:	07d5      	lsls	r5, r2, #31
 80034b6:	d509      	bpl.n	80034cc <HAL_UART_IRQHandler+0x13c>
 80034b8:	05c8      	lsls	r0, r1, #23
 80034ba:	d507      	bpl.n	80034cc <HAL_UART_IRQHandler+0x13c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80034bc:	2001      	movs	r0, #1
 80034be:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034c0:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80034c4:	f040 0001 	orr.w	r0, r0, #1
 80034c8:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034cc:	0795      	lsls	r5, r2, #30
 80034ce:	f140 8081 	bpl.w	80035d4 <HAL_UART_IRQHandler+0x244>
 80034d2:	b18e      	cbz	r6, 80034f8 <HAL_UART_IRQHandler+0x168>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80034d4:	2002      	movs	r0, #2
 80034d6:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034d8:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80034dc:	f040 0004 	orr.w	r0, r0, #4
 80034e0:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034e4:	0750      	lsls	r0, r2, #29
 80034e6:	d507      	bpl.n	80034f8 <HAL_UART_IRQHandler+0x168>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80034e8:	2004      	movs	r0, #4
 80034ea:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034ec:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80034f0:	f040 0002 	orr.w	r0, r0, #2
 80034f4:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_ORE) != 0U)
 80034f8:	0710      	lsls	r0, r2, #28
 80034fa:	d50b      	bpl.n	8003514 <HAL_UART_IRQHandler+0x184>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80034fc:	f001 0020 	and.w	r0, r1, #32
 8003500:	4330      	orrs	r0, r6
 8003502:	d007      	beq.n	8003514 <HAL_UART_IRQHandler+0x184>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003504:	2008      	movs	r0, #8
 8003506:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003508:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800350c:	f040 0008 	orr.w	r0, r0, #8
 8003510:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003514:	0516      	lsls	r6, r2, #20
 8003516:	d50a      	bpl.n	800352e <HAL_UART_IRQHandler+0x19e>
 8003518:	014d      	lsls	r5, r1, #5
 800351a:	d508      	bpl.n	800352e <HAL_UART_IRQHandler+0x19e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800351c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003520:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003522:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8003526:	f040 0020 	orr.w	r0, r0, #32
 800352a:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800352e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8003532:	2800      	cmp	r0, #0
 8003534:	f43f af4a 	beq.w	80033cc <HAL_UART_IRQHandler+0x3c>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003538:	0690      	lsls	r0, r2, #26
 800353a:	d506      	bpl.n	800354a <HAL_UART_IRQHandler+0x1ba>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800353c:	0689      	lsls	r1, r1, #26
 800353e:	d504      	bpl.n	800354a <HAL_UART_IRQHandler+0x1ba>
        if (huart->RxISR != NULL)
 8003540:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8003542:	b112      	cbz	r2, 800354a <HAL_UART_IRQHandler+0x1ba>
          huart->RxISR(huart);
 8003544:	4620      	mov	r0, r4
 8003546:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003548:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 800354a:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800354e:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003550:	f001 0128 	and.w	r1, r1, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003554:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003558:	ea52 0501 	orrs.w	r5, r2, r1
 800355c:	f000 8098 	beq.w	8003690 <HAL_UART_IRQHandler+0x300>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003560:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003564:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003568:	e843 2100 	strex	r1, r2, [r3]
 800356c:	2900      	cmp	r1, #0
 800356e:	d1f7      	bne.n	8003560 <HAL_UART_IRQHandler+0x1d0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003570:	f103 0208 	add.w	r2, r3, #8
 8003574:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003578:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357c:	f103 0008 	add.w	r0, r3, #8
 8003580:	e840 2100 	strex	r1, r2, [r0]
 8003584:	2900      	cmp	r1, #0
 8003586:	d1f3      	bne.n	8003570 <HAL_UART_IRQHandler+0x1e0>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003588:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800358a:	2a01      	cmp	r2, #1
 800358c:	d034      	beq.n	80035f8 <HAL_UART_IRQHandler+0x268>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800358e:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8003590:	2120      	movs	r1, #32
 8003592:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003596:	6622      	str	r2, [r4, #96]	; 0x60
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003598:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 800359a:	66a2      	str	r2, [r4, #104]	; 0x68
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800359c:	064a      	lsls	r2, r1, #25
 800359e:	d53c      	bpl.n	800361a <HAL_UART_IRQHandler+0x28a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a0:	f103 0208 	add.w	r2, r3, #8
 80035a4:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ac:	f103 0008 	add.w	r0, r3, #8
 80035b0:	e840 2100 	strex	r1, r2, [r0]
 80035b4:	2900      	cmp	r1, #0
 80035b6:	d1f3      	bne.n	80035a0 <HAL_UART_IRQHandler+0x210>
          if (huart->hdmarx != NULL)
 80035b8:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80035ba:	b370      	cbz	r0, 800361a <HAL_UART_IRQHandler+0x28a>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035bc:	4b38      	ldr	r3, [pc, #224]	; (80036a0 <HAL_UART_IRQHandler+0x310>)
 80035be:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035c0:	f7fe fabe 	bl	8001b40 <HAL_DMA_Abort_IT>
 80035c4:	2800      	cmp	r0, #0
 80035c6:	f43f af01 	beq.w	80033cc <HAL_UART_IRQHandler+0x3c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035ca:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
 80035cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035d0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80035d2:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035d4:	0755      	lsls	r5, r2, #29
 80035d6:	d58f      	bpl.n	80034f8 <HAL_UART_IRQHandler+0x168>
 80035d8:	2e00      	cmp	r6, #0
 80035da:	d185      	bne.n	80034e8 <HAL_UART_IRQHandler+0x158>
 80035dc:	e78c      	b.n	80034f8 <HAL_UART_IRQHandler+0x168>
      if (huart->RxISR != NULL)
 80035de:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f47f af0a 	bne.w	80033fa <HAL_UART_IRQHandler+0x6a>
 80035e6:	e6f1      	b.n	80033cc <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80035e8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 80035ec:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80035ee:	621a      	str	r2, [r3, #32]
}
 80035f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 80035f4:	f000 baf0 	b.w	8003bd8 <HAL_UARTEx_WakeupCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f8:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035fc:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003600:	e843 2100 	strex	r1, r2, [r3]
 8003604:	2900      	cmp	r1, #0
 8003606:	d0c2      	beq.n	800358e <HAL_UART_IRQHandler+0x1fe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003608:	e853 2f00 	ldrex	r2, [r3]
 800360c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003610:	e843 2100 	strex	r1, r2, [r3]
 8003614:	2900      	cmp	r1, #0
 8003616:	d1ef      	bne.n	80035f8 <HAL_UART_IRQHandler+0x268>
 8003618:	e7b9      	b.n	800358e <HAL_UART_IRQHandler+0x1fe>
            HAL_UART_ErrorCallback(huart);
 800361a:	4620      	mov	r0, r4
 800361c:	f7ff feaa 	bl	8003374 <HAL_UART_ErrorCallback>
}
 8003620:	bd70      	pop	{r4, r5, r6, pc}
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003622:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
      if ((huart->RxXferCount > 0U)
 8003626:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800362a:	f8b4 0058 	ldrh.w	r0, [r4, #88]	; 0x58
      if ((huart->RxXferCount > 0U)
 800362e:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003630:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8003632:	2a00      	cmp	r2, #0
 8003634:	f43f aeca 	beq.w	80033cc <HAL_UART_IRQHandler+0x3c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003638:	1a41      	subs	r1, r0, r1
 800363a:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800363c:	2900      	cmp	r1, #0
 800363e:	f43f aec5 	beq.w	80033cc <HAL_UART_IRQHandler+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003642:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003646:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364a:	e843 2000 	strex	r0, r2, [r3]
 800364e:	2800      	cmp	r0, #0
 8003650:	d1f7      	bne.n	8003642 <HAL_UART_IRQHandler+0x2b2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003652:	f103 0208 	add.w	r2, r3, #8
 8003656:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800365a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800365e:	f103 0508 	add.w	r5, r3, #8
 8003662:	e845 2000 	strex	r0, r2, [r5]
 8003666:	2800      	cmp	r0, #0
 8003668:	d1f3      	bne.n	8003652 <HAL_UART_IRQHandler+0x2c2>
        huart->RxState = HAL_UART_STATE_READY;
 800366a:	2220      	movs	r2, #32
 800366c:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
        huart->RxISR = NULL;
 8003670:	66a0      	str	r0, [r4, #104]	; 0x68
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003672:	6620      	str	r0, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003674:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003678:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367c:	e843 2000 	strex	r0, r2, [r3]
 8003680:	2800      	cmp	r0, #0
 8003682:	d1f7      	bne.n	8003674 <HAL_UART_IRQHandler+0x2e4>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003684:	2302      	movs	r3, #2
 8003686:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003688:	4620      	mov	r0, r4
 800368a:	f7ff fe7f 	bl	800338c <HAL_UARTEx_RxEventCallback>
}
 800368e:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8003690:	4620      	mov	r0, r4
 8003692:	f7ff fe6f 	bl	8003374 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003696:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 800369a:	bd70      	pop	{r4, r5, r6, pc}
 800369c:	04000120 	.word	0x04000120
 80036a0:	08003379 	.word	0x08003379

080036a4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036a4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80036a6:	07da      	lsls	r2, r3, #31
{
 80036a8:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036aa:	d506      	bpl.n	80036ba <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036ac:	6801      	ldr	r1, [r0, #0]
 80036ae:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80036b0:	684a      	ldr	r2, [r1, #4]
 80036b2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80036b6:	4322      	orrs	r2, r4
 80036b8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036ba:	079c      	lsls	r4, r3, #30
 80036bc:	d506      	bpl.n	80036cc <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036be:	6801      	ldr	r1, [r0, #0]
 80036c0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80036c2:	684a      	ldr	r2, [r1, #4]
 80036c4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80036c8:	4322      	orrs	r2, r4
 80036ca:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036cc:	0759      	lsls	r1, r3, #29
 80036ce:	d506      	bpl.n	80036de <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036d0:	6801      	ldr	r1, [r0, #0]
 80036d2:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80036d4:	684a      	ldr	r2, [r1, #4]
 80036d6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80036da:	4322      	orrs	r2, r4
 80036dc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036de:	071a      	lsls	r2, r3, #28
 80036e0:	d506      	bpl.n	80036f0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036e2:	6801      	ldr	r1, [r0, #0]
 80036e4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80036e6:	684a      	ldr	r2, [r1, #4]
 80036e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036ec:	4322      	orrs	r2, r4
 80036ee:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036f0:	06dc      	lsls	r4, r3, #27
 80036f2:	d506      	bpl.n	8003702 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036f4:	6801      	ldr	r1, [r0, #0]
 80036f6:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80036f8:	688a      	ldr	r2, [r1, #8]
 80036fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036fe:	4322      	orrs	r2, r4
 8003700:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003702:	0699      	lsls	r1, r3, #26
 8003704:	d506      	bpl.n	8003714 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003706:	6801      	ldr	r1, [r0, #0]
 8003708:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800370a:	688a      	ldr	r2, [r1, #8]
 800370c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003710:	4322      	orrs	r2, r4
 8003712:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003714:	065a      	lsls	r2, r3, #25
 8003716:	d509      	bpl.n	800372c <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003718:	6801      	ldr	r1, [r0, #0]
 800371a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800371c:	684a      	ldr	r2, [r1, #4]
 800371e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003722:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003724:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003728:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800372a:	d00b      	beq.n	8003744 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800372c:	061b      	lsls	r3, r3, #24
 800372e:	d506      	bpl.n	800373e <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003730:	6802      	ldr	r2, [r0, #0]
 8003732:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003734:	6853      	ldr	r3, [r2, #4]
 8003736:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800373a:	430b      	orrs	r3, r1
 800373c:	6053      	str	r3, [r2, #4]
}
 800373e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003742:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003744:	684a      	ldr	r2, [r1, #4]
 8003746:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003748:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800374c:	4322      	orrs	r2, r4
 800374e:	604a      	str	r2, [r1, #4]
 8003750:	e7ec      	b.n	800372c <UART_AdvFeatureConfig+0x88>
 8003752:	bf00      	nop

08003754 <UART_CheckIdleState>:
{
 8003754:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003756:	2300      	movs	r3, #0
{
 8003758:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800375a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 800375e:	f7fd fea7 	bl	80014b0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003762:	6822      	ldr	r2, [r4, #0]
 8003764:	6813      	ldr	r3, [r2, #0]
 8003766:	071b      	lsls	r3, r3, #28
  tickstart = HAL_GetTick();
 8003768:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800376a:	d40e      	bmi.n	800378a <UART_CheckIdleState+0x36>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800376c:	6813      	ldr	r3, [r2, #0]
 800376e:	0759      	lsls	r1, r3, #29
 8003770:	d42f      	bmi.n	80037d2 <UART_CheckIdleState+0x7e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003772:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8003774:	2220      	movs	r2, #32
 8003776:	67e2      	str	r2, [r4, #124]	; 0x7c
  return HAL_OK;
 8003778:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 800377a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800377e:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003780:	6663      	str	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(huart);
 8003782:	2300      	movs	r3, #0
 8003784:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
}
 8003788:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800378a:	69d3      	ldr	r3, [r2, #28]
 800378c:	0298      	lsls	r0, r3, #10
 800378e:	d4ed      	bmi.n	800376c <UART_CheckIdleState+0x18>
 8003790:	e00c      	b.n	80037ac <UART_CheckIdleState+0x58>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003792:	6819      	ldr	r1, [r3, #0]
 8003794:	0749      	lsls	r1, r1, #29
 8003796:	461a      	mov	r2, r3
 8003798:	d505      	bpl.n	80037a6 <UART_CheckIdleState+0x52>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800379a:	69d9      	ldr	r1, [r3, #28]
 800379c:	0708      	lsls	r0, r1, #28
 800379e:	d44a      	bmi.n	8003836 <UART_CheckIdleState+0xe2>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037a0:	69d9      	ldr	r1, [r3, #28]
 80037a2:	0509      	lsls	r1, r1, #20
 80037a4:	d475      	bmi.n	8003892 <UART_CheckIdleState+0x13e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037a6:	69db      	ldr	r3, [r3, #28]
 80037a8:	0298      	lsls	r0, r3, #10
 80037aa:	d4df      	bmi.n	800376c <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ac:	f7fd fe80 	bl	80014b0 <HAL_GetTick>
 80037b0:	1b43      	subs	r3, r0, r5
 80037b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037b6:	6823      	ldr	r3, [r4, #0]
 80037b8:	d3eb      	bcc.n	8003792 <UART_CheckIdleState+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ba:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80037be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c2:	e843 2100 	strex	r1, r2, [r3]
 80037c6:	2900      	cmp	r1, #0
 80037c8:	d1f7      	bne.n	80037ba <UART_CheckIdleState+0x66>
      huart->gState = HAL_UART_STATE_READY;
 80037ca:	2320      	movs	r3, #32
 80037cc:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 80037ce:	2003      	movs	r0, #3
 80037d0:	e7d7      	b.n	8003782 <UART_CheckIdleState+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037d2:	69d3      	ldr	r3, [r2, #28]
 80037d4:	025b      	lsls	r3, r3, #9
 80037d6:	d4cc      	bmi.n	8003772 <UART_CheckIdleState+0x1e>
 80037d8:	e00d      	b.n	80037f6 <UART_CheckIdleState+0xa2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	0750      	lsls	r0, r2, #29
 80037de:	d507      	bpl.n	80037f0 <UART_CheckIdleState+0x9c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037e0:	69da      	ldr	r2, [r3, #28]
 80037e2:	0711      	lsls	r1, r2, #28
 80037e4:	f100 8083 	bmi.w	80038ee <UART_CheckIdleState+0x19a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037e8:	69da      	ldr	r2, [r3, #28]
 80037ea:	0512      	lsls	r2, r2, #20
 80037ec:	f100 80ad 	bmi.w	800394a <UART_CheckIdleState+0x1f6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	025b      	lsls	r3, r3, #9
 80037f4:	d4bd      	bmi.n	8003772 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037f6:	f7fd fe5b 	bl	80014b0 <HAL_GetTick>
 80037fa:	1b43      	subs	r3, r0, r5
 80037fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003800:	6823      	ldr	r3, [r4, #0]
 8003802:	d3ea      	bcc.n	80037da <UART_CheckIdleState+0x86>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003804:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003808:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380c:	e843 2100 	strex	r1, r2, [r3]
 8003810:	2900      	cmp	r1, #0
 8003812:	d1f7      	bne.n	8003804 <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003814:	f103 0208 	add.w	r2, r3, #8
 8003818:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800381c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003820:	f103 0008 	add.w	r0, r3, #8
 8003824:	e840 2100 	strex	r1, r2, [r0]
 8003828:	2900      	cmp	r1, #0
 800382a:	d1f3      	bne.n	8003814 <UART_CheckIdleState+0xc0>
      huart->RxState = HAL_UART_STATE_READY;
 800382c:	2320      	movs	r3, #32
 800382e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
      return HAL_TIMEOUT;
 8003832:	2003      	movs	r0, #3
 8003834:	e7a5      	b.n	8003782 <UART_CheckIdleState+0x2e>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003836:	2208      	movs	r2, #8
 8003838:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383a:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800383e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003842:	e843 2100 	strex	r1, r2, [r3]
 8003846:	2900      	cmp	r1, #0
 8003848:	d1f7      	bne.n	800383a <UART_CheckIdleState+0xe6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800384a:	f103 0208 	add.w	r2, r3, #8
 800384e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003852:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003856:	f103 0008 	add.w	r0, r3, #8
 800385a:	e840 2100 	strex	r1, r2, [r0]
 800385e:	2900      	cmp	r1, #0
 8003860:	d1f3      	bne.n	800384a <UART_CheckIdleState+0xf6>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003862:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003864:	2a01      	cmp	r2, #1
 8003866:	d00b      	beq.n	8003880 <UART_CheckIdleState+0x12c>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003868:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800386a:	2020      	movs	r0, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800386c:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 800386e:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 8003872:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003874:	6622      	str	r2, [r4, #96]	; 0x60
           __HAL_UNLOCK(huart);
 8003876:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800387a:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
           return HAL_ERROR;
 800387e:	e79c      	b.n	80037ba <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003880:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003884:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003888:	e843 2100 	strex	r1, r2, [r3]
 800388c:	2900      	cmp	r1, #0
 800388e:	d1f7      	bne.n	8003880 <UART_CheckIdleState+0x12c>
 8003890:	e7ea      	b.n	8003868 <UART_CheckIdleState+0x114>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003892:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003896:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003898:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800389c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a0:	e843 2100 	strex	r1, r2, [r3]
 80038a4:	2900      	cmp	r1, #0
 80038a6:	d1f7      	bne.n	8003898 <UART_CheckIdleState+0x144>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a8:	f103 0208 	add.w	r2, r3, #8
 80038ac:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038b0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b4:	f103 0008 	add.w	r0, r3, #8
 80038b8:	e840 2100 	strex	r1, r2, [r0]
 80038bc:	2900      	cmp	r1, #0
 80038be:	d1f3      	bne.n	80038a8 <UART_CheckIdleState+0x154>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038c0:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80038c2:	2a01      	cmp	r2, #1
 80038c4:	d00a      	beq.n	80038dc <UART_CheckIdleState+0x188>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038c6:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80038c8:	2120      	movs	r1, #32
 80038ca:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 80038ce:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038d0:	6622      	str	r2, [r4, #96]	; 0x60
          __HAL_UNLOCK(huart);
 80038d2:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038d6:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
          return HAL_TIMEOUT;
 80038da:	e76e      	b.n	80037ba <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038dc:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038e0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e4:	e843 2100 	strex	r1, r2, [r3]
 80038e8:	2900      	cmp	r1, #0
 80038ea:	d1f7      	bne.n	80038dc <UART_CheckIdleState+0x188>
 80038ec:	e7eb      	b.n	80038c6 <UART_CheckIdleState+0x172>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80038ee:	2208      	movs	r2, #8
 80038f0:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f2:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fa:	e843 2100 	strex	r1, r2, [r3]
 80038fe:	2900      	cmp	r1, #0
 8003900:	d1f7      	bne.n	80038f2 <UART_CheckIdleState+0x19e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003902:	f103 0208 	add.w	r2, r3, #8
 8003906:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800390a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390e:	f103 0008 	add.w	r0, r3, #8
 8003912:	e840 2100 	strex	r1, r2, [r0]
 8003916:	2900      	cmp	r1, #0
 8003918:	d1f3      	bne.n	8003902 <UART_CheckIdleState+0x1ae>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800391a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800391c:	2a01      	cmp	r2, #1
 800391e:	d00b      	beq.n	8003938 <UART_CheckIdleState+0x1e4>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003920:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8003922:	2020      	movs	r0, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003924:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8003926:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 800392a:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800392c:	6622      	str	r2, [r4, #96]	; 0x60
           __HAL_UNLOCK(huart);
 800392e:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003932:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
           return HAL_ERROR;
 8003936:	e765      	b.n	8003804 <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003938:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800393c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003940:	e843 2100 	strex	r1, r2, [r3]
 8003944:	2900      	cmp	r1, #0
 8003946:	d1f7      	bne.n	8003938 <UART_CheckIdleState+0x1e4>
 8003948:	e7ea      	b.n	8003920 <UART_CheckIdleState+0x1cc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800394a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800394e:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003950:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003954:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003958:	e843 2100 	strex	r1, r2, [r3]
 800395c:	2900      	cmp	r1, #0
 800395e:	d1f7      	bne.n	8003950 <UART_CheckIdleState+0x1fc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003960:	f103 0208 	add.w	r2, r3, #8
 8003964:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003968:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396c:	f103 0008 	add.w	r0, r3, #8
 8003970:	e840 2100 	strex	r1, r2, [r0]
 8003974:	2900      	cmp	r1, #0
 8003976:	d1f3      	bne.n	8003960 <UART_CheckIdleState+0x20c>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003978:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800397a:	2a01      	cmp	r2, #1
 800397c:	d00a      	beq.n	8003994 <UART_CheckIdleState+0x240>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800397e:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8003980:	2120      	movs	r1, #32
 8003982:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 8003986:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003988:	6622      	str	r2, [r4, #96]	; 0x60
          __HAL_UNLOCK(huart);
 800398a:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800398e:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
          return HAL_TIMEOUT;
 8003992:	e737      	b.n	8003804 <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003994:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003998:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399c:	e843 2100 	strex	r1, r2, [r3]
 80039a0:	2900      	cmp	r1, #0
 80039a2:	d1f7      	bne.n	8003994 <UART_CheckIdleState+0x240>
 80039a4:	e7eb      	b.n	800397e <UART_CheckIdleState+0x22a>
 80039a6:	bf00      	nop

080039a8 <HAL_UART_Init>:
  if (huart == NULL)
 80039a8:	2800      	cmp	r0, #0
 80039aa:	f000 80c7 	beq.w	8003b3c <HAL_UART_Init+0x194>
{
 80039ae:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 80039b0:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80039b2:	4604      	mov	r4, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d031      	beq.n	8003a1c <HAL_UART_Init+0x74>
  __HAL_UART_DISABLE(huart);
 80039b8:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039ba:	6925      	ldr	r5, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 80039bc:	2224      	movs	r2, #36	; 0x24
 80039be:	67e2      	str	r2, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 80039c0:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039c2:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 80039c4:	f021 0101 	bic.w	r1, r1, #1
 80039c8:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039ca:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039cc:	69e1      	ldr	r1, [r4, #28]
 80039ce:	432a      	orrs	r2, r5
 80039d0:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039d2:	f420 4016 	bic.w	r0, r0, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039d6:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039d8:	f020 000c 	bic.w	r0, r0, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039dc:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039de:	4302      	orrs	r2, r0
 80039e0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	68e0      	ldr	r0, [r4, #12]
  tmpreg |= huart->Init.OneBitSampling;
 80039e6:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039e8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80039ec:	4302      	orrs	r2, r0
 80039ee:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039f0:	6898      	ldr	r0, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039f2:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039f4:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 80039f8:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039fa:	4302      	orrs	r2, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039fc:	486f      	ldr	r0, [pc, #444]	; (8003bbc <HAL_UART_Init+0x214>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039fe:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a00:	4283      	cmp	r3, r0
 8003a02:	d010      	beq.n	8003a26 <HAL_UART_Init+0x7e>
 8003a04:	4a6e      	ldr	r2, [pc, #440]	; (8003bc0 <HAL_UART_Init+0x218>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d040      	beq.n	8003a8c <HAL_UART_Init+0xe4>
 8003a0a:	4a6e      	ldr	r2, [pc, #440]	; (8003bc4 <HAL_UART_Init+0x21c>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	f000 8083 	beq.w	8003b18 <HAL_UART_Init+0x170>
  huart->RxISR = NULL;
 8003a12:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8003a14:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
}
 8003a18:	2001      	movs	r0, #1
 8003a1a:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 8003a1c:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 8003a20:	f7fd fc7c 	bl	800131c <HAL_UART_MspInit>
 8003a24:	e7c8      	b.n	80039b8 <HAL_UART_Init+0x10>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a26:	4b68      	ldr	r3, [pc, #416]	; (8003bc8 <HAL_UART_Init+0x220>)
 8003a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2a:	f003 0303 	and.w	r3, r3, #3
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d93d      	bls.n	8003ab0 <HAL_UART_Init+0x108>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a34:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003a38:	f000 80a4 	beq.w	8003b84 <HAL_UART_Init+0x1dc>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a3c:	f7fe fde4 	bl	8002608 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8003a40:	b160      	cbz	r0, 8003a5c <HAL_UART_Init+0xb4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a42:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a44:	f64f 72ef 	movw	r2, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a48:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003a4c:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a50:	f1a0 0310 	sub.w	r3, r0, #16
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d8dc      	bhi.n	8003a12 <HAL_UART_Init+0x6a>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a58:	6823      	ldr	r3, [r4, #0]
 8003a5a:	60d8      	str	r0, [r3, #12]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a5c:	6a62      	ldr	r2, [r4, #36]	; 0x24
  huart->RxISR = NULL;
 8003a5e:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8003a60:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a64:	2a00      	cmp	r2, #0
 8003a66:	d14b      	bne.n	8003b00 <HAL_UART_Init+0x158>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a68:	6823      	ldr	r3, [r4, #0]
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a70:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a78:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8003a80:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8003a82:	601a      	str	r2, [r3, #0]
}
 8003a84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return (UART_CheckIdleState(huart));
 8003a88:	f7ff be64 	b.w	8003754 <UART_CheckIdleState>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a8c:	4b4e      	ldr	r3, [pc, #312]	; (8003bc8 <HAL_UART_Init+0x220>)
 8003a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a98:	d02c      	beq.n	8003af4 <HAL_UART_Init+0x14c>
 8003a9a:	d835      	bhi.n	8003b08 <HAL_UART_Init+0x160>
 8003a9c:	b323      	cbz	r3, 8003ae8 <HAL_UART_Init+0x140>
 8003a9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa2:	d1b6      	bne.n	8003a12 <HAL_UART_Init+0x6a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003aa4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003aa8:	d04a      	beq.n	8003b40 <HAL_UART_Init+0x198>
        pclk = HAL_RCC_GetSysClockFreq();
 8003aaa:	f7fe fd5b 	bl	8002564 <HAL_RCC_GetSysClockFreq>
        break;
 8003aae:	e7c7      	b.n	8003a40 <HAL_UART_Init+0x98>
 8003ab0:	4a46      	ldr	r2, [pc, #280]	; (8003bcc <HAL_UART_Init+0x224>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ab2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003ab6:	5cd3      	ldrb	r3, [r2, r3]
 8003ab8:	d067      	beq.n	8003b8a <HAL_UART_Init+0x1e2>
    switch (clocksource)
 8003aba:	2b08      	cmp	r3, #8
 8003abc:	d8a9      	bhi.n	8003a12 <HAL_UART_Init+0x6a>
 8003abe:	a201      	add	r2, pc, #4	; (adr r2, 8003ac4 <HAL_UART_Init+0x11c>)
 8003ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac4:	08003aef 	.word	0x08003aef
 8003ac8:	08003a3d 	.word	0x08003a3d
 8003acc:	08003b15 	.word	0x08003b15
 8003ad0:	08003a13 	.word	0x08003a13
 8003ad4:	08003aab 	.word	0x08003aab
 8003ad8:	08003a13 	.word	0x08003a13
 8003adc:	08003a13 	.word	0x08003a13
 8003ae0:	08003a13 	.word	0x08003a13
 8003ae4:	08003afb 	.word	0x08003afb
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ae8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003aec:	d042      	beq.n	8003b74 <HAL_UART_Init+0x1cc>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003aee:	f7fe fd73 	bl	80025d8 <HAL_RCC_GetPCLK1Freq>
        break;
 8003af2:	e7a5      	b.n	8003a40 <HAL_UART_Init+0x98>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003af4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003af8:	d03f      	beq.n	8003b7a <HAL_UART_Init+0x1d2>
        pclk = (uint32_t) LSE_VALUE;
 8003afa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003afe:	e7a0      	b.n	8003a42 <HAL_UART_Init+0x9a>
    UART_AdvFeatureConfig(huart);
 8003b00:	4620      	mov	r0, r4
 8003b02:	f7ff fdcf 	bl	80036a4 <UART_AdvFeatureConfig>
 8003b06:	e7af      	b.n	8003a68 <HAL_UART_Init+0xc0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b08:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b0c:	d181      	bne.n	8003a12 <HAL_UART_Init+0x6a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b0e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003b12:	d035      	beq.n	8003b80 <HAL_UART_Init+0x1d8>
    switch (clocksource)
 8003b14:	482e      	ldr	r0, [pc, #184]	; (8003bd0 <HAL_UART_Init+0x228>)
 8003b16:	e794      	b.n	8003a42 <HAL_UART_Init+0x9a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b18:	4b2b      	ldr	r3, [pc, #172]	; (8003bc8 <HAL_UART_Init+0x220>)
 8003b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003b20:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b24:	d0e6      	beq.n	8003af4 <HAL_UART_Init+0x14c>
 8003b26:	d805      	bhi.n	8003b34 <HAL_UART_Init+0x18c>
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d0dd      	beq.n	8003ae8 <HAL_UART_Init+0x140>
 8003b2c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b30:	d0b8      	beq.n	8003aa4 <HAL_UART_Init+0xfc>
 8003b32:	e76e      	b.n	8003a12 <HAL_UART_Init+0x6a>
 8003b34:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003b38:	d0e9      	beq.n	8003b0e <HAL_UART_Init+0x166>
 8003b3a:	e76a      	b.n	8003a12 <HAL_UART_Init+0x6a>
}
 8003b3c:	2001      	movs	r0, #1
 8003b3e:	4770      	bx	lr
        pclk = HAL_RCC_GetSysClockFreq();
 8003b40:	f7fe fd10 	bl	8002564 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8003b44:	2800      	cmp	r0, #0
 8003b46:	d089      	beq.n	8003a5c <HAL_UART_Init+0xb4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b48:	0043      	lsls	r3, r0, #1
 8003b4a:	6862      	ldr	r2, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b4c:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b50:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8003b54:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b58:	f1a3 0210 	sub.w	r2, r3, #16
 8003b5c:	428a      	cmp	r2, r1
 8003b5e:	f63f af58 	bhi.w	8003a12 <HAL_UART_Init+0x6a>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b62:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8003b66:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b68:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b6a:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	60cb      	str	r3, [r1, #12]
  return ret;
 8003b72:	e773      	b.n	8003a5c <HAL_UART_Init+0xb4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b74:	f7fe fd30 	bl	80025d8 <HAL_RCC_GetPCLK1Freq>
        break;
 8003b78:	e7e4      	b.n	8003b44 <HAL_UART_Init+0x19c>
    switch (clocksource)
 8003b7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b7e:	e7e4      	b.n	8003b4a <HAL_UART_Init+0x1a2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b80:	4b14      	ldr	r3, [pc, #80]	; (8003bd4 <HAL_UART_Init+0x22c>)
 8003b82:	e7e2      	b.n	8003b4a <HAL_UART_Init+0x1a2>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b84:	f7fe fd40 	bl	8002608 <HAL_RCC_GetPCLK2Freq>
        break;
 8003b88:	e7dc      	b.n	8003b44 <HAL_UART_Init+0x19c>
    switch (clocksource)
 8003b8a:	2b08      	cmp	r3, #8
 8003b8c:	f63f af41 	bhi.w	8003a12 <HAL_UART_Init+0x6a>
 8003b90:	a201      	add	r2, pc, #4	; (adr r2, 8003b98 <HAL_UART_Init+0x1f0>)
 8003b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b96:	bf00      	nop
 8003b98:	08003b75 	.word	0x08003b75
 8003b9c:	08003b85 	.word	0x08003b85
 8003ba0:	08003b81 	.word	0x08003b81
 8003ba4:	08003a13 	.word	0x08003a13
 8003ba8:	08003b41 	.word	0x08003b41
 8003bac:	08003a13 	.word	0x08003a13
 8003bb0:	08003a13 	.word	0x08003a13
 8003bb4:	08003a13 	.word	0x08003a13
 8003bb8:	08003b7b 	.word	0x08003b7b
 8003bbc:	40013800 	.word	0x40013800
 8003bc0:	40004400 	.word	0x40004400
 8003bc4:	40004800 	.word	0x40004800
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	08006ce0 	.word	0x08006ce0
 8003bd0:	007a1200 	.word	0x007a1200
 8003bd4:	00f42400 	.word	0x00f42400

08003bd8 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop

08003bdc <_ZN8classLog13colorStringlnEiPKc>:
	print(s);
	print(format);
	print("\33[0m");
}
void classLog::colorStringln(int c, char const *const format)
{
 8003bdc:	b530      	push	{r4, r5, lr}
 8003bde:	460b      	mov	r3, r1
 8003be0:	b085      	sub	sp, #20
 8003be2:	4604      	mov	r4, r0
 8003be4:	4615      	mov	r5, r2
	sprintf(s, "\33[38;05;%dm",color);
 8003be6:	4913      	ldr	r1, [pc, #76]	; (8003c34 <_ZN8classLog13colorStringlnEiPKc+0x58>)
 8003be8:	461a      	mov	r2, r3
 8003bea:	4668      	mov	r0, sp
 8003bec:	f000 fef4 	bl	80049d8 <siprintf>
	void setUnderline(void);
	void setRevers(void);
	void setFlash(void);

	void print(char const *format) {
			HAL_UART_Transmit(huart, ( uint8_t*) format, strlen(format), 1000);
 8003bf0:	4668      	mov	r0, sp
 8003bf2:	f7fc fb3d 	bl	8000270 <strlen>
 8003bf6:	4669      	mov	r1, sp
 8003bf8:	b282      	uxth	r2, r0
 8003bfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bfe:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 8003c02:	f7ff fa85 	bl	8003110 <HAL_UART_Transmit>
 8003c06:	4628      	mov	r0, r5
 8003c08:	f7fc fb32 	bl	8000270 <strlen>
 8003c0c:	4629      	mov	r1, r5
 8003c0e:	b282      	uxth	r2, r0
 8003c10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c14:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 8003c18:	f7ff fa7a 	bl	8003110 <HAL_UART_Transmit>
 8003c1c:	4906      	ldr	r1, [pc, #24]	; (8003c38 <_ZN8classLog13colorStringlnEiPKc+0x5c>)
 8003c1e:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 8003c22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c26:	2205      	movs	r2, #5
	color(c);
	print(format);
	print("\33[0m\n");
}
 8003c28:	b005      	add	sp, #20
 8003c2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c2e:	f7ff ba6f 	b.w	8003110 <HAL_UART_Transmit>
 8003c32:	bf00      	nop
 8003c34:	08006ce4 	.word	0x08006ce4
 8003c38:	08006cf0 	.word	0x08006cf0

08003c3c <_Z11BT_Send_RAWPc>:
            _crc = _crc & 0x80 ? (_crc << 1) ^ 0x31 : _crc << 1;
    }
    return _crc;
}

void BT_Send_RAW(char *str) {
 8003c3c:	b538      	push	{r3, r4, r5, lr}
 8003c3e:	4605      	mov	r5, r0

	int max = strlen(str);
 8003c40:	f7fc fb16 	bl	8000270 <strlen>

	if (max < 128) {
 8003c44:	287f      	cmp	r0, #127	; 0x7f
	int max = strlen(str);
 8003c46:	4604      	mov	r4, r0
	if (max < 128) {
 8003c48:	d933      	bls.n	8003cb2 <_Z11BT_Send_RAWPc+0x76>
	}

	int index = 0;

	//Ждем завершение прошлой пересылки
	while (USART2_DMA_TX_Complete)
 8003c4a:	4920      	ldr	r1, [pc, #128]	; (8003ccc <_Z11BT_Send_RAWPc+0x90>)
 8003c4c:	680b      	ldr	r3, [r1, #0]
 8003c4e:	b11b      	cbz	r3, 8003c58 <_Z11BT_Send_RAWPc+0x1c>
	{
	   __NOP();
 8003c50:	bf00      	nop
	while (USART2_DMA_TX_Complete)
 8003c52:	680a      	ldr	r2, [r1, #0]
 8003c54:	2a00      	cmp	r2, #0
 8003c56:	d1fb      	bne.n	8003c50 <_Z11BT_Send_RAWPc+0x14>
	}

	DMA1_Channel7->CCR &= ~DMA_CCR_EN;   //Выключаем DMA
 8003c58:	4a1d      	ldr	r2, [pc, #116]	; (8003cd0 <_Z11BT_Send_RAWPc+0x94>)
	DMA1_Channel7->CCR &= ~DMA_CCR_TEIE; //Выкл прерывание по ошибке
	DMA1_Channel7->CCR |= DMA_CCR_TCIE;  //Вкл  перрывание завершению
	DMA1_Channel7->CPAR = 0x40004428;    //Адресс USART2 TDR
    DMA1_Channel7->CMAR = (uint32_t) str;
    DMA1_Channel7->CNDTR = max;
    USART2->CR3 |= USART_CR3_DMAT;       //Включение DMA передатчик
 8003c5a:	481e      	ldr	r0, [pc, #120]	; (8003cd4 <_Z11BT_Send_RAWPc+0x98>)
	DMA1_Channel7->CCR &= ~DMA_CCR_EN;   //Выключаем DMA
 8003c5c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8003c60:	f023 0301 	bic.w	r3, r3, #1
 8003c64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	DMA1_Channel7->CCR &= ~DMA_CCR_HTIE; //Выкл перрывание по половине
 8003c68:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8003c6c:	f023 0304 	bic.w	r3, r3, #4
 8003c70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	DMA1_Channel7->CCR &= ~DMA_CCR_TEIE; //Выкл прерывание по ошибке
 8003c74:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8003c78:	f023 0308 	bic.w	r3, r3, #8
 8003c7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	DMA1_Channel7->CCR |= DMA_CCR_TCIE;  //Вкл  перрывание завершению
 8003c80:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8003c84:	f043 0302 	orr.w	r3, r3, #2
 8003c88:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	DMA1_Channel7->CPAR = 0x40004428;    //Адресс USART2 TDR
 8003c8c:	4b12      	ldr	r3, [pc, #72]	; (8003cd8 <_Z11BT_Send_RAWPc+0x9c>)
 8003c8e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    DMA1_Channel7->CMAR = (uint32_t) str;
 8003c92:	f8c2 508c 	str.w	r5, [r2, #140]	; 0x8c
    DMA1_Channel7->CNDTR = max;
 8003c96:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
    USART2->CR3 |= USART_CR3_DMAT;       //Включение DMA передатчик
 8003c9a:	6883      	ldr	r3, [r0, #8]
    USART2_DMA_TX_Complete = 1;
 8003c9c:	2401      	movs	r4, #1
    USART2->CR3 |= USART_CR3_DMAT;       //Включение DMA передатчик
 8003c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ca2:	6083      	str	r3, [r0, #8]
    USART2_DMA_TX_Complete = 1;
 8003ca4:	600c      	str	r4, [r1, #0]
    DMA1_Channel7->CCR |= DMA_CCR_EN;   //Включаем DMA
 8003ca6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8003caa:	4323      	orrs	r3, r4
 8003cac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
//
//		if (index >= max)
//			break;
//	}

}
 8003cb0:	bd38      	pop	{r3, r4, r5, pc}
	void colorStringln(int color, char const *const format);
	void colorStringln(int color, int bgcolor, char const *const format);

	template<typename ... Args>
	void w(char const *const format, Args const &... args) noexcept {
		sprintf(str, format, args ...);
 8003cb2:	490a      	ldr	r1, [pc, #40]	; (8003cdc <_Z11BT_Send_RAWPc+0xa0>)
 8003cb4:	480a      	ldr	r0, [pc, #40]	; (8003ce0 <_Z11BT_Send_RAWPc+0xa4>)
 8003cb6:	2244      	movs	r2, #68	; 0x44
 8003cb8:	462b      	mov	r3, r5
 8003cba:	f000 fe8d 	bl	80049d8 <siprintf>
		colorStringln(11, str);
 8003cbe:	4a08      	ldr	r2, [pc, #32]	; (8003ce0 <_Z11BT_Send_RAWPc+0xa4>)
 8003cc0:	210b      	movs	r1, #11
 8003cc2:	4610      	mov	r0, r2
 8003cc4:	f7ff ff8a 	bl	8003bdc <_ZN8classLog13colorStringlnEiPKc>
 8003cc8:	e7bf      	b.n	8003c4a <_Z11BT_Send_RAWPc+0xe>
 8003cca:	bf00      	nop
 8003ccc:	200003ec 	.word	0x200003ec
 8003cd0:	40020000 	.word	0x40020000
 8003cd4:	40004400 	.word	0x40004400
 8003cd8:	40004428 	.word	0x40004428
 8003cdc:	08006cf8 	.word	0x08006cf8
 8003ce0:	200009fc 	.word	0x200009fc

08003ce4 <_Z14BT_Send_StringPc>:


char str16_1[1024];

void BT_Send_String(char *str) {
 8003ce4:	b510      	push	{r4, lr}
 8003ce6:	4604      	mov	r4, r0

	uint8_t crc;

	//sprintf(str16, "98#%s", str);

	crc = CRC8(&str[0], strlen(str));
 8003ce8:	f7fc fac2 	bl	8000270 <strlen>
    while (len--)
 8003cec:	2800      	cmp	r0, #0
 8003cee:	d06c      	beq.n	8003dca <_Z14BT_Send_StringPc+0xe6>
 8003cf0:	4420      	add	r0, r4
 8003cf2:	4621      	mov	r1, r4
    unsigned char _crc = 0xFF;
 8003cf4:	23ff      	movs	r3, #255	; 0xff
 8003cf6:	e02c      	b.n	8003d52 <_Z14BT_Send_StringPc+0x6e>
            _crc = _crc & 0x80 ? (_crc << 1) ^ 0x31 : _crc << 1;
 8003cf8:	b2da      	uxtb	r2, r3
 8003cfa:	b25b      	sxtb	r3, r3
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	db36      	blt.n	8003d6e <_Z14BT_Send_StringPc+0x8a>
 8003d00:	0053      	lsls	r3, r2, #1
 8003d02:	b2da      	uxtb	r2, r3
 8003d04:	b25b      	sxtb	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8003d0c:	db38      	blt.n	8003d80 <_Z14BT_Send_StringPc+0x9c>
 8003d0e:	b2d3      	uxtb	r3, r2
 8003d10:	b252      	sxtb	r2, r2
 8003d12:	2a00      	cmp	r2, #0
 8003d14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003d18:	db3a      	blt.n	8003d90 <_Z14BT_Send_StringPc+0xac>
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	b25b      	sxtb	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8003d24:	db3c      	blt.n	8003da0 <_Z14BT_Send_StringPc+0xbc>
 8003d26:	b2d3      	uxtb	r3, r2
 8003d28:	b252      	sxtb	r2, r2
 8003d2a:	2a00      	cmp	r2, #0
 8003d2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003d30:	db3e      	blt.n	8003db0 <_Z14BT_Send_StringPc+0xcc>
 8003d32:	b2da      	uxtb	r2, r3
 8003d34:	b25b      	sxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8003d3c:	db40      	blt.n	8003dc0 <_Z14BT_Send_StringPc+0xdc>
 8003d3e:	b2d3      	uxtb	r3, r2
 8003d40:	b252      	sxtb	r2, r2
 8003d42:	005b      	lsls	r3, r3, #1
 8003d44:	2a00      	cmp	r2, #0
 8003d46:	bfb8      	it	lt
 8003d48:	f083 0331 	eorlt.w	r3, r3, #49	; 0x31
    while (len--)
 8003d4c:	4281      	cmp	r1, r0
            _crc = _crc & 0x80 ? (_crc << 1) ^ 0x31 : _crc << 1;
 8003d4e:	b2db      	uxtb	r3, r3
    while (len--)
 8003d50:	d03c      	beq.n	8003dcc <_Z14BT_Send_StringPc+0xe8>
        _crc ^= *pcBlock++;
 8003d52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d56:	4053      	eors	r3, r2
            _crc = _crc & 0x80 ? (_crc << 1) ^ 0x31 : _crc << 1;
 8003d58:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003d5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003d60:	d0ca      	beq.n	8003cf8 <_Z14BT_Send_StringPc+0x14>
 8003d62:	f083 0231 	eor.w	r2, r3, #49	; 0x31
 8003d66:	b253      	sxtb	r3, r2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	b2d2      	uxtb	r2, r2
 8003d6c:	dac8      	bge.n	8003d00 <_Z14BT_Send_StringPc+0x1c>
 8003d6e:	0052      	lsls	r2, r2, #1
 8003d70:	f082 0231 	eor.w	r2, r2, #49	; 0x31
 8003d74:	b253      	sxtb	r3, r2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	b2d2      	uxtb	r2, r2
 8003d7a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8003d7e:	dac6      	bge.n	8003d0e <_Z14BT_Send_StringPc+0x2a>
 8003d80:	f082 0331 	eor.w	r3, r2, #49	; 0x31
 8003d84:	b25a      	sxtb	r2, r3
 8003d86:	2a00      	cmp	r2, #0
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003d8e:	dac4      	bge.n	8003d1a <_Z14BT_Send_StringPc+0x36>
 8003d90:	f083 0231 	eor.w	r2, r3, #49	; 0x31
 8003d94:	b253      	sxtb	r3, r2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	b2d2      	uxtb	r2, r2
 8003d9a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8003d9e:	dac2      	bge.n	8003d26 <_Z14BT_Send_StringPc+0x42>
 8003da0:	f082 0331 	eor.w	r3, r2, #49	; 0x31
 8003da4:	b25a      	sxtb	r2, r3
 8003da6:	2a00      	cmp	r2, #0
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003dae:	dac0      	bge.n	8003d32 <_Z14BT_Send_StringPc+0x4e>
 8003db0:	f083 0231 	eor.w	r2, r3, #49	; 0x31
 8003db4:	b253      	sxtb	r3, r2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	b2d2      	uxtb	r2, r2
 8003dba:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8003dbe:	dabe      	bge.n	8003d3e <_Z14BT_Send_StringPc+0x5a>
 8003dc0:	f082 0331 	eor.w	r3, r2, #49	; 0x31
 8003dc4:	b25a      	sxtb	r2, r3
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	e7bb      	b.n	8003d42 <_Z14BT_Send_StringPc+0x5e>
    while (len--)
 8003dca:	23ff      	movs	r3, #255	; 0xff

	sprintf(str16_1, "!%s;%d$\n", str, crc);
 8003dcc:	4622      	mov	r2, r4
 8003dce:	4904      	ldr	r1, [pc, #16]	; (8003de0 <_Z14BT_Send_StringPc+0xfc>)
 8003dd0:	4804      	ldr	r0, [pc, #16]	; (8003de4 <_Z14BT_Send_StringPc+0x100>)
 8003dd2:	f000 fe01 	bl	80049d8 <siprintf>

	BT_Send_RAW(&str16_1[0]);

	//HAL_UART_Transmit(&huart3, (uint8_t*) &str16_1[0], strlen(str16_1), 1000);

}
 8003dd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	BT_Send_RAW(&str16_1[0]);
 8003dda:	4802      	ldr	r0, [pc, #8]	; (8003de4 <_Z14BT_Send_StringPc+0x100>)
 8003ddc:	f7ff bf2e 	b.w	8003c3c <_Z11BT_Send_RAWPc>
 8003de0:	08006cfc 	.word	0x08006cfc
 8003de4:	20000598 	.word	0x20000598

08003de8 <HAL_ADC_ConvCpltCallback>:

	char str[256];

	UART_HandleTypeDef *huart;

	void w(char const *const format) {colorStringln(11, format);}
 8003de8:	4a02      	ldr	r2, [pc, #8]	; (8003df4 <HAL_ADC_ConvCpltCallback+0xc>)
 8003dea:	4803      	ldr	r0, [pc, #12]	; (8003df8 <HAL_ADC_ConvCpltCallback+0x10>)
 8003dec:	210b      	movs	r1, #11
 8003dee:	f7ff bef5 	b.w	8003bdc <_ZN8classLog13colorStringlnEiPKc>
 8003df2:	bf00      	nop
 8003df4:	08006d08 	.word	0x08006d08
 8003df8:	200009fc 	.word	0x200009fc
 8003dfc:	00000000 	.word	0x00000000

08003e00 <_Z4loopv>:
  /* This is called after the conversion is completed */
	log.w((char*) "HAL_ADC_ConvCpltCallback");

}

void loop() {
 8003e00:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
 8003e04:	ed2d 8b08 	vpush	{d8-d11}

	//ADC1->CR2 |= ADC_CR2_ADON;    //Запуск ADC
	//ADC1->CR2 |= ADC_CR2_SWSTART; //Start conversion of regular channels
	//ADC1->CR2 |= ADC_CR2_DMA;     //Direct memory access mode

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_buffer, 50);
 8003e08:	494d      	ldr	r1, [pc, #308]	; (8003f40 <_Z4loopv+0x140>)
 8003e0a:	484e      	ldr	r0, [pc, #312]	; (8003f44 <_Z4loopv+0x144>)
 8003e0c:	f8df 814c 	ldr.w	r8, [pc, #332]	; 8003f5c <_Z4loopv+0x15c>

	while (1) {
		//log.i((char*) "run");

		int16_t adcValue = HAL_SDADC_GetValue(&hsdadc1);
		float adcFValue = (3.281F) * (adcValue) / 32768 * 3.036 / 3.075;
 8003e10:	eddf 8a4d 	vldr	s17, [pc, #308]	; 8003f48 <_Z4loopv+0x148>
	if (volume >= 2.621F)
 8003e14:	ed9f ba4d 	vldr	s22, [pc, #308]	; 8003f4c <_Z4loopv+0x14c>
		int16_t adcValue = HAL_SDADC_GetValue(&hsdadc1);
 8003e18:	4f4d      	ldr	r7, [pc, #308]	; (8003f50 <_Z4loopv+0x150>)
void loop() {
 8003e1a:	b0a4      	sub	sp, #144	; 0x90
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_buffer, 50);
 8003e1c:	2232      	movs	r2, #50	; 0x32
 8003e1e:	f7fd fc95 	bl	800174c <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim19);
 8003e22:	484c      	ldr	r0, [pc, #304]	; (8003f54 <_Z4loopv+0x154>)
 8003e24:	f7fe ff9a 	bl	8002d5c <HAL_TIM_Base_Start_IT>
	HAL_Delay(1000);
 8003e28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e2c:	f7fd fb46 	bl	80014bc <HAL_Delay>
	HAL_SDADC_Start(&hsdadc1);
 8003e30:	4847      	ldr	r0, [pc, #284]	; (8003f50 <_Z4loopv+0x150>)
 8003e32:	f7fe fe03 	bl	8002a3c <HAL_SDADC_Start>
	SDADC1->CR2 |= SDADC_CR2_RSWSTART; // начало преобразования
 8003e36:	4a48      	ldr	r2, [pc, #288]	; (8003f58 <_Z4loopv+0x158>)
	HAL_SDADC_PollForConversion(&hsdadc1, 1000);
 8003e38:	4845      	ldr	r0, [pc, #276]	; (8003f50 <_Z4loopv+0x150>)
	SDADC1->CR2 |= SDADC_CR2_RSWSTART; // начало преобразования
 8003e3a:	6853      	ldr	r3, [r2, #4]
 8003e3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
	HAL_SDADC_PollForConversion(&hsdadc1, 1000);
 8003e40:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	SDADC1->CR2 |= SDADC_CR2_RSWSTART; // начало преобразования
 8003e44:	6053      	str	r3, [r2, #4]
	HAL_SDADC_PollForConversion(&hsdadc1, 1000);
 8003e46:	f7fe fe41 	bl	8002acc <HAL_SDADC_PollForConversion>
		float adcFValue = (3.281F) * (adcValue) / 32768 * 3.036 / 3.075;
 8003e4a:	a537      	add	r5, pc, #220	; (adr r5, 8003f28 <_Z4loopv+0x128>)
 8003e4c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003e50:	ed9f 9b37 	vldr	d9, [pc, #220]	; 8003f30 <_Z4loopv+0x130>
 8003e54:	ed9f ab38 	vldr	d10, [pc, #224]	; 8003f38 <_Z4loopv+0x138>
		int16_t adcValue = HAL_SDADC_GetValue(&hsdadc1);
 8003e58:	4638      	mov	r0, r7
 8003e5a:	f7fe fe2b 	bl	8002ab4 <HAL_SDADC_GetValue>
 8003e5e:	b206      	sxth	r6, r0
		float adcFValue = (3.281F) * (adcValue) / 32768 * 3.036 / 3.075;
 8003e60:	ee07 6a90 	vmov	s15, r6
 8003e64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e68:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8003e6c:	ee17 0a90 	vmov	r0, s15
 8003e70:	f7fc fb6a 	bl	8000548 <__aeabi_f2d>
 8003e74:	4622      	mov	r2, r4
 8003e76:	462b      	mov	r3, r5
 8003e78:	f7fc fbbe 	bl	80005f8 <__aeabi_dmul>
 8003e7c:	f7fc fe94 	bl	8000ba8 <__aeabi_d2f>
 8003e80:	ee08 0a10 	vmov	s16, r0
	if (volume <= 1.0F)
 8003e84:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003e88:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e90:	d944      	bls.n	8003f1c <_Z4loopv+0x11c>
	if (volume >= 2.621F)
 8003e92:	eeb4 8acb 	vcmpe.f32	s16, s22
 8003e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e9a:	da42      	bge.n	8003f22 <_Z4loopv+0x122>
 8003e9c:	492f      	ldr	r1, [pc, #188]	; (8003f5c <_Z4loopv+0x15c>)
	for (i = 0; i < 31; i++) {
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	e002      	b.n	8003ea8 <_Z4loopv+0xa8>
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	2b1f      	cmp	r3, #31
 8003ea6:	d039      	beq.n	8003f1c <_Z4loopv+0x11c>
		if (volume < table[i][1]) {
 8003ea8:	edd1 7a01 	vldr	s15, [r1, #4]
 8003eac:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	for (i = 0; i < 31; i++) {
 8003eb4:	f101 0108 	add.w	r1, r1, #8
		if (volume < table[i][1]) {
 8003eb8:	d5f3      	bpl.n	8003ea2 <_Z4loopv+0xa2>
			x0 = table[i-1][1];
 8003eba:	1e5a      	subs	r2, r3, #1
 8003ebc:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
 8003ec0:	ed92 7a01 	vldr	s14, [r2, #4]
			return (volume - x0) / (x1 - x0) * (y1 - y0) + y0;
 8003ec4:	ee38 6a47 	vsub.f32	s12, s16, s14
 8003ec8:	ee77 7ac7 	vsub.f32	s15, s15, s14
			y1 = table[i][0];
 8003ecc:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
			return (volume - x0) / (x1 - x0) * (y1 - y0) + y0;
 8003ed0:	eec6 6a27 	vdiv.f32	s13, s12, s15
			y0 = table[i-1][0];
 8003ed4:	ed92 7a00 	vldr	s14, [r2]
			return (volume - x0) / (x1 - x0) * (y1 - y0) + y0;
 8003ed8:	edd3 7a00 	vldr	s15, [r3]
 8003edc:	ee77 7ac7 	vsub.f32	s15, s15, s14

		float pressure = interpolatePressure(adcFValue);

		char s[128];
		//sprintf (s,"v1=%d f=%f p=%f", adcValue, adcFValue, pressure);
		sprintf (s,"v=%d f=%.3f p=%.1f", adcValue, adcFValue, pressure);
 8003ee0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8003ee4:	ee17 0a10 	vmov	r0, s14
 8003ee8:	f7fc fb2e 	bl	8000548 <__aeabi_f2d>
 8003eec:	4602      	mov	r2, r0
 8003eee:	460b      	mov	r3, r1
 8003ef0:	ee18 0a10 	vmov	r0, s16
 8003ef4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003ef8:	f7fc fb26 	bl	8000548 <__aeabi_f2d>
 8003efc:	4682      	mov	sl, r0
 8003efe:	468b      	mov	fp, r1
 8003f00:	4632      	mov	r2, r6
 8003f02:	4917      	ldr	r1, [pc, #92]	; (8003f60 <_Z4loopv+0x160>)
 8003f04:	e9cd ab00 	strd	sl, fp, [sp]
 8003f08:	a804      	add	r0, sp, #16
 8003f0a:	f000 fd65 	bl	80049d8 <siprintf>
		BT_Send_String(s);
 8003f0e:	a804      	add	r0, sp, #16
 8003f10:	f7ff fee8 	bl	8003ce4 <_Z14BT_Send_StringPc>



		//log.i("v1=%d f=%f p=%f", adcValue, adcFValue, pressure);

		HAL_Delay(10);
 8003f14:	200a      	movs	r0, #10
 8003f16:	f7fd fad1 	bl	80014bc <HAL_Delay>
	}
 8003f1a:	e79d      	b.n	8003e58 <_Z4loopv+0x58>
 8003f1c:	ec53 2b19 	vmov	r2, r3, d9
 8003f20:	e7e6      	b.n	8003ef0 <_Z4loopv+0xf0>
 8003f22:	ec53 2b1a 	vmov	r2, r3, d10
 8003f26:	e7e3      	b.n	8003ef0 <_Z4loopv+0xf0>
 8003f28:	f9819f98 	.word	0xf9819f98
 8003f2c:	3fef9819 	.word	0x3fef9819
	...
 8003f3c:	4072c000 	.word	0x4072c000
 8003f40:	20000998 	.word	0x20000998
 8003f44:	200002e8 	.word	0x200002e8
 8003f48:	38d1fbe7 	.word	0x38d1fbe7
 8003f4c:	4027be77 	.word	0x4027be77
 8003f50:	2000035c 	.word	0x2000035c
 8003f54:	200003f4 	.word	0x200003f4
 8003f58:	40016000 	.word	0x40016000
 8003f5c:	2000000c 	.word	0x2000000c
 8003f60:	08006d24 	.word	0x08006d24

08003f64 <setup>:
	void init(UART_HandleTypeDef *_huart) {	huart = _huart; }
 8003f64:	4805      	ldr	r0, [pc, #20]	; (8003f7c <setup+0x18>)
	void w(char const *const format) {colorStringln(11, format);}
 8003f66:	4a06      	ldr	r2, [pc, #24]	; (8003f80 <setup+0x1c>)
extern "C" void setup() {
 8003f68:	b508      	push	{r3, lr}
 8003f6a:	210b      	movs	r1, #11
	void init(UART_HandleTypeDef *_huart) {	huart = _huart; }
 8003f6c:	4b05      	ldr	r3, [pc, #20]	; (8003f84 <setup+0x20>)
 8003f6e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
	void w(char const *const format) {colorStringln(11, format);}
 8003f72:	f7ff fe33 	bl	8003bdc <_ZN8classLog13colorStringlnEiPKc>
	loop();
 8003f76:	f7ff ff43 	bl	8003e00 <_Z4loopv>
 8003f7a:	bf00      	nop
 8003f7c:	200009fc 	.word	0x200009fc
 8003f80:	08006d38 	.word	0x08006d38
 8003f84:	20000484 	.word	0x20000484

08003f88 <__cvt>:
 8003f88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f8c:	ec55 4b10 	vmov	r4, r5, d0
 8003f90:	2d00      	cmp	r5, #0
 8003f92:	460e      	mov	r6, r1
 8003f94:	4619      	mov	r1, r3
 8003f96:	462b      	mov	r3, r5
 8003f98:	bfbb      	ittet	lt
 8003f9a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003f9e:	461d      	movlt	r5, r3
 8003fa0:	2300      	movge	r3, #0
 8003fa2:	232d      	movlt	r3, #45	; 0x2d
 8003fa4:	700b      	strb	r3, [r1, #0]
 8003fa6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003fa8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003fac:	4691      	mov	r9, r2
 8003fae:	f023 0820 	bic.w	r8, r3, #32
 8003fb2:	bfbc      	itt	lt
 8003fb4:	4622      	movlt	r2, r4
 8003fb6:	4614      	movlt	r4, r2
 8003fb8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003fbc:	d005      	beq.n	8003fca <__cvt+0x42>
 8003fbe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003fc2:	d100      	bne.n	8003fc6 <__cvt+0x3e>
 8003fc4:	3601      	adds	r6, #1
 8003fc6:	2102      	movs	r1, #2
 8003fc8:	e000      	b.n	8003fcc <__cvt+0x44>
 8003fca:	2103      	movs	r1, #3
 8003fcc:	ab03      	add	r3, sp, #12
 8003fce:	9301      	str	r3, [sp, #4]
 8003fd0:	ab02      	add	r3, sp, #8
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	ec45 4b10 	vmov	d0, r4, r5
 8003fd8:	4653      	mov	r3, sl
 8003fda:	4632      	mov	r2, r6
 8003fdc:	f000 fe68 	bl	8004cb0 <_dtoa_r>
 8003fe0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003fe4:	4607      	mov	r7, r0
 8003fe6:	d102      	bne.n	8003fee <__cvt+0x66>
 8003fe8:	f019 0f01 	tst.w	r9, #1
 8003fec:	d022      	beq.n	8004034 <__cvt+0xac>
 8003fee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003ff2:	eb07 0906 	add.w	r9, r7, r6
 8003ff6:	d110      	bne.n	800401a <__cvt+0x92>
 8003ff8:	783b      	ldrb	r3, [r7, #0]
 8003ffa:	2b30      	cmp	r3, #48	; 0x30
 8003ffc:	d10a      	bne.n	8004014 <__cvt+0x8c>
 8003ffe:	2200      	movs	r2, #0
 8004000:	2300      	movs	r3, #0
 8004002:	4620      	mov	r0, r4
 8004004:	4629      	mov	r1, r5
 8004006:	f7fc fd5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800400a:	b918      	cbnz	r0, 8004014 <__cvt+0x8c>
 800400c:	f1c6 0601 	rsb	r6, r6, #1
 8004010:	f8ca 6000 	str.w	r6, [sl]
 8004014:	f8da 3000 	ldr.w	r3, [sl]
 8004018:	4499      	add	r9, r3
 800401a:	2200      	movs	r2, #0
 800401c:	2300      	movs	r3, #0
 800401e:	4620      	mov	r0, r4
 8004020:	4629      	mov	r1, r5
 8004022:	f7fc fd51 	bl	8000ac8 <__aeabi_dcmpeq>
 8004026:	b108      	cbz	r0, 800402c <__cvt+0xa4>
 8004028:	f8cd 900c 	str.w	r9, [sp, #12]
 800402c:	2230      	movs	r2, #48	; 0x30
 800402e:	9b03      	ldr	r3, [sp, #12]
 8004030:	454b      	cmp	r3, r9
 8004032:	d307      	bcc.n	8004044 <__cvt+0xbc>
 8004034:	9b03      	ldr	r3, [sp, #12]
 8004036:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004038:	1bdb      	subs	r3, r3, r7
 800403a:	4638      	mov	r0, r7
 800403c:	6013      	str	r3, [r2, #0]
 800403e:	b004      	add	sp, #16
 8004040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004044:	1c59      	adds	r1, r3, #1
 8004046:	9103      	str	r1, [sp, #12]
 8004048:	701a      	strb	r2, [r3, #0]
 800404a:	e7f0      	b.n	800402e <__cvt+0xa6>

0800404c <__exponent>:
 800404c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800404e:	4603      	mov	r3, r0
 8004050:	2900      	cmp	r1, #0
 8004052:	bfb8      	it	lt
 8004054:	4249      	neglt	r1, r1
 8004056:	f803 2b02 	strb.w	r2, [r3], #2
 800405a:	bfb4      	ite	lt
 800405c:	222d      	movlt	r2, #45	; 0x2d
 800405e:	222b      	movge	r2, #43	; 0x2b
 8004060:	2909      	cmp	r1, #9
 8004062:	7042      	strb	r2, [r0, #1]
 8004064:	dd2a      	ble.n	80040bc <__exponent+0x70>
 8004066:	f10d 0207 	add.w	r2, sp, #7
 800406a:	4617      	mov	r7, r2
 800406c:	260a      	movs	r6, #10
 800406e:	4694      	mov	ip, r2
 8004070:	fb91 f5f6 	sdiv	r5, r1, r6
 8004074:	fb06 1415 	mls	r4, r6, r5, r1
 8004078:	3430      	adds	r4, #48	; 0x30
 800407a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800407e:	460c      	mov	r4, r1
 8004080:	2c63      	cmp	r4, #99	; 0x63
 8004082:	f102 32ff 	add.w	r2, r2, #4294967295
 8004086:	4629      	mov	r1, r5
 8004088:	dcf1      	bgt.n	800406e <__exponent+0x22>
 800408a:	3130      	adds	r1, #48	; 0x30
 800408c:	f1ac 0402 	sub.w	r4, ip, #2
 8004090:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004094:	1c41      	adds	r1, r0, #1
 8004096:	4622      	mov	r2, r4
 8004098:	42ba      	cmp	r2, r7
 800409a:	d30a      	bcc.n	80040b2 <__exponent+0x66>
 800409c:	f10d 0209 	add.w	r2, sp, #9
 80040a0:	eba2 020c 	sub.w	r2, r2, ip
 80040a4:	42bc      	cmp	r4, r7
 80040a6:	bf88      	it	hi
 80040a8:	2200      	movhi	r2, #0
 80040aa:	4413      	add	r3, r2
 80040ac:	1a18      	subs	r0, r3, r0
 80040ae:	b003      	add	sp, #12
 80040b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040b2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80040b6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80040ba:	e7ed      	b.n	8004098 <__exponent+0x4c>
 80040bc:	2330      	movs	r3, #48	; 0x30
 80040be:	3130      	adds	r1, #48	; 0x30
 80040c0:	7083      	strb	r3, [r0, #2]
 80040c2:	70c1      	strb	r1, [r0, #3]
 80040c4:	1d03      	adds	r3, r0, #4
 80040c6:	e7f1      	b.n	80040ac <__exponent+0x60>

080040c8 <_printf_float>:
 80040c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040cc:	ed2d 8b02 	vpush	{d8}
 80040d0:	b08d      	sub	sp, #52	; 0x34
 80040d2:	460c      	mov	r4, r1
 80040d4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80040d8:	4616      	mov	r6, r2
 80040da:	461f      	mov	r7, r3
 80040dc:	4605      	mov	r5, r0
 80040de:	f000 fce7 	bl	8004ab0 <_localeconv_r>
 80040e2:	f8d0 a000 	ldr.w	sl, [r0]
 80040e6:	4650      	mov	r0, sl
 80040e8:	f7fc f8c2 	bl	8000270 <strlen>
 80040ec:	2300      	movs	r3, #0
 80040ee:	930a      	str	r3, [sp, #40]	; 0x28
 80040f0:	6823      	ldr	r3, [r4, #0]
 80040f2:	9305      	str	r3, [sp, #20]
 80040f4:	f8d8 3000 	ldr.w	r3, [r8]
 80040f8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80040fc:	3307      	adds	r3, #7
 80040fe:	f023 0307 	bic.w	r3, r3, #7
 8004102:	f103 0208 	add.w	r2, r3, #8
 8004106:	f8c8 2000 	str.w	r2, [r8]
 800410a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800410e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004112:	9307      	str	r3, [sp, #28]
 8004114:	f8cd 8018 	str.w	r8, [sp, #24]
 8004118:	ee08 0a10 	vmov	s16, r0
 800411c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004120:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004124:	4b9e      	ldr	r3, [pc, #632]	; (80043a0 <_printf_float+0x2d8>)
 8004126:	f04f 32ff 	mov.w	r2, #4294967295
 800412a:	f7fc fcff 	bl	8000b2c <__aeabi_dcmpun>
 800412e:	bb88      	cbnz	r0, 8004194 <_printf_float+0xcc>
 8004130:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004134:	4b9a      	ldr	r3, [pc, #616]	; (80043a0 <_printf_float+0x2d8>)
 8004136:	f04f 32ff 	mov.w	r2, #4294967295
 800413a:	f7fc fcd9 	bl	8000af0 <__aeabi_dcmple>
 800413e:	bb48      	cbnz	r0, 8004194 <_printf_float+0xcc>
 8004140:	2200      	movs	r2, #0
 8004142:	2300      	movs	r3, #0
 8004144:	4640      	mov	r0, r8
 8004146:	4649      	mov	r1, r9
 8004148:	f7fc fcc8 	bl	8000adc <__aeabi_dcmplt>
 800414c:	b110      	cbz	r0, 8004154 <_printf_float+0x8c>
 800414e:	232d      	movs	r3, #45	; 0x2d
 8004150:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004154:	4a93      	ldr	r2, [pc, #588]	; (80043a4 <_printf_float+0x2dc>)
 8004156:	4b94      	ldr	r3, [pc, #592]	; (80043a8 <_printf_float+0x2e0>)
 8004158:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800415c:	bf94      	ite	ls
 800415e:	4690      	movls	r8, r2
 8004160:	4698      	movhi	r8, r3
 8004162:	2303      	movs	r3, #3
 8004164:	6123      	str	r3, [r4, #16]
 8004166:	9b05      	ldr	r3, [sp, #20]
 8004168:	f023 0304 	bic.w	r3, r3, #4
 800416c:	6023      	str	r3, [r4, #0]
 800416e:	f04f 0900 	mov.w	r9, #0
 8004172:	9700      	str	r7, [sp, #0]
 8004174:	4633      	mov	r3, r6
 8004176:	aa0b      	add	r2, sp, #44	; 0x2c
 8004178:	4621      	mov	r1, r4
 800417a:	4628      	mov	r0, r5
 800417c:	f000 f9da 	bl	8004534 <_printf_common>
 8004180:	3001      	adds	r0, #1
 8004182:	f040 8090 	bne.w	80042a6 <_printf_float+0x1de>
 8004186:	f04f 30ff 	mov.w	r0, #4294967295
 800418a:	b00d      	add	sp, #52	; 0x34
 800418c:	ecbd 8b02 	vpop	{d8}
 8004190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004194:	4642      	mov	r2, r8
 8004196:	464b      	mov	r3, r9
 8004198:	4640      	mov	r0, r8
 800419a:	4649      	mov	r1, r9
 800419c:	f7fc fcc6 	bl	8000b2c <__aeabi_dcmpun>
 80041a0:	b140      	cbz	r0, 80041b4 <_printf_float+0xec>
 80041a2:	464b      	mov	r3, r9
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	bfbc      	itt	lt
 80041a8:	232d      	movlt	r3, #45	; 0x2d
 80041aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80041ae:	4a7f      	ldr	r2, [pc, #508]	; (80043ac <_printf_float+0x2e4>)
 80041b0:	4b7f      	ldr	r3, [pc, #508]	; (80043b0 <_printf_float+0x2e8>)
 80041b2:	e7d1      	b.n	8004158 <_printf_float+0x90>
 80041b4:	6863      	ldr	r3, [r4, #4]
 80041b6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80041ba:	9206      	str	r2, [sp, #24]
 80041bc:	1c5a      	adds	r2, r3, #1
 80041be:	d13f      	bne.n	8004240 <_printf_float+0x178>
 80041c0:	2306      	movs	r3, #6
 80041c2:	6063      	str	r3, [r4, #4]
 80041c4:	9b05      	ldr	r3, [sp, #20]
 80041c6:	6861      	ldr	r1, [r4, #4]
 80041c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80041cc:	2300      	movs	r3, #0
 80041ce:	9303      	str	r3, [sp, #12]
 80041d0:	ab0a      	add	r3, sp, #40	; 0x28
 80041d2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80041d6:	ab09      	add	r3, sp, #36	; 0x24
 80041d8:	ec49 8b10 	vmov	d0, r8, r9
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	6022      	str	r2, [r4, #0]
 80041e0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80041e4:	4628      	mov	r0, r5
 80041e6:	f7ff fecf 	bl	8003f88 <__cvt>
 80041ea:	9b06      	ldr	r3, [sp, #24]
 80041ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80041ee:	2b47      	cmp	r3, #71	; 0x47
 80041f0:	4680      	mov	r8, r0
 80041f2:	d108      	bne.n	8004206 <_printf_float+0x13e>
 80041f4:	1cc8      	adds	r0, r1, #3
 80041f6:	db02      	blt.n	80041fe <_printf_float+0x136>
 80041f8:	6863      	ldr	r3, [r4, #4]
 80041fa:	4299      	cmp	r1, r3
 80041fc:	dd41      	ble.n	8004282 <_printf_float+0x1ba>
 80041fe:	f1ab 0302 	sub.w	r3, fp, #2
 8004202:	fa5f fb83 	uxtb.w	fp, r3
 8004206:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800420a:	d820      	bhi.n	800424e <_printf_float+0x186>
 800420c:	3901      	subs	r1, #1
 800420e:	465a      	mov	r2, fp
 8004210:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004214:	9109      	str	r1, [sp, #36]	; 0x24
 8004216:	f7ff ff19 	bl	800404c <__exponent>
 800421a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800421c:	1813      	adds	r3, r2, r0
 800421e:	2a01      	cmp	r2, #1
 8004220:	4681      	mov	r9, r0
 8004222:	6123      	str	r3, [r4, #16]
 8004224:	dc02      	bgt.n	800422c <_printf_float+0x164>
 8004226:	6822      	ldr	r2, [r4, #0]
 8004228:	07d2      	lsls	r2, r2, #31
 800422a:	d501      	bpl.n	8004230 <_printf_float+0x168>
 800422c:	3301      	adds	r3, #1
 800422e:	6123      	str	r3, [r4, #16]
 8004230:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004234:	2b00      	cmp	r3, #0
 8004236:	d09c      	beq.n	8004172 <_printf_float+0xaa>
 8004238:	232d      	movs	r3, #45	; 0x2d
 800423a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800423e:	e798      	b.n	8004172 <_printf_float+0xaa>
 8004240:	9a06      	ldr	r2, [sp, #24]
 8004242:	2a47      	cmp	r2, #71	; 0x47
 8004244:	d1be      	bne.n	80041c4 <_printf_float+0xfc>
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1bc      	bne.n	80041c4 <_printf_float+0xfc>
 800424a:	2301      	movs	r3, #1
 800424c:	e7b9      	b.n	80041c2 <_printf_float+0xfa>
 800424e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004252:	d118      	bne.n	8004286 <_printf_float+0x1be>
 8004254:	2900      	cmp	r1, #0
 8004256:	6863      	ldr	r3, [r4, #4]
 8004258:	dd0b      	ble.n	8004272 <_printf_float+0x1aa>
 800425a:	6121      	str	r1, [r4, #16]
 800425c:	b913      	cbnz	r3, 8004264 <_printf_float+0x19c>
 800425e:	6822      	ldr	r2, [r4, #0]
 8004260:	07d0      	lsls	r0, r2, #31
 8004262:	d502      	bpl.n	800426a <_printf_float+0x1a2>
 8004264:	3301      	adds	r3, #1
 8004266:	440b      	add	r3, r1
 8004268:	6123      	str	r3, [r4, #16]
 800426a:	65a1      	str	r1, [r4, #88]	; 0x58
 800426c:	f04f 0900 	mov.w	r9, #0
 8004270:	e7de      	b.n	8004230 <_printf_float+0x168>
 8004272:	b913      	cbnz	r3, 800427a <_printf_float+0x1b2>
 8004274:	6822      	ldr	r2, [r4, #0]
 8004276:	07d2      	lsls	r2, r2, #31
 8004278:	d501      	bpl.n	800427e <_printf_float+0x1b6>
 800427a:	3302      	adds	r3, #2
 800427c:	e7f4      	b.n	8004268 <_printf_float+0x1a0>
 800427e:	2301      	movs	r3, #1
 8004280:	e7f2      	b.n	8004268 <_printf_float+0x1a0>
 8004282:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004288:	4299      	cmp	r1, r3
 800428a:	db05      	blt.n	8004298 <_printf_float+0x1d0>
 800428c:	6823      	ldr	r3, [r4, #0]
 800428e:	6121      	str	r1, [r4, #16]
 8004290:	07d8      	lsls	r0, r3, #31
 8004292:	d5ea      	bpl.n	800426a <_printf_float+0x1a2>
 8004294:	1c4b      	adds	r3, r1, #1
 8004296:	e7e7      	b.n	8004268 <_printf_float+0x1a0>
 8004298:	2900      	cmp	r1, #0
 800429a:	bfd4      	ite	le
 800429c:	f1c1 0202 	rsble	r2, r1, #2
 80042a0:	2201      	movgt	r2, #1
 80042a2:	4413      	add	r3, r2
 80042a4:	e7e0      	b.n	8004268 <_printf_float+0x1a0>
 80042a6:	6823      	ldr	r3, [r4, #0]
 80042a8:	055a      	lsls	r2, r3, #21
 80042aa:	d407      	bmi.n	80042bc <_printf_float+0x1f4>
 80042ac:	6923      	ldr	r3, [r4, #16]
 80042ae:	4642      	mov	r2, r8
 80042b0:	4631      	mov	r1, r6
 80042b2:	4628      	mov	r0, r5
 80042b4:	47b8      	blx	r7
 80042b6:	3001      	adds	r0, #1
 80042b8:	d12c      	bne.n	8004314 <_printf_float+0x24c>
 80042ba:	e764      	b.n	8004186 <_printf_float+0xbe>
 80042bc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80042c0:	f240 80e0 	bls.w	8004484 <_printf_float+0x3bc>
 80042c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80042c8:	2200      	movs	r2, #0
 80042ca:	2300      	movs	r3, #0
 80042cc:	f7fc fbfc 	bl	8000ac8 <__aeabi_dcmpeq>
 80042d0:	2800      	cmp	r0, #0
 80042d2:	d034      	beq.n	800433e <_printf_float+0x276>
 80042d4:	4a37      	ldr	r2, [pc, #220]	; (80043b4 <_printf_float+0x2ec>)
 80042d6:	2301      	movs	r3, #1
 80042d8:	4631      	mov	r1, r6
 80042da:	4628      	mov	r0, r5
 80042dc:	47b8      	blx	r7
 80042de:	3001      	adds	r0, #1
 80042e0:	f43f af51 	beq.w	8004186 <_printf_float+0xbe>
 80042e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042e8:	429a      	cmp	r2, r3
 80042ea:	db02      	blt.n	80042f2 <_printf_float+0x22a>
 80042ec:	6823      	ldr	r3, [r4, #0]
 80042ee:	07d8      	lsls	r0, r3, #31
 80042f0:	d510      	bpl.n	8004314 <_printf_float+0x24c>
 80042f2:	ee18 3a10 	vmov	r3, s16
 80042f6:	4652      	mov	r2, sl
 80042f8:	4631      	mov	r1, r6
 80042fa:	4628      	mov	r0, r5
 80042fc:	47b8      	blx	r7
 80042fe:	3001      	adds	r0, #1
 8004300:	f43f af41 	beq.w	8004186 <_printf_float+0xbe>
 8004304:	f04f 0800 	mov.w	r8, #0
 8004308:	f104 091a 	add.w	r9, r4, #26
 800430c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800430e:	3b01      	subs	r3, #1
 8004310:	4543      	cmp	r3, r8
 8004312:	dc09      	bgt.n	8004328 <_printf_float+0x260>
 8004314:	6823      	ldr	r3, [r4, #0]
 8004316:	079b      	lsls	r3, r3, #30
 8004318:	f100 8107 	bmi.w	800452a <_printf_float+0x462>
 800431c:	68e0      	ldr	r0, [r4, #12]
 800431e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004320:	4298      	cmp	r0, r3
 8004322:	bfb8      	it	lt
 8004324:	4618      	movlt	r0, r3
 8004326:	e730      	b.n	800418a <_printf_float+0xc2>
 8004328:	2301      	movs	r3, #1
 800432a:	464a      	mov	r2, r9
 800432c:	4631      	mov	r1, r6
 800432e:	4628      	mov	r0, r5
 8004330:	47b8      	blx	r7
 8004332:	3001      	adds	r0, #1
 8004334:	f43f af27 	beq.w	8004186 <_printf_float+0xbe>
 8004338:	f108 0801 	add.w	r8, r8, #1
 800433c:	e7e6      	b.n	800430c <_printf_float+0x244>
 800433e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004340:	2b00      	cmp	r3, #0
 8004342:	dc39      	bgt.n	80043b8 <_printf_float+0x2f0>
 8004344:	4a1b      	ldr	r2, [pc, #108]	; (80043b4 <_printf_float+0x2ec>)
 8004346:	2301      	movs	r3, #1
 8004348:	4631      	mov	r1, r6
 800434a:	4628      	mov	r0, r5
 800434c:	47b8      	blx	r7
 800434e:	3001      	adds	r0, #1
 8004350:	f43f af19 	beq.w	8004186 <_printf_float+0xbe>
 8004354:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004358:	4313      	orrs	r3, r2
 800435a:	d102      	bne.n	8004362 <_printf_float+0x29a>
 800435c:	6823      	ldr	r3, [r4, #0]
 800435e:	07d9      	lsls	r1, r3, #31
 8004360:	d5d8      	bpl.n	8004314 <_printf_float+0x24c>
 8004362:	ee18 3a10 	vmov	r3, s16
 8004366:	4652      	mov	r2, sl
 8004368:	4631      	mov	r1, r6
 800436a:	4628      	mov	r0, r5
 800436c:	47b8      	blx	r7
 800436e:	3001      	adds	r0, #1
 8004370:	f43f af09 	beq.w	8004186 <_printf_float+0xbe>
 8004374:	f04f 0900 	mov.w	r9, #0
 8004378:	f104 0a1a 	add.w	sl, r4, #26
 800437c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800437e:	425b      	negs	r3, r3
 8004380:	454b      	cmp	r3, r9
 8004382:	dc01      	bgt.n	8004388 <_printf_float+0x2c0>
 8004384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004386:	e792      	b.n	80042ae <_printf_float+0x1e6>
 8004388:	2301      	movs	r3, #1
 800438a:	4652      	mov	r2, sl
 800438c:	4631      	mov	r1, r6
 800438e:	4628      	mov	r0, r5
 8004390:	47b8      	blx	r7
 8004392:	3001      	adds	r0, #1
 8004394:	f43f aef7 	beq.w	8004186 <_printf_float+0xbe>
 8004398:	f109 0901 	add.w	r9, r9, #1
 800439c:	e7ee      	b.n	800437c <_printf_float+0x2b4>
 800439e:	bf00      	nop
 80043a0:	7fefffff 	.word	0x7fefffff
 80043a4:	08006d43 	.word	0x08006d43
 80043a8:	08006d47 	.word	0x08006d47
 80043ac:	08006d4b 	.word	0x08006d4b
 80043b0:	08006d4f 	.word	0x08006d4f
 80043b4:	08006d53 	.word	0x08006d53
 80043b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80043ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80043bc:	429a      	cmp	r2, r3
 80043be:	bfa8      	it	ge
 80043c0:	461a      	movge	r2, r3
 80043c2:	2a00      	cmp	r2, #0
 80043c4:	4691      	mov	r9, r2
 80043c6:	dc37      	bgt.n	8004438 <_printf_float+0x370>
 80043c8:	f04f 0b00 	mov.w	fp, #0
 80043cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80043d0:	f104 021a 	add.w	r2, r4, #26
 80043d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80043d6:	9305      	str	r3, [sp, #20]
 80043d8:	eba3 0309 	sub.w	r3, r3, r9
 80043dc:	455b      	cmp	r3, fp
 80043de:	dc33      	bgt.n	8004448 <_printf_float+0x380>
 80043e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043e4:	429a      	cmp	r2, r3
 80043e6:	db3b      	blt.n	8004460 <_printf_float+0x398>
 80043e8:	6823      	ldr	r3, [r4, #0]
 80043ea:	07da      	lsls	r2, r3, #31
 80043ec:	d438      	bmi.n	8004460 <_printf_float+0x398>
 80043ee:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80043f2:	eba2 0903 	sub.w	r9, r2, r3
 80043f6:	9b05      	ldr	r3, [sp, #20]
 80043f8:	1ad2      	subs	r2, r2, r3
 80043fa:	4591      	cmp	r9, r2
 80043fc:	bfa8      	it	ge
 80043fe:	4691      	movge	r9, r2
 8004400:	f1b9 0f00 	cmp.w	r9, #0
 8004404:	dc35      	bgt.n	8004472 <_printf_float+0x3aa>
 8004406:	f04f 0800 	mov.w	r8, #0
 800440a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800440e:	f104 0a1a 	add.w	sl, r4, #26
 8004412:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004416:	1a9b      	subs	r3, r3, r2
 8004418:	eba3 0309 	sub.w	r3, r3, r9
 800441c:	4543      	cmp	r3, r8
 800441e:	f77f af79 	ble.w	8004314 <_printf_float+0x24c>
 8004422:	2301      	movs	r3, #1
 8004424:	4652      	mov	r2, sl
 8004426:	4631      	mov	r1, r6
 8004428:	4628      	mov	r0, r5
 800442a:	47b8      	blx	r7
 800442c:	3001      	adds	r0, #1
 800442e:	f43f aeaa 	beq.w	8004186 <_printf_float+0xbe>
 8004432:	f108 0801 	add.w	r8, r8, #1
 8004436:	e7ec      	b.n	8004412 <_printf_float+0x34a>
 8004438:	4613      	mov	r3, r2
 800443a:	4631      	mov	r1, r6
 800443c:	4642      	mov	r2, r8
 800443e:	4628      	mov	r0, r5
 8004440:	47b8      	blx	r7
 8004442:	3001      	adds	r0, #1
 8004444:	d1c0      	bne.n	80043c8 <_printf_float+0x300>
 8004446:	e69e      	b.n	8004186 <_printf_float+0xbe>
 8004448:	2301      	movs	r3, #1
 800444a:	4631      	mov	r1, r6
 800444c:	4628      	mov	r0, r5
 800444e:	9205      	str	r2, [sp, #20]
 8004450:	47b8      	blx	r7
 8004452:	3001      	adds	r0, #1
 8004454:	f43f ae97 	beq.w	8004186 <_printf_float+0xbe>
 8004458:	9a05      	ldr	r2, [sp, #20]
 800445a:	f10b 0b01 	add.w	fp, fp, #1
 800445e:	e7b9      	b.n	80043d4 <_printf_float+0x30c>
 8004460:	ee18 3a10 	vmov	r3, s16
 8004464:	4652      	mov	r2, sl
 8004466:	4631      	mov	r1, r6
 8004468:	4628      	mov	r0, r5
 800446a:	47b8      	blx	r7
 800446c:	3001      	adds	r0, #1
 800446e:	d1be      	bne.n	80043ee <_printf_float+0x326>
 8004470:	e689      	b.n	8004186 <_printf_float+0xbe>
 8004472:	9a05      	ldr	r2, [sp, #20]
 8004474:	464b      	mov	r3, r9
 8004476:	4442      	add	r2, r8
 8004478:	4631      	mov	r1, r6
 800447a:	4628      	mov	r0, r5
 800447c:	47b8      	blx	r7
 800447e:	3001      	adds	r0, #1
 8004480:	d1c1      	bne.n	8004406 <_printf_float+0x33e>
 8004482:	e680      	b.n	8004186 <_printf_float+0xbe>
 8004484:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004486:	2a01      	cmp	r2, #1
 8004488:	dc01      	bgt.n	800448e <_printf_float+0x3c6>
 800448a:	07db      	lsls	r3, r3, #31
 800448c:	d53a      	bpl.n	8004504 <_printf_float+0x43c>
 800448e:	2301      	movs	r3, #1
 8004490:	4642      	mov	r2, r8
 8004492:	4631      	mov	r1, r6
 8004494:	4628      	mov	r0, r5
 8004496:	47b8      	blx	r7
 8004498:	3001      	adds	r0, #1
 800449a:	f43f ae74 	beq.w	8004186 <_printf_float+0xbe>
 800449e:	ee18 3a10 	vmov	r3, s16
 80044a2:	4652      	mov	r2, sl
 80044a4:	4631      	mov	r1, r6
 80044a6:	4628      	mov	r0, r5
 80044a8:	47b8      	blx	r7
 80044aa:	3001      	adds	r0, #1
 80044ac:	f43f ae6b 	beq.w	8004186 <_printf_float+0xbe>
 80044b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80044b4:	2200      	movs	r2, #0
 80044b6:	2300      	movs	r3, #0
 80044b8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80044bc:	f7fc fb04 	bl	8000ac8 <__aeabi_dcmpeq>
 80044c0:	b9d8      	cbnz	r0, 80044fa <_printf_float+0x432>
 80044c2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80044c6:	f108 0201 	add.w	r2, r8, #1
 80044ca:	4631      	mov	r1, r6
 80044cc:	4628      	mov	r0, r5
 80044ce:	47b8      	blx	r7
 80044d0:	3001      	adds	r0, #1
 80044d2:	d10e      	bne.n	80044f2 <_printf_float+0x42a>
 80044d4:	e657      	b.n	8004186 <_printf_float+0xbe>
 80044d6:	2301      	movs	r3, #1
 80044d8:	4652      	mov	r2, sl
 80044da:	4631      	mov	r1, r6
 80044dc:	4628      	mov	r0, r5
 80044de:	47b8      	blx	r7
 80044e0:	3001      	adds	r0, #1
 80044e2:	f43f ae50 	beq.w	8004186 <_printf_float+0xbe>
 80044e6:	f108 0801 	add.w	r8, r8, #1
 80044ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044ec:	3b01      	subs	r3, #1
 80044ee:	4543      	cmp	r3, r8
 80044f0:	dcf1      	bgt.n	80044d6 <_printf_float+0x40e>
 80044f2:	464b      	mov	r3, r9
 80044f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80044f8:	e6da      	b.n	80042b0 <_printf_float+0x1e8>
 80044fa:	f04f 0800 	mov.w	r8, #0
 80044fe:	f104 0a1a 	add.w	sl, r4, #26
 8004502:	e7f2      	b.n	80044ea <_printf_float+0x422>
 8004504:	2301      	movs	r3, #1
 8004506:	4642      	mov	r2, r8
 8004508:	e7df      	b.n	80044ca <_printf_float+0x402>
 800450a:	2301      	movs	r3, #1
 800450c:	464a      	mov	r2, r9
 800450e:	4631      	mov	r1, r6
 8004510:	4628      	mov	r0, r5
 8004512:	47b8      	blx	r7
 8004514:	3001      	adds	r0, #1
 8004516:	f43f ae36 	beq.w	8004186 <_printf_float+0xbe>
 800451a:	f108 0801 	add.w	r8, r8, #1
 800451e:	68e3      	ldr	r3, [r4, #12]
 8004520:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004522:	1a5b      	subs	r3, r3, r1
 8004524:	4543      	cmp	r3, r8
 8004526:	dcf0      	bgt.n	800450a <_printf_float+0x442>
 8004528:	e6f8      	b.n	800431c <_printf_float+0x254>
 800452a:	f04f 0800 	mov.w	r8, #0
 800452e:	f104 0919 	add.w	r9, r4, #25
 8004532:	e7f4      	b.n	800451e <_printf_float+0x456>

08004534 <_printf_common>:
 8004534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004538:	4616      	mov	r6, r2
 800453a:	4699      	mov	r9, r3
 800453c:	688a      	ldr	r2, [r1, #8]
 800453e:	690b      	ldr	r3, [r1, #16]
 8004540:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004544:	4293      	cmp	r3, r2
 8004546:	bfb8      	it	lt
 8004548:	4613      	movlt	r3, r2
 800454a:	6033      	str	r3, [r6, #0]
 800454c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004550:	4607      	mov	r7, r0
 8004552:	460c      	mov	r4, r1
 8004554:	b10a      	cbz	r2, 800455a <_printf_common+0x26>
 8004556:	3301      	adds	r3, #1
 8004558:	6033      	str	r3, [r6, #0]
 800455a:	6823      	ldr	r3, [r4, #0]
 800455c:	0699      	lsls	r1, r3, #26
 800455e:	bf42      	ittt	mi
 8004560:	6833      	ldrmi	r3, [r6, #0]
 8004562:	3302      	addmi	r3, #2
 8004564:	6033      	strmi	r3, [r6, #0]
 8004566:	6825      	ldr	r5, [r4, #0]
 8004568:	f015 0506 	ands.w	r5, r5, #6
 800456c:	d106      	bne.n	800457c <_printf_common+0x48>
 800456e:	f104 0a19 	add.w	sl, r4, #25
 8004572:	68e3      	ldr	r3, [r4, #12]
 8004574:	6832      	ldr	r2, [r6, #0]
 8004576:	1a9b      	subs	r3, r3, r2
 8004578:	42ab      	cmp	r3, r5
 800457a:	dc26      	bgt.n	80045ca <_printf_common+0x96>
 800457c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004580:	1e13      	subs	r3, r2, #0
 8004582:	6822      	ldr	r2, [r4, #0]
 8004584:	bf18      	it	ne
 8004586:	2301      	movne	r3, #1
 8004588:	0692      	lsls	r2, r2, #26
 800458a:	d42b      	bmi.n	80045e4 <_printf_common+0xb0>
 800458c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004590:	4649      	mov	r1, r9
 8004592:	4638      	mov	r0, r7
 8004594:	47c0      	blx	r8
 8004596:	3001      	adds	r0, #1
 8004598:	d01e      	beq.n	80045d8 <_printf_common+0xa4>
 800459a:	6823      	ldr	r3, [r4, #0]
 800459c:	6922      	ldr	r2, [r4, #16]
 800459e:	f003 0306 	and.w	r3, r3, #6
 80045a2:	2b04      	cmp	r3, #4
 80045a4:	bf02      	ittt	eq
 80045a6:	68e5      	ldreq	r5, [r4, #12]
 80045a8:	6833      	ldreq	r3, [r6, #0]
 80045aa:	1aed      	subeq	r5, r5, r3
 80045ac:	68a3      	ldr	r3, [r4, #8]
 80045ae:	bf0c      	ite	eq
 80045b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045b4:	2500      	movne	r5, #0
 80045b6:	4293      	cmp	r3, r2
 80045b8:	bfc4      	itt	gt
 80045ba:	1a9b      	subgt	r3, r3, r2
 80045bc:	18ed      	addgt	r5, r5, r3
 80045be:	2600      	movs	r6, #0
 80045c0:	341a      	adds	r4, #26
 80045c2:	42b5      	cmp	r5, r6
 80045c4:	d11a      	bne.n	80045fc <_printf_common+0xc8>
 80045c6:	2000      	movs	r0, #0
 80045c8:	e008      	b.n	80045dc <_printf_common+0xa8>
 80045ca:	2301      	movs	r3, #1
 80045cc:	4652      	mov	r2, sl
 80045ce:	4649      	mov	r1, r9
 80045d0:	4638      	mov	r0, r7
 80045d2:	47c0      	blx	r8
 80045d4:	3001      	adds	r0, #1
 80045d6:	d103      	bne.n	80045e0 <_printf_common+0xac>
 80045d8:	f04f 30ff 	mov.w	r0, #4294967295
 80045dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045e0:	3501      	adds	r5, #1
 80045e2:	e7c6      	b.n	8004572 <_printf_common+0x3e>
 80045e4:	18e1      	adds	r1, r4, r3
 80045e6:	1c5a      	adds	r2, r3, #1
 80045e8:	2030      	movs	r0, #48	; 0x30
 80045ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045ee:	4422      	add	r2, r4
 80045f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045f8:	3302      	adds	r3, #2
 80045fa:	e7c7      	b.n	800458c <_printf_common+0x58>
 80045fc:	2301      	movs	r3, #1
 80045fe:	4622      	mov	r2, r4
 8004600:	4649      	mov	r1, r9
 8004602:	4638      	mov	r0, r7
 8004604:	47c0      	blx	r8
 8004606:	3001      	adds	r0, #1
 8004608:	d0e6      	beq.n	80045d8 <_printf_common+0xa4>
 800460a:	3601      	adds	r6, #1
 800460c:	e7d9      	b.n	80045c2 <_printf_common+0x8e>
	...

08004610 <_printf_i>:
 8004610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004614:	7e0f      	ldrb	r7, [r1, #24]
 8004616:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004618:	2f78      	cmp	r7, #120	; 0x78
 800461a:	4691      	mov	r9, r2
 800461c:	4680      	mov	r8, r0
 800461e:	460c      	mov	r4, r1
 8004620:	469a      	mov	sl, r3
 8004622:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004626:	d807      	bhi.n	8004638 <_printf_i+0x28>
 8004628:	2f62      	cmp	r7, #98	; 0x62
 800462a:	d80a      	bhi.n	8004642 <_printf_i+0x32>
 800462c:	2f00      	cmp	r7, #0
 800462e:	f000 80d4 	beq.w	80047da <_printf_i+0x1ca>
 8004632:	2f58      	cmp	r7, #88	; 0x58
 8004634:	f000 80c0 	beq.w	80047b8 <_printf_i+0x1a8>
 8004638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800463c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004640:	e03a      	b.n	80046b8 <_printf_i+0xa8>
 8004642:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004646:	2b15      	cmp	r3, #21
 8004648:	d8f6      	bhi.n	8004638 <_printf_i+0x28>
 800464a:	a101      	add	r1, pc, #4	; (adr r1, 8004650 <_printf_i+0x40>)
 800464c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004650:	080046a9 	.word	0x080046a9
 8004654:	080046bd 	.word	0x080046bd
 8004658:	08004639 	.word	0x08004639
 800465c:	08004639 	.word	0x08004639
 8004660:	08004639 	.word	0x08004639
 8004664:	08004639 	.word	0x08004639
 8004668:	080046bd 	.word	0x080046bd
 800466c:	08004639 	.word	0x08004639
 8004670:	08004639 	.word	0x08004639
 8004674:	08004639 	.word	0x08004639
 8004678:	08004639 	.word	0x08004639
 800467c:	080047c1 	.word	0x080047c1
 8004680:	080046e9 	.word	0x080046e9
 8004684:	0800477b 	.word	0x0800477b
 8004688:	08004639 	.word	0x08004639
 800468c:	08004639 	.word	0x08004639
 8004690:	080047e3 	.word	0x080047e3
 8004694:	08004639 	.word	0x08004639
 8004698:	080046e9 	.word	0x080046e9
 800469c:	08004639 	.word	0x08004639
 80046a0:	08004639 	.word	0x08004639
 80046a4:	08004783 	.word	0x08004783
 80046a8:	682b      	ldr	r3, [r5, #0]
 80046aa:	1d1a      	adds	r2, r3, #4
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	602a      	str	r2, [r5, #0]
 80046b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046b8:	2301      	movs	r3, #1
 80046ba:	e09f      	b.n	80047fc <_printf_i+0x1ec>
 80046bc:	6820      	ldr	r0, [r4, #0]
 80046be:	682b      	ldr	r3, [r5, #0]
 80046c0:	0607      	lsls	r7, r0, #24
 80046c2:	f103 0104 	add.w	r1, r3, #4
 80046c6:	6029      	str	r1, [r5, #0]
 80046c8:	d501      	bpl.n	80046ce <_printf_i+0xbe>
 80046ca:	681e      	ldr	r6, [r3, #0]
 80046cc:	e003      	b.n	80046d6 <_printf_i+0xc6>
 80046ce:	0646      	lsls	r6, r0, #25
 80046d0:	d5fb      	bpl.n	80046ca <_printf_i+0xba>
 80046d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80046d6:	2e00      	cmp	r6, #0
 80046d8:	da03      	bge.n	80046e2 <_printf_i+0xd2>
 80046da:	232d      	movs	r3, #45	; 0x2d
 80046dc:	4276      	negs	r6, r6
 80046de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046e2:	485a      	ldr	r0, [pc, #360]	; (800484c <_printf_i+0x23c>)
 80046e4:	230a      	movs	r3, #10
 80046e6:	e012      	b.n	800470e <_printf_i+0xfe>
 80046e8:	682b      	ldr	r3, [r5, #0]
 80046ea:	6820      	ldr	r0, [r4, #0]
 80046ec:	1d19      	adds	r1, r3, #4
 80046ee:	6029      	str	r1, [r5, #0]
 80046f0:	0605      	lsls	r5, r0, #24
 80046f2:	d501      	bpl.n	80046f8 <_printf_i+0xe8>
 80046f4:	681e      	ldr	r6, [r3, #0]
 80046f6:	e002      	b.n	80046fe <_printf_i+0xee>
 80046f8:	0641      	lsls	r1, r0, #25
 80046fa:	d5fb      	bpl.n	80046f4 <_printf_i+0xe4>
 80046fc:	881e      	ldrh	r6, [r3, #0]
 80046fe:	4853      	ldr	r0, [pc, #332]	; (800484c <_printf_i+0x23c>)
 8004700:	2f6f      	cmp	r7, #111	; 0x6f
 8004702:	bf0c      	ite	eq
 8004704:	2308      	moveq	r3, #8
 8004706:	230a      	movne	r3, #10
 8004708:	2100      	movs	r1, #0
 800470a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800470e:	6865      	ldr	r5, [r4, #4]
 8004710:	60a5      	str	r5, [r4, #8]
 8004712:	2d00      	cmp	r5, #0
 8004714:	bfa2      	ittt	ge
 8004716:	6821      	ldrge	r1, [r4, #0]
 8004718:	f021 0104 	bicge.w	r1, r1, #4
 800471c:	6021      	strge	r1, [r4, #0]
 800471e:	b90e      	cbnz	r6, 8004724 <_printf_i+0x114>
 8004720:	2d00      	cmp	r5, #0
 8004722:	d04b      	beq.n	80047bc <_printf_i+0x1ac>
 8004724:	4615      	mov	r5, r2
 8004726:	fbb6 f1f3 	udiv	r1, r6, r3
 800472a:	fb03 6711 	mls	r7, r3, r1, r6
 800472e:	5dc7      	ldrb	r7, [r0, r7]
 8004730:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004734:	4637      	mov	r7, r6
 8004736:	42bb      	cmp	r3, r7
 8004738:	460e      	mov	r6, r1
 800473a:	d9f4      	bls.n	8004726 <_printf_i+0x116>
 800473c:	2b08      	cmp	r3, #8
 800473e:	d10b      	bne.n	8004758 <_printf_i+0x148>
 8004740:	6823      	ldr	r3, [r4, #0]
 8004742:	07de      	lsls	r6, r3, #31
 8004744:	d508      	bpl.n	8004758 <_printf_i+0x148>
 8004746:	6923      	ldr	r3, [r4, #16]
 8004748:	6861      	ldr	r1, [r4, #4]
 800474a:	4299      	cmp	r1, r3
 800474c:	bfde      	ittt	le
 800474e:	2330      	movle	r3, #48	; 0x30
 8004750:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004754:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004758:	1b52      	subs	r2, r2, r5
 800475a:	6122      	str	r2, [r4, #16]
 800475c:	f8cd a000 	str.w	sl, [sp]
 8004760:	464b      	mov	r3, r9
 8004762:	aa03      	add	r2, sp, #12
 8004764:	4621      	mov	r1, r4
 8004766:	4640      	mov	r0, r8
 8004768:	f7ff fee4 	bl	8004534 <_printf_common>
 800476c:	3001      	adds	r0, #1
 800476e:	d14a      	bne.n	8004806 <_printf_i+0x1f6>
 8004770:	f04f 30ff 	mov.w	r0, #4294967295
 8004774:	b004      	add	sp, #16
 8004776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800477a:	6823      	ldr	r3, [r4, #0]
 800477c:	f043 0320 	orr.w	r3, r3, #32
 8004780:	6023      	str	r3, [r4, #0]
 8004782:	4833      	ldr	r0, [pc, #204]	; (8004850 <_printf_i+0x240>)
 8004784:	2778      	movs	r7, #120	; 0x78
 8004786:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800478a:	6823      	ldr	r3, [r4, #0]
 800478c:	6829      	ldr	r1, [r5, #0]
 800478e:	061f      	lsls	r7, r3, #24
 8004790:	f851 6b04 	ldr.w	r6, [r1], #4
 8004794:	d402      	bmi.n	800479c <_printf_i+0x18c>
 8004796:	065f      	lsls	r7, r3, #25
 8004798:	bf48      	it	mi
 800479a:	b2b6      	uxthmi	r6, r6
 800479c:	07df      	lsls	r7, r3, #31
 800479e:	bf48      	it	mi
 80047a0:	f043 0320 	orrmi.w	r3, r3, #32
 80047a4:	6029      	str	r1, [r5, #0]
 80047a6:	bf48      	it	mi
 80047a8:	6023      	strmi	r3, [r4, #0]
 80047aa:	b91e      	cbnz	r6, 80047b4 <_printf_i+0x1a4>
 80047ac:	6823      	ldr	r3, [r4, #0]
 80047ae:	f023 0320 	bic.w	r3, r3, #32
 80047b2:	6023      	str	r3, [r4, #0]
 80047b4:	2310      	movs	r3, #16
 80047b6:	e7a7      	b.n	8004708 <_printf_i+0xf8>
 80047b8:	4824      	ldr	r0, [pc, #144]	; (800484c <_printf_i+0x23c>)
 80047ba:	e7e4      	b.n	8004786 <_printf_i+0x176>
 80047bc:	4615      	mov	r5, r2
 80047be:	e7bd      	b.n	800473c <_printf_i+0x12c>
 80047c0:	682b      	ldr	r3, [r5, #0]
 80047c2:	6826      	ldr	r6, [r4, #0]
 80047c4:	6961      	ldr	r1, [r4, #20]
 80047c6:	1d18      	adds	r0, r3, #4
 80047c8:	6028      	str	r0, [r5, #0]
 80047ca:	0635      	lsls	r5, r6, #24
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	d501      	bpl.n	80047d4 <_printf_i+0x1c4>
 80047d0:	6019      	str	r1, [r3, #0]
 80047d2:	e002      	b.n	80047da <_printf_i+0x1ca>
 80047d4:	0670      	lsls	r0, r6, #25
 80047d6:	d5fb      	bpl.n	80047d0 <_printf_i+0x1c0>
 80047d8:	8019      	strh	r1, [r3, #0]
 80047da:	2300      	movs	r3, #0
 80047dc:	6123      	str	r3, [r4, #16]
 80047de:	4615      	mov	r5, r2
 80047e0:	e7bc      	b.n	800475c <_printf_i+0x14c>
 80047e2:	682b      	ldr	r3, [r5, #0]
 80047e4:	1d1a      	adds	r2, r3, #4
 80047e6:	602a      	str	r2, [r5, #0]
 80047e8:	681d      	ldr	r5, [r3, #0]
 80047ea:	6862      	ldr	r2, [r4, #4]
 80047ec:	2100      	movs	r1, #0
 80047ee:	4628      	mov	r0, r5
 80047f0:	f7fb fcee 	bl	80001d0 <memchr>
 80047f4:	b108      	cbz	r0, 80047fa <_printf_i+0x1ea>
 80047f6:	1b40      	subs	r0, r0, r5
 80047f8:	6060      	str	r0, [r4, #4]
 80047fa:	6863      	ldr	r3, [r4, #4]
 80047fc:	6123      	str	r3, [r4, #16]
 80047fe:	2300      	movs	r3, #0
 8004800:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004804:	e7aa      	b.n	800475c <_printf_i+0x14c>
 8004806:	6923      	ldr	r3, [r4, #16]
 8004808:	462a      	mov	r2, r5
 800480a:	4649      	mov	r1, r9
 800480c:	4640      	mov	r0, r8
 800480e:	47d0      	blx	sl
 8004810:	3001      	adds	r0, #1
 8004812:	d0ad      	beq.n	8004770 <_printf_i+0x160>
 8004814:	6823      	ldr	r3, [r4, #0]
 8004816:	079b      	lsls	r3, r3, #30
 8004818:	d413      	bmi.n	8004842 <_printf_i+0x232>
 800481a:	68e0      	ldr	r0, [r4, #12]
 800481c:	9b03      	ldr	r3, [sp, #12]
 800481e:	4298      	cmp	r0, r3
 8004820:	bfb8      	it	lt
 8004822:	4618      	movlt	r0, r3
 8004824:	e7a6      	b.n	8004774 <_printf_i+0x164>
 8004826:	2301      	movs	r3, #1
 8004828:	4632      	mov	r2, r6
 800482a:	4649      	mov	r1, r9
 800482c:	4640      	mov	r0, r8
 800482e:	47d0      	blx	sl
 8004830:	3001      	adds	r0, #1
 8004832:	d09d      	beq.n	8004770 <_printf_i+0x160>
 8004834:	3501      	adds	r5, #1
 8004836:	68e3      	ldr	r3, [r4, #12]
 8004838:	9903      	ldr	r1, [sp, #12]
 800483a:	1a5b      	subs	r3, r3, r1
 800483c:	42ab      	cmp	r3, r5
 800483e:	dcf2      	bgt.n	8004826 <_printf_i+0x216>
 8004840:	e7eb      	b.n	800481a <_printf_i+0x20a>
 8004842:	2500      	movs	r5, #0
 8004844:	f104 0619 	add.w	r6, r4, #25
 8004848:	e7f5      	b.n	8004836 <_printf_i+0x226>
 800484a:	bf00      	nop
 800484c:	08006d55 	.word	0x08006d55
 8004850:	08006d66 	.word	0x08006d66

08004854 <std>:
 8004854:	2300      	movs	r3, #0
 8004856:	b510      	push	{r4, lr}
 8004858:	4604      	mov	r4, r0
 800485a:	e9c0 3300 	strd	r3, r3, [r0]
 800485e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004862:	6083      	str	r3, [r0, #8]
 8004864:	8181      	strh	r1, [r0, #12]
 8004866:	6643      	str	r3, [r0, #100]	; 0x64
 8004868:	81c2      	strh	r2, [r0, #14]
 800486a:	6183      	str	r3, [r0, #24]
 800486c:	4619      	mov	r1, r3
 800486e:	2208      	movs	r2, #8
 8004870:	305c      	adds	r0, #92	; 0x5c
 8004872:	f000 f914 	bl	8004a9e <memset>
 8004876:	4b0d      	ldr	r3, [pc, #52]	; (80048ac <std+0x58>)
 8004878:	6263      	str	r3, [r4, #36]	; 0x24
 800487a:	4b0d      	ldr	r3, [pc, #52]	; (80048b0 <std+0x5c>)
 800487c:	62a3      	str	r3, [r4, #40]	; 0x28
 800487e:	4b0d      	ldr	r3, [pc, #52]	; (80048b4 <std+0x60>)
 8004880:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004882:	4b0d      	ldr	r3, [pc, #52]	; (80048b8 <std+0x64>)
 8004884:	6323      	str	r3, [r4, #48]	; 0x30
 8004886:	4b0d      	ldr	r3, [pc, #52]	; (80048bc <std+0x68>)
 8004888:	6224      	str	r4, [r4, #32]
 800488a:	429c      	cmp	r4, r3
 800488c:	d006      	beq.n	800489c <std+0x48>
 800488e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004892:	4294      	cmp	r4, r2
 8004894:	d002      	beq.n	800489c <std+0x48>
 8004896:	33d0      	adds	r3, #208	; 0xd0
 8004898:	429c      	cmp	r4, r3
 800489a:	d105      	bne.n	80048a8 <std+0x54>
 800489c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80048a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048a4:	f000 b978 	b.w	8004b98 <__retarget_lock_init_recursive>
 80048a8:	bd10      	pop	{r4, pc}
 80048aa:	bf00      	nop
 80048ac:	08004a19 	.word	0x08004a19
 80048b0:	08004a3b 	.word	0x08004a3b
 80048b4:	08004a73 	.word	0x08004a73
 80048b8:	08004a97 	.word	0x08004a97
 80048bc:	20000b00 	.word	0x20000b00

080048c0 <stdio_exit_handler>:
 80048c0:	4a02      	ldr	r2, [pc, #8]	; (80048cc <stdio_exit_handler+0xc>)
 80048c2:	4903      	ldr	r1, [pc, #12]	; (80048d0 <stdio_exit_handler+0x10>)
 80048c4:	4803      	ldr	r0, [pc, #12]	; (80048d4 <stdio_exit_handler+0x14>)
 80048c6:	f000 b869 	b.w	800499c <_fwalk_sglue>
 80048ca:	bf00      	nop
 80048cc:	20000104 	.word	0x20000104
 80048d0:	08006549 	.word	0x08006549
 80048d4:	20000110 	.word	0x20000110

080048d8 <cleanup_stdio>:
 80048d8:	6841      	ldr	r1, [r0, #4]
 80048da:	4b0c      	ldr	r3, [pc, #48]	; (800490c <cleanup_stdio+0x34>)
 80048dc:	4299      	cmp	r1, r3
 80048de:	b510      	push	{r4, lr}
 80048e0:	4604      	mov	r4, r0
 80048e2:	d001      	beq.n	80048e8 <cleanup_stdio+0x10>
 80048e4:	f001 fe30 	bl	8006548 <_fflush_r>
 80048e8:	68a1      	ldr	r1, [r4, #8]
 80048ea:	4b09      	ldr	r3, [pc, #36]	; (8004910 <cleanup_stdio+0x38>)
 80048ec:	4299      	cmp	r1, r3
 80048ee:	d002      	beq.n	80048f6 <cleanup_stdio+0x1e>
 80048f0:	4620      	mov	r0, r4
 80048f2:	f001 fe29 	bl	8006548 <_fflush_r>
 80048f6:	68e1      	ldr	r1, [r4, #12]
 80048f8:	4b06      	ldr	r3, [pc, #24]	; (8004914 <cleanup_stdio+0x3c>)
 80048fa:	4299      	cmp	r1, r3
 80048fc:	d004      	beq.n	8004908 <cleanup_stdio+0x30>
 80048fe:	4620      	mov	r0, r4
 8004900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004904:	f001 be20 	b.w	8006548 <_fflush_r>
 8004908:	bd10      	pop	{r4, pc}
 800490a:	bf00      	nop
 800490c:	20000b00 	.word	0x20000b00
 8004910:	20000b68 	.word	0x20000b68
 8004914:	20000bd0 	.word	0x20000bd0

08004918 <global_stdio_init.part.0>:
 8004918:	b510      	push	{r4, lr}
 800491a:	4b0b      	ldr	r3, [pc, #44]	; (8004948 <global_stdio_init.part.0+0x30>)
 800491c:	4c0b      	ldr	r4, [pc, #44]	; (800494c <global_stdio_init.part.0+0x34>)
 800491e:	4a0c      	ldr	r2, [pc, #48]	; (8004950 <global_stdio_init.part.0+0x38>)
 8004920:	601a      	str	r2, [r3, #0]
 8004922:	4620      	mov	r0, r4
 8004924:	2200      	movs	r2, #0
 8004926:	2104      	movs	r1, #4
 8004928:	f7ff ff94 	bl	8004854 <std>
 800492c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004930:	2201      	movs	r2, #1
 8004932:	2109      	movs	r1, #9
 8004934:	f7ff ff8e 	bl	8004854 <std>
 8004938:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800493c:	2202      	movs	r2, #2
 800493e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004942:	2112      	movs	r1, #18
 8004944:	f7ff bf86 	b.w	8004854 <std>
 8004948:	20000c38 	.word	0x20000c38
 800494c:	20000b00 	.word	0x20000b00
 8004950:	080048c1 	.word	0x080048c1

08004954 <__sfp_lock_acquire>:
 8004954:	4801      	ldr	r0, [pc, #4]	; (800495c <__sfp_lock_acquire+0x8>)
 8004956:	f000 b920 	b.w	8004b9a <__retarget_lock_acquire_recursive>
 800495a:	bf00      	nop
 800495c:	20000c41 	.word	0x20000c41

08004960 <__sfp_lock_release>:
 8004960:	4801      	ldr	r0, [pc, #4]	; (8004968 <__sfp_lock_release+0x8>)
 8004962:	f000 b91b 	b.w	8004b9c <__retarget_lock_release_recursive>
 8004966:	bf00      	nop
 8004968:	20000c41 	.word	0x20000c41

0800496c <__sinit>:
 800496c:	b510      	push	{r4, lr}
 800496e:	4604      	mov	r4, r0
 8004970:	f7ff fff0 	bl	8004954 <__sfp_lock_acquire>
 8004974:	6a23      	ldr	r3, [r4, #32]
 8004976:	b11b      	cbz	r3, 8004980 <__sinit+0x14>
 8004978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800497c:	f7ff bff0 	b.w	8004960 <__sfp_lock_release>
 8004980:	4b04      	ldr	r3, [pc, #16]	; (8004994 <__sinit+0x28>)
 8004982:	6223      	str	r3, [r4, #32]
 8004984:	4b04      	ldr	r3, [pc, #16]	; (8004998 <__sinit+0x2c>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1f5      	bne.n	8004978 <__sinit+0xc>
 800498c:	f7ff ffc4 	bl	8004918 <global_stdio_init.part.0>
 8004990:	e7f2      	b.n	8004978 <__sinit+0xc>
 8004992:	bf00      	nop
 8004994:	080048d9 	.word	0x080048d9
 8004998:	20000c38 	.word	0x20000c38

0800499c <_fwalk_sglue>:
 800499c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049a0:	4607      	mov	r7, r0
 80049a2:	4688      	mov	r8, r1
 80049a4:	4614      	mov	r4, r2
 80049a6:	2600      	movs	r6, #0
 80049a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80049ac:	f1b9 0901 	subs.w	r9, r9, #1
 80049b0:	d505      	bpl.n	80049be <_fwalk_sglue+0x22>
 80049b2:	6824      	ldr	r4, [r4, #0]
 80049b4:	2c00      	cmp	r4, #0
 80049b6:	d1f7      	bne.n	80049a8 <_fwalk_sglue+0xc>
 80049b8:	4630      	mov	r0, r6
 80049ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049be:	89ab      	ldrh	r3, [r5, #12]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d907      	bls.n	80049d4 <_fwalk_sglue+0x38>
 80049c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80049c8:	3301      	adds	r3, #1
 80049ca:	d003      	beq.n	80049d4 <_fwalk_sglue+0x38>
 80049cc:	4629      	mov	r1, r5
 80049ce:	4638      	mov	r0, r7
 80049d0:	47c0      	blx	r8
 80049d2:	4306      	orrs	r6, r0
 80049d4:	3568      	adds	r5, #104	; 0x68
 80049d6:	e7e9      	b.n	80049ac <_fwalk_sglue+0x10>

080049d8 <siprintf>:
 80049d8:	b40e      	push	{r1, r2, r3}
 80049da:	b500      	push	{lr}
 80049dc:	b09c      	sub	sp, #112	; 0x70
 80049de:	ab1d      	add	r3, sp, #116	; 0x74
 80049e0:	9002      	str	r0, [sp, #8]
 80049e2:	9006      	str	r0, [sp, #24]
 80049e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80049e8:	4809      	ldr	r0, [pc, #36]	; (8004a10 <siprintf+0x38>)
 80049ea:	9107      	str	r1, [sp, #28]
 80049ec:	9104      	str	r1, [sp, #16]
 80049ee:	4909      	ldr	r1, [pc, #36]	; (8004a14 <siprintf+0x3c>)
 80049f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80049f4:	9105      	str	r1, [sp, #20]
 80049f6:	6800      	ldr	r0, [r0, #0]
 80049f8:	9301      	str	r3, [sp, #4]
 80049fa:	a902      	add	r1, sp, #8
 80049fc:	f001 fc20 	bl	8006240 <_svfiprintf_r>
 8004a00:	9b02      	ldr	r3, [sp, #8]
 8004a02:	2200      	movs	r2, #0
 8004a04:	701a      	strb	r2, [r3, #0]
 8004a06:	b01c      	add	sp, #112	; 0x70
 8004a08:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a0c:	b003      	add	sp, #12
 8004a0e:	4770      	bx	lr
 8004a10:	2000015c 	.word	0x2000015c
 8004a14:	ffff0208 	.word	0xffff0208

08004a18 <__sread>:
 8004a18:	b510      	push	{r4, lr}
 8004a1a:	460c      	mov	r4, r1
 8004a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a20:	f000 f86c 	bl	8004afc <_read_r>
 8004a24:	2800      	cmp	r0, #0
 8004a26:	bfab      	itete	ge
 8004a28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004a2a:	89a3      	ldrhlt	r3, [r4, #12]
 8004a2c:	181b      	addge	r3, r3, r0
 8004a2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004a32:	bfac      	ite	ge
 8004a34:	6563      	strge	r3, [r4, #84]	; 0x54
 8004a36:	81a3      	strhlt	r3, [r4, #12]
 8004a38:	bd10      	pop	{r4, pc}

08004a3a <__swrite>:
 8004a3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a3e:	461f      	mov	r7, r3
 8004a40:	898b      	ldrh	r3, [r1, #12]
 8004a42:	05db      	lsls	r3, r3, #23
 8004a44:	4605      	mov	r5, r0
 8004a46:	460c      	mov	r4, r1
 8004a48:	4616      	mov	r6, r2
 8004a4a:	d505      	bpl.n	8004a58 <__swrite+0x1e>
 8004a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a50:	2302      	movs	r3, #2
 8004a52:	2200      	movs	r2, #0
 8004a54:	f000 f840 	bl	8004ad8 <_lseek_r>
 8004a58:	89a3      	ldrh	r3, [r4, #12]
 8004a5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a62:	81a3      	strh	r3, [r4, #12]
 8004a64:	4632      	mov	r2, r6
 8004a66:	463b      	mov	r3, r7
 8004a68:	4628      	mov	r0, r5
 8004a6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a6e:	f000 b857 	b.w	8004b20 <_write_r>

08004a72 <__sseek>:
 8004a72:	b510      	push	{r4, lr}
 8004a74:	460c      	mov	r4, r1
 8004a76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a7a:	f000 f82d 	bl	8004ad8 <_lseek_r>
 8004a7e:	1c43      	adds	r3, r0, #1
 8004a80:	89a3      	ldrh	r3, [r4, #12]
 8004a82:	bf15      	itete	ne
 8004a84:	6560      	strne	r0, [r4, #84]	; 0x54
 8004a86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004a8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004a8e:	81a3      	strheq	r3, [r4, #12]
 8004a90:	bf18      	it	ne
 8004a92:	81a3      	strhne	r3, [r4, #12]
 8004a94:	bd10      	pop	{r4, pc}

08004a96 <__sclose>:
 8004a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a9a:	f000 b80d 	b.w	8004ab8 <_close_r>

08004a9e <memset>:
 8004a9e:	4402      	add	r2, r0
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d100      	bne.n	8004aa8 <memset+0xa>
 8004aa6:	4770      	bx	lr
 8004aa8:	f803 1b01 	strb.w	r1, [r3], #1
 8004aac:	e7f9      	b.n	8004aa2 <memset+0x4>
	...

08004ab0 <_localeconv_r>:
 8004ab0:	4800      	ldr	r0, [pc, #0]	; (8004ab4 <_localeconv_r+0x4>)
 8004ab2:	4770      	bx	lr
 8004ab4:	20000250 	.word	0x20000250

08004ab8 <_close_r>:
 8004ab8:	b538      	push	{r3, r4, r5, lr}
 8004aba:	4d06      	ldr	r5, [pc, #24]	; (8004ad4 <_close_r+0x1c>)
 8004abc:	2300      	movs	r3, #0
 8004abe:	4604      	mov	r4, r0
 8004ac0:	4608      	mov	r0, r1
 8004ac2:	602b      	str	r3, [r5, #0]
 8004ac4:	f7fc fb62 	bl	800118c <_close>
 8004ac8:	1c43      	adds	r3, r0, #1
 8004aca:	d102      	bne.n	8004ad2 <_close_r+0x1a>
 8004acc:	682b      	ldr	r3, [r5, #0]
 8004ace:	b103      	cbz	r3, 8004ad2 <_close_r+0x1a>
 8004ad0:	6023      	str	r3, [r4, #0]
 8004ad2:	bd38      	pop	{r3, r4, r5, pc}
 8004ad4:	20000c3c 	.word	0x20000c3c

08004ad8 <_lseek_r>:
 8004ad8:	b538      	push	{r3, r4, r5, lr}
 8004ada:	4d07      	ldr	r5, [pc, #28]	; (8004af8 <_lseek_r+0x20>)
 8004adc:	4604      	mov	r4, r0
 8004ade:	4608      	mov	r0, r1
 8004ae0:	4611      	mov	r1, r2
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	602a      	str	r2, [r5, #0]
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	f7fc fb5c 	bl	80011a4 <_lseek>
 8004aec:	1c43      	adds	r3, r0, #1
 8004aee:	d102      	bne.n	8004af6 <_lseek_r+0x1e>
 8004af0:	682b      	ldr	r3, [r5, #0]
 8004af2:	b103      	cbz	r3, 8004af6 <_lseek_r+0x1e>
 8004af4:	6023      	str	r3, [r4, #0]
 8004af6:	bd38      	pop	{r3, r4, r5, pc}
 8004af8:	20000c3c 	.word	0x20000c3c

08004afc <_read_r>:
 8004afc:	b538      	push	{r3, r4, r5, lr}
 8004afe:	4d07      	ldr	r5, [pc, #28]	; (8004b1c <_read_r+0x20>)
 8004b00:	4604      	mov	r4, r0
 8004b02:	4608      	mov	r0, r1
 8004b04:	4611      	mov	r1, r2
 8004b06:	2200      	movs	r2, #0
 8004b08:	602a      	str	r2, [r5, #0]
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	f7fc fb22 	bl	8001154 <_read>
 8004b10:	1c43      	adds	r3, r0, #1
 8004b12:	d102      	bne.n	8004b1a <_read_r+0x1e>
 8004b14:	682b      	ldr	r3, [r5, #0]
 8004b16:	b103      	cbz	r3, 8004b1a <_read_r+0x1e>
 8004b18:	6023      	str	r3, [r4, #0]
 8004b1a:	bd38      	pop	{r3, r4, r5, pc}
 8004b1c:	20000c3c 	.word	0x20000c3c

08004b20 <_write_r>:
 8004b20:	b538      	push	{r3, r4, r5, lr}
 8004b22:	4d07      	ldr	r5, [pc, #28]	; (8004b40 <_write_r+0x20>)
 8004b24:	4604      	mov	r4, r0
 8004b26:	4608      	mov	r0, r1
 8004b28:	4611      	mov	r1, r2
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	602a      	str	r2, [r5, #0]
 8004b2e:	461a      	mov	r2, r3
 8004b30:	f7fc fb1e 	bl	8001170 <_write>
 8004b34:	1c43      	adds	r3, r0, #1
 8004b36:	d102      	bne.n	8004b3e <_write_r+0x1e>
 8004b38:	682b      	ldr	r3, [r5, #0]
 8004b3a:	b103      	cbz	r3, 8004b3e <_write_r+0x1e>
 8004b3c:	6023      	str	r3, [r4, #0]
 8004b3e:	bd38      	pop	{r3, r4, r5, pc}
 8004b40:	20000c3c 	.word	0x20000c3c

08004b44 <__errno>:
 8004b44:	4b01      	ldr	r3, [pc, #4]	; (8004b4c <__errno+0x8>)
 8004b46:	6818      	ldr	r0, [r3, #0]
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	2000015c 	.word	0x2000015c

08004b50 <__libc_init_array>:
 8004b50:	b570      	push	{r4, r5, r6, lr}
 8004b52:	4d0d      	ldr	r5, [pc, #52]	; (8004b88 <__libc_init_array+0x38>)
 8004b54:	4c0d      	ldr	r4, [pc, #52]	; (8004b8c <__libc_init_array+0x3c>)
 8004b56:	1b64      	subs	r4, r4, r5
 8004b58:	10a4      	asrs	r4, r4, #2
 8004b5a:	2600      	movs	r6, #0
 8004b5c:	42a6      	cmp	r6, r4
 8004b5e:	d109      	bne.n	8004b74 <__libc_init_array+0x24>
 8004b60:	4d0b      	ldr	r5, [pc, #44]	; (8004b90 <__libc_init_array+0x40>)
 8004b62:	4c0c      	ldr	r4, [pc, #48]	; (8004b94 <__libc_init_array+0x44>)
 8004b64:	f002 f894 	bl	8006c90 <_init>
 8004b68:	1b64      	subs	r4, r4, r5
 8004b6a:	10a4      	asrs	r4, r4, #2
 8004b6c:	2600      	movs	r6, #0
 8004b6e:	42a6      	cmp	r6, r4
 8004b70:	d105      	bne.n	8004b7e <__libc_init_array+0x2e>
 8004b72:	bd70      	pop	{r4, r5, r6, pc}
 8004b74:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b78:	4798      	blx	r3
 8004b7a:	3601      	adds	r6, #1
 8004b7c:	e7ee      	b.n	8004b5c <__libc_init_array+0xc>
 8004b7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b82:	4798      	blx	r3
 8004b84:	3601      	adds	r6, #1
 8004b86:	e7f2      	b.n	8004b6e <__libc_init_array+0x1e>
 8004b88:	080070b4 	.word	0x080070b4
 8004b8c:	080070b4 	.word	0x080070b4
 8004b90:	080070b4 	.word	0x080070b4
 8004b94:	080070b8 	.word	0x080070b8

08004b98 <__retarget_lock_init_recursive>:
 8004b98:	4770      	bx	lr

08004b9a <__retarget_lock_acquire_recursive>:
 8004b9a:	4770      	bx	lr

08004b9c <__retarget_lock_release_recursive>:
 8004b9c:	4770      	bx	lr

08004b9e <quorem>:
 8004b9e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ba2:	6903      	ldr	r3, [r0, #16]
 8004ba4:	690c      	ldr	r4, [r1, #16]
 8004ba6:	42a3      	cmp	r3, r4
 8004ba8:	4607      	mov	r7, r0
 8004baa:	db7e      	blt.n	8004caa <quorem+0x10c>
 8004bac:	3c01      	subs	r4, #1
 8004bae:	f101 0814 	add.w	r8, r1, #20
 8004bb2:	f100 0514 	add.w	r5, r0, #20
 8004bb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004bba:	9301      	str	r3, [sp, #4]
 8004bbc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004bc0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004bcc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004bd0:	fbb2 f6f3 	udiv	r6, r2, r3
 8004bd4:	d331      	bcc.n	8004c3a <quorem+0x9c>
 8004bd6:	f04f 0e00 	mov.w	lr, #0
 8004bda:	4640      	mov	r0, r8
 8004bdc:	46ac      	mov	ip, r5
 8004bde:	46f2      	mov	sl, lr
 8004be0:	f850 2b04 	ldr.w	r2, [r0], #4
 8004be4:	b293      	uxth	r3, r2
 8004be6:	fb06 e303 	mla	r3, r6, r3, lr
 8004bea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004bee:	0c1a      	lsrs	r2, r3, #16
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	ebaa 0303 	sub.w	r3, sl, r3
 8004bf6:	f8dc a000 	ldr.w	sl, [ip]
 8004bfa:	fa13 f38a 	uxtah	r3, r3, sl
 8004bfe:	fb06 220e 	mla	r2, r6, lr, r2
 8004c02:	9300      	str	r3, [sp, #0]
 8004c04:	9b00      	ldr	r3, [sp, #0]
 8004c06:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004c0a:	b292      	uxth	r2, r2
 8004c0c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004c10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c14:	f8bd 3000 	ldrh.w	r3, [sp]
 8004c18:	4581      	cmp	r9, r0
 8004c1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c1e:	f84c 3b04 	str.w	r3, [ip], #4
 8004c22:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004c26:	d2db      	bcs.n	8004be0 <quorem+0x42>
 8004c28:	f855 300b 	ldr.w	r3, [r5, fp]
 8004c2c:	b92b      	cbnz	r3, 8004c3a <quorem+0x9c>
 8004c2e:	9b01      	ldr	r3, [sp, #4]
 8004c30:	3b04      	subs	r3, #4
 8004c32:	429d      	cmp	r5, r3
 8004c34:	461a      	mov	r2, r3
 8004c36:	d32c      	bcc.n	8004c92 <quorem+0xf4>
 8004c38:	613c      	str	r4, [r7, #16]
 8004c3a:	4638      	mov	r0, r7
 8004c3c:	f001 f9a6 	bl	8005f8c <__mcmp>
 8004c40:	2800      	cmp	r0, #0
 8004c42:	db22      	blt.n	8004c8a <quorem+0xec>
 8004c44:	3601      	adds	r6, #1
 8004c46:	4629      	mov	r1, r5
 8004c48:	2000      	movs	r0, #0
 8004c4a:	f858 2b04 	ldr.w	r2, [r8], #4
 8004c4e:	f8d1 c000 	ldr.w	ip, [r1]
 8004c52:	b293      	uxth	r3, r2
 8004c54:	1ac3      	subs	r3, r0, r3
 8004c56:	0c12      	lsrs	r2, r2, #16
 8004c58:	fa13 f38c 	uxtah	r3, r3, ip
 8004c5c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004c60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c6a:	45c1      	cmp	r9, r8
 8004c6c:	f841 3b04 	str.w	r3, [r1], #4
 8004c70:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004c74:	d2e9      	bcs.n	8004c4a <quorem+0xac>
 8004c76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c7e:	b922      	cbnz	r2, 8004c8a <quorem+0xec>
 8004c80:	3b04      	subs	r3, #4
 8004c82:	429d      	cmp	r5, r3
 8004c84:	461a      	mov	r2, r3
 8004c86:	d30a      	bcc.n	8004c9e <quorem+0x100>
 8004c88:	613c      	str	r4, [r7, #16]
 8004c8a:	4630      	mov	r0, r6
 8004c8c:	b003      	add	sp, #12
 8004c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c92:	6812      	ldr	r2, [r2, #0]
 8004c94:	3b04      	subs	r3, #4
 8004c96:	2a00      	cmp	r2, #0
 8004c98:	d1ce      	bne.n	8004c38 <quorem+0x9a>
 8004c9a:	3c01      	subs	r4, #1
 8004c9c:	e7c9      	b.n	8004c32 <quorem+0x94>
 8004c9e:	6812      	ldr	r2, [r2, #0]
 8004ca0:	3b04      	subs	r3, #4
 8004ca2:	2a00      	cmp	r2, #0
 8004ca4:	d1f0      	bne.n	8004c88 <quorem+0xea>
 8004ca6:	3c01      	subs	r4, #1
 8004ca8:	e7eb      	b.n	8004c82 <quorem+0xe4>
 8004caa:	2000      	movs	r0, #0
 8004cac:	e7ee      	b.n	8004c8c <quorem+0xee>
	...

08004cb0 <_dtoa_r>:
 8004cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cb4:	ed2d 8b04 	vpush	{d8-d9}
 8004cb8:	69c5      	ldr	r5, [r0, #28]
 8004cba:	b093      	sub	sp, #76	; 0x4c
 8004cbc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004cc0:	ec57 6b10 	vmov	r6, r7, d0
 8004cc4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004cc8:	9107      	str	r1, [sp, #28]
 8004cca:	4604      	mov	r4, r0
 8004ccc:	920a      	str	r2, [sp, #40]	; 0x28
 8004cce:	930d      	str	r3, [sp, #52]	; 0x34
 8004cd0:	b975      	cbnz	r5, 8004cf0 <_dtoa_r+0x40>
 8004cd2:	2010      	movs	r0, #16
 8004cd4:	f000 fe2a 	bl	800592c <malloc>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	61e0      	str	r0, [r4, #28]
 8004cdc:	b920      	cbnz	r0, 8004ce8 <_dtoa_r+0x38>
 8004cde:	4bae      	ldr	r3, [pc, #696]	; (8004f98 <_dtoa_r+0x2e8>)
 8004ce0:	21ef      	movs	r1, #239	; 0xef
 8004ce2:	48ae      	ldr	r0, [pc, #696]	; (8004f9c <_dtoa_r+0x2ec>)
 8004ce4:	f001 fc90 	bl	8006608 <__assert_func>
 8004ce8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004cec:	6005      	str	r5, [r0, #0]
 8004cee:	60c5      	str	r5, [r0, #12]
 8004cf0:	69e3      	ldr	r3, [r4, #28]
 8004cf2:	6819      	ldr	r1, [r3, #0]
 8004cf4:	b151      	cbz	r1, 8004d0c <_dtoa_r+0x5c>
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	604a      	str	r2, [r1, #4]
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	4093      	lsls	r3, r2
 8004cfe:	608b      	str	r3, [r1, #8]
 8004d00:	4620      	mov	r0, r4
 8004d02:	f000 ff07 	bl	8005b14 <_Bfree>
 8004d06:	69e3      	ldr	r3, [r4, #28]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	601a      	str	r2, [r3, #0]
 8004d0c:	1e3b      	subs	r3, r7, #0
 8004d0e:	bfbb      	ittet	lt
 8004d10:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004d14:	9303      	strlt	r3, [sp, #12]
 8004d16:	2300      	movge	r3, #0
 8004d18:	2201      	movlt	r2, #1
 8004d1a:	bfac      	ite	ge
 8004d1c:	f8c8 3000 	strge.w	r3, [r8]
 8004d20:	f8c8 2000 	strlt.w	r2, [r8]
 8004d24:	4b9e      	ldr	r3, [pc, #632]	; (8004fa0 <_dtoa_r+0x2f0>)
 8004d26:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004d2a:	ea33 0308 	bics.w	r3, r3, r8
 8004d2e:	d11b      	bne.n	8004d68 <_dtoa_r+0xb8>
 8004d30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004d32:	f242 730f 	movw	r3, #9999	; 0x270f
 8004d36:	6013      	str	r3, [r2, #0]
 8004d38:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004d3c:	4333      	orrs	r3, r6
 8004d3e:	f000 8593 	beq.w	8005868 <_dtoa_r+0xbb8>
 8004d42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d44:	b963      	cbnz	r3, 8004d60 <_dtoa_r+0xb0>
 8004d46:	4b97      	ldr	r3, [pc, #604]	; (8004fa4 <_dtoa_r+0x2f4>)
 8004d48:	e027      	b.n	8004d9a <_dtoa_r+0xea>
 8004d4a:	4b97      	ldr	r3, [pc, #604]	; (8004fa8 <_dtoa_r+0x2f8>)
 8004d4c:	9300      	str	r3, [sp, #0]
 8004d4e:	3308      	adds	r3, #8
 8004d50:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004d52:	6013      	str	r3, [r2, #0]
 8004d54:	9800      	ldr	r0, [sp, #0]
 8004d56:	b013      	add	sp, #76	; 0x4c
 8004d58:	ecbd 8b04 	vpop	{d8-d9}
 8004d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d60:	4b90      	ldr	r3, [pc, #576]	; (8004fa4 <_dtoa_r+0x2f4>)
 8004d62:	9300      	str	r3, [sp, #0]
 8004d64:	3303      	adds	r3, #3
 8004d66:	e7f3      	b.n	8004d50 <_dtoa_r+0xa0>
 8004d68:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	ec51 0b17 	vmov	r0, r1, d7
 8004d72:	eeb0 8a47 	vmov.f32	s16, s14
 8004d76:	eef0 8a67 	vmov.f32	s17, s15
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	f7fb fea4 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d80:	4681      	mov	r9, r0
 8004d82:	b160      	cbz	r0, 8004d9e <_dtoa_r+0xee>
 8004d84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004d86:	2301      	movs	r3, #1
 8004d88:	6013      	str	r3, [r2, #0]
 8004d8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 8568 	beq.w	8005862 <_dtoa_r+0xbb2>
 8004d92:	4b86      	ldr	r3, [pc, #536]	; (8004fac <_dtoa_r+0x2fc>)
 8004d94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004d96:	6013      	str	r3, [r2, #0]
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	9300      	str	r3, [sp, #0]
 8004d9c:	e7da      	b.n	8004d54 <_dtoa_r+0xa4>
 8004d9e:	aa10      	add	r2, sp, #64	; 0x40
 8004da0:	a911      	add	r1, sp, #68	; 0x44
 8004da2:	4620      	mov	r0, r4
 8004da4:	eeb0 0a48 	vmov.f32	s0, s16
 8004da8:	eef0 0a68 	vmov.f32	s1, s17
 8004dac:	f001 f994 	bl	80060d8 <__d2b>
 8004db0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004db4:	4682      	mov	sl, r0
 8004db6:	2d00      	cmp	r5, #0
 8004db8:	d07f      	beq.n	8004eba <_dtoa_r+0x20a>
 8004dba:	ee18 3a90 	vmov	r3, s17
 8004dbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004dc2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004dc6:	ec51 0b18 	vmov	r0, r1, d8
 8004dca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004dce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004dd2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	2200      	movs	r2, #0
 8004dda:	4b75      	ldr	r3, [pc, #468]	; (8004fb0 <_dtoa_r+0x300>)
 8004ddc:	f7fb fa54 	bl	8000288 <__aeabi_dsub>
 8004de0:	a367      	add	r3, pc, #412	; (adr r3, 8004f80 <_dtoa_r+0x2d0>)
 8004de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de6:	f7fb fc07 	bl	80005f8 <__aeabi_dmul>
 8004dea:	a367      	add	r3, pc, #412	; (adr r3, 8004f88 <_dtoa_r+0x2d8>)
 8004dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df0:	f7fb fa4c 	bl	800028c <__adddf3>
 8004df4:	4606      	mov	r6, r0
 8004df6:	4628      	mov	r0, r5
 8004df8:	460f      	mov	r7, r1
 8004dfa:	f7fb fb93 	bl	8000524 <__aeabi_i2d>
 8004dfe:	a364      	add	r3, pc, #400	; (adr r3, 8004f90 <_dtoa_r+0x2e0>)
 8004e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e04:	f7fb fbf8 	bl	80005f8 <__aeabi_dmul>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	4630      	mov	r0, r6
 8004e0e:	4639      	mov	r1, r7
 8004e10:	f7fb fa3c 	bl	800028c <__adddf3>
 8004e14:	4606      	mov	r6, r0
 8004e16:	460f      	mov	r7, r1
 8004e18:	f7fb fe9e 	bl	8000b58 <__aeabi_d2iz>
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	4683      	mov	fp, r0
 8004e20:	2300      	movs	r3, #0
 8004e22:	4630      	mov	r0, r6
 8004e24:	4639      	mov	r1, r7
 8004e26:	f7fb fe59 	bl	8000adc <__aeabi_dcmplt>
 8004e2a:	b148      	cbz	r0, 8004e40 <_dtoa_r+0x190>
 8004e2c:	4658      	mov	r0, fp
 8004e2e:	f7fb fb79 	bl	8000524 <__aeabi_i2d>
 8004e32:	4632      	mov	r2, r6
 8004e34:	463b      	mov	r3, r7
 8004e36:	f7fb fe47 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e3a:	b908      	cbnz	r0, 8004e40 <_dtoa_r+0x190>
 8004e3c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004e40:	f1bb 0f16 	cmp.w	fp, #22
 8004e44:	d857      	bhi.n	8004ef6 <_dtoa_r+0x246>
 8004e46:	4b5b      	ldr	r3, [pc, #364]	; (8004fb4 <_dtoa_r+0x304>)
 8004e48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e50:	ec51 0b18 	vmov	r0, r1, d8
 8004e54:	f7fb fe42 	bl	8000adc <__aeabi_dcmplt>
 8004e58:	2800      	cmp	r0, #0
 8004e5a:	d04e      	beq.n	8004efa <_dtoa_r+0x24a>
 8004e5c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004e60:	2300      	movs	r3, #0
 8004e62:	930c      	str	r3, [sp, #48]	; 0x30
 8004e64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004e66:	1b5b      	subs	r3, r3, r5
 8004e68:	1e5a      	subs	r2, r3, #1
 8004e6a:	bf45      	ittet	mi
 8004e6c:	f1c3 0301 	rsbmi	r3, r3, #1
 8004e70:	9305      	strmi	r3, [sp, #20]
 8004e72:	2300      	movpl	r3, #0
 8004e74:	2300      	movmi	r3, #0
 8004e76:	9206      	str	r2, [sp, #24]
 8004e78:	bf54      	ite	pl
 8004e7a:	9305      	strpl	r3, [sp, #20]
 8004e7c:	9306      	strmi	r3, [sp, #24]
 8004e7e:	f1bb 0f00 	cmp.w	fp, #0
 8004e82:	db3c      	blt.n	8004efe <_dtoa_r+0x24e>
 8004e84:	9b06      	ldr	r3, [sp, #24]
 8004e86:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004e8a:	445b      	add	r3, fp
 8004e8c:	9306      	str	r3, [sp, #24]
 8004e8e:	2300      	movs	r3, #0
 8004e90:	9308      	str	r3, [sp, #32]
 8004e92:	9b07      	ldr	r3, [sp, #28]
 8004e94:	2b09      	cmp	r3, #9
 8004e96:	d868      	bhi.n	8004f6a <_dtoa_r+0x2ba>
 8004e98:	2b05      	cmp	r3, #5
 8004e9a:	bfc4      	itt	gt
 8004e9c:	3b04      	subgt	r3, #4
 8004e9e:	9307      	strgt	r3, [sp, #28]
 8004ea0:	9b07      	ldr	r3, [sp, #28]
 8004ea2:	f1a3 0302 	sub.w	r3, r3, #2
 8004ea6:	bfcc      	ite	gt
 8004ea8:	2500      	movgt	r5, #0
 8004eaa:	2501      	movle	r5, #1
 8004eac:	2b03      	cmp	r3, #3
 8004eae:	f200 8085 	bhi.w	8004fbc <_dtoa_r+0x30c>
 8004eb2:	e8df f003 	tbb	[pc, r3]
 8004eb6:	3b2e      	.short	0x3b2e
 8004eb8:	5839      	.short	0x5839
 8004eba:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004ebe:	441d      	add	r5, r3
 8004ec0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004ec4:	2b20      	cmp	r3, #32
 8004ec6:	bfc1      	itttt	gt
 8004ec8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004ecc:	fa08 f803 	lslgt.w	r8, r8, r3
 8004ed0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8004ed4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8004ed8:	bfd6      	itet	le
 8004eda:	f1c3 0320 	rsble	r3, r3, #32
 8004ede:	ea48 0003 	orrgt.w	r0, r8, r3
 8004ee2:	fa06 f003 	lslle.w	r0, r6, r3
 8004ee6:	f7fb fb0d 	bl	8000504 <__aeabi_ui2d>
 8004eea:	2201      	movs	r2, #1
 8004eec:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8004ef0:	3d01      	subs	r5, #1
 8004ef2:	920e      	str	r2, [sp, #56]	; 0x38
 8004ef4:	e76f      	b.n	8004dd6 <_dtoa_r+0x126>
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e7b3      	b.n	8004e62 <_dtoa_r+0x1b2>
 8004efa:	900c      	str	r0, [sp, #48]	; 0x30
 8004efc:	e7b2      	b.n	8004e64 <_dtoa_r+0x1b4>
 8004efe:	9b05      	ldr	r3, [sp, #20]
 8004f00:	eba3 030b 	sub.w	r3, r3, fp
 8004f04:	9305      	str	r3, [sp, #20]
 8004f06:	f1cb 0300 	rsb	r3, fp, #0
 8004f0a:	9308      	str	r3, [sp, #32]
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f10:	e7bf      	b.n	8004e92 <_dtoa_r+0x1e2>
 8004f12:	2300      	movs	r3, #0
 8004f14:	9309      	str	r3, [sp, #36]	; 0x24
 8004f16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	dc52      	bgt.n	8004fc2 <_dtoa_r+0x312>
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	9301      	str	r3, [sp, #4]
 8004f20:	9304      	str	r3, [sp, #16]
 8004f22:	461a      	mov	r2, r3
 8004f24:	920a      	str	r2, [sp, #40]	; 0x28
 8004f26:	e00b      	b.n	8004f40 <_dtoa_r+0x290>
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e7f3      	b.n	8004f14 <_dtoa_r+0x264>
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	9309      	str	r3, [sp, #36]	; 0x24
 8004f30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f32:	445b      	add	r3, fp
 8004f34:	9301      	str	r3, [sp, #4]
 8004f36:	3301      	adds	r3, #1
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	9304      	str	r3, [sp, #16]
 8004f3c:	bfb8      	it	lt
 8004f3e:	2301      	movlt	r3, #1
 8004f40:	69e0      	ldr	r0, [r4, #28]
 8004f42:	2100      	movs	r1, #0
 8004f44:	2204      	movs	r2, #4
 8004f46:	f102 0614 	add.w	r6, r2, #20
 8004f4a:	429e      	cmp	r6, r3
 8004f4c:	d93d      	bls.n	8004fca <_dtoa_r+0x31a>
 8004f4e:	6041      	str	r1, [r0, #4]
 8004f50:	4620      	mov	r0, r4
 8004f52:	f000 fd9f 	bl	8005a94 <_Balloc>
 8004f56:	9000      	str	r0, [sp, #0]
 8004f58:	2800      	cmp	r0, #0
 8004f5a:	d139      	bne.n	8004fd0 <_dtoa_r+0x320>
 8004f5c:	4b16      	ldr	r3, [pc, #88]	; (8004fb8 <_dtoa_r+0x308>)
 8004f5e:	4602      	mov	r2, r0
 8004f60:	f240 11af 	movw	r1, #431	; 0x1af
 8004f64:	e6bd      	b.n	8004ce2 <_dtoa_r+0x32>
 8004f66:	2301      	movs	r3, #1
 8004f68:	e7e1      	b.n	8004f2e <_dtoa_r+0x27e>
 8004f6a:	2501      	movs	r5, #1
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	9307      	str	r3, [sp, #28]
 8004f70:	9509      	str	r5, [sp, #36]	; 0x24
 8004f72:	f04f 33ff 	mov.w	r3, #4294967295
 8004f76:	9301      	str	r3, [sp, #4]
 8004f78:	9304      	str	r3, [sp, #16]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	2312      	movs	r3, #18
 8004f7e:	e7d1      	b.n	8004f24 <_dtoa_r+0x274>
 8004f80:	636f4361 	.word	0x636f4361
 8004f84:	3fd287a7 	.word	0x3fd287a7
 8004f88:	8b60c8b3 	.word	0x8b60c8b3
 8004f8c:	3fc68a28 	.word	0x3fc68a28
 8004f90:	509f79fb 	.word	0x509f79fb
 8004f94:	3fd34413 	.word	0x3fd34413
 8004f98:	08006d84 	.word	0x08006d84
 8004f9c:	08006d9b 	.word	0x08006d9b
 8004fa0:	7ff00000 	.word	0x7ff00000
 8004fa4:	08006d80 	.word	0x08006d80
 8004fa8:	08006d77 	.word	0x08006d77
 8004fac:	08006d54 	.word	0x08006d54
 8004fb0:	3ff80000 	.word	0x3ff80000
 8004fb4:	08006e88 	.word	0x08006e88
 8004fb8:	08006df3 	.word	0x08006df3
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	9309      	str	r3, [sp, #36]	; 0x24
 8004fc0:	e7d7      	b.n	8004f72 <_dtoa_r+0x2c2>
 8004fc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fc4:	9301      	str	r3, [sp, #4]
 8004fc6:	9304      	str	r3, [sp, #16]
 8004fc8:	e7ba      	b.n	8004f40 <_dtoa_r+0x290>
 8004fca:	3101      	adds	r1, #1
 8004fcc:	0052      	lsls	r2, r2, #1
 8004fce:	e7ba      	b.n	8004f46 <_dtoa_r+0x296>
 8004fd0:	69e3      	ldr	r3, [r4, #28]
 8004fd2:	9a00      	ldr	r2, [sp, #0]
 8004fd4:	601a      	str	r2, [r3, #0]
 8004fd6:	9b04      	ldr	r3, [sp, #16]
 8004fd8:	2b0e      	cmp	r3, #14
 8004fda:	f200 80a8 	bhi.w	800512e <_dtoa_r+0x47e>
 8004fde:	2d00      	cmp	r5, #0
 8004fe0:	f000 80a5 	beq.w	800512e <_dtoa_r+0x47e>
 8004fe4:	f1bb 0f00 	cmp.w	fp, #0
 8004fe8:	dd38      	ble.n	800505c <_dtoa_r+0x3ac>
 8004fea:	4bc0      	ldr	r3, [pc, #768]	; (80052ec <_dtoa_r+0x63c>)
 8004fec:	f00b 020f 	and.w	r2, fp, #15
 8004ff0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ff4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004ff8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004ffc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005000:	d019      	beq.n	8005036 <_dtoa_r+0x386>
 8005002:	4bbb      	ldr	r3, [pc, #748]	; (80052f0 <_dtoa_r+0x640>)
 8005004:	ec51 0b18 	vmov	r0, r1, d8
 8005008:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800500c:	f7fb fc1e 	bl	800084c <__aeabi_ddiv>
 8005010:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005014:	f008 080f 	and.w	r8, r8, #15
 8005018:	2503      	movs	r5, #3
 800501a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80052f0 <_dtoa_r+0x640>
 800501e:	f1b8 0f00 	cmp.w	r8, #0
 8005022:	d10a      	bne.n	800503a <_dtoa_r+0x38a>
 8005024:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005028:	4632      	mov	r2, r6
 800502a:	463b      	mov	r3, r7
 800502c:	f7fb fc0e 	bl	800084c <__aeabi_ddiv>
 8005030:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005034:	e02b      	b.n	800508e <_dtoa_r+0x3de>
 8005036:	2502      	movs	r5, #2
 8005038:	e7ef      	b.n	800501a <_dtoa_r+0x36a>
 800503a:	f018 0f01 	tst.w	r8, #1
 800503e:	d008      	beq.n	8005052 <_dtoa_r+0x3a2>
 8005040:	4630      	mov	r0, r6
 8005042:	4639      	mov	r1, r7
 8005044:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005048:	f7fb fad6 	bl	80005f8 <__aeabi_dmul>
 800504c:	3501      	adds	r5, #1
 800504e:	4606      	mov	r6, r0
 8005050:	460f      	mov	r7, r1
 8005052:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005056:	f109 0908 	add.w	r9, r9, #8
 800505a:	e7e0      	b.n	800501e <_dtoa_r+0x36e>
 800505c:	f000 809f 	beq.w	800519e <_dtoa_r+0x4ee>
 8005060:	f1cb 0600 	rsb	r6, fp, #0
 8005064:	4ba1      	ldr	r3, [pc, #644]	; (80052ec <_dtoa_r+0x63c>)
 8005066:	4fa2      	ldr	r7, [pc, #648]	; (80052f0 <_dtoa_r+0x640>)
 8005068:	f006 020f 	and.w	r2, r6, #15
 800506c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005074:	ec51 0b18 	vmov	r0, r1, d8
 8005078:	f7fb fabe 	bl	80005f8 <__aeabi_dmul>
 800507c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005080:	1136      	asrs	r6, r6, #4
 8005082:	2300      	movs	r3, #0
 8005084:	2502      	movs	r5, #2
 8005086:	2e00      	cmp	r6, #0
 8005088:	d17e      	bne.n	8005188 <_dtoa_r+0x4d8>
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1d0      	bne.n	8005030 <_dtoa_r+0x380>
 800508e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005090:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005094:	2b00      	cmp	r3, #0
 8005096:	f000 8084 	beq.w	80051a2 <_dtoa_r+0x4f2>
 800509a:	4b96      	ldr	r3, [pc, #600]	; (80052f4 <_dtoa_r+0x644>)
 800509c:	2200      	movs	r2, #0
 800509e:	4640      	mov	r0, r8
 80050a0:	4649      	mov	r1, r9
 80050a2:	f7fb fd1b 	bl	8000adc <__aeabi_dcmplt>
 80050a6:	2800      	cmp	r0, #0
 80050a8:	d07b      	beq.n	80051a2 <_dtoa_r+0x4f2>
 80050aa:	9b04      	ldr	r3, [sp, #16]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d078      	beq.n	80051a2 <_dtoa_r+0x4f2>
 80050b0:	9b01      	ldr	r3, [sp, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	dd39      	ble.n	800512a <_dtoa_r+0x47a>
 80050b6:	4b90      	ldr	r3, [pc, #576]	; (80052f8 <_dtoa_r+0x648>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	4640      	mov	r0, r8
 80050bc:	4649      	mov	r1, r9
 80050be:	f7fb fa9b 	bl	80005f8 <__aeabi_dmul>
 80050c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050c6:	9e01      	ldr	r6, [sp, #4]
 80050c8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80050cc:	3501      	adds	r5, #1
 80050ce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80050d2:	4628      	mov	r0, r5
 80050d4:	f7fb fa26 	bl	8000524 <__aeabi_i2d>
 80050d8:	4642      	mov	r2, r8
 80050da:	464b      	mov	r3, r9
 80050dc:	f7fb fa8c 	bl	80005f8 <__aeabi_dmul>
 80050e0:	4b86      	ldr	r3, [pc, #536]	; (80052fc <_dtoa_r+0x64c>)
 80050e2:	2200      	movs	r2, #0
 80050e4:	f7fb f8d2 	bl	800028c <__adddf3>
 80050e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80050ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050f0:	9303      	str	r3, [sp, #12]
 80050f2:	2e00      	cmp	r6, #0
 80050f4:	d158      	bne.n	80051a8 <_dtoa_r+0x4f8>
 80050f6:	4b82      	ldr	r3, [pc, #520]	; (8005300 <_dtoa_r+0x650>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	4640      	mov	r0, r8
 80050fc:	4649      	mov	r1, r9
 80050fe:	f7fb f8c3 	bl	8000288 <__aeabi_dsub>
 8005102:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005106:	4680      	mov	r8, r0
 8005108:	4689      	mov	r9, r1
 800510a:	f7fb fd05 	bl	8000b18 <__aeabi_dcmpgt>
 800510e:	2800      	cmp	r0, #0
 8005110:	f040 8296 	bne.w	8005640 <_dtoa_r+0x990>
 8005114:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005118:	4640      	mov	r0, r8
 800511a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800511e:	4649      	mov	r1, r9
 8005120:	f7fb fcdc 	bl	8000adc <__aeabi_dcmplt>
 8005124:	2800      	cmp	r0, #0
 8005126:	f040 8289 	bne.w	800563c <_dtoa_r+0x98c>
 800512a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800512e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005130:	2b00      	cmp	r3, #0
 8005132:	f2c0 814e 	blt.w	80053d2 <_dtoa_r+0x722>
 8005136:	f1bb 0f0e 	cmp.w	fp, #14
 800513a:	f300 814a 	bgt.w	80053d2 <_dtoa_r+0x722>
 800513e:	4b6b      	ldr	r3, [pc, #428]	; (80052ec <_dtoa_r+0x63c>)
 8005140:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005144:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800514a:	2b00      	cmp	r3, #0
 800514c:	f280 80dc 	bge.w	8005308 <_dtoa_r+0x658>
 8005150:	9b04      	ldr	r3, [sp, #16]
 8005152:	2b00      	cmp	r3, #0
 8005154:	f300 80d8 	bgt.w	8005308 <_dtoa_r+0x658>
 8005158:	f040 826f 	bne.w	800563a <_dtoa_r+0x98a>
 800515c:	4b68      	ldr	r3, [pc, #416]	; (8005300 <_dtoa_r+0x650>)
 800515e:	2200      	movs	r2, #0
 8005160:	4640      	mov	r0, r8
 8005162:	4649      	mov	r1, r9
 8005164:	f7fb fa48 	bl	80005f8 <__aeabi_dmul>
 8005168:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800516c:	f7fb fcca 	bl	8000b04 <__aeabi_dcmpge>
 8005170:	9e04      	ldr	r6, [sp, #16]
 8005172:	4637      	mov	r7, r6
 8005174:	2800      	cmp	r0, #0
 8005176:	f040 8245 	bne.w	8005604 <_dtoa_r+0x954>
 800517a:	9d00      	ldr	r5, [sp, #0]
 800517c:	2331      	movs	r3, #49	; 0x31
 800517e:	f805 3b01 	strb.w	r3, [r5], #1
 8005182:	f10b 0b01 	add.w	fp, fp, #1
 8005186:	e241      	b.n	800560c <_dtoa_r+0x95c>
 8005188:	07f2      	lsls	r2, r6, #31
 800518a:	d505      	bpl.n	8005198 <_dtoa_r+0x4e8>
 800518c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005190:	f7fb fa32 	bl	80005f8 <__aeabi_dmul>
 8005194:	3501      	adds	r5, #1
 8005196:	2301      	movs	r3, #1
 8005198:	1076      	asrs	r6, r6, #1
 800519a:	3708      	adds	r7, #8
 800519c:	e773      	b.n	8005086 <_dtoa_r+0x3d6>
 800519e:	2502      	movs	r5, #2
 80051a0:	e775      	b.n	800508e <_dtoa_r+0x3de>
 80051a2:	9e04      	ldr	r6, [sp, #16]
 80051a4:	465f      	mov	r7, fp
 80051a6:	e792      	b.n	80050ce <_dtoa_r+0x41e>
 80051a8:	9900      	ldr	r1, [sp, #0]
 80051aa:	4b50      	ldr	r3, [pc, #320]	; (80052ec <_dtoa_r+0x63c>)
 80051ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 80051b0:	4431      	add	r1, r6
 80051b2:	9102      	str	r1, [sp, #8]
 80051b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80051b6:	eeb0 9a47 	vmov.f32	s18, s14
 80051ba:	eef0 9a67 	vmov.f32	s19, s15
 80051be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80051c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80051c6:	2900      	cmp	r1, #0
 80051c8:	d044      	beq.n	8005254 <_dtoa_r+0x5a4>
 80051ca:	494e      	ldr	r1, [pc, #312]	; (8005304 <_dtoa_r+0x654>)
 80051cc:	2000      	movs	r0, #0
 80051ce:	f7fb fb3d 	bl	800084c <__aeabi_ddiv>
 80051d2:	ec53 2b19 	vmov	r2, r3, d9
 80051d6:	f7fb f857 	bl	8000288 <__aeabi_dsub>
 80051da:	9d00      	ldr	r5, [sp, #0]
 80051dc:	ec41 0b19 	vmov	d9, r0, r1
 80051e0:	4649      	mov	r1, r9
 80051e2:	4640      	mov	r0, r8
 80051e4:	f7fb fcb8 	bl	8000b58 <__aeabi_d2iz>
 80051e8:	4606      	mov	r6, r0
 80051ea:	f7fb f99b 	bl	8000524 <__aeabi_i2d>
 80051ee:	4602      	mov	r2, r0
 80051f0:	460b      	mov	r3, r1
 80051f2:	4640      	mov	r0, r8
 80051f4:	4649      	mov	r1, r9
 80051f6:	f7fb f847 	bl	8000288 <__aeabi_dsub>
 80051fa:	3630      	adds	r6, #48	; 0x30
 80051fc:	f805 6b01 	strb.w	r6, [r5], #1
 8005200:	ec53 2b19 	vmov	r2, r3, d9
 8005204:	4680      	mov	r8, r0
 8005206:	4689      	mov	r9, r1
 8005208:	f7fb fc68 	bl	8000adc <__aeabi_dcmplt>
 800520c:	2800      	cmp	r0, #0
 800520e:	d164      	bne.n	80052da <_dtoa_r+0x62a>
 8005210:	4642      	mov	r2, r8
 8005212:	464b      	mov	r3, r9
 8005214:	4937      	ldr	r1, [pc, #220]	; (80052f4 <_dtoa_r+0x644>)
 8005216:	2000      	movs	r0, #0
 8005218:	f7fb f836 	bl	8000288 <__aeabi_dsub>
 800521c:	ec53 2b19 	vmov	r2, r3, d9
 8005220:	f7fb fc5c 	bl	8000adc <__aeabi_dcmplt>
 8005224:	2800      	cmp	r0, #0
 8005226:	f040 80b6 	bne.w	8005396 <_dtoa_r+0x6e6>
 800522a:	9b02      	ldr	r3, [sp, #8]
 800522c:	429d      	cmp	r5, r3
 800522e:	f43f af7c 	beq.w	800512a <_dtoa_r+0x47a>
 8005232:	4b31      	ldr	r3, [pc, #196]	; (80052f8 <_dtoa_r+0x648>)
 8005234:	ec51 0b19 	vmov	r0, r1, d9
 8005238:	2200      	movs	r2, #0
 800523a:	f7fb f9dd 	bl	80005f8 <__aeabi_dmul>
 800523e:	4b2e      	ldr	r3, [pc, #184]	; (80052f8 <_dtoa_r+0x648>)
 8005240:	ec41 0b19 	vmov	d9, r0, r1
 8005244:	2200      	movs	r2, #0
 8005246:	4640      	mov	r0, r8
 8005248:	4649      	mov	r1, r9
 800524a:	f7fb f9d5 	bl	80005f8 <__aeabi_dmul>
 800524e:	4680      	mov	r8, r0
 8005250:	4689      	mov	r9, r1
 8005252:	e7c5      	b.n	80051e0 <_dtoa_r+0x530>
 8005254:	ec51 0b17 	vmov	r0, r1, d7
 8005258:	f7fb f9ce 	bl	80005f8 <__aeabi_dmul>
 800525c:	9b02      	ldr	r3, [sp, #8]
 800525e:	9d00      	ldr	r5, [sp, #0]
 8005260:	930f      	str	r3, [sp, #60]	; 0x3c
 8005262:	ec41 0b19 	vmov	d9, r0, r1
 8005266:	4649      	mov	r1, r9
 8005268:	4640      	mov	r0, r8
 800526a:	f7fb fc75 	bl	8000b58 <__aeabi_d2iz>
 800526e:	4606      	mov	r6, r0
 8005270:	f7fb f958 	bl	8000524 <__aeabi_i2d>
 8005274:	3630      	adds	r6, #48	; 0x30
 8005276:	4602      	mov	r2, r0
 8005278:	460b      	mov	r3, r1
 800527a:	4640      	mov	r0, r8
 800527c:	4649      	mov	r1, r9
 800527e:	f7fb f803 	bl	8000288 <__aeabi_dsub>
 8005282:	f805 6b01 	strb.w	r6, [r5], #1
 8005286:	9b02      	ldr	r3, [sp, #8]
 8005288:	429d      	cmp	r5, r3
 800528a:	4680      	mov	r8, r0
 800528c:	4689      	mov	r9, r1
 800528e:	f04f 0200 	mov.w	r2, #0
 8005292:	d124      	bne.n	80052de <_dtoa_r+0x62e>
 8005294:	4b1b      	ldr	r3, [pc, #108]	; (8005304 <_dtoa_r+0x654>)
 8005296:	ec51 0b19 	vmov	r0, r1, d9
 800529a:	f7fa fff7 	bl	800028c <__adddf3>
 800529e:	4602      	mov	r2, r0
 80052a0:	460b      	mov	r3, r1
 80052a2:	4640      	mov	r0, r8
 80052a4:	4649      	mov	r1, r9
 80052a6:	f7fb fc37 	bl	8000b18 <__aeabi_dcmpgt>
 80052aa:	2800      	cmp	r0, #0
 80052ac:	d173      	bne.n	8005396 <_dtoa_r+0x6e6>
 80052ae:	ec53 2b19 	vmov	r2, r3, d9
 80052b2:	4914      	ldr	r1, [pc, #80]	; (8005304 <_dtoa_r+0x654>)
 80052b4:	2000      	movs	r0, #0
 80052b6:	f7fa ffe7 	bl	8000288 <__aeabi_dsub>
 80052ba:	4602      	mov	r2, r0
 80052bc:	460b      	mov	r3, r1
 80052be:	4640      	mov	r0, r8
 80052c0:	4649      	mov	r1, r9
 80052c2:	f7fb fc0b 	bl	8000adc <__aeabi_dcmplt>
 80052c6:	2800      	cmp	r0, #0
 80052c8:	f43f af2f 	beq.w	800512a <_dtoa_r+0x47a>
 80052cc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80052ce:	1e6b      	subs	r3, r5, #1
 80052d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80052d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80052d6:	2b30      	cmp	r3, #48	; 0x30
 80052d8:	d0f8      	beq.n	80052cc <_dtoa_r+0x61c>
 80052da:	46bb      	mov	fp, r7
 80052dc:	e04a      	b.n	8005374 <_dtoa_r+0x6c4>
 80052de:	4b06      	ldr	r3, [pc, #24]	; (80052f8 <_dtoa_r+0x648>)
 80052e0:	f7fb f98a 	bl	80005f8 <__aeabi_dmul>
 80052e4:	4680      	mov	r8, r0
 80052e6:	4689      	mov	r9, r1
 80052e8:	e7bd      	b.n	8005266 <_dtoa_r+0x5b6>
 80052ea:	bf00      	nop
 80052ec:	08006e88 	.word	0x08006e88
 80052f0:	08006e60 	.word	0x08006e60
 80052f4:	3ff00000 	.word	0x3ff00000
 80052f8:	40240000 	.word	0x40240000
 80052fc:	401c0000 	.word	0x401c0000
 8005300:	40140000 	.word	0x40140000
 8005304:	3fe00000 	.word	0x3fe00000
 8005308:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800530c:	9d00      	ldr	r5, [sp, #0]
 800530e:	4642      	mov	r2, r8
 8005310:	464b      	mov	r3, r9
 8005312:	4630      	mov	r0, r6
 8005314:	4639      	mov	r1, r7
 8005316:	f7fb fa99 	bl	800084c <__aeabi_ddiv>
 800531a:	f7fb fc1d 	bl	8000b58 <__aeabi_d2iz>
 800531e:	9001      	str	r0, [sp, #4]
 8005320:	f7fb f900 	bl	8000524 <__aeabi_i2d>
 8005324:	4642      	mov	r2, r8
 8005326:	464b      	mov	r3, r9
 8005328:	f7fb f966 	bl	80005f8 <__aeabi_dmul>
 800532c:	4602      	mov	r2, r0
 800532e:	460b      	mov	r3, r1
 8005330:	4630      	mov	r0, r6
 8005332:	4639      	mov	r1, r7
 8005334:	f7fa ffa8 	bl	8000288 <__aeabi_dsub>
 8005338:	9e01      	ldr	r6, [sp, #4]
 800533a:	9f04      	ldr	r7, [sp, #16]
 800533c:	3630      	adds	r6, #48	; 0x30
 800533e:	f805 6b01 	strb.w	r6, [r5], #1
 8005342:	9e00      	ldr	r6, [sp, #0]
 8005344:	1bae      	subs	r6, r5, r6
 8005346:	42b7      	cmp	r7, r6
 8005348:	4602      	mov	r2, r0
 800534a:	460b      	mov	r3, r1
 800534c:	d134      	bne.n	80053b8 <_dtoa_r+0x708>
 800534e:	f7fa ff9d 	bl	800028c <__adddf3>
 8005352:	4642      	mov	r2, r8
 8005354:	464b      	mov	r3, r9
 8005356:	4606      	mov	r6, r0
 8005358:	460f      	mov	r7, r1
 800535a:	f7fb fbdd 	bl	8000b18 <__aeabi_dcmpgt>
 800535e:	b9c8      	cbnz	r0, 8005394 <_dtoa_r+0x6e4>
 8005360:	4642      	mov	r2, r8
 8005362:	464b      	mov	r3, r9
 8005364:	4630      	mov	r0, r6
 8005366:	4639      	mov	r1, r7
 8005368:	f7fb fbae 	bl	8000ac8 <__aeabi_dcmpeq>
 800536c:	b110      	cbz	r0, 8005374 <_dtoa_r+0x6c4>
 800536e:	9b01      	ldr	r3, [sp, #4]
 8005370:	07db      	lsls	r3, r3, #31
 8005372:	d40f      	bmi.n	8005394 <_dtoa_r+0x6e4>
 8005374:	4651      	mov	r1, sl
 8005376:	4620      	mov	r0, r4
 8005378:	f000 fbcc 	bl	8005b14 <_Bfree>
 800537c:	2300      	movs	r3, #0
 800537e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005380:	702b      	strb	r3, [r5, #0]
 8005382:	f10b 0301 	add.w	r3, fp, #1
 8005386:	6013      	str	r3, [r2, #0]
 8005388:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800538a:	2b00      	cmp	r3, #0
 800538c:	f43f ace2 	beq.w	8004d54 <_dtoa_r+0xa4>
 8005390:	601d      	str	r5, [r3, #0]
 8005392:	e4df      	b.n	8004d54 <_dtoa_r+0xa4>
 8005394:	465f      	mov	r7, fp
 8005396:	462b      	mov	r3, r5
 8005398:	461d      	mov	r5, r3
 800539a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800539e:	2a39      	cmp	r2, #57	; 0x39
 80053a0:	d106      	bne.n	80053b0 <_dtoa_r+0x700>
 80053a2:	9a00      	ldr	r2, [sp, #0]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d1f7      	bne.n	8005398 <_dtoa_r+0x6e8>
 80053a8:	9900      	ldr	r1, [sp, #0]
 80053aa:	2230      	movs	r2, #48	; 0x30
 80053ac:	3701      	adds	r7, #1
 80053ae:	700a      	strb	r2, [r1, #0]
 80053b0:	781a      	ldrb	r2, [r3, #0]
 80053b2:	3201      	adds	r2, #1
 80053b4:	701a      	strb	r2, [r3, #0]
 80053b6:	e790      	b.n	80052da <_dtoa_r+0x62a>
 80053b8:	4ba3      	ldr	r3, [pc, #652]	; (8005648 <_dtoa_r+0x998>)
 80053ba:	2200      	movs	r2, #0
 80053bc:	f7fb f91c 	bl	80005f8 <__aeabi_dmul>
 80053c0:	2200      	movs	r2, #0
 80053c2:	2300      	movs	r3, #0
 80053c4:	4606      	mov	r6, r0
 80053c6:	460f      	mov	r7, r1
 80053c8:	f7fb fb7e 	bl	8000ac8 <__aeabi_dcmpeq>
 80053cc:	2800      	cmp	r0, #0
 80053ce:	d09e      	beq.n	800530e <_dtoa_r+0x65e>
 80053d0:	e7d0      	b.n	8005374 <_dtoa_r+0x6c4>
 80053d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053d4:	2a00      	cmp	r2, #0
 80053d6:	f000 80ca 	beq.w	800556e <_dtoa_r+0x8be>
 80053da:	9a07      	ldr	r2, [sp, #28]
 80053dc:	2a01      	cmp	r2, #1
 80053de:	f300 80ad 	bgt.w	800553c <_dtoa_r+0x88c>
 80053e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80053e4:	2a00      	cmp	r2, #0
 80053e6:	f000 80a5 	beq.w	8005534 <_dtoa_r+0x884>
 80053ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80053ee:	9e08      	ldr	r6, [sp, #32]
 80053f0:	9d05      	ldr	r5, [sp, #20]
 80053f2:	9a05      	ldr	r2, [sp, #20]
 80053f4:	441a      	add	r2, r3
 80053f6:	9205      	str	r2, [sp, #20]
 80053f8:	9a06      	ldr	r2, [sp, #24]
 80053fa:	2101      	movs	r1, #1
 80053fc:	441a      	add	r2, r3
 80053fe:	4620      	mov	r0, r4
 8005400:	9206      	str	r2, [sp, #24]
 8005402:	f000 fc3d 	bl	8005c80 <__i2b>
 8005406:	4607      	mov	r7, r0
 8005408:	b165      	cbz	r5, 8005424 <_dtoa_r+0x774>
 800540a:	9b06      	ldr	r3, [sp, #24]
 800540c:	2b00      	cmp	r3, #0
 800540e:	dd09      	ble.n	8005424 <_dtoa_r+0x774>
 8005410:	42ab      	cmp	r3, r5
 8005412:	9a05      	ldr	r2, [sp, #20]
 8005414:	bfa8      	it	ge
 8005416:	462b      	movge	r3, r5
 8005418:	1ad2      	subs	r2, r2, r3
 800541a:	9205      	str	r2, [sp, #20]
 800541c:	9a06      	ldr	r2, [sp, #24]
 800541e:	1aed      	subs	r5, r5, r3
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	9306      	str	r3, [sp, #24]
 8005424:	9b08      	ldr	r3, [sp, #32]
 8005426:	b1f3      	cbz	r3, 8005466 <_dtoa_r+0x7b6>
 8005428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800542a:	2b00      	cmp	r3, #0
 800542c:	f000 80a3 	beq.w	8005576 <_dtoa_r+0x8c6>
 8005430:	2e00      	cmp	r6, #0
 8005432:	dd10      	ble.n	8005456 <_dtoa_r+0x7a6>
 8005434:	4639      	mov	r1, r7
 8005436:	4632      	mov	r2, r6
 8005438:	4620      	mov	r0, r4
 800543a:	f000 fce1 	bl	8005e00 <__pow5mult>
 800543e:	4652      	mov	r2, sl
 8005440:	4601      	mov	r1, r0
 8005442:	4607      	mov	r7, r0
 8005444:	4620      	mov	r0, r4
 8005446:	f000 fc31 	bl	8005cac <__multiply>
 800544a:	4651      	mov	r1, sl
 800544c:	4680      	mov	r8, r0
 800544e:	4620      	mov	r0, r4
 8005450:	f000 fb60 	bl	8005b14 <_Bfree>
 8005454:	46c2      	mov	sl, r8
 8005456:	9b08      	ldr	r3, [sp, #32]
 8005458:	1b9a      	subs	r2, r3, r6
 800545a:	d004      	beq.n	8005466 <_dtoa_r+0x7b6>
 800545c:	4651      	mov	r1, sl
 800545e:	4620      	mov	r0, r4
 8005460:	f000 fcce 	bl	8005e00 <__pow5mult>
 8005464:	4682      	mov	sl, r0
 8005466:	2101      	movs	r1, #1
 8005468:	4620      	mov	r0, r4
 800546a:	f000 fc09 	bl	8005c80 <__i2b>
 800546e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005470:	2b00      	cmp	r3, #0
 8005472:	4606      	mov	r6, r0
 8005474:	f340 8081 	ble.w	800557a <_dtoa_r+0x8ca>
 8005478:	461a      	mov	r2, r3
 800547a:	4601      	mov	r1, r0
 800547c:	4620      	mov	r0, r4
 800547e:	f000 fcbf 	bl	8005e00 <__pow5mult>
 8005482:	9b07      	ldr	r3, [sp, #28]
 8005484:	2b01      	cmp	r3, #1
 8005486:	4606      	mov	r6, r0
 8005488:	dd7a      	ble.n	8005580 <_dtoa_r+0x8d0>
 800548a:	f04f 0800 	mov.w	r8, #0
 800548e:	6933      	ldr	r3, [r6, #16]
 8005490:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005494:	6918      	ldr	r0, [r3, #16]
 8005496:	f000 fba5 	bl	8005be4 <__hi0bits>
 800549a:	f1c0 0020 	rsb	r0, r0, #32
 800549e:	9b06      	ldr	r3, [sp, #24]
 80054a0:	4418      	add	r0, r3
 80054a2:	f010 001f 	ands.w	r0, r0, #31
 80054a6:	f000 8094 	beq.w	80055d2 <_dtoa_r+0x922>
 80054aa:	f1c0 0320 	rsb	r3, r0, #32
 80054ae:	2b04      	cmp	r3, #4
 80054b0:	f340 8085 	ble.w	80055be <_dtoa_r+0x90e>
 80054b4:	9b05      	ldr	r3, [sp, #20]
 80054b6:	f1c0 001c 	rsb	r0, r0, #28
 80054ba:	4403      	add	r3, r0
 80054bc:	9305      	str	r3, [sp, #20]
 80054be:	9b06      	ldr	r3, [sp, #24]
 80054c0:	4403      	add	r3, r0
 80054c2:	4405      	add	r5, r0
 80054c4:	9306      	str	r3, [sp, #24]
 80054c6:	9b05      	ldr	r3, [sp, #20]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	dd05      	ble.n	80054d8 <_dtoa_r+0x828>
 80054cc:	4651      	mov	r1, sl
 80054ce:	461a      	mov	r2, r3
 80054d0:	4620      	mov	r0, r4
 80054d2:	f000 fcef 	bl	8005eb4 <__lshift>
 80054d6:	4682      	mov	sl, r0
 80054d8:	9b06      	ldr	r3, [sp, #24]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	dd05      	ble.n	80054ea <_dtoa_r+0x83a>
 80054de:	4631      	mov	r1, r6
 80054e0:	461a      	mov	r2, r3
 80054e2:	4620      	mov	r0, r4
 80054e4:	f000 fce6 	bl	8005eb4 <__lshift>
 80054e8:	4606      	mov	r6, r0
 80054ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d072      	beq.n	80055d6 <_dtoa_r+0x926>
 80054f0:	4631      	mov	r1, r6
 80054f2:	4650      	mov	r0, sl
 80054f4:	f000 fd4a 	bl	8005f8c <__mcmp>
 80054f8:	2800      	cmp	r0, #0
 80054fa:	da6c      	bge.n	80055d6 <_dtoa_r+0x926>
 80054fc:	2300      	movs	r3, #0
 80054fe:	4651      	mov	r1, sl
 8005500:	220a      	movs	r2, #10
 8005502:	4620      	mov	r0, r4
 8005504:	f000 fb28 	bl	8005b58 <__multadd>
 8005508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800550a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800550e:	4682      	mov	sl, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	f000 81b0 	beq.w	8005876 <_dtoa_r+0xbc6>
 8005516:	2300      	movs	r3, #0
 8005518:	4639      	mov	r1, r7
 800551a:	220a      	movs	r2, #10
 800551c:	4620      	mov	r0, r4
 800551e:	f000 fb1b 	bl	8005b58 <__multadd>
 8005522:	9b01      	ldr	r3, [sp, #4]
 8005524:	2b00      	cmp	r3, #0
 8005526:	4607      	mov	r7, r0
 8005528:	f300 8096 	bgt.w	8005658 <_dtoa_r+0x9a8>
 800552c:	9b07      	ldr	r3, [sp, #28]
 800552e:	2b02      	cmp	r3, #2
 8005530:	dc59      	bgt.n	80055e6 <_dtoa_r+0x936>
 8005532:	e091      	b.n	8005658 <_dtoa_r+0x9a8>
 8005534:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005536:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800553a:	e758      	b.n	80053ee <_dtoa_r+0x73e>
 800553c:	9b04      	ldr	r3, [sp, #16]
 800553e:	1e5e      	subs	r6, r3, #1
 8005540:	9b08      	ldr	r3, [sp, #32]
 8005542:	42b3      	cmp	r3, r6
 8005544:	bfbf      	itttt	lt
 8005546:	9b08      	ldrlt	r3, [sp, #32]
 8005548:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800554a:	9608      	strlt	r6, [sp, #32]
 800554c:	1af3      	sublt	r3, r6, r3
 800554e:	bfb4      	ite	lt
 8005550:	18d2      	addlt	r2, r2, r3
 8005552:	1b9e      	subge	r6, r3, r6
 8005554:	9b04      	ldr	r3, [sp, #16]
 8005556:	bfbc      	itt	lt
 8005558:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800555a:	2600      	movlt	r6, #0
 800555c:	2b00      	cmp	r3, #0
 800555e:	bfb7      	itett	lt
 8005560:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8005564:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005568:	1a9d      	sublt	r5, r3, r2
 800556a:	2300      	movlt	r3, #0
 800556c:	e741      	b.n	80053f2 <_dtoa_r+0x742>
 800556e:	9e08      	ldr	r6, [sp, #32]
 8005570:	9d05      	ldr	r5, [sp, #20]
 8005572:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005574:	e748      	b.n	8005408 <_dtoa_r+0x758>
 8005576:	9a08      	ldr	r2, [sp, #32]
 8005578:	e770      	b.n	800545c <_dtoa_r+0x7ac>
 800557a:	9b07      	ldr	r3, [sp, #28]
 800557c:	2b01      	cmp	r3, #1
 800557e:	dc19      	bgt.n	80055b4 <_dtoa_r+0x904>
 8005580:	9b02      	ldr	r3, [sp, #8]
 8005582:	b9bb      	cbnz	r3, 80055b4 <_dtoa_r+0x904>
 8005584:	9b03      	ldr	r3, [sp, #12]
 8005586:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800558a:	b99b      	cbnz	r3, 80055b4 <_dtoa_r+0x904>
 800558c:	9b03      	ldr	r3, [sp, #12]
 800558e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005592:	0d1b      	lsrs	r3, r3, #20
 8005594:	051b      	lsls	r3, r3, #20
 8005596:	b183      	cbz	r3, 80055ba <_dtoa_r+0x90a>
 8005598:	9b05      	ldr	r3, [sp, #20]
 800559a:	3301      	adds	r3, #1
 800559c:	9305      	str	r3, [sp, #20]
 800559e:	9b06      	ldr	r3, [sp, #24]
 80055a0:	3301      	adds	r3, #1
 80055a2:	9306      	str	r3, [sp, #24]
 80055a4:	f04f 0801 	mov.w	r8, #1
 80055a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f47f af6f 	bne.w	800548e <_dtoa_r+0x7de>
 80055b0:	2001      	movs	r0, #1
 80055b2:	e774      	b.n	800549e <_dtoa_r+0x7ee>
 80055b4:	f04f 0800 	mov.w	r8, #0
 80055b8:	e7f6      	b.n	80055a8 <_dtoa_r+0x8f8>
 80055ba:	4698      	mov	r8, r3
 80055bc:	e7f4      	b.n	80055a8 <_dtoa_r+0x8f8>
 80055be:	d082      	beq.n	80054c6 <_dtoa_r+0x816>
 80055c0:	9a05      	ldr	r2, [sp, #20]
 80055c2:	331c      	adds	r3, #28
 80055c4:	441a      	add	r2, r3
 80055c6:	9205      	str	r2, [sp, #20]
 80055c8:	9a06      	ldr	r2, [sp, #24]
 80055ca:	441a      	add	r2, r3
 80055cc:	441d      	add	r5, r3
 80055ce:	9206      	str	r2, [sp, #24]
 80055d0:	e779      	b.n	80054c6 <_dtoa_r+0x816>
 80055d2:	4603      	mov	r3, r0
 80055d4:	e7f4      	b.n	80055c0 <_dtoa_r+0x910>
 80055d6:	9b04      	ldr	r3, [sp, #16]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	dc37      	bgt.n	800564c <_dtoa_r+0x99c>
 80055dc:	9b07      	ldr	r3, [sp, #28]
 80055de:	2b02      	cmp	r3, #2
 80055e0:	dd34      	ble.n	800564c <_dtoa_r+0x99c>
 80055e2:	9b04      	ldr	r3, [sp, #16]
 80055e4:	9301      	str	r3, [sp, #4]
 80055e6:	9b01      	ldr	r3, [sp, #4]
 80055e8:	b963      	cbnz	r3, 8005604 <_dtoa_r+0x954>
 80055ea:	4631      	mov	r1, r6
 80055ec:	2205      	movs	r2, #5
 80055ee:	4620      	mov	r0, r4
 80055f0:	f000 fab2 	bl	8005b58 <__multadd>
 80055f4:	4601      	mov	r1, r0
 80055f6:	4606      	mov	r6, r0
 80055f8:	4650      	mov	r0, sl
 80055fa:	f000 fcc7 	bl	8005f8c <__mcmp>
 80055fe:	2800      	cmp	r0, #0
 8005600:	f73f adbb 	bgt.w	800517a <_dtoa_r+0x4ca>
 8005604:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005606:	9d00      	ldr	r5, [sp, #0]
 8005608:	ea6f 0b03 	mvn.w	fp, r3
 800560c:	f04f 0800 	mov.w	r8, #0
 8005610:	4631      	mov	r1, r6
 8005612:	4620      	mov	r0, r4
 8005614:	f000 fa7e 	bl	8005b14 <_Bfree>
 8005618:	2f00      	cmp	r7, #0
 800561a:	f43f aeab 	beq.w	8005374 <_dtoa_r+0x6c4>
 800561e:	f1b8 0f00 	cmp.w	r8, #0
 8005622:	d005      	beq.n	8005630 <_dtoa_r+0x980>
 8005624:	45b8      	cmp	r8, r7
 8005626:	d003      	beq.n	8005630 <_dtoa_r+0x980>
 8005628:	4641      	mov	r1, r8
 800562a:	4620      	mov	r0, r4
 800562c:	f000 fa72 	bl	8005b14 <_Bfree>
 8005630:	4639      	mov	r1, r7
 8005632:	4620      	mov	r0, r4
 8005634:	f000 fa6e 	bl	8005b14 <_Bfree>
 8005638:	e69c      	b.n	8005374 <_dtoa_r+0x6c4>
 800563a:	2600      	movs	r6, #0
 800563c:	4637      	mov	r7, r6
 800563e:	e7e1      	b.n	8005604 <_dtoa_r+0x954>
 8005640:	46bb      	mov	fp, r7
 8005642:	4637      	mov	r7, r6
 8005644:	e599      	b.n	800517a <_dtoa_r+0x4ca>
 8005646:	bf00      	nop
 8005648:	40240000 	.word	0x40240000
 800564c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800564e:	2b00      	cmp	r3, #0
 8005650:	f000 80c8 	beq.w	80057e4 <_dtoa_r+0xb34>
 8005654:	9b04      	ldr	r3, [sp, #16]
 8005656:	9301      	str	r3, [sp, #4]
 8005658:	2d00      	cmp	r5, #0
 800565a:	dd05      	ble.n	8005668 <_dtoa_r+0x9b8>
 800565c:	4639      	mov	r1, r7
 800565e:	462a      	mov	r2, r5
 8005660:	4620      	mov	r0, r4
 8005662:	f000 fc27 	bl	8005eb4 <__lshift>
 8005666:	4607      	mov	r7, r0
 8005668:	f1b8 0f00 	cmp.w	r8, #0
 800566c:	d05b      	beq.n	8005726 <_dtoa_r+0xa76>
 800566e:	6879      	ldr	r1, [r7, #4]
 8005670:	4620      	mov	r0, r4
 8005672:	f000 fa0f 	bl	8005a94 <_Balloc>
 8005676:	4605      	mov	r5, r0
 8005678:	b928      	cbnz	r0, 8005686 <_dtoa_r+0x9d6>
 800567a:	4b83      	ldr	r3, [pc, #524]	; (8005888 <_dtoa_r+0xbd8>)
 800567c:	4602      	mov	r2, r0
 800567e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005682:	f7ff bb2e 	b.w	8004ce2 <_dtoa_r+0x32>
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	3202      	adds	r2, #2
 800568a:	0092      	lsls	r2, r2, #2
 800568c:	f107 010c 	add.w	r1, r7, #12
 8005690:	300c      	adds	r0, #12
 8005692:	f000 ffab 	bl	80065ec <memcpy>
 8005696:	2201      	movs	r2, #1
 8005698:	4629      	mov	r1, r5
 800569a:	4620      	mov	r0, r4
 800569c:	f000 fc0a 	bl	8005eb4 <__lshift>
 80056a0:	9b00      	ldr	r3, [sp, #0]
 80056a2:	3301      	adds	r3, #1
 80056a4:	9304      	str	r3, [sp, #16]
 80056a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80056aa:	4413      	add	r3, r2
 80056ac:	9308      	str	r3, [sp, #32]
 80056ae:	9b02      	ldr	r3, [sp, #8]
 80056b0:	f003 0301 	and.w	r3, r3, #1
 80056b4:	46b8      	mov	r8, r7
 80056b6:	9306      	str	r3, [sp, #24]
 80056b8:	4607      	mov	r7, r0
 80056ba:	9b04      	ldr	r3, [sp, #16]
 80056bc:	4631      	mov	r1, r6
 80056be:	3b01      	subs	r3, #1
 80056c0:	4650      	mov	r0, sl
 80056c2:	9301      	str	r3, [sp, #4]
 80056c4:	f7ff fa6b 	bl	8004b9e <quorem>
 80056c8:	4641      	mov	r1, r8
 80056ca:	9002      	str	r0, [sp, #8]
 80056cc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80056d0:	4650      	mov	r0, sl
 80056d2:	f000 fc5b 	bl	8005f8c <__mcmp>
 80056d6:	463a      	mov	r2, r7
 80056d8:	9005      	str	r0, [sp, #20]
 80056da:	4631      	mov	r1, r6
 80056dc:	4620      	mov	r0, r4
 80056de:	f000 fc71 	bl	8005fc4 <__mdiff>
 80056e2:	68c2      	ldr	r2, [r0, #12]
 80056e4:	4605      	mov	r5, r0
 80056e6:	bb02      	cbnz	r2, 800572a <_dtoa_r+0xa7a>
 80056e8:	4601      	mov	r1, r0
 80056ea:	4650      	mov	r0, sl
 80056ec:	f000 fc4e 	bl	8005f8c <__mcmp>
 80056f0:	4602      	mov	r2, r0
 80056f2:	4629      	mov	r1, r5
 80056f4:	4620      	mov	r0, r4
 80056f6:	9209      	str	r2, [sp, #36]	; 0x24
 80056f8:	f000 fa0c 	bl	8005b14 <_Bfree>
 80056fc:	9b07      	ldr	r3, [sp, #28]
 80056fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005700:	9d04      	ldr	r5, [sp, #16]
 8005702:	ea43 0102 	orr.w	r1, r3, r2
 8005706:	9b06      	ldr	r3, [sp, #24]
 8005708:	4319      	orrs	r1, r3
 800570a:	d110      	bne.n	800572e <_dtoa_r+0xa7e>
 800570c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005710:	d029      	beq.n	8005766 <_dtoa_r+0xab6>
 8005712:	9b05      	ldr	r3, [sp, #20]
 8005714:	2b00      	cmp	r3, #0
 8005716:	dd02      	ble.n	800571e <_dtoa_r+0xa6e>
 8005718:	9b02      	ldr	r3, [sp, #8]
 800571a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800571e:	9b01      	ldr	r3, [sp, #4]
 8005720:	f883 9000 	strb.w	r9, [r3]
 8005724:	e774      	b.n	8005610 <_dtoa_r+0x960>
 8005726:	4638      	mov	r0, r7
 8005728:	e7ba      	b.n	80056a0 <_dtoa_r+0x9f0>
 800572a:	2201      	movs	r2, #1
 800572c:	e7e1      	b.n	80056f2 <_dtoa_r+0xa42>
 800572e:	9b05      	ldr	r3, [sp, #20]
 8005730:	2b00      	cmp	r3, #0
 8005732:	db04      	blt.n	800573e <_dtoa_r+0xa8e>
 8005734:	9907      	ldr	r1, [sp, #28]
 8005736:	430b      	orrs	r3, r1
 8005738:	9906      	ldr	r1, [sp, #24]
 800573a:	430b      	orrs	r3, r1
 800573c:	d120      	bne.n	8005780 <_dtoa_r+0xad0>
 800573e:	2a00      	cmp	r2, #0
 8005740:	dded      	ble.n	800571e <_dtoa_r+0xa6e>
 8005742:	4651      	mov	r1, sl
 8005744:	2201      	movs	r2, #1
 8005746:	4620      	mov	r0, r4
 8005748:	f000 fbb4 	bl	8005eb4 <__lshift>
 800574c:	4631      	mov	r1, r6
 800574e:	4682      	mov	sl, r0
 8005750:	f000 fc1c 	bl	8005f8c <__mcmp>
 8005754:	2800      	cmp	r0, #0
 8005756:	dc03      	bgt.n	8005760 <_dtoa_r+0xab0>
 8005758:	d1e1      	bne.n	800571e <_dtoa_r+0xa6e>
 800575a:	f019 0f01 	tst.w	r9, #1
 800575e:	d0de      	beq.n	800571e <_dtoa_r+0xa6e>
 8005760:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005764:	d1d8      	bne.n	8005718 <_dtoa_r+0xa68>
 8005766:	9a01      	ldr	r2, [sp, #4]
 8005768:	2339      	movs	r3, #57	; 0x39
 800576a:	7013      	strb	r3, [r2, #0]
 800576c:	462b      	mov	r3, r5
 800576e:	461d      	mov	r5, r3
 8005770:	3b01      	subs	r3, #1
 8005772:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005776:	2a39      	cmp	r2, #57	; 0x39
 8005778:	d06c      	beq.n	8005854 <_dtoa_r+0xba4>
 800577a:	3201      	adds	r2, #1
 800577c:	701a      	strb	r2, [r3, #0]
 800577e:	e747      	b.n	8005610 <_dtoa_r+0x960>
 8005780:	2a00      	cmp	r2, #0
 8005782:	dd07      	ble.n	8005794 <_dtoa_r+0xae4>
 8005784:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005788:	d0ed      	beq.n	8005766 <_dtoa_r+0xab6>
 800578a:	9a01      	ldr	r2, [sp, #4]
 800578c:	f109 0301 	add.w	r3, r9, #1
 8005790:	7013      	strb	r3, [r2, #0]
 8005792:	e73d      	b.n	8005610 <_dtoa_r+0x960>
 8005794:	9b04      	ldr	r3, [sp, #16]
 8005796:	9a08      	ldr	r2, [sp, #32]
 8005798:	f803 9c01 	strb.w	r9, [r3, #-1]
 800579c:	4293      	cmp	r3, r2
 800579e:	d043      	beq.n	8005828 <_dtoa_r+0xb78>
 80057a0:	4651      	mov	r1, sl
 80057a2:	2300      	movs	r3, #0
 80057a4:	220a      	movs	r2, #10
 80057a6:	4620      	mov	r0, r4
 80057a8:	f000 f9d6 	bl	8005b58 <__multadd>
 80057ac:	45b8      	cmp	r8, r7
 80057ae:	4682      	mov	sl, r0
 80057b0:	f04f 0300 	mov.w	r3, #0
 80057b4:	f04f 020a 	mov.w	r2, #10
 80057b8:	4641      	mov	r1, r8
 80057ba:	4620      	mov	r0, r4
 80057bc:	d107      	bne.n	80057ce <_dtoa_r+0xb1e>
 80057be:	f000 f9cb 	bl	8005b58 <__multadd>
 80057c2:	4680      	mov	r8, r0
 80057c4:	4607      	mov	r7, r0
 80057c6:	9b04      	ldr	r3, [sp, #16]
 80057c8:	3301      	adds	r3, #1
 80057ca:	9304      	str	r3, [sp, #16]
 80057cc:	e775      	b.n	80056ba <_dtoa_r+0xa0a>
 80057ce:	f000 f9c3 	bl	8005b58 <__multadd>
 80057d2:	4639      	mov	r1, r7
 80057d4:	4680      	mov	r8, r0
 80057d6:	2300      	movs	r3, #0
 80057d8:	220a      	movs	r2, #10
 80057da:	4620      	mov	r0, r4
 80057dc:	f000 f9bc 	bl	8005b58 <__multadd>
 80057e0:	4607      	mov	r7, r0
 80057e2:	e7f0      	b.n	80057c6 <_dtoa_r+0xb16>
 80057e4:	9b04      	ldr	r3, [sp, #16]
 80057e6:	9301      	str	r3, [sp, #4]
 80057e8:	9d00      	ldr	r5, [sp, #0]
 80057ea:	4631      	mov	r1, r6
 80057ec:	4650      	mov	r0, sl
 80057ee:	f7ff f9d6 	bl	8004b9e <quorem>
 80057f2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80057f6:	9b00      	ldr	r3, [sp, #0]
 80057f8:	f805 9b01 	strb.w	r9, [r5], #1
 80057fc:	1aea      	subs	r2, r5, r3
 80057fe:	9b01      	ldr	r3, [sp, #4]
 8005800:	4293      	cmp	r3, r2
 8005802:	dd07      	ble.n	8005814 <_dtoa_r+0xb64>
 8005804:	4651      	mov	r1, sl
 8005806:	2300      	movs	r3, #0
 8005808:	220a      	movs	r2, #10
 800580a:	4620      	mov	r0, r4
 800580c:	f000 f9a4 	bl	8005b58 <__multadd>
 8005810:	4682      	mov	sl, r0
 8005812:	e7ea      	b.n	80057ea <_dtoa_r+0xb3a>
 8005814:	9b01      	ldr	r3, [sp, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	bfc8      	it	gt
 800581a:	461d      	movgt	r5, r3
 800581c:	9b00      	ldr	r3, [sp, #0]
 800581e:	bfd8      	it	le
 8005820:	2501      	movle	r5, #1
 8005822:	441d      	add	r5, r3
 8005824:	f04f 0800 	mov.w	r8, #0
 8005828:	4651      	mov	r1, sl
 800582a:	2201      	movs	r2, #1
 800582c:	4620      	mov	r0, r4
 800582e:	f000 fb41 	bl	8005eb4 <__lshift>
 8005832:	4631      	mov	r1, r6
 8005834:	4682      	mov	sl, r0
 8005836:	f000 fba9 	bl	8005f8c <__mcmp>
 800583a:	2800      	cmp	r0, #0
 800583c:	dc96      	bgt.n	800576c <_dtoa_r+0xabc>
 800583e:	d102      	bne.n	8005846 <_dtoa_r+0xb96>
 8005840:	f019 0f01 	tst.w	r9, #1
 8005844:	d192      	bne.n	800576c <_dtoa_r+0xabc>
 8005846:	462b      	mov	r3, r5
 8005848:	461d      	mov	r5, r3
 800584a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800584e:	2a30      	cmp	r2, #48	; 0x30
 8005850:	d0fa      	beq.n	8005848 <_dtoa_r+0xb98>
 8005852:	e6dd      	b.n	8005610 <_dtoa_r+0x960>
 8005854:	9a00      	ldr	r2, [sp, #0]
 8005856:	429a      	cmp	r2, r3
 8005858:	d189      	bne.n	800576e <_dtoa_r+0xabe>
 800585a:	f10b 0b01 	add.w	fp, fp, #1
 800585e:	2331      	movs	r3, #49	; 0x31
 8005860:	e796      	b.n	8005790 <_dtoa_r+0xae0>
 8005862:	4b0a      	ldr	r3, [pc, #40]	; (800588c <_dtoa_r+0xbdc>)
 8005864:	f7ff ba99 	b.w	8004d9a <_dtoa_r+0xea>
 8005868:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800586a:	2b00      	cmp	r3, #0
 800586c:	f47f aa6d 	bne.w	8004d4a <_dtoa_r+0x9a>
 8005870:	4b07      	ldr	r3, [pc, #28]	; (8005890 <_dtoa_r+0xbe0>)
 8005872:	f7ff ba92 	b.w	8004d9a <_dtoa_r+0xea>
 8005876:	9b01      	ldr	r3, [sp, #4]
 8005878:	2b00      	cmp	r3, #0
 800587a:	dcb5      	bgt.n	80057e8 <_dtoa_r+0xb38>
 800587c:	9b07      	ldr	r3, [sp, #28]
 800587e:	2b02      	cmp	r3, #2
 8005880:	f73f aeb1 	bgt.w	80055e6 <_dtoa_r+0x936>
 8005884:	e7b0      	b.n	80057e8 <_dtoa_r+0xb38>
 8005886:	bf00      	nop
 8005888:	08006df3 	.word	0x08006df3
 800588c:	08006d53 	.word	0x08006d53
 8005890:	08006d77 	.word	0x08006d77

08005894 <_free_r>:
 8005894:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005896:	2900      	cmp	r1, #0
 8005898:	d044      	beq.n	8005924 <_free_r+0x90>
 800589a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800589e:	9001      	str	r0, [sp, #4]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f1a1 0404 	sub.w	r4, r1, #4
 80058a6:	bfb8      	it	lt
 80058a8:	18e4      	addlt	r4, r4, r3
 80058aa:	f000 f8e7 	bl	8005a7c <__malloc_lock>
 80058ae:	4a1e      	ldr	r2, [pc, #120]	; (8005928 <_free_r+0x94>)
 80058b0:	9801      	ldr	r0, [sp, #4]
 80058b2:	6813      	ldr	r3, [r2, #0]
 80058b4:	b933      	cbnz	r3, 80058c4 <_free_r+0x30>
 80058b6:	6063      	str	r3, [r4, #4]
 80058b8:	6014      	str	r4, [r2, #0]
 80058ba:	b003      	add	sp, #12
 80058bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80058c0:	f000 b8e2 	b.w	8005a88 <__malloc_unlock>
 80058c4:	42a3      	cmp	r3, r4
 80058c6:	d908      	bls.n	80058da <_free_r+0x46>
 80058c8:	6825      	ldr	r5, [r4, #0]
 80058ca:	1961      	adds	r1, r4, r5
 80058cc:	428b      	cmp	r3, r1
 80058ce:	bf01      	itttt	eq
 80058d0:	6819      	ldreq	r1, [r3, #0]
 80058d2:	685b      	ldreq	r3, [r3, #4]
 80058d4:	1949      	addeq	r1, r1, r5
 80058d6:	6021      	streq	r1, [r4, #0]
 80058d8:	e7ed      	b.n	80058b6 <_free_r+0x22>
 80058da:	461a      	mov	r2, r3
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	b10b      	cbz	r3, 80058e4 <_free_r+0x50>
 80058e0:	42a3      	cmp	r3, r4
 80058e2:	d9fa      	bls.n	80058da <_free_r+0x46>
 80058e4:	6811      	ldr	r1, [r2, #0]
 80058e6:	1855      	adds	r5, r2, r1
 80058e8:	42a5      	cmp	r5, r4
 80058ea:	d10b      	bne.n	8005904 <_free_r+0x70>
 80058ec:	6824      	ldr	r4, [r4, #0]
 80058ee:	4421      	add	r1, r4
 80058f0:	1854      	adds	r4, r2, r1
 80058f2:	42a3      	cmp	r3, r4
 80058f4:	6011      	str	r1, [r2, #0]
 80058f6:	d1e0      	bne.n	80058ba <_free_r+0x26>
 80058f8:	681c      	ldr	r4, [r3, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	6053      	str	r3, [r2, #4]
 80058fe:	440c      	add	r4, r1
 8005900:	6014      	str	r4, [r2, #0]
 8005902:	e7da      	b.n	80058ba <_free_r+0x26>
 8005904:	d902      	bls.n	800590c <_free_r+0x78>
 8005906:	230c      	movs	r3, #12
 8005908:	6003      	str	r3, [r0, #0]
 800590a:	e7d6      	b.n	80058ba <_free_r+0x26>
 800590c:	6825      	ldr	r5, [r4, #0]
 800590e:	1961      	adds	r1, r4, r5
 8005910:	428b      	cmp	r3, r1
 8005912:	bf04      	itt	eq
 8005914:	6819      	ldreq	r1, [r3, #0]
 8005916:	685b      	ldreq	r3, [r3, #4]
 8005918:	6063      	str	r3, [r4, #4]
 800591a:	bf04      	itt	eq
 800591c:	1949      	addeq	r1, r1, r5
 800591e:	6021      	streq	r1, [r4, #0]
 8005920:	6054      	str	r4, [r2, #4]
 8005922:	e7ca      	b.n	80058ba <_free_r+0x26>
 8005924:	b003      	add	sp, #12
 8005926:	bd30      	pop	{r4, r5, pc}
 8005928:	20000c44 	.word	0x20000c44

0800592c <malloc>:
 800592c:	4b02      	ldr	r3, [pc, #8]	; (8005938 <malloc+0xc>)
 800592e:	4601      	mov	r1, r0
 8005930:	6818      	ldr	r0, [r3, #0]
 8005932:	f000 b823 	b.w	800597c <_malloc_r>
 8005936:	bf00      	nop
 8005938:	2000015c 	.word	0x2000015c

0800593c <sbrk_aligned>:
 800593c:	b570      	push	{r4, r5, r6, lr}
 800593e:	4e0e      	ldr	r6, [pc, #56]	; (8005978 <sbrk_aligned+0x3c>)
 8005940:	460c      	mov	r4, r1
 8005942:	6831      	ldr	r1, [r6, #0]
 8005944:	4605      	mov	r5, r0
 8005946:	b911      	cbnz	r1, 800594e <sbrk_aligned+0x12>
 8005948:	f000 fe40 	bl	80065cc <_sbrk_r>
 800594c:	6030      	str	r0, [r6, #0]
 800594e:	4621      	mov	r1, r4
 8005950:	4628      	mov	r0, r5
 8005952:	f000 fe3b 	bl	80065cc <_sbrk_r>
 8005956:	1c43      	adds	r3, r0, #1
 8005958:	d00a      	beq.n	8005970 <sbrk_aligned+0x34>
 800595a:	1cc4      	adds	r4, r0, #3
 800595c:	f024 0403 	bic.w	r4, r4, #3
 8005960:	42a0      	cmp	r0, r4
 8005962:	d007      	beq.n	8005974 <sbrk_aligned+0x38>
 8005964:	1a21      	subs	r1, r4, r0
 8005966:	4628      	mov	r0, r5
 8005968:	f000 fe30 	bl	80065cc <_sbrk_r>
 800596c:	3001      	adds	r0, #1
 800596e:	d101      	bne.n	8005974 <sbrk_aligned+0x38>
 8005970:	f04f 34ff 	mov.w	r4, #4294967295
 8005974:	4620      	mov	r0, r4
 8005976:	bd70      	pop	{r4, r5, r6, pc}
 8005978:	20000c48 	.word	0x20000c48

0800597c <_malloc_r>:
 800597c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005980:	1ccd      	adds	r5, r1, #3
 8005982:	f025 0503 	bic.w	r5, r5, #3
 8005986:	3508      	adds	r5, #8
 8005988:	2d0c      	cmp	r5, #12
 800598a:	bf38      	it	cc
 800598c:	250c      	movcc	r5, #12
 800598e:	2d00      	cmp	r5, #0
 8005990:	4607      	mov	r7, r0
 8005992:	db01      	blt.n	8005998 <_malloc_r+0x1c>
 8005994:	42a9      	cmp	r1, r5
 8005996:	d905      	bls.n	80059a4 <_malloc_r+0x28>
 8005998:	230c      	movs	r3, #12
 800599a:	603b      	str	r3, [r7, #0]
 800599c:	2600      	movs	r6, #0
 800599e:	4630      	mov	r0, r6
 80059a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005a78 <_malloc_r+0xfc>
 80059a8:	f000 f868 	bl	8005a7c <__malloc_lock>
 80059ac:	f8d8 3000 	ldr.w	r3, [r8]
 80059b0:	461c      	mov	r4, r3
 80059b2:	bb5c      	cbnz	r4, 8005a0c <_malloc_r+0x90>
 80059b4:	4629      	mov	r1, r5
 80059b6:	4638      	mov	r0, r7
 80059b8:	f7ff ffc0 	bl	800593c <sbrk_aligned>
 80059bc:	1c43      	adds	r3, r0, #1
 80059be:	4604      	mov	r4, r0
 80059c0:	d155      	bne.n	8005a6e <_malloc_r+0xf2>
 80059c2:	f8d8 4000 	ldr.w	r4, [r8]
 80059c6:	4626      	mov	r6, r4
 80059c8:	2e00      	cmp	r6, #0
 80059ca:	d145      	bne.n	8005a58 <_malloc_r+0xdc>
 80059cc:	2c00      	cmp	r4, #0
 80059ce:	d048      	beq.n	8005a62 <_malloc_r+0xe6>
 80059d0:	6823      	ldr	r3, [r4, #0]
 80059d2:	4631      	mov	r1, r6
 80059d4:	4638      	mov	r0, r7
 80059d6:	eb04 0903 	add.w	r9, r4, r3
 80059da:	f000 fdf7 	bl	80065cc <_sbrk_r>
 80059de:	4581      	cmp	r9, r0
 80059e0:	d13f      	bne.n	8005a62 <_malloc_r+0xe6>
 80059e2:	6821      	ldr	r1, [r4, #0]
 80059e4:	1a6d      	subs	r5, r5, r1
 80059e6:	4629      	mov	r1, r5
 80059e8:	4638      	mov	r0, r7
 80059ea:	f7ff ffa7 	bl	800593c <sbrk_aligned>
 80059ee:	3001      	adds	r0, #1
 80059f0:	d037      	beq.n	8005a62 <_malloc_r+0xe6>
 80059f2:	6823      	ldr	r3, [r4, #0]
 80059f4:	442b      	add	r3, r5
 80059f6:	6023      	str	r3, [r4, #0]
 80059f8:	f8d8 3000 	ldr.w	r3, [r8]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d038      	beq.n	8005a72 <_malloc_r+0xf6>
 8005a00:	685a      	ldr	r2, [r3, #4]
 8005a02:	42a2      	cmp	r2, r4
 8005a04:	d12b      	bne.n	8005a5e <_malloc_r+0xe2>
 8005a06:	2200      	movs	r2, #0
 8005a08:	605a      	str	r2, [r3, #4]
 8005a0a:	e00f      	b.n	8005a2c <_malloc_r+0xb0>
 8005a0c:	6822      	ldr	r2, [r4, #0]
 8005a0e:	1b52      	subs	r2, r2, r5
 8005a10:	d41f      	bmi.n	8005a52 <_malloc_r+0xd6>
 8005a12:	2a0b      	cmp	r2, #11
 8005a14:	d917      	bls.n	8005a46 <_malloc_r+0xca>
 8005a16:	1961      	adds	r1, r4, r5
 8005a18:	42a3      	cmp	r3, r4
 8005a1a:	6025      	str	r5, [r4, #0]
 8005a1c:	bf18      	it	ne
 8005a1e:	6059      	strne	r1, [r3, #4]
 8005a20:	6863      	ldr	r3, [r4, #4]
 8005a22:	bf08      	it	eq
 8005a24:	f8c8 1000 	streq.w	r1, [r8]
 8005a28:	5162      	str	r2, [r4, r5]
 8005a2a:	604b      	str	r3, [r1, #4]
 8005a2c:	4638      	mov	r0, r7
 8005a2e:	f104 060b 	add.w	r6, r4, #11
 8005a32:	f000 f829 	bl	8005a88 <__malloc_unlock>
 8005a36:	f026 0607 	bic.w	r6, r6, #7
 8005a3a:	1d23      	adds	r3, r4, #4
 8005a3c:	1af2      	subs	r2, r6, r3
 8005a3e:	d0ae      	beq.n	800599e <_malloc_r+0x22>
 8005a40:	1b9b      	subs	r3, r3, r6
 8005a42:	50a3      	str	r3, [r4, r2]
 8005a44:	e7ab      	b.n	800599e <_malloc_r+0x22>
 8005a46:	42a3      	cmp	r3, r4
 8005a48:	6862      	ldr	r2, [r4, #4]
 8005a4a:	d1dd      	bne.n	8005a08 <_malloc_r+0x8c>
 8005a4c:	f8c8 2000 	str.w	r2, [r8]
 8005a50:	e7ec      	b.n	8005a2c <_malloc_r+0xb0>
 8005a52:	4623      	mov	r3, r4
 8005a54:	6864      	ldr	r4, [r4, #4]
 8005a56:	e7ac      	b.n	80059b2 <_malloc_r+0x36>
 8005a58:	4634      	mov	r4, r6
 8005a5a:	6876      	ldr	r6, [r6, #4]
 8005a5c:	e7b4      	b.n	80059c8 <_malloc_r+0x4c>
 8005a5e:	4613      	mov	r3, r2
 8005a60:	e7cc      	b.n	80059fc <_malloc_r+0x80>
 8005a62:	230c      	movs	r3, #12
 8005a64:	603b      	str	r3, [r7, #0]
 8005a66:	4638      	mov	r0, r7
 8005a68:	f000 f80e 	bl	8005a88 <__malloc_unlock>
 8005a6c:	e797      	b.n	800599e <_malloc_r+0x22>
 8005a6e:	6025      	str	r5, [r4, #0]
 8005a70:	e7dc      	b.n	8005a2c <_malloc_r+0xb0>
 8005a72:	605b      	str	r3, [r3, #4]
 8005a74:	deff      	udf	#255	; 0xff
 8005a76:	bf00      	nop
 8005a78:	20000c44 	.word	0x20000c44

08005a7c <__malloc_lock>:
 8005a7c:	4801      	ldr	r0, [pc, #4]	; (8005a84 <__malloc_lock+0x8>)
 8005a7e:	f7ff b88c 	b.w	8004b9a <__retarget_lock_acquire_recursive>
 8005a82:	bf00      	nop
 8005a84:	20000c40 	.word	0x20000c40

08005a88 <__malloc_unlock>:
 8005a88:	4801      	ldr	r0, [pc, #4]	; (8005a90 <__malloc_unlock+0x8>)
 8005a8a:	f7ff b887 	b.w	8004b9c <__retarget_lock_release_recursive>
 8005a8e:	bf00      	nop
 8005a90:	20000c40 	.word	0x20000c40

08005a94 <_Balloc>:
 8005a94:	b570      	push	{r4, r5, r6, lr}
 8005a96:	69c6      	ldr	r6, [r0, #28]
 8005a98:	4604      	mov	r4, r0
 8005a9a:	460d      	mov	r5, r1
 8005a9c:	b976      	cbnz	r6, 8005abc <_Balloc+0x28>
 8005a9e:	2010      	movs	r0, #16
 8005aa0:	f7ff ff44 	bl	800592c <malloc>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	61e0      	str	r0, [r4, #28]
 8005aa8:	b920      	cbnz	r0, 8005ab4 <_Balloc+0x20>
 8005aaa:	4b18      	ldr	r3, [pc, #96]	; (8005b0c <_Balloc+0x78>)
 8005aac:	4818      	ldr	r0, [pc, #96]	; (8005b10 <_Balloc+0x7c>)
 8005aae:	216b      	movs	r1, #107	; 0x6b
 8005ab0:	f000 fdaa 	bl	8006608 <__assert_func>
 8005ab4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ab8:	6006      	str	r6, [r0, #0]
 8005aba:	60c6      	str	r6, [r0, #12]
 8005abc:	69e6      	ldr	r6, [r4, #28]
 8005abe:	68f3      	ldr	r3, [r6, #12]
 8005ac0:	b183      	cbz	r3, 8005ae4 <_Balloc+0x50>
 8005ac2:	69e3      	ldr	r3, [r4, #28]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005aca:	b9b8      	cbnz	r0, 8005afc <_Balloc+0x68>
 8005acc:	2101      	movs	r1, #1
 8005ace:	fa01 f605 	lsl.w	r6, r1, r5
 8005ad2:	1d72      	adds	r2, r6, #5
 8005ad4:	0092      	lsls	r2, r2, #2
 8005ad6:	4620      	mov	r0, r4
 8005ad8:	f000 fdb4 	bl	8006644 <_calloc_r>
 8005adc:	b160      	cbz	r0, 8005af8 <_Balloc+0x64>
 8005ade:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005ae2:	e00e      	b.n	8005b02 <_Balloc+0x6e>
 8005ae4:	2221      	movs	r2, #33	; 0x21
 8005ae6:	2104      	movs	r1, #4
 8005ae8:	4620      	mov	r0, r4
 8005aea:	f000 fdab 	bl	8006644 <_calloc_r>
 8005aee:	69e3      	ldr	r3, [r4, #28]
 8005af0:	60f0      	str	r0, [r6, #12]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d1e4      	bne.n	8005ac2 <_Balloc+0x2e>
 8005af8:	2000      	movs	r0, #0
 8005afa:	bd70      	pop	{r4, r5, r6, pc}
 8005afc:	6802      	ldr	r2, [r0, #0]
 8005afe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005b02:	2300      	movs	r3, #0
 8005b04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005b08:	e7f7      	b.n	8005afa <_Balloc+0x66>
 8005b0a:	bf00      	nop
 8005b0c:	08006d84 	.word	0x08006d84
 8005b10:	08006e04 	.word	0x08006e04

08005b14 <_Bfree>:
 8005b14:	b570      	push	{r4, r5, r6, lr}
 8005b16:	69c6      	ldr	r6, [r0, #28]
 8005b18:	4605      	mov	r5, r0
 8005b1a:	460c      	mov	r4, r1
 8005b1c:	b976      	cbnz	r6, 8005b3c <_Bfree+0x28>
 8005b1e:	2010      	movs	r0, #16
 8005b20:	f7ff ff04 	bl	800592c <malloc>
 8005b24:	4602      	mov	r2, r0
 8005b26:	61e8      	str	r0, [r5, #28]
 8005b28:	b920      	cbnz	r0, 8005b34 <_Bfree+0x20>
 8005b2a:	4b09      	ldr	r3, [pc, #36]	; (8005b50 <_Bfree+0x3c>)
 8005b2c:	4809      	ldr	r0, [pc, #36]	; (8005b54 <_Bfree+0x40>)
 8005b2e:	218f      	movs	r1, #143	; 0x8f
 8005b30:	f000 fd6a 	bl	8006608 <__assert_func>
 8005b34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005b38:	6006      	str	r6, [r0, #0]
 8005b3a:	60c6      	str	r6, [r0, #12]
 8005b3c:	b13c      	cbz	r4, 8005b4e <_Bfree+0x3a>
 8005b3e:	69eb      	ldr	r3, [r5, #28]
 8005b40:	6862      	ldr	r2, [r4, #4]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b48:	6021      	str	r1, [r4, #0]
 8005b4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005b4e:	bd70      	pop	{r4, r5, r6, pc}
 8005b50:	08006d84 	.word	0x08006d84
 8005b54:	08006e04 	.word	0x08006e04

08005b58 <__multadd>:
 8005b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b5c:	690d      	ldr	r5, [r1, #16]
 8005b5e:	4607      	mov	r7, r0
 8005b60:	460c      	mov	r4, r1
 8005b62:	461e      	mov	r6, r3
 8005b64:	f101 0c14 	add.w	ip, r1, #20
 8005b68:	2000      	movs	r0, #0
 8005b6a:	f8dc 3000 	ldr.w	r3, [ip]
 8005b6e:	b299      	uxth	r1, r3
 8005b70:	fb02 6101 	mla	r1, r2, r1, r6
 8005b74:	0c1e      	lsrs	r6, r3, #16
 8005b76:	0c0b      	lsrs	r3, r1, #16
 8005b78:	fb02 3306 	mla	r3, r2, r6, r3
 8005b7c:	b289      	uxth	r1, r1
 8005b7e:	3001      	adds	r0, #1
 8005b80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005b84:	4285      	cmp	r5, r0
 8005b86:	f84c 1b04 	str.w	r1, [ip], #4
 8005b8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005b8e:	dcec      	bgt.n	8005b6a <__multadd+0x12>
 8005b90:	b30e      	cbz	r6, 8005bd6 <__multadd+0x7e>
 8005b92:	68a3      	ldr	r3, [r4, #8]
 8005b94:	42ab      	cmp	r3, r5
 8005b96:	dc19      	bgt.n	8005bcc <__multadd+0x74>
 8005b98:	6861      	ldr	r1, [r4, #4]
 8005b9a:	4638      	mov	r0, r7
 8005b9c:	3101      	adds	r1, #1
 8005b9e:	f7ff ff79 	bl	8005a94 <_Balloc>
 8005ba2:	4680      	mov	r8, r0
 8005ba4:	b928      	cbnz	r0, 8005bb2 <__multadd+0x5a>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	4b0c      	ldr	r3, [pc, #48]	; (8005bdc <__multadd+0x84>)
 8005baa:	480d      	ldr	r0, [pc, #52]	; (8005be0 <__multadd+0x88>)
 8005bac:	21ba      	movs	r1, #186	; 0xba
 8005bae:	f000 fd2b 	bl	8006608 <__assert_func>
 8005bb2:	6922      	ldr	r2, [r4, #16]
 8005bb4:	3202      	adds	r2, #2
 8005bb6:	f104 010c 	add.w	r1, r4, #12
 8005bba:	0092      	lsls	r2, r2, #2
 8005bbc:	300c      	adds	r0, #12
 8005bbe:	f000 fd15 	bl	80065ec <memcpy>
 8005bc2:	4621      	mov	r1, r4
 8005bc4:	4638      	mov	r0, r7
 8005bc6:	f7ff ffa5 	bl	8005b14 <_Bfree>
 8005bca:	4644      	mov	r4, r8
 8005bcc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005bd0:	3501      	adds	r5, #1
 8005bd2:	615e      	str	r6, [r3, #20]
 8005bd4:	6125      	str	r5, [r4, #16]
 8005bd6:	4620      	mov	r0, r4
 8005bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bdc:	08006df3 	.word	0x08006df3
 8005be0:	08006e04 	.word	0x08006e04

08005be4 <__hi0bits>:
 8005be4:	0c03      	lsrs	r3, r0, #16
 8005be6:	041b      	lsls	r3, r3, #16
 8005be8:	b9d3      	cbnz	r3, 8005c20 <__hi0bits+0x3c>
 8005bea:	0400      	lsls	r0, r0, #16
 8005bec:	2310      	movs	r3, #16
 8005bee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005bf2:	bf04      	itt	eq
 8005bf4:	0200      	lsleq	r0, r0, #8
 8005bf6:	3308      	addeq	r3, #8
 8005bf8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005bfc:	bf04      	itt	eq
 8005bfe:	0100      	lsleq	r0, r0, #4
 8005c00:	3304      	addeq	r3, #4
 8005c02:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005c06:	bf04      	itt	eq
 8005c08:	0080      	lsleq	r0, r0, #2
 8005c0a:	3302      	addeq	r3, #2
 8005c0c:	2800      	cmp	r0, #0
 8005c0e:	db05      	blt.n	8005c1c <__hi0bits+0x38>
 8005c10:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005c14:	f103 0301 	add.w	r3, r3, #1
 8005c18:	bf08      	it	eq
 8005c1a:	2320      	moveq	r3, #32
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	4770      	bx	lr
 8005c20:	2300      	movs	r3, #0
 8005c22:	e7e4      	b.n	8005bee <__hi0bits+0xa>

08005c24 <__lo0bits>:
 8005c24:	6803      	ldr	r3, [r0, #0]
 8005c26:	f013 0207 	ands.w	r2, r3, #7
 8005c2a:	d00c      	beq.n	8005c46 <__lo0bits+0x22>
 8005c2c:	07d9      	lsls	r1, r3, #31
 8005c2e:	d422      	bmi.n	8005c76 <__lo0bits+0x52>
 8005c30:	079a      	lsls	r2, r3, #30
 8005c32:	bf49      	itett	mi
 8005c34:	085b      	lsrmi	r3, r3, #1
 8005c36:	089b      	lsrpl	r3, r3, #2
 8005c38:	6003      	strmi	r3, [r0, #0]
 8005c3a:	2201      	movmi	r2, #1
 8005c3c:	bf5c      	itt	pl
 8005c3e:	6003      	strpl	r3, [r0, #0]
 8005c40:	2202      	movpl	r2, #2
 8005c42:	4610      	mov	r0, r2
 8005c44:	4770      	bx	lr
 8005c46:	b299      	uxth	r1, r3
 8005c48:	b909      	cbnz	r1, 8005c4e <__lo0bits+0x2a>
 8005c4a:	0c1b      	lsrs	r3, r3, #16
 8005c4c:	2210      	movs	r2, #16
 8005c4e:	b2d9      	uxtb	r1, r3
 8005c50:	b909      	cbnz	r1, 8005c56 <__lo0bits+0x32>
 8005c52:	3208      	adds	r2, #8
 8005c54:	0a1b      	lsrs	r3, r3, #8
 8005c56:	0719      	lsls	r1, r3, #28
 8005c58:	bf04      	itt	eq
 8005c5a:	091b      	lsreq	r3, r3, #4
 8005c5c:	3204      	addeq	r2, #4
 8005c5e:	0799      	lsls	r1, r3, #30
 8005c60:	bf04      	itt	eq
 8005c62:	089b      	lsreq	r3, r3, #2
 8005c64:	3202      	addeq	r2, #2
 8005c66:	07d9      	lsls	r1, r3, #31
 8005c68:	d403      	bmi.n	8005c72 <__lo0bits+0x4e>
 8005c6a:	085b      	lsrs	r3, r3, #1
 8005c6c:	f102 0201 	add.w	r2, r2, #1
 8005c70:	d003      	beq.n	8005c7a <__lo0bits+0x56>
 8005c72:	6003      	str	r3, [r0, #0]
 8005c74:	e7e5      	b.n	8005c42 <__lo0bits+0x1e>
 8005c76:	2200      	movs	r2, #0
 8005c78:	e7e3      	b.n	8005c42 <__lo0bits+0x1e>
 8005c7a:	2220      	movs	r2, #32
 8005c7c:	e7e1      	b.n	8005c42 <__lo0bits+0x1e>
	...

08005c80 <__i2b>:
 8005c80:	b510      	push	{r4, lr}
 8005c82:	460c      	mov	r4, r1
 8005c84:	2101      	movs	r1, #1
 8005c86:	f7ff ff05 	bl	8005a94 <_Balloc>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	b928      	cbnz	r0, 8005c9a <__i2b+0x1a>
 8005c8e:	4b05      	ldr	r3, [pc, #20]	; (8005ca4 <__i2b+0x24>)
 8005c90:	4805      	ldr	r0, [pc, #20]	; (8005ca8 <__i2b+0x28>)
 8005c92:	f240 1145 	movw	r1, #325	; 0x145
 8005c96:	f000 fcb7 	bl	8006608 <__assert_func>
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	6144      	str	r4, [r0, #20]
 8005c9e:	6103      	str	r3, [r0, #16]
 8005ca0:	bd10      	pop	{r4, pc}
 8005ca2:	bf00      	nop
 8005ca4:	08006df3 	.word	0x08006df3
 8005ca8:	08006e04 	.word	0x08006e04

08005cac <__multiply>:
 8005cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cb0:	4691      	mov	r9, r2
 8005cb2:	690a      	ldr	r2, [r1, #16]
 8005cb4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	bfb8      	it	lt
 8005cbc:	460b      	movlt	r3, r1
 8005cbe:	460c      	mov	r4, r1
 8005cc0:	bfbc      	itt	lt
 8005cc2:	464c      	movlt	r4, r9
 8005cc4:	4699      	movlt	r9, r3
 8005cc6:	6927      	ldr	r7, [r4, #16]
 8005cc8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005ccc:	68a3      	ldr	r3, [r4, #8]
 8005cce:	6861      	ldr	r1, [r4, #4]
 8005cd0:	eb07 060a 	add.w	r6, r7, sl
 8005cd4:	42b3      	cmp	r3, r6
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	bfb8      	it	lt
 8005cda:	3101      	addlt	r1, #1
 8005cdc:	f7ff feda 	bl	8005a94 <_Balloc>
 8005ce0:	b930      	cbnz	r0, 8005cf0 <__multiply+0x44>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	4b44      	ldr	r3, [pc, #272]	; (8005df8 <__multiply+0x14c>)
 8005ce6:	4845      	ldr	r0, [pc, #276]	; (8005dfc <__multiply+0x150>)
 8005ce8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005cec:	f000 fc8c 	bl	8006608 <__assert_func>
 8005cf0:	f100 0514 	add.w	r5, r0, #20
 8005cf4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005cf8:	462b      	mov	r3, r5
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	4543      	cmp	r3, r8
 8005cfe:	d321      	bcc.n	8005d44 <__multiply+0x98>
 8005d00:	f104 0314 	add.w	r3, r4, #20
 8005d04:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005d08:	f109 0314 	add.w	r3, r9, #20
 8005d0c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005d10:	9202      	str	r2, [sp, #8]
 8005d12:	1b3a      	subs	r2, r7, r4
 8005d14:	3a15      	subs	r2, #21
 8005d16:	f022 0203 	bic.w	r2, r2, #3
 8005d1a:	3204      	adds	r2, #4
 8005d1c:	f104 0115 	add.w	r1, r4, #21
 8005d20:	428f      	cmp	r7, r1
 8005d22:	bf38      	it	cc
 8005d24:	2204      	movcc	r2, #4
 8005d26:	9201      	str	r2, [sp, #4]
 8005d28:	9a02      	ldr	r2, [sp, #8]
 8005d2a:	9303      	str	r3, [sp, #12]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d80c      	bhi.n	8005d4a <__multiply+0x9e>
 8005d30:	2e00      	cmp	r6, #0
 8005d32:	dd03      	ble.n	8005d3c <__multiply+0x90>
 8005d34:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d05b      	beq.n	8005df4 <__multiply+0x148>
 8005d3c:	6106      	str	r6, [r0, #16]
 8005d3e:	b005      	add	sp, #20
 8005d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d44:	f843 2b04 	str.w	r2, [r3], #4
 8005d48:	e7d8      	b.n	8005cfc <__multiply+0x50>
 8005d4a:	f8b3 a000 	ldrh.w	sl, [r3]
 8005d4e:	f1ba 0f00 	cmp.w	sl, #0
 8005d52:	d024      	beq.n	8005d9e <__multiply+0xf2>
 8005d54:	f104 0e14 	add.w	lr, r4, #20
 8005d58:	46a9      	mov	r9, r5
 8005d5a:	f04f 0c00 	mov.w	ip, #0
 8005d5e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005d62:	f8d9 1000 	ldr.w	r1, [r9]
 8005d66:	fa1f fb82 	uxth.w	fp, r2
 8005d6a:	b289      	uxth	r1, r1
 8005d6c:	fb0a 110b 	mla	r1, sl, fp, r1
 8005d70:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005d74:	f8d9 2000 	ldr.w	r2, [r9]
 8005d78:	4461      	add	r1, ip
 8005d7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005d7e:	fb0a c20b 	mla	r2, sl, fp, ip
 8005d82:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005d86:	b289      	uxth	r1, r1
 8005d88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005d8c:	4577      	cmp	r7, lr
 8005d8e:	f849 1b04 	str.w	r1, [r9], #4
 8005d92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005d96:	d8e2      	bhi.n	8005d5e <__multiply+0xb2>
 8005d98:	9a01      	ldr	r2, [sp, #4]
 8005d9a:	f845 c002 	str.w	ip, [r5, r2]
 8005d9e:	9a03      	ldr	r2, [sp, #12]
 8005da0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005da4:	3304      	adds	r3, #4
 8005da6:	f1b9 0f00 	cmp.w	r9, #0
 8005daa:	d021      	beq.n	8005df0 <__multiply+0x144>
 8005dac:	6829      	ldr	r1, [r5, #0]
 8005dae:	f104 0c14 	add.w	ip, r4, #20
 8005db2:	46ae      	mov	lr, r5
 8005db4:	f04f 0a00 	mov.w	sl, #0
 8005db8:	f8bc b000 	ldrh.w	fp, [ip]
 8005dbc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005dc0:	fb09 220b 	mla	r2, r9, fp, r2
 8005dc4:	4452      	add	r2, sl
 8005dc6:	b289      	uxth	r1, r1
 8005dc8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005dcc:	f84e 1b04 	str.w	r1, [lr], #4
 8005dd0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005dd4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005dd8:	f8be 1000 	ldrh.w	r1, [lr]
 8005ddc:	fb09 110a 	mla	r1, r9, sl, r1
 8005de0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8005de4:	4567      	cmp	r7, ip
 8005de6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005dea:	d8e5      	bhi.n	8005db8 <__multiply+0x10c>
 8005dec:	9a01      	ldr	r2, [sp, #4]
 8005dee:	50a9      	str	r1, [r5, r2]
 8005df0:	3504      	adds	r5, #4
 8005df2:	e799      	b.n	8005d28 <__multiply+0x7c>
 8005df4:	3e01      	subs	r6, #1
 8005df6:	e79b      	b.n	8005d30 <__multiply+0x84>
 8005df8:	08006df3 	.word	0x08006df3
 8005dfc:	08006e04 	.word	0x08006e04

08005e00 <__pow5mult>:
 8005e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e04:	4615      	mov	r5, r2
 8005e06:	f012 0203 	ands.w	r2, r2, #3
 8005e0a:	4606      	mov	r6, r0
 8005e0c:	460f      	mov	r7, r1
 8005e0e:	d007      	beq.n	8005e20 <__pow5mult+0x20>
 8005e10:	4c25      	ldr	r4, [pc, #148]	; (8005ea8 <__pow5mult+0xa8>)
 8005e12:	3a01      	subs	r2, #1
 8005e14:	2300      	movs	r3, #0
 8005e16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005e1a:	f7ff fe9d 	bl	8005b58 <__multadd>
 8005e1e:	4607      	mov	r7, r0
 8005e20:	10ad      	asrs	r5, r5, #2
 8005e22:	d03d      	beq.n	8005ea0 <__pow5mult+0xa0>
 8005e24:	69f4      	ldr	r4, [r6, #28]
 8005e26:	b97c      	cbnz	r4, 8005e48 <__pow5mult+0x48>
 8005e28:	2010      	movs	r0, #16
 8005e2a:	f7ff fd7f 	bl	800592c <malloc>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	61f0      	str	r0, [r6, #28]
 8005e32:	b928      	cbnz	r0, 8005e40 <__pow5mult+0x40>
 8005e34:	4b1d      	ldr	r3, [pc, #116]	; (8005eac <__pow5mult+0xac>)
 8005e36:	481e      	ldr	r0, [pc, #120]	; (8005eb0 <__pow5mult+0xb0>)
 8005e38:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005e3c:	f000 fbe4 	bl	8006608 <__assert_func>
 8005e40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005e44:	6004      	str	r4, [r0, #0]
 8005e46:	60c4      	str	r4, [r0, #12]
 8005e48:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005e4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005e50:	b94c      	cbnz	r4, 8005e66 <__pow5mult+0x66>
 8005e52:	f240 2171 	movw	r1, #625	; 0x271
 8005e56:	4630      	mov	r0, r6
 8005e58:	f7ff ff12 	bl	8005c80 <__i2b>
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005e62:	4604      	mov	r4, r0
 8005e64:	6003      	str	r3, [r0, #0]
 8005e66:	f04f 0900 	mov.w	r9, #0
 8005e6a:	07eb      	lsls	r3, r5, #31
 8005e6c:	d50a      	bpl.n	8005e84 <__pow5mult+0x84>
 8005e6e:	4639      	mov	r1, r7
 8005e70:	4622      	mov	r2, r4
 8005e72:	4630      	mov	r0, r6
 8005e74:	f7ff ff1a 	bl	8005cac <__multiply>
 8005e78:	4639      	mov	r1, r7
 8005e7a:	4680      	mov	r8, r0
 8005e7c:	4630      	mov	r0, r6
 8005e7e:	f7ff fe49 	bl	8005b14 <_Bfree>
 8005e82:	4647      	mov	r7, r8
 8005e84:	106d      	asrs	r5, r5, #1
 8005e86:	d00b      	beq.n	8005ea0 <__pow5mult+0xa0>
 8005e88:	6820      	ldr	r0, [r4, #0]
 8005e8a:	b938      	cbnz	r0, 8005e9c <__pow5mult+0x9c>
 8005e8c:	4622      	mov	r2, r4
 8005e8e:	4621      	mov	r1, r4
 8005e90:	4630      	mov	r0, r6
 8005e92:	f7ff ff0b 	bl	8005cac <__multiply>
 8005e96:	6020      	str	r0, [r4, #0]
 8005e98:	f8c0 9000 	str.w	r9, [r0]
 8005e9c:	4604      	mov	r4, r0
 8005e9e:	e7e4      	b.n	8005e6a <__pow5mult+0x6a>
 8005ea0:	4638      	mov	r0, r7
 8005ea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ea6:	bf00      	nop
 8005ea8:	08006f50 	.word	0x08006f50
 8005eac:	08006d84 	.word	0x08006d84
 8005eb0:	08006e04 	.word	0x08006e04

08005eb4 <__lshift>:
 8005eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005eb8:	460c      	mov	r4, r1
 8005eba:	6849      	ldr	r1, [r1, #4]
 8005ebc:	6923      	ldr	r3, [r4, #16]
 8005ebe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005ec2:	68a3      	ldr	r3, [r4, #8]
 8005ec4:	4607      	mov	r7, r0
 8005ec6:	4691      	mov	r9, r2
 8005ec8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005ecc:	f108 0601 	add.w	r6, r8, #1
 8005ed0:	42b3      	cmp	r3, r6
 8005ed2:	db0b      	blt.n	8005eec <__lshift+0x38>
 8005ed4:	4638      	mov	r0, r7
 8005ed6:	f7ff fddd 	bl	8005a94 <_Balloc>
 8005eda:	4605      	mov	r5, r0
 8005edc:	b948      	cbnz	r0, 8005ef2 <__lshift+0x3e>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	4b28      	ldr	r3, [pc, #160]	; (8005f84 <__lshift+0xd0>)
 8005ee2:	4829      	ldr	r0, [pc, #164]	; (8005f88 <__lshift+0xd4>)
 8005ee4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005ee8:	f000 fb8e 	bl	8006608 <__assert_func>
 8005eec:	3101      	adds	r1, #1
 8005eee:	005b      	lsls	r3, r3, #1
 8005ef0:	e7ee      	b.n	8005ed0 <__lshift+0x1c>
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	f100 0114 	add.w	r1, r0, #20
 8005ef8:	f100 0210 	add.w	r2, r0, #16
 8005efc:	4618      	mov	r0, r3
 8005efe:	4553      	cmp	r3, sl
 8005f00:	db33      	blt.n	8005f6a <__lshift+0xb6>
 8005f02:	6920      	ldr	r0, [r4, #16]
 8005f04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005f08:	f104 0314 	add.w	r3, r4, #20
 8005f0c:	f019 091f 	ands.w	r9, r9, #31
 8005f10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005f14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005f18:	d02b      	beq.n	8005f72 <__lshift+0xbe>
 8005f1a:	f1c9 0e20 	rsb	lr, r9, #32
 8005f1e:	468a      	mov	sl, r1
 8005f20:	2200      	movs	r2, #0
 8005f22:	6818      	ldr	r0, [r3, #0]
 8005f24:	fa00 f009 	lsl.w	r0, r0, r9
 8005f28:	4310      	orrs	r0, r2
 8005f2a:	f84a 0b04 	str.w	r0, [sl], #4
 8005f2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f32:	459c      	cmp	ip, r3
 8005f34:	fa22 f20e 	lsr.w	r2, r2, lr
 8005f38:	d8f3      	bhi.n	8005f22 <__lshift+0x6e>
 8005f3a:	ebac 0304 	sub.w	r3, ip, r4
 8005f3e:	3b15      	subs	r3, #21
 8005f40:	f023 0303 	bic.w	r3, r3, #3
 8005f44:	3304      	adds	r3, #4
 8005f46:	f104 0015 	add.w	r0, r4, #21
 8005f4a:	4584      	cmp	ip, r0
 8005f4c:	bf38      	it	cc
 8005f4e:	2304      	movcc	r3, #4
 8005f50:	50ca      	str	r2, [r1, r3]
 8005f52:	b10a      	cbz	r2, 8005f58 <__lshift+0xa4>
 8005f54:	f108 0602 	add.w	r6, r8, #2
 8005f58:	3e01      	subs	r6, #1
 8005f5a:	4638      	mov	r0, r7
 8005f5c:	612e      	str	r6, [r5, #16]
 8005f5e:	4621      	mov	r1, r4
 8005f60:	f7ff fdd8 	bl	8005b14 <_Bfree>
 8005f64:	4628      	mov	r0, r5
 8005f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f6a:	f842 0f04 	str.w	r0, [r2, #4]!
 8005f6e:	3301      	adds	r3, #1
 8005f70:	e7c5      	b.n	8005efe <__lshift+0x4a>
 8005f72:	3904      	subs	r1, #4
 8005f74:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f78:	f841 2f04 	str.w	r2, [r1, #4]!
 8005f7c:	459c      	cmp	ip, r3
 8005f7e:	d8f9      	bhi.n	8005f74 <__lshift+0xc0>
 8005f80:	e7ea      	b.n	8005f58 <__lshift+0xa4>
 8005f82:	bf00      	nop
 8005f84:	08006df3 	.word	0x08006df3
 8005f88:	08006e04 	.word	0x08006e04

08005f8c <__mcmp>:
 8005f8c:	b530      	push	{r4, r5, lr}
 8005f8e:	6902      	ldr	r2, [r0, #16]
 8005f90:	690c      	ldr	r4, [r1, #16]
 8005f92:	1b12      	subs	r2, r2, r4
 8005f94:	d10e      	bne.n	8005fb4 <__mcmp+0x28>
 8005f96:	f100 0314 	add.w	r3, r0, #20
 8005f9a:	3114      	adds	r1, #20
 8005f9c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005fa0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005fa4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005fa8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005fac:	42a5      	cmp	r5, r4
 8005fae:	d003      	beq.n	8005fb8 <__mcmp+0x2c>
 8005fb0:	d305      	bcc.n	8005fbe <__mcmp+0x32>
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	4610      	mov	r0, r2
 8005fb6:	bd30      	pop	{r4, r5, pc}
 8005fb8:	4283      	cmp	r3, r0
 8005fba:	d3f3      	bcc.n	8005fa4 <__mcmp+0x18>
 8005fbc:	e7fa      	b.n	8005fb4 <__mcmp+0x28>
 8005fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8005fc2:	e7f7      	b.n	8005fb4 <__mcmp+0x28>

08005fc4 <__mdiff>:
 8005fc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fc8:	460c      	mov	r4, r1
 8005fca:	4606      	mov	r6, r0
 8005fcc:	4611      	mov	r1, r2
 8005fce:	4620      	mov	r0, r4
 8005fd0:	4690      	mov	r8, r2
 8005fd2:	f7ff ffdb 	bl	8005f8c <__mcmp>
 8005fd6:	1e05      	subs	r5, r0, #0
 8005fd8:	d110      	bne.n	8005ffc <__mdiff+0x38>
 8005fda:	4629      	mov	r1, r5
 8005fdc:	4630      	mov	r0, r6
 8005fde:	f7ff fd59 	bl	8005a94 <_Balloc>
 8005fe2:	b930      	cbnz	r0, 8005ff2 <__mdiff+0x2e>
 8005fe4:	4b3a      	ldr	r3, [pc, #232]	; (80060d0 <__mdiff+0x10c>)
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	f240 2137 	movw	r1, #567	; 0x237
 8005fec:	4839      	ldr	r0, [pc, #228]	; (80060d4 <__mdiff+0x110>)
 8005fee:	f000 fb0b 	bl	8006608 <__assert_func>
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005ff8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ffc:	bfa4      	itt	ge
 8005ffe:	4643      	movge	r3, r8
 8006000:	46a0      	movge	r8, r4
 8006002:	4630      	mov	r0, r6
 8006004:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006008:	bfa6      	itte	ge
 800600a:	461c      	movge	r4, r3
 800600c:	2500      	movge	r5, #0
 800600e:	2501      	movlt	r5, #1
 8006010:	f7ff fd40 	bl	8005a94 <_Balloc>
 8006014:	b920      	cbnz	r0, 8006020 <__mdiff+0x5c>
 8006016:	4b2e      	ldr	r3, [pc, #184]	; (80060d0 <__mdiff+0x10c>)
 8006018:	4602      	mov	r2, r0
 800601a:	f240 2145 	movw	r1, #581	; 0x245
 800601e:	e7e5      	b.n	8005fec <__mdiff+0x28>
 8006020:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006024:	6926      	ldr	r6, [r4, #16]
 8006026:	60c5      	str	r5, [r0, #12]
 8006028:	f104 0914 	add.w	r9, r4, #20
 800602c:	f108 0514 	add.w	r5, r8, #20
 8006030:	f100 0e14 	add.w	lr, r0, #20
 8006034:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006038:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800603c:	f108 0210 	add.w	r2, r8, #16
 8006040:	46f2      	mov	sl, lr
 8006042:	2100      	movs	r1, #0
 8006044:	f859 3b04 	ldr.w	r3, [r9], #4
 8006048:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800604c:	fa11 f88b 	uxtah	r8, r1, fp
 8006050:	b299      	uxth	r1, r3
 8006052:	0c1b      	lsrs	r3, r3, #16
 8006054:	eba8 0801 	sub.w	r8, r8, r1
 8006058:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800605c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006060:	fa1f f888 	uxth.w	r8, r8
 8006064:	1419      	asrs	r1, r3, #16
 8006066:	454e      	cmp	r6, r9
 8006068:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800606c:	f84a 3b04 	str.w	r3, [sl], #4
 8006070:	d8e8      	bhi.n	8006044 <__mdiff+0x80>
 8006072:	1b33      	subs	r3, r6, r4
 8006074:	3b15      	subs	r3, #21
 8006076:	f023 0303 	bic.w	r3, r3, #3
 800607a:	3304      	adds	r3, #4
 800607c:	3415      	adds	r4, #21
 800607e:	42a6      	cmp	r6, r4
 8006080:	bf38      	it	cc
 8006082:	2304      	movcc	r3, #4
 8006084:	441d      	add	r5, r3
 8006086:	4473      	add	r3, lr
 8006088:	469e      	mov	lr, r3
 800608a:	462e      	mov	r6, r5
 800608c:	4566      	cmp	r6, ip
 800608e:	d30e      	bcc.n	80060ae <__mdiff+0xea>
 8006090:	f10c 0203 	add.w	r2, ip, #3
 8006094:	1b52      	subs	r2, r2, r5
 8006096:	f022 0203 	bic.w	r2, r2, #3
 800609a:	3d03      	subs	r5, #3
 800609c:	45ac      	cmp	ip, r5
 800609e:	bf38      	it	cc
 80060a0:	2200      	movcc	r2, #0
 80060a2:	4413      	add	r3, r2
 80060a4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80060a8:	b17a      	cbz	r2, 80060ca <__mdiff+0x106>
 80060aa:	6107      	str	r7, [r0, #16]
 80060ac:	e7a4      	b.n	8005ff8 <__mdiff+0x34>
 80060ae:	f856 8b04 	ldr.w	r8, [r6], #4
 80060b2:	fa11 f288 	uxtah	r2, r1, r8
 80060b6:	1414      	asrs	r4, r2, #16
 80060b8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80060bc:	b292      	uxth	r2, r2
 80060be:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80060c2:	f84e 2b04 	str.w	r2, [lr], #4
 80060c6:	1421      	asrs	r1, r4, #16
 80060c8:	e7e0      	b.n	800608c <__mdiff+0xc8>
 80060ca:	3f01      	subs	r7, #1
 80060cc:	e7ea      	b.n	80060a4 <__mdiff+0xe0>
 80060ce:	bf00      	nop
 80060d0:	08006df3 	.word	0x08006df3
 80060d4:	08006e04 	.word	0x08006e04

080060d8 <__d2b>:
 80060d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80060dc:	460f      	mov	r7, r1
 80060de:	2101      	movs	r1, #1
 80060e0:	ec59 8b10 	vmov	r8, r9, d0
 80060e4:	4616      	mov	r6, r2
 80060e6:	f7ff fcd5 	bl	8005a94 <_Balloc>
 80060ea:	4604      	mov	r4, r0
 80060ec:	b930      	cbnz	r0, 80060fc <__d2b+0x24>
 80060ee:	4602      	mov	r2, r0
 80060f0:	4b24      	ldr	r3, [pc, #144]	; (8006184 <__d2b+0xac>)
 80060f2:	4825      	ldr	r0, [pc, #148]	; (8006188 <__d2b+0xb0>)
 80060f4:	f240 310f 	movw	r1, #783	; 0x30f
 80060f8:	f000 fa86 	bl	8006608 <__assert_func>
 80060fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006100:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006104:	bb2d      	cbnz	r5, 8006152 <__d2b+0x7a>
 8006106:	9301      	str	r3, [sp, #4]
 8006108:	f1b8 0300 	subs.w	r3, r8, #0
 800610c:	d026      	beq.n	800615c <__d2b+0x84>
 800610e:	4668      	mov	r0, sp
 8006110:	9300      	str	r3, [sp, #0]
 8006112:	f7ff fd87 	bl	8005c24 <__lo0bits>
 8006116:	e9dd 1200 	ldrd	r1, r2, [sp]
 800611a:	b1e8      	cbz	r0, 8006158 <__d2b+0x80>
 800611c:	f1c0 0320 	rsb	r3, r0, #32
 8006120:	fa02 f303 	lsl.w	r3, r2, r3
 8006124:	430b      	orrs	r3, r1
 8006126:	40c2      	lsrs	r2, r0
 8006128:	6163      	str	r3, [r4, #20]
 800612a:	9201      	str	r2, [sp, #4]
 800612c:	9b01      	ldr	r3, [sp, #4]
 800612e:	61a3      	str	r3, [r4, #24]
 8006130:	2b00      	cmp	r3, #0
 8006132:	bf14      	ite	ne
 8006134:	2202      	movne	r2, #2
 8006136:	2201      	moveq	r2, #1
 8006138:	6122      	str	r2, [r4, #16]
 800613a:	b1bd      	cbz	r5, 800616c <__d2b+0x94>
 800613c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006140:	4405      	add	r5, r0
 8006142:	603d      	str	r5, [r7, #0]
 8006144:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006148:	6030      	str	r0, [r6, #0]
 800614a:	4620      	mov	r0, r4
 800614c:	b003      	add	sp, #12
 800614e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006152:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006156:	e7d6      	b.n	8006106 <__d2b+0x2e>
 8006158:	6161      	str	r1, [r4, #20]
 800615a:	e7e7      	b.n	800612c <__d2b+0x54>
 800615c:	a801      	add	r0, sp, #4
 800615e:	f7ff fd61 	bl	8005c24 <__lo0bits>
 8006162:	9b01      	ldr	r3, [sp, #4]
 8006164:	6163      	str	r3, [r4, #20]
 8006166:	3020      	adds	r0, #32
 8006168:	2201      	movs	r2, #1
 800616a:	e7e5      	b.n	8006138 <__d2b+0x60>
 800616c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006170:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006174:	6038      	str	r0, [r7, #0]
 8006176:	6918      	ldr	r0, [r3, #16]
 8006178:	f7ff fd34 	bl	8005be4 <__hi0bits>
 800617c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006180:	e7e2      	b.n	8006148 <__d2b+0x70>
 8006182:	bf00      	nop
 8006184:	08006df3 	.word	0x08006df3
 8006188:	08006e04 	.word	0x08006e04

0800618c <__ssputs_r>:
 800618c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006190:	688e      	ldr	r6, [r1, #8]
 8006192:	461f      	mov	r7, r3
 8006194:	42be      	cmp	r6, r7
 8006196:	680b      	ldr	r3, [r1, #0]
 8006198:	4682      	mov	sl, r0
 800619a:	460c      	mov	r4, r1
 800619c:	4690      	mov	r8, r2
 800619e:	d82c      	bhi.n	80061fa <__ssputs_r+0x6e>
 80061a0:	898a      	ldrh	r2, [r1, #12]
 80061a2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80061a6:	d026      	beq.n	80061f6 <__ssputs_r+0x6a>
 80061a8:	6965      	ldr	r5, [r4, #20]
 80061aa:	6909      	ldr	r1, [r1, #16]
 80061ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80061b0:	eba3 0901 	sub.w	r9, r3, r1
 80061b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80061b8:	1c7b      	adds	r3, r7, #1
 80061ba:	444b      	add	r3, r9
 80061bc:	106d      	asrs	r5, r5, #1
 80061be:	429d      	cmp	r5, r3
 80061c0:	bf38      	it	cc
 80061c2:	461d      	movcc	r5, r3
 80061c4:	0553      	lsls	r3, r2, #21
 80061c6:	d527      	bpl.n	8006218 <__ssputs_r+0x8c>
 80061c8:	4629      	mov	r1, r5
 80061ca:	f7ff fbd7 	bl	800597c <_malloc_r>
 80061ce:	4606      	mov	r6, r0
 80061d0:	b360      	cbz	r0, 800622c <__ssputs_r+0xa0>
 80061d2:	6921      	ldr	r1, [r4, #16]
 80061d4:	464a      	mov	r2, r9
 80061d6:	f000 fa09 	bl	80065ec <memcpy>
 80061da:	89a3      	ldrh	r3, [r4, #12]
 80061dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80061e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061e4:	81a3      	strh	r3, [r4, #12]
 80061e6:	6126      	str	r6, [r4, #16]
 80061e8:	6165      	str	r5, [r4, #20]
 80061ea:	444e      	add	r6, r9
 80061ec:	eba5 0509 	sub.w	r5, r5, r9
 80061f0:	6026      	str	r6, [r4, #0]
 80061f2:	60a5      	str	r5, [r4, #8]
 80061f4:	463e      	mov	r6, r7
 80061f6:	42be      	cmp	r6, r7
 80061f8:	d900      	bls.n	80061fc <__ssputs_r+0x70>
 80061fa:	463e      	mov	r6, r7
 80061fc:	6820      	ldr	r0, [r4, #0]
 80061fe:	4632      	mov	r2, r6
 8006200:	4641      	mov	r1, r8
 8006202:	f000 f9c9 	bl	8006598 <memmove>
 8006206:	68a3      	ldr	r3, [r4, #8]
 8006208:	1b9b      	subs	r3, r3, r6
 800620a:	60a3      	str	r3, [r4, #8]
 800620c:	6823      	ldr	r3, [r4, #0]
 800620e:	4433      	add	r3, r6
 8006210:	6023      	str	r3, [r4, #0]
 8006212:	2000      	movs	r0, #0
 8006214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006218:	462a      	mov	r2, r5
 800621a:	f000 fa3b 	bl	8006694 <_realloc_r>
 800621e:	4606      	mov	r6, r0
 8006220:	2800      	cmp	r0, #0
 8006222:	d1e0      	bne.n	80061e6 <__ssputs_r+0x5a>
 8006224:	6921      	ldr	r1, [r4, #16]
 8006226:	4650      	mov	r0, sl
 8006228:	f7ff fb34 	bl	8005894 <_free_r>
 800622c:	230c      	movs	r3, #12
 800622e:	f8ca 3000 	str.w	r3, [sl]
 8006232:	89a3      	ldrh	r3, [r4, #12]
 8006234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006238:	81a3      	strh	r3, [r4, #12]
 800623a:	f04f 30ff 	mov.w	r0, #4294967295
 800623e:	e7e9      	b.n	8006214 <__ssputs_r+0x88>

08006240 <_svfiprintf_r>:
 8006240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006244:	4698      	mov	r8, r3
 8006246:	898b      	ldrh	r3, [r1, #12]
 8006248:	061b      	lsls	r3, r3, #24
 800624a:	b09d      	sub	sp, #116	; 0x74
 800624c:	4607      	mov	r7, r0
 800624e:	460d      	mov	r5, r1
 8006250:	4614      	mov	r4, r2
 8006252:	d50e      	bpl.n	8006272 <_svfiprintf_r+0x32>
 8006254:	690b      	ldr	r3, [r1, #16]
 8006256:	b963      	cbnz	r3, 8006272 <_svfiprintf_r+0x32>
 8006258:	2140      	movs	r1, #64	; 0x40
 800625a:	f7ff fb8f 	bl	800597c <_malloc_r>
 800625e:	6028      	str	r0, [r5, #0]
 8006260:	6128      	str	r0, [r5, #16]
 8006262:	b920      	cbnz	r0, 800626e <_svfiprintf_r+0x2e>
 8006264:	230c      	movs	r3, #12
 8006266:	603b      	str	r3, [r7, #0]
 8006268:	f04f 30ff 	mov.w	r0, #4294967295
 800626c:	e0d0      	b.n	8006410 <_svfiprintf_r+0x1d0>
 800626e:	2340      	movs	r3, #64	; 0x40
 8006270:	616b      	str	r3, [r5, #20]
 8006272:	2300      	movs	r3, #0
 8006274:	9309      	str	r3, [sp, #36]	; 0x24
 8006276:	2320      	movs	r3, #32
 8006278:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800627c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006280:	2330      	movs	r3, #48	; 0x30
 8006282:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006428 <_svfiprintf_r+0x1e8>
 8006286:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800628a:	f04f 0901 	mov.w	r9, #1
 800628e:	4623      	mov	r3, r4
 8006290:	469a      	mov	sl, r3
 8006292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006296:	b10a      	cbz	r2, 800629c <_svfiprintf_r+0x5c>
 8006298:	2a25      	cmp	r2, #37	; 0x25
 800629a:	d1f9      	bne.n	8006290 <_svfiprintf_r+0x50>
 800629c:	ebba 0b04 	subs.w	fp, sl, r4
 80062a0:	d00b      	beq.n	80062ba <_svfiprintf_r+0x7a>
 80062a2:	465b      	mov	r3, fp
 80062a4:	4622      	mov	r2, r4
 80062a6:	4629      	mov	r1, r5
 80062a8:	4638      	mov	r0, r7
 80062aa:	f7ff ff6f 	bl	800618c <__ssputs_r>
 80062ae:	3001      	adds	r0, #1
 80062b0:	f000 80a9 	beq.w	8006406 <_svfiprintf_r+0x1c6>
 80062b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062b6:	445a      	add	r2, fp
 80062b8:	9209      	str	r2, [sp, #36]	; 0x24
 80062ba:	f89a 3000 	ldrb.w	r3, [sl]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f000 80a1 	beq.w	8006406 <_svfiprintf_r+0x1c6>
 80062c4:	2300      	movs	r3, #0
 80062c6:	f04f 32ff 	mov.w	r2, #4294967295
 80062ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062ce:	f10a 0a01 	add.w	sl, sl, #1
 80062d2:	9304      	str	r3, [sp, #16]
 80062d4:	9307      	str	r3, [sp, #28]
 80062d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062da:	931a      	str	r3, [sp, #104]	; 0x68
 80062dc:	4654      	mov	r4, sl
 80062de:	2205      	movs	r2, #5
 80062e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062e4:	4850      	ldr	r0, [pc, #320]	; (8006428 <_svfiprintf_r+0x1e8>)
 80062e6:	f7f9 ff73 	bl	80001d0 <memchr>
 80062ea:	9a04      	ldr	r2, [sp, #16]
 80062ec:	b9d8      	cbnz	r0, 8006326 <_svfiprintf_r+0xe6>
 80062ee:	06d0      	lsls	r0, r2, #27
 80062f0:	bf44      	itt	mi
 80062f2:	2320      	movmi	r3, #32
 80062f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062f8:	0711      	lsls	r1, r2, #28
 80062fa:	bf44      	itt	mi
 80062fc:	232b      	movmi	r3, #43	; 0x2b
 80062fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006302:	f89a 3000 	ldrb.w	r3, [sl]
 8006306:	2b2a      	cmp	r3, #42	; 0x2a
 8006308:	d015      	beq.n	8006336 <_svfiprintf_r+0xf6>
 800630a:	9a07      	ldr	r2, [sp, #28]
 800630c:	4654      	mov	r4, sl
 800630e:	2000      	movs	r0, #0
 8006310:	f04f 0c0a 	mov.w	ip, #10
 8006314:	4621      	mov	r1, r4
 8006316:	f811 3b01 	ldrb.w	r3, [r1], #1
 800631a:	3b30      	subs	r3, #48	; 0x30
 800631c:	2b09      	cmp	r3, #9
 800631e:	d94d      	bls.n	80063bc <_svfiprintf_r+0x17c>
 8006320:	b1b0      	cbz	r0, 8006350 <_svfiprintf_r+0x110>
 8006322:	9207      	str	r2, [sp, #28]
 8006324:	e014      	b.n	8006350 <_svfiprintf_r+0x110>
 8006326:	eba0 0308 	sub.w	r3, r0, r8
 800632a:	fa09 f303 	lsl.w	r3, r9, r3
 800632e:	4313      	orrs	r3, r2
 8006330:	9304      	str	r3, [sp, #16]
 8006332:	46a2      	mov	sl, r4
 8006334:	e7d2      	b.n	80062dc <_svfiprintf_r+0x9c>
 8006336:	9b03      	ldr	r3, [sp, #12]
 8006338:	1d19      	adds	r1, r3, #4
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	9103      	str	r1, [sp, #12]
 800633e:	2b00      	cmp	r3, #0
 8006340:	bfbb      	ittet	lt
 8006342:	425b      	neglt	r3, r3
 8006344:	f042 0202 	orrlt.w	r2, r2, #2
 8006348:	9307      	strge	r3, [sp, #28]
 800634a:	9307      	strlt	r3, [sp, #28]
 800634c:	bfb8      	it	lt
 800634e:	9204      	strlt	r2, [sp, #16]
 8006350:	7823      	ldrb	r3, [r4, #0]
 8006352:	2b2e      	cmp	r3, #46	; 0x2e
 8006354:	d10c      	bne.n	8006370 <_svfiprintf_r+0x130>
 8006356:	7863      	ldrb	r3, [r4, #1]
 8006358:	2b2a      	cmp	r3, #42	; 0x2a
 800635a:	d134      	bne.n	80063c6 <_svfiprintf_r+0x186>
 800635c:	9b03      	ldr	r3, [sp, #12]
 800635e:	1d1a      	adds	r2, r3, #4
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	9203      	str	r2, [sp, #12]
 8006364:	2b00      	cmp	r3, #0
 8006366:	bfb8      	it	lt
 8006368:	f04f 33ff 	movlt.w	r3, #4294967295
 800636c:	3402      	adds	r4, #2
 800636e:	9305      	str	r3, [sp, #20]
 8006370:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006438 <_svfiprintf_r+0x1f8>
 8006374:	7821      	ldrb	r1, [r4, #0]
 8006376:	2203      	movs	r2, #3
 8006378:	4650      	mov	r0, sl
 800637a:	f7f9 ff29 	bl	80001d0 <memchr>
 800637e:	b138      	cbz	r0, 8006390 <_svfiprintf_r+0x150>
 8006380:	9b04      	ldr	r3, [sp, #16]
 8006382:	eba0 000a 	sub.w	r0, r0, sl
 8006386:	2240      	movs	r2, #64	; 0x40
 8006388:	4082      	lsls	r2, r0
 800638a:	4313      	orrs	r3, r2
 800638c:	3401      	adds	r4, #1
 800638e:	9304      	str	r3, [sp, #16]
 8006390:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006394:	4825      	ldr	r0, [pc, #148]	; (800642c <_svfiprintf_r+0x1ec>)
 8006396:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800639a:	2206      	movs	r2, #6
 800639c:	f7f9 ff18 	bl	80001d0 <memchr>
 80063a0:	2800      	cmp	r0, #0
 80063a2:	d038      	beq.n	8006416 <_svfiprintf_r+0x1d6>
 80063a4:	4b22      	ldr	r3, [pc, #136]	; (8006430 <_svfiprintf_r+0x1f0>)
 80063a6:	bb1b      	cbnz	r3, 80063f0 <_svfiprintf_r+0x1b0>
 80063a8:	9b03      	ldr	r3, [sp, #12]
 80063aa:	3307      	adds	r3, #7
 80063ac:	f023 0307 	bic.w	r3, r3, #7
 80063b0:	3308      	adds	r3, #8
 80063b2:	9303      	str	r3, [sp, #12]
 80063b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063b6:	4433      	add	r3, r6
 80063b8:	9309      	str	r3, [sp, #36]	; 0x24
 80063ba:	e768      	b.n	800628e <_svfiprintf_r+0x4e>
 80063bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80063c0:	460c      	mov	r4, r1
 80063c2:	2001      	movs	r0, #1
 80063c4:	e7a6      	b.n	8006314 <_svfiprintf_r+0xd4>
 80063c6:	2300      	movs	r3, #0
 80063c8:	3401      	adds	r4, #1
 80063ca:	9305      	str	r3, [sp, #20]
 80063cc:	4619      	mov	r1, r3
 80063ce:	f04f 0c0a 	mov.w	ip, #10
 80063d2:	4620      	mov	r0, r4
 80063d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063d8:	3a30      	subs	r2, #48	; 0x30
 80063da:	2a09      	cmp	r2, #9
 80063dc:	d903      	bls.n	80063e6 <_svfiprintf_r+0x1a6>
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d0c6      	beq.n	8006370 <_svfiprintf_r+0x130>
 80063e2:	9105      	str	r1, [sp, #20]
 80063e4:	e7c4      	b.n	8006370 <_svfiprintf_r+0x130>
 80063e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80063ea:	4604      	mov	r4, r0
 80063ec:	2301      	movs	r3, #1
 80063ee:	e7f0      	b.n	80063d2 <_svfiprintf_r+0x192>
 80063f0:	ab03      	add	r3, sp, #12
 80063f2:	9300      	str	r3, [sp, #0]
 80063f4:	462a      	mov	r2, r5
 80063f6:	4b0f      	ldr	r3, [pc, #60]	; (8006434 <_svfiprintf_r+0x1f4>)
 80063f8:	a904      	add	r1, sp, #16
 80063fa:	4638      	mov	r0, r7
 80063fc:	f7fd fe64 	bl	80040c8 <_printf_float>
 8006400:	1c42      	adds	r2, r0, #1
 8006402:	4606      	mov	r6, r0
 8006404:	d1d6      	bne.n	80063b4 <_svfiprintf_r+0x174>
 8006406:	89ab      	ldrh	r3, [r5, #12]
 8006408:	065b      	lsls	r3, r3, #25
 800640a:	f53f af2d 	bmi.w	8006268 <_svfiprintf_r+0x28>
 800640e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006410:	b01d      	add	sp, #116	; 0x74
 8006412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006416:	ab03      	add	r3, sp, #12
 8006418:	9300      	str	r3, [sp, #0]
 800641a:	462a      	mov	r2, r5
 800641c:	4b05      	ldr	r3, [pc, #20]	; (8006434 <_svfiprintf_r+0x1f4>)
 800641e:	a904      	add	r1, sp, #16
 8006420:	4638      	mov	r0, r7
 8006422:	f7fe f8f5 	bl	8004610 <_printf_i>
 8006426:	e7eb      	b.n	8006400 <_svfiprintf_r+0x1c0>
 8006428:	08006f5c 	.word	0x08006f5c
 800642c:	08006f66 	.word	0x08006f66
 8006430:	080040c9 	.word	0x080040c9
 8006434:	0800618d 	.word	0x0800618d
 8006438:	08006f62 	.word	0x08006f62

0800643c <__sflush_r>:
 800643c:	898a      	ldrh	r2, [r1, #12]
 800643e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006442:	4605      	mov	r5, r0
 8006444:	0710      	lsls	r0, r2, #28
 8006446:	460c      	mov	r4, r1
 8006448:	d458      	bmi.n	80064fc <__sflush_r+0xc0>
 800644a:	684b      	ldr	r3, [r1, #4]
 800644c:	2b00      	cmp	r3, #0
 800644e:	dc05      	bgt.n	800645c <__sflush_r+0x20>
 8006450:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006452:	2b00      	cmp	r3, #0
 8006454:	dc02      	bgt.n	800645c <__sflush_r+0x20>
 8006456:	2000      	movs	r0, #0
 8006458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800645c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800645e:	2e00      	cmp	r6, #0
 8006460:	d0f9      	beq.n	8006456 <__sflush_r+0x1a>
 8006462:	2300      	movs	r3, #0
 8006464:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006468:	682f      	ldr	r7, [r5, #0]
 800646a:	6a21      	ldr	r1, [r4, #32]
 800646c:	602b      	str	r3, [r5, #0]
 800646e:	d032      	beq.n	80064d6 <__sflush_r+0x9a>
 8006470:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006472:	89a3      	ldrh	r3, [r4, #12]
 8006474:	075a      	lsls	r2, r3, #29
 8006476:	d505      	bpl.n	8006484 <__sflush_r+0x48>
 8006478:	6863      	ldr	r3, [r4, #4]
 800647a:	1ac0      	subs	r0, r0, r3
 800647c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800647e:	b10b      	cbz	r3, 8006484 <__sflush_r+0x48>
 8006480:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006482:	1ac0      	subs	r0, r0, r3
 8006484:	2300      	movs	r3, #0
 8006486:	4602      	mov	r2, r0
 8006488:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800648a:	6a21      	ldr	r1, [r4, #32]
 800648c:	4628      	mov	r0, r5
 800648e:	47b0      	blx	r6
 8006490:	1c43      	adds	r3, r0, #1
 8006492:	89a3      	ldrh	r3, [r4, #12]
 8006494:	d106      	bne.n	80064a4 <__sflush_r+0x68>
 8006496:	6829      	ldr	r1, [r5, #0]
 8006498:	291d      	cmp	r1, #29
 800649a:	d82b      	bhi.n	80064f4 <__sflush_r+0xb8>
 800649c:	4a29      	ldr	r2, [pc, #164]	; (8006544 <__sflush_r+0x108>)
 800649e:	410a      	asrs	r2, r1
 80064a0:	07d6      	lsls	r6, r2, #31
 80064a2:	d427      	bmi.n	80064f4 <__sflush_r+0xb8>
 80064a4:	2200      	movs	r2, #0
 80064a6:	6062      	str	r2, [r4, #4]
 80064a8:	04d9      	lsls	r1, r3, #19
 80064aa:	6922      	ldr	r2, [r4, #16]
 80064ac:	6022      	str	r2, [r4, #0]
 80064ae:	d504      	bpl.n	80064ba <__sflush_r+0x7e>
 80064b0:	1c42      	adds	r2, r0, #1
 80064b2:	d101      	bne.n	80064b8 <__sflush_r+0x7c>
 80064b4:	682b      	ldr	r3, [r5, #0]
 80064b6:	b903      	cbnz	r3, 80064ba <__sflush_r+0x7e>
 80064b8:	6560      	str	r0, [r4, #84]	; 0x54
 80064ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064bc:	602f      	str	r7, [r5, #0]
 80064be:	2900      	cmp	r1, #0
 80064c0:	d0c9      	beq.n	8006456 <__sflush_r+0x1a>
 80064c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064c6:	4299      	cmp	r1, r3
 80064c8:	d002      	beq.n	80064d0 <__sflush_r+0x94>
 80064ca:	4628      	mov	r0, r5
 80064cc:	f7ff f9e2 	bl	8005894 <_free_r>
 80064d0:	2000      	movs	r0, #0
 80064d2:	6360      	str	r0, [r4, #52]	; 0x34
 80064d4:	e7c0      	b.n	8006458 <__sflush_r+0x1c>
 80064d6:	2301      	movs	r3, #1
 80064d8:	4628      	mov	r0, r5
 80064da:	47b0      	blx	r6
 80064dc:	1c41      	adds	r1, r0, #1
 80064de:	d1c8      	bne.n	8006472 <__sflush_r+0x36>
 80064e0:	682b      	ldr	r3, [r5, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d0c5      	beq.n	8006472 <__sflush_r+0x36>
 80064e6:	2b1d      	cmp	r3, #29
 80064e8:	d001      	beq.n	80064ee <__sflush_r+0xb2>
 80064ea:	2b16      	cmp	r3, #22
 80064ec:	d101      	bne.n	80064f2 <__sflush_r+0xb6>
 80064ee:	602f      	str	r7, [r5, #0]
 80064f0:	e7b1      	b.n	8006456 <__sflush_r+0x1a>
 80064f2:	89a3      	ldrh	r3, [r4, #12]
 80064f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064f8:	81a3      	strh	r3, [r4, #12]
 80064fa:	e7ad      	b.n	8006458 <__sflush_r+0x1c>
 80064fc:	690f      	ldr	r7, [r1, #16]
 80064fe:	2f00      	cmp	r7, #0
 8006500:	d0a9      	beq.n	8006456 <__sflush_r+0x1a>
 8006502:	0793      	lsls	r3, r2, #30
 8006504:	680e      	ldr	r6, [r1, #0]
 8006506:	bf08      	it	eq
 8006508:	694b      	ldreq	r3, [r1, #20]
 800650a:	600f      	str	r7, [r1, #0]
 800650c:	bf18      	it	ne
 800650e:	2300      	movne	r3, #0
 8006510:	eba6 0807 	sub.w	r8, r6, r7
 8006514:	608b      	str	r3, [r1, #8]
 8006516:	f1b8 0f00 	cmp.w	r8, #0
 800651a:	dd9c      	ble.n	8006456 <__sflush_r+0x1a>
 800651c:	6a21      	ldr	r1, [r4, #32]
 800651e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006520:	4643      	mov	r3, r8
 8006522:	463a      	mov	r2, r7
 8006524:	4628      	mov	r0, r5
 8006526:	47b0      	blx	r6
 8006528:	2800      	cmp	r0, #0
 800652a:	dc06      	bgt.n	800653a <__sflush_r+0xfe>
 800652c:	89a3      	ldrh	r3, [r4, #12]
 800652e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006532:	81a3      	strh	r3, [r4, #12]
 8006534:	f04f 30ff 	mov.w	r0, #4294967295
 8006538:	e78e      	b.n	8006458 <__sflush_r+0x1c>
 800653a:	4407      	add	r7, r0
 800653c:	eba8 0800 	sub.w	r8, r8, r0
 8006540:	e7e9      	b.n	8006516 <__sflush_r+0xda>
 8006542:	bf00      	nop
 8006544:	dfbffffe 	.word	0xdfbffffe

08006548 <_fflush_r>:
 8006548:	b538      	push	{r3, r4, r5, lr}
 800654a:	690b      	ldr	r3, [r1, #16]
 800654c:	4605      	mov	r5, r0
 800654e:	460c      	mov	r4, r1
 8006550:	b913      	cbnz	r3, 8006558 <_fflush_r+0x10>
 8006552:	2500      	movs	r5, #0
 8006554:	4628      	mov	r0, r5
 8006556:	bd38      	pop	{r3, r4, r5, pc}
 8006558:	b118      	cbz	r0, 8006562 <_fflush_r+0x1a>
 800655a:	6a03      	ldr	r3, [r0, #32]
 800655c:	b90b      	cbnz	r3, 8006562 <_fflush_r+0x1a>
 800655e:	f7fe fa05 	bl	800496c <__sinit>
 8006562:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d0f3      	beq.n	8006552 <_fflush_r+0xa>
 800656a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800656c:	07d0      	lsls	r0, r2, #31
 800656e:	d404      	bmi.n	800657a <_fflush_r+0x32>
 8006570:	0599      	lsls	r1, r3, #22
 8006572:	d402      	bmi.n	800657a <_fflush_r+0x32>
 8006574:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006576:	f7fe fb10 	bl	8004b9a <__retarget_lock_acquire_recursive>
 800657a:	4628      	mov	r0, r5
 800657c:	4621      	mov	r1, r4
 800657e:	f7ff ff5d 	bl	800643c <__sflush_r>
 8006582:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006584:	07da      	lsls	r2, r3, #31
 8006586:	4605      	mov	r5, r0
 8006588:	d4e4      	bmi.n	8006554 <_fflush_r+0xc>
 800658a:	89a3      	ldrh	r3, [r4, #12]
 800658c:	059b      	lsls	r3, r3, #22
 800658e:	d4e1      	bmi.n	8006554 <_fflush_r+0xc>
 8006590:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006592:	f7fe fb03 	bl	8004b9c <__retarget_lock_release_recursive>
 8006596:	e7dd      	b.n	8006554 <_fflush_r+0xc>

08006598 <memmove>:
 8006598:	4288      	cmp	r0, r1
 800659a:	b510      	push	{r4, lr}
 800659c:	eb01 0402 	add.w	r4, r1, r2
 80065a0:	d902      	bls.n	80065a8 <memmove+0x10>
 80065a2:	4284      	cmp	r4, r0
 80065a4:	4623      	mov	r3, r4
 80065a6:	d807      	bhi.n	80065b8 <memmove+0x20>
 80065a8:	1e43      	subs	r3, r0, #1
 80065aa:	42a1      	cmp	r1, r4
 80065ac:	d008      	beq.n	80065c0 <memmove+0x28>
 80065ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80065b6:	e7f8      	b.n	80065aa <memmove+0x12>
 80065b8:	4402      	add	r2, r0
 80065ba:	4601      	mov	r1, r0
 80065bc:	428a      	cmp	r2, r1
 80065be:	d100      	bne.n	80065c2 <memmove+0x2a>
 80065c0:	bd10      	pop	{r4, pc}
 80065c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80065c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80065ca:	e7f7      	b.n	80065bc <memmove+0x24>

080065cc <_sbrk_r>:
 80065cc:	b538      	push	{r3, r4, r5, lr}
 80065ce:	4d06      	ldr	r5, [pc, #24]	; (80065e8 <_sbrk_r+0x1c>)
 80065d0:	2300      	movs	r3, #0
 80065d2:	4604      	mov	r4, r0
 80065d4:	4608      	mov	r0, r1
 80065d6:	602b      	str	r3, [r5, #0]
 80065d8:	f7fa fde6 	bl	80011a8 <_sbrk>
 80065dc:	1c43      	adds	r3, r0, #1
 80065de:	d102      	bne.n	80065e6 <_sbrk_r+0x1a>
 80065e0:	682b      	ldr	r3, [r5, #0]
 80065e2:	b103      	cbz	r3, 80065e6 <_sbrk_r+0x1a>
 80065e4:	6023      	str	r3, [r4, #0]
 80065e6:	bd38      	pop	{r3, r4, r5, pc}
 80065e8:	20000c3c 	.word	0x20000c3c

080065ec <memcpy>:
 80065ec:	440a      	add	r2, r1
 80065ee:	4291      	cmp	r1, r2
 80065f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80065f4:	d100      	bne.n	80065f8 <memcpy+0xc>
 80065f6:	4770      	bx	lr
 80065f8:	b510      	push	{r4, lr}
 80065fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006602:	4291      	cmp	r1, r2
 8006604:	d1f9      	bne.n	80065fa <memcpy+0xe>
 8006606:	bd10      	pop	{r4, pc}

08006608 <__assert_func>:
 8006608:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800660a:	4614      	mov	r4, r2
 800660c:	461a      	mov	r2, r3
 800660e:	4b09      	ldr	r3, [pc, #36]	; (8006634 <__assert_func+0x2c>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4605      	mov	r5, r0
 8006614:	68d8      	ldr	r0, [r3, #12]
 8006616:	b14c      	cbz	r4, 800662c <__assert_func+0x24>
 8006618:	4b07      	ldr	r3, [pc, #28]	; (8006638 <__assert_func+0x30>)
 800661a:	9100      	str	r1, [sp, #0]
 800661c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006620:	4906      	ldr	r1, [pc, #24]	; (800663c <__assert_func+0x34>)
 8006622:	462b      	mov	r3, r5
 8006624:	f000 f872 	bl	800670c <fiprintf>
 8006628:	f000 f882 	bl	8006730 <abort>
 800662c:	4b04      	ldr	r3, [pc, #16]	; (8006640 <__assert_func+0x38>)
 800662e:	461c      	mov	r4, r3
 8006630:	e7f3      	b.n	800661a <__assert_func+0x12>
 8006632:	bf00      	nop
 8006634:	2000015c 	.word	0x2000015c
 8006638:	08006f77 	.word	0x08006f77
 800663c:	08006f84 	.word	0x08006f84
 8006640:	08006fb2 	.word	0x08006fb2

08006644 <_calloc_r>:
 8006644:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006646:	fba1 2402 	umull	r2, r4, r1, r2
 800664a:	b94c      	cbnz	r4, 8006660 <_calloc_r+0x1c>
 800664c:	4611      	mov	r1, r2
 800664e:	9201      	str	r2, [sp, #4]
 8006650:	f7ff f994 	bl	800597c <_malloc_r>
 8006654:	9a01      	ldr	r2, [sp, #4]
 8006656:	4605      	mov	r5, r0
 8006658:	b930      	cbnz	r0, 8006668 <_calloc_r+0x24>
 800665a:	4628      	mov	r0, r5
 800665c:	b003      	add	sp, #12
 800665e:	bd30      	pop	{r4, r5, pc}
 8006660:	220c      	movs	r2, #12
 8006662:	6002      	str	r2, [r0, #0]
 8006664:	2500      	movs	r5, #0
 8006666:	e7f8      	b.n	800665a <_calloc_r+0x16>
 8006668:	4621      	mov	r1, r4
 800666a:	f7fe fa18 	bl	8004a9e <memset>
 800666e:	e7f4      	b.n	800665a <_calloc_r+0x16>

08006670 <__ascii_mbtowc>:
 8006670:	b082      	sub	sp, #8
 8006672:	b901      	cbnz	r1, 8006676 <__ascii_mbtowc+0x6>
 8006674:	a901      	add	r1, sp, #4
 8006676:	b142      	cbz	r2, 800668a <__ascii_mbtowc+0x1a>
 8006678:	b14b      	cbz	r3, 800668e <__ascii_mbtowc+0x1e>
 800667a:	7813      	ldrb	r3, [r2, #0]
 800667c:	600b      	str	r3, [r1, #0]
 800667e:	7812      	ldrb	r2, [r2, #0]
 8006680:	1e10      	subs	r0, r2, #0
 8006682:	bf18      	it	ne
 8006684:	2001      	movne	r0, #1
 8006686:	b002      	add	sp, #8
 8006688:	4770      	bx	lr
 800668a:	4610      	mov	r0, r2
 800668c:	e7fb      	b.n	8006686 <__ascii_mbtowc+0x16>
 800668e:	f06f 0001 	mvn.w	r0, #1
 8006692:	e7f8      	b.n	8006686 <__ascii_mbtowc+0x16>

08006694 <_realloc_r>:
 8006694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006698:	4680      	mov	r8, r0
 800669a:	4614      	mov	r4, r2
 800669c:	460e      	mov	r6, r1
 800669e:	b921      	cbnz	r1, 80066aa <_realloc_r+0x16>
 80066a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066a4:	4611      	mov	r1, r2
 80066a6:	f7ff b969 	b.w	800597c <_malloc_r>
 80066aa:	b92a      	cbnz	r2, 80066b8 <_realloc_r+0x24>
 80066ac:	f7ff f8f2 	bl	8005894 <_free_r>
 80066b0:	4625      	mov	r5, r4
 80066b2:	4628      	mov	r0, r5
 80066b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066b8:	f000 f841 	bl	800673e <_malloc_usable_size_r>
 80066bc:	4284      	cmp	r4, r0
 80066be:	4607      	mov	r7, r0
 80066c0:	d802      	bhi.n	80066c8 <_realloc_r+0x34>
 80066c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80066c6:	d812      	bhi.n	80066ee <_realloc_r+0x5a>
 80066c8:	4621      	mov	r1, r4
 80066ca:	4640      	mov	r0, r8
 80066cc:	f7ff f956 	bl	800597c <_malloc_r>
 80066d0:	4605      	mov	r5, r0
 80066d2:	2800      	cmp	r0, #0
 80066d4:	d0ed      	beq.n	80066b2 <_realloc_r+0x1e>
 80066d6:	42bc      	cmp	r4, r7
 80066d8:	4622      	mov	r2, r4
 80066da:	4631      	mov	r1, r6
 80066dc:	bf28      	it	cs
 80066de:	463a      	movcs	r2, r7
 80066e0:	f7ff ff84 	bl	80065ec <memcpy>
 80066e4:	4631      	mov	r1, r6
 80066e6:	4640      	mov	r0, r8
 80066e8:	f7ff f8d4 	bl	8005894 <_free_r>
 80066ec:	e7e1      	b.n	80066b2 <_realloc_r+0x1e>
 80066ee:	4635      	mov	r5, r6
 80066f0:	e7df      	b.n	80066b2 <_realloc_r+0x1e>

080066f2 <__ascii_wctomb>:
 80066f2:	b149      	cbz	r1, 8006708 <__ascii_wctomb+0x16>
 80066f4:	2aff      	cmp	r2, #255	; 0xff
 80066f6:	bf85      	ittet	hi
 80066f8:	238a      	movhi	r3, #138	; 0x8a
 80066fa:	6003      	strhi	r3, [r0, #0]
 80066fc:	700a      	strbls	r2, [r1, #0]
 80066fe:	f04f 30ff 	movhi.w	r0, #4294967295
 8006702:	bf98      	it	ls
 8006704:	2001      	movls	r0, #1
 8006706:	4770      	bx	lr
 8006708:	4608      	mov	r0, r1
 800670a:	4770      	bx	lr

0800670c <fiprintf>:
 800670c:	b40e      	push	{r1, r2, r3}
 800670e:	b503      	push	{r0, r1, lr}
 8006710:	4601      	mov	r1, r0
 8006712:	ab03      	add	r3, sp, #12
 8006714:	4805      	ldr	r0, [pc, #20]	; (800672c <fiprintf+0x20>)
 8006716:	f853 2b04 	ldr.w	r2, [r3], #4
 800671a:	6800      	ldr	r0, [r0, #0]
 800671c:	9301      	str	r3, [sp, #4]
 800671e:	f000 f83f 	bl	80067a0 <_vfiprintf_r>
 8006722:	b002      	add	sp, #8
 8006724:	f85d eb04 	ldr.w	lr, [sp], #4
 8006728:	b003      	add	sp, #12
 800672a:	4770      	bx	lr
 800672c:	2000015c 	.word	0x2000015c

08006730 <abort>:
 8006730:	b508      	push	{r3, lr}
 8006732:	2006      	movs	r0, #6
 8006734:	f000 fa0c 	bl	8006b50 <raise>
 8006738:	2001      	movs	r0, #1
 800673a:	f7fa fd05 	bl	8001148 <_exit>

0800673e <_malloc_usable_size_r>:
 800673e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006742:	1f18      	subs	r0, r3, #4
 8006744:	2b00      	cmp	r3, #0
 8006746:	bfbc      	itt	lt
 8006748:	580b      	ldrlt	r3, [r1, r0]
 800674a:	18c0      	addlt	r0, r0, r3
 800674c:	4770      	bx	lr

0800674e <__sfputc_r>:
 800674e:	6893      	ldr	r3, [r2, #8]
 8006750:	3b01      	subs	r3, #1
 8006752:	2b00      	cmp	r3, #0
 8006754:	b410      	push	{r4}
 8006756:	6093      	str	r3, [r2, #8]
 8006758:	da08      	bge.n	800676c <__sfputc_r+0x1e>
 800675a:	6994      	ldr	r4, [r2, #24]
 800675c:	42a3      	cmp	r3, r4
 800675e:	db01      	blt.n	8006764 <__sfputc_r+0x16>
 8006760:	290a      	cmp	r1, #10
 8006762:	d103      	bne.n	800676c <__sfputc_r+0x1e>
 8006764:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006768:	f000 b934 	b.w	80069d4 <__swbuf_r>
 800676c:	6813      	ldr	r3, [r2, #0]
 800676e:	1c58      	adds	r0, r3, #1
 8006770:	6010      	str	r0, [r2, #0]
 8006772:	7019      	strb	r1, [r3, #0]
 8006774:	4608      	mov	r0, r1
 8006776:	f85d 4b04 	ldr.w	r4, [sp], #4
 800677a:	4770      	bx	lr

0800677c <__sfputs_r>:
 800677c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800677e:	4606      	mov	r6, r0
 8006780:	460f      	mov	r7, r1
 8006782:	4614      	mov	r4, r2
 8006784:	18d5      	adds	r5, r2, r3
 8006786:	42ac      	cmp	r4, r5
 8006788:	d101      	bne.n	800678e <__sfputs_r+0x12>
 800678a:	2000      	movs	r0, #0
 800678c:	e007      	b.n	800679e <__sfputs_r+0x22>
 800678e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006792:	463a      	mov	r2, r7
 8006794:	4630      	mov	r0, r6
 8006796:	f7ff ffda 	bl	800674e <__sfputc_r>
 800679a:	1c43      	adds	r3, r0, #1
 800679c:	d1f3      	bne.n	8006786 <__sfputs_r+0xa>
 800679e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080067a0 <_vfiprintf_r>:
 80067a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067a4:	460d      	mov	r5, r1
 80067a6:	b09d      	sub	sp, #116	; 0x74
 80067a8:	4614      	mov	r4, r2
 80067aa:	4698      	mov	r8, r3
 80067ac:	4606      	mov	r6, r0
 80067ae:	b118      	cbz	r0, 80067b8 <_vfiprintf_r+0x18>
 80067b0:	6a03      	ldr	r3, [r0, #32]
 80067b2:	b90b      	cbnz	r3, 80067b8 <_vfiprintf_r+0x18>
 80067b4:	f7fe f8da 	bl	800496c <__sinit>
 80067b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067ba:	07d9      	lsls	r1, r3, #31
 80067bc:	d405      	bmi.n	80067ca <_vfiprintf_r+0x2a>
 80067be:	89ab      	ldrh	r3, [r5, #12]
 80067c0:	059a      	lsls	r2, r3, #22
 80067c2:	d402      	bmi.n	80067ca <_vfiprintf_r+0x2a>
 80067c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067c6:	f7fe f9e8 	bl	8004b9a <__retarget_lock_acquire_recursive>
 80067ca:	89ab      	ldrh	r3, [r5, #12]
 80067cc:	071b      	lsls	r3, r3, #28
 80067ce:	d501      	bpl.n	80067d4 <_vfiprintf_r+0x34>
 80067d0:	692b      	ldr	r3, [r5, #16]
 80067d2:	b99b      	cbnz	r3, 80067fc <_vfiprintf_r+0x5c>
 80067d4:	4629      	mov	r1, r5
 80067d6:	4630      	mov	r0, r6
 80067d8:	f000 f93a 	bl	8006a50 <__swsetup_r>
 80067dc:	b170      	cbz	r0, 80067fc <_vfiprintf_r+0x5c>
 80067de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067e0:	07dc      	lsls	r4, r3, #31
 80067e2:	d504      	bpl.n	80067ee <_vfiprintf_r+0x4e>
 80067e4:	f04f 30ff 	mov.w	r0, #4294967295
 80067e8:	b01d      	add	sp, #116	; 0x74
 80067ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ee:	89ab      	ldrh	r3, [r5, #12]
 80067f0:	0598      	lsls	r0, r3, #22
 80067f2:	d4f7      	bmi.n	80067e4 <_vfiprintf_r+0x44>
 80067f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067f6:	f7fe f9d1 	bl	8004b9c <__retarget_lock_release_recursive>
 80067fa:	e7f3      	b.n	80067e4 <_vfiprintf_r+0x44>
 80067fc:	2300      	movs	r3, #0
 80067fe:	9309      	str	r3, [sp, #36]	; 0x24
 8006800:	2320      	movs	r3, #32
 8006802:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006806:	f8cd 800c 	str.w	r8, [sp, #12]
 800680a:	2330      	movs	r3, #48	; 0x30
 800680c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80069c0 <_vfiprintf_r+0x220>
 8006810:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006814:	f04f 0901 	mov.w	r9, #1
 8006818:	4623      	mov	r3, r4
 800681a:	469a      	mov	sl, r3
 800681c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006820:	b10a      	cbz	r2, 8006826 <_vfiprintf_r+0x86>
 8006822:	2a25      	cmp	r2, #37	; 0x25
 8006824:	d1f9      	bne.n	800681a <_vfiprintf_r+0x7a>
 8006826:	ebba 0b04 	subs.w	fp, sl, r4
 800682a:	d00b      	beq.n	8006844 <_vfiprintf_r+0xa4>
 800682c:	465b      	mov	r3, fp
 800682e:	4622      	mov	r2, r4
 8006830:	4629      	mov	r1, r5
 8006832:	4630      	mov	r0, r6
 8006834:	f7ff ffa2 	bl	800677c <__sfputs_r>
 8006838:	3001      	adds	r0, #1
 800683a:	f000 80a9 	beq.w	8006990 <_vfiprintf_r+0x1f0>
 800683e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006840:	445a      	add	r2, fp
 8006842:	9209      	str	r2, [sp, #36]	; 0x24
 8006844:	f89a 3000 	ldrb.w	r3, [sl]
 8006848:	2b00      	cmp	r3, #0
 800684a:	f000 80a1 	beq.w	8006990 <_vfiprintf_r+0x1f0>
 800684e:	2300      	movs	r3, #0
 8006850:	f04f 32ff 	mov.w	r2, #4294967295
 8006854:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006858:	f10a 0a01 	add.w	sl, sl, #1
 800685c:	9304      	str	r3, [sp, #16]
 800685e:	9307      	str	r3, [sp, #28]
 8006860:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006864:	931a      	str	r3, [sp, #104]	; 0x68
 8006866:	4654      	mov	r4, sl
 8006868:	2205      	movs	r2, #5
 800686a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800686e:	4854      	ldr	r0, [pc, #336]	; (80069c0 <_vfiprintf_r+0x220>)
 8006870:	f7f9 fcae 	bl	80001d0 <memchr>
 8006874:	9a04      	ldr	r2, [sp, #16]
 8006876:	b9d8      	cbnz	r0, 80068b0 <_vfiprintf_r+0x110>
 8006878:	06d1      	lsls	r1, r2, #27
 800687a:	bf44      	itt	mi
 800687c:	2320      	movmi	r3, #32
 800687e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006882:	0713      	lsls	r3, r2, #28
 8006884:	bf44      	itt	mi
 8006886:	232b      	movmi	r3, #43	; 0x2b
 8006888:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800688c:	f89a 3000 	ldrb.w	r3, [sl]
 8006890:	2b2a      	cmp	r3, #42	; 0x2a
 8006892:	d015      	beq.n	80068c0 <_vfiprintf_r+0x120>
 8006894:	9a07      	ldr	r2, [sp, #28]
 8006896:	4654      	mov	r4, sl
 8006898:	2000      	movs	r0, #0
 800689a:	f04f 0c0a 	mov.w	ip, #10
 800689e:	4621      	mov	r1, r4
 80068a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068a4:	3b30      	subs	r3, #48	; 0x30
 80068a6:	2b09      	cmp	r3, #9
 80068a8:	d94d      	bls.n	8006946 <_vfiprintf_r+0x1a6>
 80068aa:	b1b0      	cbz	r0, 80068da <_vfiprintf_r+0x13a>
 80068ac:	9207      	str	r2, [sp, #28]
 80068ae:	e014      	b.n	80068da <_vfiprintf_r+0x13a>
 80068b0:	eba0 0308 	sub.w	r3, r0, r8
 80068b4:	fa09 f303 	lsl.w	r3, r9, r3
 80068b8:	4313      	orrs	r3, r2
 80068ba:	9304      	str	r3, [sp, #16]
 80068bc:	46a2      	mov	sl, r4
 80068be:	e7d2      	b.n	8006866 <_vfiprintf_r+0xc6>
 80068c0:	9b03      	ldr	r3, [sp, #12]
 80068c2:	1d19      	adds	r1, r3, #4
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	9103      	str	r1, [sp, #12]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	bfbb      	ittet	lt
 80068cc:	425b      	neglt	r3, r3
 80068ce:	f042 0202 	orrlt.w	r2, r2, #2
 80068d2:	9307      	strge	r3, [sp, #28]
 80068d4:	9307      	strlt	r3, [sp, #28]
 80068d6:	bfb8      	it	lt
 80068d8:	9204      	strlt	r2, [sp, #16]
 80068da:	7823      	ldrb	r3, [r4, #0]
 80068dc:	2b2e      	cmp	r3, #46	; 0x2e
 80068de:	d10c      	bne.n	80068fa <_vfiprintf_r+0x15a>
 80068e0:	7863      	ldrb	r3, [r4, #1]
 80068e2:	2b2a      	cmp	r3, #42	; 0x2a
 80068e4:	d134      	bne.n	8006950 <_vfiprintf_r+0x1b0>
 80068e6:	9b03      	ldr	r3, [sp, #12]
 80068e8:	1d1a      	adds	r2, r3, #4
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	9203      	str	r2, [sp, #12]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	bfb8      	it	lt
 80068f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80068f6:	3402      	adds	r4, #2
 80068f8:	9305      	str	r3, [sp, #20]
 80068fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80069d0 <_vfiprintf_r+0x230>
 80068fe:	7821      	ldrb	r1, [r4, #0]
 8006900:	2203      	movs	r2, #3
 8006902:	4650      	mov	r0, sl
 8006904:	f7f9 fc64 	bl	80001d0 <memchr>
 8006908:	b138      	cbz	r0, 800691a <_vfiprintf_r+0x17a>
 800690a:	9b04      	ldr	r3, [sp, #16]
 800690c:	eba0 000a 	sub.w	r0, r0, sl
 8006910:	2240      	movs	r2, #64	; 0x40
 8006912:	4082      	lsls	r2, r0
 8006914:	4313      	orrs	r3, r2
 8006916:	3401      	adds	r4, #1
 8006918:	9304      	str	r3, [sp, #16]
 800691a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800691e:	4829      	ldr	r0, [pc, #164]	; (80069c4 <_vfiprintf_r+0x224>)
 8006920:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006924:	2206      	movs	r2, #6
 8006926:	f7f9 fc53 	bl	80001d0 <memchr>
 800692a:	2800      	cmp	r0, #0
 800692c:	d03f      	beq.n	80069ae <_vfiprintf_r+0x20e>
 800692e:	4b26      	ldr	r3, [pc, #152]	; (80069c8 <_vfiprintf_r+0x228>)
 8006930:	bb1b      	cbnz	r3, 800697a <_vfiprintf_r+0x1da>
 8006932:	9b03      	ldr	r3, [sp, #12]
 8006934:	3307      	adds	r3, #7
 8006936:	f023 0307 	bic.w	r3, r3, #7
 800693a:	3308      	adds	r3, #8
 800693c:	9303      	str	r3, [sp, #12]
 800693e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006940:	443b      	add	r3, r7
 8006942:	9309      	str	r3, [sp, #36]	; 0x24
 8006944:	e768      	b.n	8006818 <_vfiprintf_r+0x78>
 8006946:	fb0c 3202 	mla	r2, ip, r2, r3
 800694a:	460c      	mov	r4, r1
 800694c:	2001      	movs	r0, #1
 800694e:	e7a6      	b.n	800689e <_vfiprintf_r+0xfe>
 8006950:	2300      	movs	r3, #0
 8006952:	3401      	adds	r4, #1
 8006954:	9305      	str	r3, [sp, #20]
 8006956:	4619      	mov	r1, r3
 8006958:	f04f 0c0a 	mov.w	ip, #10
 800695c:	4620      	mov	r0, r4
 800695e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006962:	3a30      	subs	r2, #48	; 0x30
 8006964:	2a09      	cmp	r2, #9
 8006966:	d903      	bls.n	8006970 <_vfiprintf_r+0x1d0>
 8006968:	2b00      	cmp	r3, #0
 800696a:	d0c6      	beq.n	80068fa <_vfiprintf_r+0x15a>
 800696c:	9105      	str	r1, [sp, #20]
 800696e:	e7c4      	b.n	80068fa <_vfiprintf_r+0x15a>
 8006970:	fb0c 2101 	mla	r1, ip, r1, r2
 8006974:	4604      	mov	r4, r0
 8006976:	2301      	movs	r3, #1
 8006978:	e7f0      	b.n	800695c <_vfiprintf_r+0x1bc>
 800697a:	ab03      	add	r3, sp, #12
 800697c:	9300      	str	r3, [sp, #0]
 800697e:	462a      	mov	r2, r5
 8006980:	4b12      	ldr	r3, [pc, #72]	; (80069cc <_vfiprintf_r+0x22c>)
 8006982:	a904      	add	r1, sp, #16
 8006984:	4630      	mov	r0, r6
 8006986:	f7fd fb9f 	bl	80040c8 <_printf_float>
 800698a:	4607      	mov	r7, r0
 800698c:	1c78      	adds	r0, r7, #1
 800698e:	d1d6      	bne.n	800693e <_vfiprintf_r+0x19e>
 8006990:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006992:	07d9      	lsls	r1, r3, #31
 8006994:	d405      	bmi.n	80069a2 <_vfiprintf_r+0x202>
 8006996:	89ab      	ldrh	r3, [r5, #12]
 8006998:	059a      	lsls	r2, r3, #22
 800699a:	d402      	bmi.n	80069a2 <_vfiprintf_r+0x202>
 800699c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800699e:	f7fe f8fd 	bl	8004b9c <__retarget_lock_release_recursive>
 80069a2:	89ab      	ldrh	r3, [r5, #12]
 80069a4:	065b      	lsls	r3, r3, #25
 80069a6:	f53f af1d 	bmi.w	80067e4 <_vfiprintf_r+0x44>
 80069aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069ac:	e71c      	b.n	80067e8 <_vfiprintf_r+0x48>
 80069ae:	ab03      	add	r3, sp, #12
 80069b0:	9300      	str	r3, [sp, #0]
 80069b2:	462a      	mov	r2, r5
 80069b4:	4b05      	ldr	r3, [pc, #20]	; (80069cc <_vfiprintf_r+0x22c>)
 80069b6:	a904      	add	r1, sp, #16
 80069b8:	4630      	mov	r0, r6
 80069ba:	f7fd fe29 	bl	8004610 <_printf_i>
 80069be:	e7e4      	b.n	800698a <_vfiprintf_r+0x1ea>
 80069c0:	08006f5c 	.word	0x08006f5c
 80069c4:	08006f66 	.word	0x08006f66
 80069c8:	080040c9 	.word	0x080040c9
 80069cc:	0800677d 	.word	0x0800677d
 80069d0:	08006f62 	.word	0x08006f62

080069d4 <__swbuf_r>:
 80069d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069d6:	460e      	mov	r6, r1
 80069d8:	4614      	mov	r4, r2
 80069da:	4605      	mov	r5, r0
 80069dc:	b118      	cbz	r0, 80069e6 <__swbuf_r+0x12>
 80069de:	6a03      	ldr	r3, [r0, #32]
 80069e0:	b90b      	cbnz	r3, 80069e6 <__swbuf_r+0x12>
 80069e2:	f7fd ffc3 	bl	800496c <__sinit>
 80069e6:	69a3      	ldr	r3, [r4, #24]
 80069e8:	60a3      	str	r3, [r4, #8]
 80069ea:	89a3      	ldrh	r3, [r4, #12]
 80069ec:	071a      	lsls	r2, r3, #28
 80069ee:	d525      	bpl.n	8006a3c <__swbuf_r+0x68>
 80069f0:	6923      	ldr	r3, [r4, #16]
 80069f2:	b31b      	cbz	r3, 8006a3c <__swbuf_r+0x68>
 80069f4:	6823      	ldr	r3, [r4, #0]
 80069f6:	6922      	ldr	r2, [r4, #16]
 80069f8:	1a98      	subs	r0, r3, r2
 80069fa:	6963      	ldr	r3, [r4, #20]
 80069fc:	b2f6      	uxtb	r6, r6
 80069fe:	4283      	cmp	r3, r0
 8006a00:	4637      	mov	r7, r6
 8006a02:	dc04      	bgt.n	8006a0e <__swbuf_r+0x3a>
 8006a04:	4621      	mov	r1, r4
 8006a06:	4628      	mov	r0, r5
 8006a08:	f7ff fd9e 	bl	8006548 <_fflush_r>
 8006a0c:	b9e0      	cbnz	r0, 8006a48 <__swbuf_r+0x74>
 8006a0e:	68a3      	ldr	r3, [r4, #8]
 8006a10:	3b01      	subs	r3, #1
 8006a12:	60a3      	str	r3, [r4, #8]
 8006a14:	6823      	ldr	r3, [r4, #0]
 8006a16:	1c5a      	adds	r2, r3, #1
 8006a18:	6022      	str	r2, [r4, #0]
 8006a1a:	701e      	strb	r6, [r3, #0]
 8006a1c:	6962      	ldr	r2, [r4, #20]
 8006a1e:	1c43      	adds	r3, r0, #1
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d004      	beq.n	8006a2e <__swbuf_r+0x5a>
 8006a24:	89a3      	ldrh	r3, [r4, #12]
 8006a26:	07db      	lsls	r3, r3, #31
 8006a28:	d506      	bpl.n	8006a38 <__swbuf_r+0x64>
 8006a2a:	2e0a      	cmp	r6, #10
 8006a2c:	d104      	bne.n	8006a38 <__swbuf_r+0x64>
 8006a2e:	4621      	mov	r1, r4
 8006a30:	4628      	mov	r0, r5
 8006a32:	f7ff fd89 	bl	8006548 <_fflush_r>
 8006a36:	b938      	cbnz	r0, 8006a48 <__swbuf_r+0x74>
 8006a38:	4638      	mov	r0, r7
 8006a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a3c:	4621      	mov	r1, r4
 8006a3e:	4628      	mov	r0, r5
 8006a40:	f000 f806 	bl	8006a50 <__swsetup_r>
 8006a44:	2800      	cmp	r0, #0
 8006a46:	d0d5      	beq.n	80069f4 <__swbuf_r+0x20>
 8006a48:	f04f 37ff 	mov.w	r7, #4294967295
 8006a4c:	e7f4      	b.n	8006a38 <__swbuf_r+0x64>
	...

08006a50 <__swsetup_r>:
 8006a50:	b538      	push	{r3, r4, r5, lr}
 8006a52:	4b2a      	ldr	r3, [pc, #168]	; (8006afc <__swsetup_r+0xac>)
 8006a54:	4605      	mov	r5, r0
 8006a56:	6818      	ldr	r0, [r3, #0]
 8006a58:	460c      	mov	r4, r1
 8006a5a:	b118      	cbz	r0, 8006a64 <__swsetup_r+0x14>
 8006a5c:	6a03      	ldr	r3, [r0, #32]
 8006a5e:	b90b      	cbnz	r3, 8006a64 <__swsetup_r+0x14>
 8006a60:	f7fd ff84 	bl	800496c <__sinit>
 8006a64:	89a3      	ldrh	r3, [r4, #12]
 8006a66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a6a:	0718      	lsls	r0, r3, #28
 8006a6c:	d422      	bmi.n	8006ab4 <__swsetup_r+0x64>
 8006a6e:	06d9      	lsls	r1, r3, #27
 8006a70:	d407      	bmi.n	8006a82 <__swsetup_r+0x32>
 8006a72:	2309      	movs	r3, #9
 8006a74:	602b      	str	r3, [r5, #0]
 8006a76:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006a7a:	81a3      	strh	r3, [r4, #12]
 8006a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a80:	e034      	b.n	8006aec <__swsetup_r+0x9c>
 8006a82:	0758      	lsls	r0, r3, #29
 8006a84:	d512      	bpl.n	8006aac <__swsetup_r+0x5c>
 8006a86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a88:	b141      	cbz	r1, 8006a9c <__swsetup_r+0x4c>
 8006a8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a8e:	4299      	cmp	r1, r3
 8006a90:	d002      	beq.n	8006a98 <__swsetup_r+0x48>
 8006a92:	4628      	mov	r0, r5
 8006a94:	f7fe fefe 	bl	8005894 <_free_r>
 8006a98:	2300      	movs	r3, #0
 8006a9a:	6363      	str	r3, [r4, #52]	; 0x34
 8006a9c:	89a3      	ldrh	r3, [r4, #12]
 8006a9e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006aa2:	81a3      	strh	r3, [r4, #12]
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	6063      	str	r3, [r4, #4]
 8006aa8:	6923      	ldr	r3, [r4, #16]
 8006aaa:	6023      	str	r3, [r4, #0]
 8006aac:	89a3      	ldrh	r3, [r4, #12]
 8006aae:	f043 0308 	orr.w	r3, r3, #8
 8006ab2:	81a3      	strh	r3, [r4, #12]
 8006ab4:	6923      	ldr	r3, [r4, #16]
 8006ab6:	b94b      	cbnz	r3, 8006acc <__swsetup_r+0x7c>
 8006ab8:	89a3      	ldrh	r3, [r4, #12]
 8006aba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006abe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ac2:	d003      	beq.n	8006acc <__swsetup_r+0x7c>
 8006ac4:	4621      	mov	r1, r4
 8006ac6:	4628      	mov	r0, r5
 8006ac8:	f000 f884 	bl	8006bd4 <__smakebuf_r>
 8006acc:	89a0      	ldrh	r0, [r4, #12]
 8006ace:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ad2:	f010 0301 	ands.w	r3, r0, #1
 8006ad6:	d00a      	beq.n	8006aee <__swsetup_r+0x9e>
 8006ad8:	2300      	movs	r3, #0
 8006ada:	60a3      	str	r3, [r4, #8]
 8006adc:	6963      	ldr	r3, [r4, #20]
 8006ade:	425b      	negs	r3, r3
 8006ae0:	61a3      	str	r3, [r4, #24]
 8006ae2:	6923      	ldr	r3, [r4, #16]
 8006ae4:	b943      	cbnz	r3, 8006af8 <__swsetup_r+0xa8>
 8006ae6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006aea:	d1c4      	bne.n	8006a76 <__swsetup_r+0x26>
 8006aec:	bd38      	pop	{r3, r4, r5, pc}
 8006aee:	0781      	lsls	r1, r0, #30
 8006af0:	bf58      	it	pl
 8006af2:	6963      	ldrpl	r3, [r4, #20]
 8006af4:	60a3      	str	r3, [r4, #8]
 8006af6:	e7f4      	b.n	8006ae2 <__swsetup_r+0x92>
 8006af8:	2000      	movs	r0, #0
 8006afa:	e7f7      	b.n	8006aec <__swsetup_r+0x9c>
 8006afc:	2000015c 	.word	0x2000015c

08006b00 <_raise_r>:
 8006b00:	291f      	cmp	r1, #31
 8006b02:	b538      	push	{r3, r4, r5, lr}
 8006b04:	4604      	mov	r4, r0
 8006b06:	460d      	mov	r5, r1
 8006b08:	d904      	bls.n	8006b14 <_raise_r+0x14>
 8006b0a:	2316      	movs	r3, #22
 8006b0c:	6003      	str	r3, [r0, #0]
 8006b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8006b12:	bd38      	pop	{r3, r4, r5, pc}
 8006b14:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006b16:	b112      	cbz	r2, 8006b1e <_raise_r+0x1e>
 8006b18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006b1c:	b94b      	cbnz	r3, 8006b32 <_raise_r+0x32>
 8006b1e:	4620      	mov	r0, r4
 8006b20:	f000 f830 	bl	8006b84 <_getpid_r>
 8006b24:	462a      	mov	r2, r5
 8006b26:	4601      	mov	r1, r0
 8006b28:	4620      	mov	r0, r4
 8006b2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b2e:	f000 b817 	b.w	8006b60 <_kill_r>
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d00a      	beq.n	8006b4c <_raise_r+0x4c>
 8006b36:	1c59      	adds	r1, r3, #1
 8006b38:	d103      	bne.n	8006b42 <_raise_r+0x42>
 8006b3a:	2316      	movs	r3, #22
 8006b3c:	6003      	str	r3, [r0, #0]
 8006b3e:	2001      	movs	r0, #1
 8006b40:	e7e7      	b.n	8006b12 <_raise_r+0x12>
 8006b42:	2400      	movs	r4, #0
 8006b44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006b48:	4628      	mov	r0, r5
 8006b4a:	4798      	blx	r3
 8006b4c:	2000      	movs	r0, #0
 8006b4e:	e7e0      	b.n	8006b12 <_raise_r+0x12>

08006b50 <raise>:
 8006b50:	4b02      	ldr	r3, [pc, #8]	; (8006b5c <raise+0xc>)
 8006b52:	4601      	mov	r1, r0
 8006b54:	6818      	ldr	r0, [r3, #0]
 8006b56:	f7ff bfd3 	b.w	8006b00 <_raise_r>
 8006b5a:	bf00      	nop
 8006b5c:	2000015c 	.word	0x2000015c

08006b60 <_kill_r>:
 8006b60:	b538      	push	{r3, r4, r5, lr}
 8006b62:	4d07      	ldr	r5, [pc, #28]	; (8006b80 <_kill_r+0x20>)
 8006b64:	2300      	movs	r3, #0
 8006b66:	4604      	mov	r4, r0
 8006b68:	4608      	mov	r0, r1
 8006b6a:	4611      	mov	r1, r2
 8006b6c:	602b      	str	r3, [r5, #0]
 8006b6e:	f7fa fae3 	bl	8001138 <_kill>
 8006b72:	1c43      	adds	r3, r0, #1
 8006b74:	d102      	bne.n	8006b7c <_kill_r+0x1c>
 8006b76:	682b      	ldr	r3, [r5, #0]
 8006b78:	b103      	cbz	r3, 8006b7c <_kill_r+0x1c>
 8006b7a:	6023      	str	r3, [r4, #0]
 8006b7c:	bd38      	pop	{r3, r4, r5, pc}
 8006b7e:	bf00      	nop
 8006b80:	20000c3c 	.word	0x20000c3c

08006b84 <_getpid_r>:
 8006b84:	f7fa bad6 	b.w	8001134 <_getpid>

08006b88 <__swhatbuf_r>:
 8006b88:	b570      	push	{r4, r5, r6, lr}
 8006b8a:	460c      	mov	r4, r1
 8006b8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b90:	2900      	cmp	r1, #0
 8006b92:	b096      	sub	sp, #88	; 0x58
 8006b94:	4615      	mov	r5, r2
 8006b96:	461e      	mov	r6, r3
 8006b98:	da0d      	bge.n	8006bb6 <__swhatbuf_r+0x2e>
 8006b9a:	89a3      	ldrh	r3, [r4, #12]
 8006b9c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006ba0:	f04f 0100 	mov.w	r1, #0
 8006ba4:	bf0c      	ite	eq
 8006ba6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006baa:	2340      	movne	r3, #64	; 0x40
 8006bac:	2000      	movs	r0, #0
 8006bae:	6031      	str	r1, [r6, #0]
 8006bb0:	602b      	str	r3, [r5, #0]
 8006bb2:	b016      	add	sp, #88	; 0x58
 8006bb4:	bd70      	pop	{r4, r5, r6, pc}
 8006bb6:	466a      	mov	r2, sp
 8006bb8:	f000 f848 	bl	8006c4c <_fstat_r>
 8006bbc:	2800      	cmp	r0, #0
 8006bbe:	dbec      	blt.n	8006b9a <__swhatbuf_r+0x12>
 8006bc0:	9901      	ldr	r1, [sp, #4]
 8006bc2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006bc6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006bca:	4259      	negs	r1, r3
 8006bcc:	4159      	adcs	r1, r3
 8006bce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bd2:	e7eb      	b.n	8006bac <__swhatbuf_r+0x24>

08006bd4 <__smakebuf_r>:
 8006bd4:	898b      	ldrh	r3, [r1, #12]
 8006bd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006bd8:	079d      	lsls	r5, r3, #30
 8006bda:	4606      	mov	r6, r0
 8006bdc:	460c      	mov	r4, r1
 8006bde:	d507      	bpl.n	8006bf0 <__smakebuf_r+0x1c>
 8006be0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006be4:	6023      	str	r3, [r4, #0]
 8006be6:	6123      	str	r3, [r4, #16]
 8006be8:	2301      	movs	r3, #1
 8006bea:	6163      	str	r3, [r4, #20]
 8006bec:	b002      	add	sp, #8
 8006bee:	bd70      	pop	{r4, r5, r6, pc}
 8006bf0:	ab01      	add	r3, sp, #4
 8006bf2:	466a      	mov	r2, sp
 8006bf4:	f7ff ffc8 	bl	8006b88 <__swhatbuf_r>
 8006bf8:	9900      	ldr	r1, [sp, #0]
 8006bfa:	4605      	mov	r5, r0
 8006bfc:	4630      	mov	r0, r6
 8006bfe:	f7fe febd 	bl	800597c <_malloc_r>
 8006c02:	b948      	cbnz	r0, 8006c18 <__smakebuf_r+0x44>
 8006c04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c08:	059a      	lsls	r2, r3, #22
 8006c0a:	d4ef      	bmi.n	8006bec <__smakebuf_r+0x18>
 8006c0c:	f023 0303 	bic.w	r3, r3, #3
 8006c10:	f043 0302 	orr.w	r3, r3, #2
 8006c14:	81a3      	strh	r3, [r4, #12]
 8006c16:	e7e3      	b.n	8006be0 <__smakebuf_r+0xc>
 8006c18:	89a3      	ldrh	r3, [r4, #12]
 8006c1a:	6020      	str	r0, [r4, #0]
 8006c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c20:	81a3      	strh	r3, [r4, #12]
 8006c22:	9b00      	ldr	r3, [sp, #0]
 8006c24:	6163      	str	r3, [r4, #20]
 8006c26:	9b01      	ldr	r3, [sp, #4]
 8006c28:	6120      	str	r0, [r4, #16]
 8006c2a:	b15b      	cbz	r3, 8006c44 <__smakebuf_r+0x70>
 8006c2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c30:	4630      	mov	r0, r6
 8006c32:	f000 f81d 	bl	8006c70 <_isatty_r>
 8006c36:	b128      	cbz	r0, 8006c44 <__smakebuf_r+0x70>
 8006c38:	89a3      	ldrh	r3, [r4, #12]
 8006c3a:	f023 0303 	bic.w	r3, r3, #3
 8006c3e:	f043 0301 	orr.w	r3, r3, #1
 8006c42:	81a3      	strh	r3, [r4, #12]
 8006c44:	89a3      	ldrh	r3, [r4, #12]
 8006c46:	431d      	orrs	r5, r3
 8006c48:	81a5      	strh	r5, [r4, #12]
 8006c4a:	e7cf      	b.n	8006bec <__smakebuf_r+0x18>

08006c4c <_fstat_r>:
 8006c4c:	b538      	push	{r3, r4, r5, lr}
 8006c4e:	4d07      	ldr	r5, [pc, #28]	; (8006c6c <_fstat_r+0x20>)
 8006c50:	2300      	movs	r3, #0
 8006c52:	4604      	mov	r4, r0
 8006c54:	4608      	mov	r0, r1
 8006c56:	4611      	mov	r1, r2
 8006c58:	602b      	str	r3, [r5, #0]
 8006c5a:	f7fa fa9b 	bl	8001194 <_fstat>
 8006c5e:	1c43      	adds	r3, r0, #1
 8006c60:	d102      	bne.n	8006c68 <_fstat_r+0x1c>
 8006c62:	682b      	ldr	r3, [r5, #0]
 8006c64:	b103      	cbz	r3, 8006c68 <_fstat_r+0x1c>
 8006c66:	6023      	str	r3, [r4, #0]
 8006c68:	bd38      	pop	{r3, r4, r5, pc}
 8006c6a:	bf00      	nop
 8006c6c:	20000c3c 	.word	0x20000c3c

08006c70 <_isatty_r>:
 8006c70:	b538      	push	{r3, r4, r5, lr}
 8006c72:	4d06      	ldr	r5, [pc, #24]	; (8006c8c <_isatty_r+0x1c>)
 8006c74:	2300      	movs	r3, #0
 8006c76:	4604      	mov	r4, r0
 8006c78:	4608      	mov	r0, r1
 8006c7a:	602b      	str	r3, [r5, #0]
 8006c7c:	f7fa fa90 	bl	80011a0 <_isatty>
 8006c80:	1c43      	adds	r3, r0, #1
 8006c82:	d102      	bne.n	8006c8a <_isatty_r+0x1a>
 8006c84:	682b      	ldr	r3, [r5, #0]
 8006c86:	b103      	cbz	r3, 8006c8a <_isatty_r+0x1a>
 8006c88:	6023      	str	r3, [r4, #0]
 8006c8a:	bd38      	pop	{r3, r4, r5, pc}
 8006c8c:	20000c3c 	.word	0x20000c3c

08006c90 <_init>:
 8006c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c92:	bf00      	nop
 8006c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c96:	bc08      	pop	{r3}
 8006c98:	469e      	mov	lr, r3
 8006c9a:	4770      	bx	lr

08006c9c <_fini>:
 8006c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c9e:	bf00      	nop
 8006ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ca2:	bc08      	pop	{r3}
 8006ca4:	469e      	mov	lr, r3
 8006ca6:	4770      	bx	lr
