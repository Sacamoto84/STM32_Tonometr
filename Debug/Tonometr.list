
Tonometr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007880  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  08007a10  08007a10  00017a10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e44  08007e44  000202cc  2**0
                  CONTENTS
  4 .ARM          00000000  08007e44  08007e44  000202cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007e44  08007e44  000202cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e44  08007e44  00017e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e48  08007e48  00017e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002cc  20000000  08007e4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d0  200002cc  08008118  000202cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  2000069c  08008118  0002069c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012f3e  00000000  00000000  0002033f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f81  00000000  00000000  0003327d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010c0  00000000  00000000  00036200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cdc  00000000  00000000  000372c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ffd6  00000000  00000000  00037f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016295  00000000  00000000  00057f72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aa7c6  00000000  00000000  0006e207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000055b4  00000000  00000000  001189d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  0011df84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002cc 	.word	0x200002cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080079f8 	.word	0x080079f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d0 	.word	0x200002d0
 80001cc:	080079f8 	.word	0x080079f8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <MX_DMA_Init+0x38>)
 8000c50:	695b      	ldr	r3, [r3, #20]
 8000c52:	4a0b      	ldr	r2, [pc, #44]	; (8000c80 <MX_DMA_Init+0x38>)
 8000c54:	f043 0302 	orr.w	r3, r3, #2
 8000c58:	6153      	str	r3, [r2, #20]
 8000c5a:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <MX_DMA_Init+0x38>)
 8000c5c:	695b      	ldr	r3, [r3, #20]
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2100      	movs	r1, #0
 8000c6a:	203a      	movs	r0, #58	; 0x3a
 8000c6c:	f000 fe7e 	bl	800196c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8000c70:	203a      	movs	r0, #58	; 0x3a
 8000c72:	f000 fe97 	bl	80019a4 <HAL_NVIC_EnableIRQ>

}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40021000 	.word	0x40021000

08000c84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <MX_GPIO_Init+0x5c>)
 8000c8c:	695b      	ldr	r3, [r3, #20]
 8000c8e:	4a14      	ldr	r2, [pc, #80]	; (8000ce0 <MX_GPIO_Init+0x5c>)
 8000c90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c94:	6153      	str	r3, [r2, #20]
 8000c96:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <MX_GPIO_Init+0x5c>)
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <MX_GPIO_Init+0x5c>)
 8000ca4:	695b      	ldr	r3, [r3, #20]
 8000ca6:	4a0e      	ldr	r2, [pc, #56]	; (8000ce0 <MX_GPIO_Init+0x5c>)
 8000ca8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cac:	6153      	str	r3, [r2, #20]
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <MX_GPIO_Init+0x5c>)
 8000cb0:	695b      	ldr	r3, [r3, #20]
 8000cb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <MX_GPIO_Init+0x5c>)
 8000cbc:	695b      	ldr	r3, [r3, #20]
 8000cbe:	4a08      	ldr	r2, [pc, #32]	; (8000ce0 <MX_GPIO_Init+0x5c>)
 8000cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc4:	6153      	str	r3, [r2, #20]
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <MX_GPIO_Init+0x5c>)
 8000cc8:	695b      	ldr	r3, [r3, #20]
 8000cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]

}
 8000cd2:	bf00      	nop
 8000cd4:	3714      	adds	r7, #20
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	40021000 	.word	0x40021000

08000ce4 <_ZN8classLog4initEP20__UART_HandleTypeDef>:
#define COLOR_RESET   "\33[0m"

class classLog {
public:

	void init(UART_HandleTypeDef *_huart) {	huart = _huart; }
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	683a      	ldr	r2, [r7, #0]
 8000cf2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <_ZN8classLog1wEPKc>:

	char str[256];

	UART_HandleTypeDef *huart;

	void w(char const *const format) {colorStringln(11, format);}
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
 8000d0a:	6039      	str	r1, [r7, #0]
 8000d0c:	683a      	ldr	r2, [r7, #0]
 8000d0e:	210b      	movs	r1, #11
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f003 ffd5 	bl	8004cc0 <_ZN8classLog13colorStringlnEiPKc>
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <_ZN8classLog1iEPKc>:
	void e(char const *const format) {colorStringln(9, format);}
	void i(char const *const format) {colorStringln(45, format);}
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
 8000d26:	6039      	str	r1, [r7, #0]
 8000d28:	683a      	ldr	r2, [r7, #0]
 8000d2a:	212d      	movs	r1, #45	; 0x2d
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f003 ffc7 	bl	8004cc0 <_ZN8classLog13colorStringlnEiPKc>
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
	...

08000d3c <_Z19interpolatePressuref>:
		{ 200.0F, 2.069 }, { 210.0F, 2.124 }, { 220.0F, 2.179 },
		{ 230.0F, 2.237 }, { 240.0F, 2.293 }, { 250.0F, 2.345 },
		{ 260.0F, 2.113 }, { 270.0F, 2.466 }, { 280.0F, 2.521 },
		{ 290.0F, 2.588 }, { 300.0F, 2.621 }, };

float interpolatePressure(float volume) {
 8000d3c:	b480      	push	{r7}
 8000d3e:	b089      	sub	sp, #36	; 0x24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	ed87 0a01 	vstr	s0, [r7, #4]
	//y = (x - x0) / (x1 - x0) * (y1 - y0) + y0
	if (volume <= 1.0F)
 8000d46:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000d4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d56:	d802      	bhi.n	8000d5e <_Z19interpolatePressuref+0x22>
		return 0.0F;
 8000d58:	eddf 7a39 	vldr	s15, [pc, #228]	; 8000e40 <_Z19interpolatePressuref+0x104>
 8000d5c:	e069      	b.n	8000e32 <_Z19interpolatePressuref+0xf6>
	if (volume >= 2.621F)
 8000d5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d62:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8000e44 <_Z19interpolatePressuref+0x108>
 8000d66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d6e:	db02      	blt.n	8000d76 <_Z19interpolatePressuref+0x3a>
		return 300.0F;
 8000d70:	eddf 7a35 	vldr	s15, [pc, #212]	; 8000e48 <_Z19interpolatePressuref+0x10c>
 8000d74:	e05d      	b.n	8000e32 <_Z19interpolatePressuref+0xf6>

	float x0 = 0, x1 = 0;
 8000d76:	f04f 0300 	mov.w	r3, #0
 8000d7a:	61bb      	str	r3, [r7, #24]
 8000d7c:	f04f 0300 	mov.w	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
	float y0 = 0, y1 = 0;
 8000d82:	f04f 0300 	mov.w	r3, #0
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
    int i = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < 31; i++) {
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
 8000d96:	e047      	b.n	8000e28 <_Z19interpolatePressuref+0xec>
		if (volume < table[i][1]) {
 8000d98:	4a2c      	ldr	r2, [pc, #176]	; (8000e4c <_Z19interpolatePressuref+0x110>)
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	00db      	lsls	r3, r3, #3
 8000d9e:	4413      	add	r3, r2
 8000da0:	3304      	adds	r3, #4
 8000da2:	edd3 7a00 	vldr	s15, [r3]
 8000da6:	ed97 7a01 	vldr	s14, [r7, #4]
 8000daa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000db2:	d536      	bpl.n	8000e22 <_Z19interpolatePressuref+0xe6>
			x0 = table[i-1][1];
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	4a24      	ldr	r2, [pc, #144]	; (8000e4c <_Z19interpolatePressuref+0x110>)
 8000dba:	00db      	lsls	r3, r3, #3
 8000dbc:	4413      	add	r3, r2
 8000dbe:	3304      	adds	r3, #4
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	61bb      	str	r3, [r7, #24]
			x1 = table[i][1];
 8000dc4:	4a21      	ldr	r2, [pc, #132]	; (8000e4c <_Z19interpolatePressuref+0x110>)
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	00db      	lsls	r3, r3, #3
 8000dca:	4413      	add	r3, r2
 8000dcc:	3304      	adds	r3, #4
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	617b      	str	r3, [r7, #20]
			y0 = table[i-1][0];
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3b01      	subs	r3, #1
 8000dd6:	4a1d      	ldr	r2, [pc, #116]	; (8000e4c <_Z19interpolatePressuref+0x110>)
 8000dd8:	00db      	lsls	r3, r3, #3
 8000dda:	4413      	add	r3, r2
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	613b      	str	r3, [r7, #16]
			y1 = table[i][0];
 8000de0:	4a1a      	ldr	r2, [pc, #104]	; (8000e4c <_Z19interpolatePressuref+0x110>)
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	00db      	lsls	r3, r3, #3
 8000de6:	4413      	add	r3, r2
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	60fb      	str	r3, [r7, #12]

			return (volume - x0) / (x1 - x0) * (y1 - y0) + y0;
 8000dec:	ed97 7a01 	vldr	s14, [r7, #4]
 8000df0:	edd7 7a06 	vldr	s15, [r7, #24]
 8000df4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000df8:	ed97 7a05 	vldr	s14, [r7, #20]
 8000dfc:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000e08:	edd7 6a03 	vldr	s13, [r7, #12]
 8000e0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e10:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000e14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e18:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e20:	e007      	b.n	8000e32 <_Z19interpolatePressuref+0xf6>
	for (i = 0; i < 31; i++) {
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3301      	adds	r3, #1
 8000e26:	61fb      	str	r3, [r7, #28]
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	2b1e      	cmp	r3, #30
 8000e2c:	ddb4      	ble.n	8000d98 <_Z19interpolatePressuref+0x5c>

		}
	}
	return 0.0F;
 8000e2e:	eddf 7a04 	vldr	s15, [pc, #16]	; 8000e40 <_Z19interpolatePressuref+0x104>

}
 8000e32:	eeb0 0a67 	vmov.f32	s0, s15
 8000e36:	3724      	adds	r7, #36	; 0x24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	00000000 	.word	0x00000000
 8000e44:	4027be77 	.word	0x4027be77
 8000e48:	43960000 	.word	0x43960000
 8000e4c:	20000000 	.word	0x20000000

08000e50 <setup>:

extern "C" void setup() {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
	log.init(&huart1);
 8000e54:	4905      	ldr	r1, [pc, #20]	; (8000e6c <setup+0x1c>)
 8000e56:	4806      	ldr	r0, [pc, #24]	; (8000e70 <setup+0x20>)
 8000e58:	f7ff ff44 	bl	8000ce4 <_ZN8classLog4initEP20__UART_HandleTypeDef>
	log.w((char*) "Старт");
 8000e5c:	4905      	ldr	r1, [pc, #20]	; (8000e74 <setup+0x24>)
 8000e5e:	4804      	ldr	r0, [pc, #16]	; (8000e70 <setup+0x20>)
 8000e60:	f7ff ff4f 	bl	8000d02 <_ZN8classLog1wEPKc>
	loop();
 8000e64:	f000 f808 	bl	8000e78 <_Z4loopv>
}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	200004c4 	.word	0x200004c4
 8000e70:	200002e8 	.word	0x200002e8
 8000e74:	08007a10 	.word	0x08007a10

08000e78 <_Z4loopv>:

void loop() {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08e      	sub	sp, #56	; 0x38
 8000e7c:	af02      	add	r7, sp, #8
	//HAL_SDADC_ConvCpltCallback(&hsdadc1);

	// HAL_SDADC_Stop(&hsdadc1);

	//HAL_SDADC_CalibrationStart(&hsdadc1, SDADC_CALIBRATION_SEQ_1);
	HAL_Delay(1000);
 8000e7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e82:	f000 fc97 	bl	80017b4 <HAL_Delay>

	HAL_SDADC_Start(&hsdadc1);
 8000e86:	4832      	ldr	r0, [pc, #200]	; (8000f50 <_Z4loopv+0xd8>)
 8000e88:	f002 fdf8 	bl	8003a7c <HAL_SDADC_Start>

	SDADC1->CR2 |= SDADC_CR2_RSWSTART; // начало преобразования
 8000e8c:	4b31      	ldr	r3, [pc, #196]	; (8000f54 <_Z4loopv+0xdc>)
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	4a30      	ldr	r2, [pc, #192]	; (8000f54 <_Z4loopv+0xdc>)
 8000e92:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e96:	6053      	str	r3, [r2, #4]

	while (1) {
		log.i((char*) "run");
 8000e98:	492f      	ldr	r1, [pc, #188]	; (8000f58 <_Z4loopv+0xe0>)
 8000e9a:	4830      	ldr	r0, [pc, #192]	; (8000f5c <_Z4loopv+0xe4>)
 8000e9c:	f7ff ff3f 	bl	8000d1e <_ZN8classLog1iEPKc>

		int16_t adcValue;
		HAL_SDADC_PollForConversion(&hsdadc1, 1000);
 8000ea0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ea4:	482a      	ldr	r0, [pc, #168]	; (8000f50 <_Z4loopv+0xd8>)
 8000ea6:	f002 fe04 	bl	8003ab2 <HAL_SDADC_PollForConversion>
		adcValue = HAL_SDADC_GetValue(&hsdadc1);
 8000eaa:	4829      	ldr	r0, [pc, #164]	; (8000f50 <_Z4loopv+0xd8>)
 8000eac:	f002 fe5b 	bl	8003b66 <HAL_SDADC_GetValue>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	b21b      	sxth	r3, r3
 8000eb4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		float adcFValue = (3.281F) * (adcValue) / 32768 * 3.036 / 3.075;
 8000eb6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000eba:	ee07 3a90 	vmov	s15, r3
 8000ebe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ec2:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8000f60 <_Z4loopv+0xe8>
 8000ec6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000eca:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8000f64 <_Z4loopv+0xec>
 8000ece:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000ed2:	ee16 0a90 	vmov	r0, s13
 8000ed6:	f7ff fb37 	bl	8000548 <__aeabi_f2d>
 8000eda:	a319      	add	r3, pc, #100	; (adr r3, 8000f40 <_Z4loopv+0xc8>)
 8000edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee0:	f7ff fb8a 	bl	80005f8 <__aeabi_dmul>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	4610      	mov	r0, r2
 8000eea:	4619      	mov	r1, r3
 8000eec:	a316      	add	r3, pc, #88	; (adr r3, 8000f48 <_Z4loopv+0xd0>)
 8000eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef2:	f7ff fcab 	bl	800084c <__aeabi_ddiv>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	460b      	mov	r3, r1
 8000efa:	4610      	mov	r0, r2
 8000efc:	4619      	mov	r1, r3
 8000efe:	f7ff fe53 	bl	8000ba8 <__aeabi_d2f>
 8000f02:	4603      	mov	r3, r0
 8000f04:	62bb      	str	r3, [r7, #40]	; 0x28
		char str[32];

		//float pressure = 0.958 + (adcFValue - 0.958)*(300-0.958)/(2.631-0.958);

		float pressure = interpolatePressure(adcFValue);
 8000f06:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000f0a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f0e:	f7ff ff15 	bl	8000d3c <_Z19interpolatePressuref>
 8000f12:	eef0 7a40 	vmov.f32	s15, s0
 8000f16:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		log.i("v1=%d f=%f p=%f", adcValue, adcFValue, pressure);
 8000f1a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000f1e:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 8000f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	460b      	mov	r3, r1
 8000f2a:	490f      	ldr	r1, [pc, #60]	; (8000f68 <_Z4loopv+0xf0>)
 8000f2c:	480b      	ldr	r0, [pc, #44]	; (8000f5c <_Z4loopv+0xe4>)
 8000f2e:	f000 f81d 	bl	8000f6c <_ZN8classLog1iIJsffEEEvPKcDpRKT_>

		HAL_Delay(100);
 8000f32:	2064      	movs	r0, #100	; 0x64
 8000f34:	f000 fc3e 	bl	80017b4 <HAL_Delay>
	}
 8000f38:	e7ae      	b.n	8000e98 <_Z4loopv+0x20>
 8000f3a:	bf00      	nop
 8000f3c:	f3af 8000 	nop.w
 8000f40:	5e353f7d 	.word	0x5e353f7d
 8000f44:	400849ba 	.word	0x400849ba
 8000f48:	9999999a 	.word	0x9999999a
 8000f4c:	40089999 	.word	0x40089999
 8000f50:	200003ec 	.word	0x200003ec
 8000f54:	40016000 	.word	0x40016000
 8000f58:	08007a1c 	.word	0x08007a1c
 8000f5c:	200002e8 	.word	0x200002e8
 8000f60:	4051fbe7 	.word	0x4051fbe7
 8000f64:	47000000 	.word	0x47000000
 8000f68:	08007a20 	.word	0x08007a20

08000f6c <_ZN8classLog1iIJsffEEEvPKcDpRKT_>:
	void i(char const *const format, Args const &... args) noexcept {
 8000f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f70:	b088      	sub	sp, #32
 8000f72:	af04      	add	r7, sp, #16
 8000f74:	60f8      	str	r0, [r7, #12]
 8000f76:	60b9      	str	r1, [r7, #8]
 8000f78:	607a      	str	r2, [r7, #4]
 8000f7a:	603b      	str	r3, [r7, #0]
		sprintf(str, format, args ...);
 8000f7c:	68fe      	ldr	r6, [r7, #12]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f84:	4698      	mov	r8, r3
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff fadc 	bl	8000548 <__aeabi_f2d>
 8000f90:	4604      	mov	r4, r0
 8000f92:	460d      	mov	r5, r1
 8000f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff fad5 	bl	8000548 <__aeabi_f2d>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000fa6:	e9cd 4500 	strd	r4, r5, [sp]
 8000faa:	4642      	mov	r2, r8
 8000fac:	68b9      	ldr	r1, [r7, #8]
 8000fae:	4630      	mov	r0, r6
 8000fb0:	f004 fbc6 	bl	8005740 <siprintf>
		colorStringln(45, str);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	212d      	movs	r1, #45	; 0x2d
 8000fba:	68f8      	ldr	r0, [r7, #12]
 8000fbc:	f003 fe80 	bl	8004cc0 <_ZN8classLog13colorStringlnEiPKc>
	}
 8000fc0:	bf00      	nop
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08000fcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd2:	f000 fbb9 	bl	8001748 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd6:	f000 f817 	bl	8001008 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fda:	f7ff fe53 	bl	8000c84 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fde:	f7ff fe33 	bl	8000c48 <MX_DMA_Init>
  MX_SDADC1_Init();
 8000fe2:	f000 f88b 	bl	80010fc <MX_SDADC1_Init>
  MX_USART1_UART_Init();
 8000fe6:	f000 fb11 	bl	800160c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
   setup();
 8000fea:	f7ff ff31 	bl	8000e50 <setup>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  uint32_t adcValue;
	  HAL_SDADC_PollForConversion(&hsdadc1, 1000);
 8000fee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ff2:	4804      	ldr	r0, [pc, #16]	; (8001004 <main+0x38>)
 8000ff4:	f002 fd5d 	bl	8003ab2 <HAL_SDADC_PollForConversion>
	  adcValue = HAL_SDADC_GetValue(&hsdadc1);
 8000ff8:	4802      	ldr	r0, [pc, #8]	; (8001004 <main+0x38>)
 8000ffa:	f002 fdb4 	bl	8003b66 <HAL_SDADC_GetValue>
 8000ffe:	6078      	str	r0, [r7, #4]
  {
 8001000:	e7f5      	b.n	8000fee <main+0x22>
 8001002:	bf00      	nop
 8001004:	200003ec 	.word	0x200003ec

08001008 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b09a      	sub	sp, #104	; 0x68
 800100c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800100e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001012:	2228      	movs	r2, #40	; 0x28
 8001014:	2100      	movs	r1, #0
 8001016:	4618      	mov	r0, r3
 8001018:	f004 fbf5 	bl	8005806 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800101c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800102c:	463b      	mov	r3, r7
 800102e:	222c      	movs	r2, #44	; 0x2c
 8001030:	2100      	movs	r1, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f004 fbe7 	bl	8005806 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001038:	2301      	movs	r3, #1
 800103a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800103c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001040:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001042:	2300      	movs	r3, #0
 8001044:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001046:	2301      	movs	r3, #1
 8001048:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800104a:	2302      	movs	r3, #2
 800104c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800104e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001052:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001054:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001058:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800105a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800105e:	4618      	mov	r0, r3
 8001060:	f000 ff6e 	bl	8001f40 <HAL_RCC_OscConfig>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800106a:	f000 f841 	bl	80010f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800106e:	230f      	movs	r3, #15
 8001070:	62fb      	str	r3, [r7, #44]	; 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001072:	2302      	movs	r3, #2
 8001074:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001076:	2300      	movs	r3, #0
 8001078:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800107a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800107e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001080:	2300      	movs	r3, #0
 8001082:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001084:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001088:	2102      	movs	r1, #2
 800108a:	4618      	mov	r0, r3
 800108c:	f001 ff96 	bl	8002fbc <HAL_RCC_ClockConfig>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001096:	f000 f82b 	bl	80010f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_SDADC;
 800109a:	f640 0301 	movw	r3, #2049	; 0x801
 800109e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.SdadcClockSelection = RCC_SDADCSYSCLK_DIV48;
 80010a4:	f04f 4378 	mov.w	r3, #4160749568	; 0xf8000000
 80010a8:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010aa:	463b      	mov	r3, r7
 80010ac:	4618      	mov	r0, r3
 80010ae:	f002 f9ed 	bl	800348c <HAL_RCCEx_PeriphCLKConfig>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80010b8:	f000 f81a 	bl	80010f0 <Error_Handler>
  }
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG1);
 80010bc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010c0:	f000 ff1e 	bl	8001f00 <HAL_PWREx_EnableSDADC>
}
 80010c4:	bf00      	nop
 80010c6:	3768      	adds	r7, #104	; 0x68
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM19) {
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a04      	ldr	r2, [pc, #16]	; (80010ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d101      	bne.n	80010e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010de:	f000 fb49 	bl	8001774 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40015c00 	.word	0x40015c00

080010f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010f4:	b672      	cpsid	i
}
 80010f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <Error_Handler+0x8>
	...

080010fc <MX_SDADC1_Init>:
SDADC_HandleTypeDef hsdadc1;
DMA_HandleTypeDef hdma_sdadc1;

/* SDADC1 init function */
void MX_SDADC1_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SDADC1_Init 0 */

  /* USER CODE END SDADC1_Init 0 */

  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 8001102:	463b      	mov	r3, r7
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
  /* USER CODE END SDADC1_Init 1 */

  /** Configure the SDADC low power mode, fast conversion mode,
  slow clock mode and SDADC1 reference voltage
  */
  hsdadc1.Instance = SDADC1;
 800110e:	4b27      	ldr	r3, [pc, #156]	; (80011ac <MX_SDADC1_Init+0xb0>)
 8001110:	4a27      	ldr	r2, [pc, #156]	; (80011b0 <MX_SDADC1_Init+0xb4>)
 8001112:	601a      	str	r2, [r3, #0]
  hsdadc1.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 8001114:	4b25      	ldr	r3, [pc, #148]	; (80011ac <MX_SDADC1_Init+0xb0>)
 8001116:	2200      	movs	r2, #0
 8001118:	605a      	str	r2, [r3, #4]
  hsdadc1.Init.FastConversionMode = SDADC_FAST_CONV_DISABLE;
 800111a:	4b24      	ldr	r3, [pc, #144]	; (80011ac <MX_SDADC1_Init+0xb0>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  hsdadc1.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 8001120:	4b22      	ldr	r3, [pc, #136]	; (80011ac <MX_SDADC1_Init+0xb0>)
 8001122:	2200      	movs	r2, #0
 8001124:	60da      	str	r2, [r3, #12]
  hsdadc1.Init.ReferenceVoltage = SDADC_VREF_VDDA;
 8001126:	4b21      	ldr	r3, [pc, #132]	; (80011ac <MX_SDADC1_Init+0xb0>)
 8001128:	f44f 7240 	mov.w	r2, #768	; 0x300
 800112c:	611a      	str	r2, [r3, #16]
  if (HAL_SDADC_Init(&hsdadc1) != HAL_OK)
 800112e:	481f      	ldr	r0, [pc, #124]	; (80011ac <MX_SDADC1_Init+0xb0>)
 8001130:	f002 fb20 	bl	8003774 <HAL_SDADC_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_SDADC1_Init+0x42>
  {
    Error_Handler();
 800113a:	f7ff ffd9 	bl	80010f0 <Error_Handler>
  }

  /** Configure The Regular Mode
  */
  if (HAL_SDADC_SelectRegularTrigger(&hsdadc1, SDADC_SOFTWARE_TRIGGER) != HAL_OK)
 800113e:	2100      	movs	r1, #0
 8001140:	481a      	ldr	r0, [pc, #104]	; (80011ac <MX_SDADC1_Init+0xb0>)
 8001142:	f002 fc6b 	bl	8003a1c <HAL_SDADC_SelectRegularTrigger>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_SDADC1_Init+0x54>
  {
    Error_Handler();
 800114c:	f7ff ffd0 	bl	80010f0 <Error_Handler>
  }

  /** Set parameters for SDADC configuration 0 Register
  */
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_SE_OFFSET;
 8001150:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001154:	603b      	str	r3, [r7, #0]
  ConfParamStruct.Gain = SDADC_GAIN_1_2;
 8001156:	f44f 03e0 	mov.w	r3, #7340032	; 0x700000
 800115a:	607b      	str	r3, [r7, #4]
  ConfParamStruct.CommonMode = SDADC_COMMON_MODE_VSSA;
 800115c:	2300      	movs	r3, #0
 800115e:	60bb      	str	r3, [r7, #8]
  ConfParamStruct.Offset = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc1, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 8001164:	463b      	mov	r3, r7
 8001166:	461a      	mov	r2, r3
 8001168:	2100      	movs	r1, #0
 800116a:	4810      	ldr	r0, [pc, #64]	; (80011ac <MX_SDADC1_Init+0xb0>)
 800116c:	f002 fb86 	bl	800387c <HAL_SDADC_PrepareChannelConfig>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_SDADC1_Init+0x7e>
  {
    Error_Handler();
 8001176:	f7ff ffbb 	bl	80010f0 <Error_Handler>
  }

  /** Configure the Regular Channel
  */
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_6, SDADC_CONF_INDEX_0) != HAL_OK)
 800117a:	2200      	movs	r2, #0
 800117c:	490d      	ldr	r1, [pc, #52]	; (80011b4 <MX_SDADC1_Init+0xb8>)
 800117e:	480b      	ldr	r0, [pc, #44]	; (80011ac <MX_SDADC1_Init+0xb0>)
 8001180:	f002 fbb8 	bl	80038f4 <HAL_SDADC_AssociateChannelConfig>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_SDADC1_Init+0x92>
  {
    Error_Handler();
 800118a:	f7ff ffb1 	bl	80010f0 <Error_Handler>
  }
  if (HAL_SDADC_ConfigChannel(&hsdadc1, SDADC_CHANNEL_6, SDADC_CONTINUOUS_CONV_ON) != HAL_OK)
 800118e:	2201      	movs	r2, #1
 8001190:	4908      	ldr	r1, [pc, #32]	; (80011b4 <MX_SDADC1_Init+0xb8>)
 8001192:	4806      	ldr	r0, [pc, #24]	; (80011ac <MX_SDADC1_Init+0xb0>)
 8001194:	f002 fbfe 	bl	8003994 <HAL_SDADC_ConfigChannel>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_SDADC1_Init+0xa6>
  {
    Error_Handler();
 800119e:	f7ff ffa7 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN SDADC1_Init 2 */

  /* USER CODE END SDADC1_Init 2 */

}
 80011a2:	bf00      	nop
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	200003ec 	.word	0x200003ec
 80011b0:	40016000 	.word	0x40016000
 80011b4:	00060040 	.word	0x00060040

080011b8 <HAL_SDADC_MspInit>:

void HAL_SDADC_MspInit(SDADC_HandleTypeDef* sdadcHandle)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	; 0x28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
  if(sdadcHandle->Instance==SDADC1)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a2d      	ldr	r2, [pc, #180]	; (800128c <HAL_SDADC_MspInit+0xd4>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d153      	bne.n	8001282 <HAL_SDADC_MspInit+0xca>
  {
  /* USER CODE BEGIN SDADC1_MspInit 0 */

  /* USER CODE END SDADC1_MspInit 0 */
    /* SDADC1 clock enable */
    __HAL_RCC_SDADC1_CLK_ENABLE();
 80011da:	4b2d      	ldr	r3, [pc, #180]	; (8001290 <HAL_SDADC_MspInit+0xd8>)
 80011dc:	699b      	ldr	r3, [r3, #24]
 80011de:	4a2c      	ldr	r2, [pc, #176]	; (8001290 <HAL_SDADC_MspInit+0xd8>)
 80011e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011e4:	6193      	str	r3, [r2, #24]
 80011e6:	4b2a      	ldr	r3, [pc, #168]	; (8001290 <HAL_SDADC_MspInit+0xd8>)
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f2:	4b27      	ldr	r3, [pc, #156]	; (8001290 <HAL_SDADC_MspInit+0xd8>)
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	4a26      	ldr	r2, [pc, #152]	; (8001290 <HAL_SDADC_MspInit+0xd8>)
 80011f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011fc:	6153      	str	r3, [r2, #20]
 80011fe:	4b24      	ldr	r3, [pc, #144]	; (8001290 <HAL_SDADC_MspInit+0xd8>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
    /**SDADC1 GPIO Configuration
    PB0     ------> SDADC1_AIN6P
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800120a:	2301      	movs	r3, #1
 800120c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800120e:	2303      	movs	r3, #3
 8001210:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	4619      	mov	r1, r3
 800121c:	481d      	ldr	r0, [pc, #116]	; (8001294 <HAL_SDADC_MspInit+0xdc>)
 800121e:	f000 fcf5 	bl	8001c0c <HAL_GPIO_Init>

    /* SDADC1 DMA Init */
    /* SDADC1 Init */
    hdma_sdadc1.Instance = DMA2_Channel3;
 8001222:	4b1d      	ldr	r3, [pc, #116]	; (8001298 <HAL_SDADC_MspInit+0xe0>)
 8001224:	4a1d      	ldr	r2, [pc, #116]	; (800129c <HAL_SDADC_MspInit+0xe4>)
 8001226:	601a      	str	r2, [r3, #0]
    hdma_sdadc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001228:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <HAL_SDADC_MspInit+0xe0>)
 800122a:	2200      	movs	r2, #0
 800122c:	605a      	str	r2, [r3, #4]
    hdma_sdadc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800122e:	4b1a      	ldr	r3, [pc, #104]	; (8001298 <HAL_SDADC_MspInit+0xe0>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
    hdma_sdadc1.Init.MemInc = DMA_MINC_ENABLE;
 8001234:	4b18      	ldr	r3, [pc, #96]	; (8001298 <HAL_SDADC_MspInit+0xe0>)
 8001236:	2280      	movs	r2, #128	; 0x80
 8001238:	60da      	str	r2, [r3, #12]
    hdma_sdadc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800123a:	4b17      	ldr	r3, [pc, #92]	; (8001298 <HAL_SDADC_MspInit+0xe0>)
 800123c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001240:	611a      	str	r2, [r3, #16]
    hdma_sdadc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <HAL_SDADC_MspInit+0xe0>)
 8001244:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001248:	615a      	str	r2, [r3, #20]
    hdma_sdadc1.Init.Mode = DMA_NORMAL;
 800124a:	4b13      	ldr	r3, [pc, #76]	; (8001298 <HAL_SDADC_MspInit+0xe0>)
 800124c:	2200      	movs	r2, #0
 800124e:	619a      	str	r2, [r3, #24]
    hdma_sdadc1.Init.Priority = DMA_PRIORITY_LOW;
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <HAL_SDADC_MspInit+0xe0>)
 8001252:	2200      	movs	r2, #0
 8001254:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_sdadc1) != HAL_OK)
 8001256:	4810      	ldr	r0, [pc, #64]	; (8001298 <HAL_SDADC_MspInit+0xe0>)
 8001258:	f000 fbb2 	bl	80019c0 <HAL_DMA_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_SDADC_MspInit+0xae>
    {
      Error_Handler();
 8001262:	f7ff ff45 	bl	80010f0 <Error_Handler>
    }

    __HAL_LINKDMA(sdadcHandle,hdma,hdma_sdadc1);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a0b      	ldr	r2, [pc, #44]	; (8001298 <HAL_SDADC_MspInit+0xe0>)
 800126a:	615a      	str	r2, [r3, #20]
 800126c:	4a0a      	ldr	r2, [pc, #40]	; (8001298 <HAL_SDADC_MspInit+0xe0>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6253      	str	r3, [r2, #36]	; 0x24

    /* SDADC1 interrupt Init */
    HAL_NVIC_SetPriority(SDADC1_IRQn, 0, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2100      	movs	r1, #0
 8001276:	203d      	movs	r0, #61	; 0x3d
 8001278:	f000 fb78 	bl	800196c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDADC1_IRQn);
 800127c:	203d      	movs	r0, #61	; 0x3d
 800127e:	f000 fb91 	bl	80019a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDADC1_MspInit 1 */

  /* USER CODE END SDADC1_MspInit 1 */
  }
}
 8001282:	bf00      	nop
 8001284:	3728      	adds	r7, #40	; 0x28
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40016000 	.word	0x40016000
 8001290:	40021000 	.word	0x40021000
 8001294:	48000400 	.word	0x48000400
 8001298:	20000430 	.word	0x20000430
 800129c:	40020430 	.word	0x40020430

080012a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a6:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <HAL_MspInit+0x44>)
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	4a0e      	ldr	r2, [pc, #56]	; (80012e4 <HAL_MspInit+0x44>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6193      	str	r3, [r2, #24]
 80012b2:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <HAL_MspInit+0x44>)
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012be:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <HAL_MspInit+0x44>)
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	4a08      	ldr	r2, [pc, #32]	; (80012e4 <HAL_MspInit+0x44>)
 80012c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c8:	61d3      	str	r3, [r2, #28]
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HAL_MspInit+0x44>)
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d2:	603b      	str	r3, [r7, #0]
 80012d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40021000 	.word	0x40021000

080012e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08c      	sub	sp, #48	; 0x30
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80012f0:	2300      	movs	r3, #0
 80012f2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80012f4:	2300      	movs	r3, #0
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM19 clock */
  __HAL_RCC_TIM19_CLK_ENABLE();
 80012f8:	4b2e      	ldr	r3, [pc, #184]	; (80013b4 <HAL_InitTick+0xcc>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	4a2d      	ldr	r2, [pc, #180]	; (80013b4 <HAL_InitTick+0xcc>)
 80012fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001302:	6193      	str	r3, [r2, #24]
 8001304:	4b2b      	ldr	r3, [pc, #172]	; (80013b4 <HAL_InitTick+0xcc>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001310:	f107 020c 	add.w	r2, r7, #12
 8001314:	f107 0310 	add.w	r3, r7, #16
 8001318:	4611      	mov	r1, r2
 800131a:	4618      	mov	r0, r3
 800131c:	f002 f884 	bl	8003428 <HAL_RCC_GetClockConfig>

  /* Compute TIM19 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001320:	f002 f860 	bl	80033e4 <HAL_RCC_GetPCLK2Freq>
 8001324:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM19 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001328:	4a23      	ldr	r2, [pc, #140]	; (80013b8 <HAL_InitTick+0xd0>)
 800132a:	fba2 2303 	umull	r2, r3, r2, r3
 800132e:	0c9b      	lsrs	r3, r3, #18
 8001330:	3b01      	subs	r3, #1
 8001332:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM19 */
  htim19.Instance = TIM19;
 8001334:	4b21      	ldr	r3, [pc, #132]	; (80013bc <HAL_InitTick+0xd4>)
 8001336:	4a22      	ldr	r2, [pc, #136]	; (80013c0 <HAL_InitTick+0xd8>)
 8001338:	601a      	str	r2, [r3, #0]
  + Period = [(TIM19CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim19.Init.Period = (1000000U / 1000U) - 1U;
 800133a:	4b20      	ldr	r3, [pc, #128]	; (80013bc <HAL_InitTick+0xd4>)
 800133c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001340:	60da      	str	r2, [r3, #12]
  htim19.Init.Prescaler = uwPrescalerValue;
 8001342:	4a1e      	ldr	r2, [pc, #120]	; (80013bc <HAL_InitTick+0xd4>)
 8001344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001346:	6053      	str	r3, [r2, #4]
  htim19.Init.ClockDivision = 0;
 8001348:	4b1c      	ldr	r3, [pc, #112]	; (80013bc <HAL_InitTick+0xd4>)
 800134a:	2200      	movs	r2, #0
 800134c:	611a      	str	r2, [r3, #16]
  htim19.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134e:	4b1b      	ldr	r3, [pc, #108]	; (80013bc <HAL_InitTick+0xd4>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
  htim19.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001354:	4b19      	ldr	r3, [pc, #100]	; (80013bc <HAL_InitTick+0xd4>)
 8001356:	2200      	movs	r2, #0
 8001358:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim19);
 800135a:	4818      	ldr	r0, [pc, #96]	; (80013bc <HAL_InitTick+0xd4>)
 800135c:	f002 fd7a 	bl	8003e54 <HAL_TIM_Base_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001366:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800136a:	2b00      	cmp	r3, #0
 800136c:	d11b      	bne.n	80013a6 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim19);
 800136e:	4813      	ldr	r0, [pc, #76]	; (80013bc <HAL_InitTick+0xd4>)
 8001370:	f002 fdca 	bl	8003f08 <HAL_TIM_Base_Start_IT>
 8001374:	4603      	mov	r3, r0
 8001376:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800137a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800137e:	2b00      	cmp	r3, #0
 8001380:	d111      	bne.n	80013a6 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM19 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM19_IRQn);
 8001382:	204e      	movs	r0, #78	; 0x4e
 8001384:	f000 fb0e 	bl	80019a4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b0f      	cmp	r3, #15
 800138c:	d808      	bhi.n	80013a0 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM19_IRQn, TickPriority, 0U);
 800138e:	2200      	movs	r2, #0
 8001390:	6879      	ldr	r1, [r7, #4]
 8001392:	204e      	movs	r0, #78	; 0x4e
 8001394:	f000 faea 	bl	800196c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001398:	4a0a      	ldr	r2, [pc, #40]	; (80013c4 <HAL_InitTick+0xdc>)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6013      	str	r3, [r2, #0]
 800139e:	e002      	b.n	80013a6 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80013a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3730      	adds	r7, #48	; 0x30
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40021000 	.word	0x40021000
 80013b8:	431bde83 	.word	0x431bde83
 80013bc:	20000474 	.word	0x20000474
 80013c0:	40015c00 	.word	0x40015c00
 80013c4:	200000fc 	.word	0x200000fc

080013c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013cc:	e7fe      	b.n	80013cc <NMI_Handler+0x4>

080013ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d2:	e7fe      	b.n	80013d2 <HardFault_Handler+0x4>

080013d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <MemManage_Handler+0x4>

080013da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013de:	e7fe      	b.n	80013de <BusFault_Handler+0x4>

080013e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <UsageFault_Handler+0x4>

080013e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
	...

08001420 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdadc1);
 8001424:	4802      	ldr	r0, [pc, #8]	; (8001430 <DMA2_Channel3_IRQHandler+0x10>)
 8001426:	f000 fb12 	bl	8001a4e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000430 	.word	0x20000430

08001434 <SDADC1_IRQHandler>:

/**
  * @brief This function handles SDADC1 global interrupt.
  */
void SDADC1_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDADC1_IRQn 0 */

  /* USER CODE END SDADC1_IRQn 0 */
  HAL_SDADC_IRQHandler(&hsdadc1);
 8001438:	4802      	ldr	r0, [pc, #8]	; (8001444 <SDADC1_IRQHandler+0x10>)
 800143a:	f002 fba1 	bl	8003b80 <HAL_SDADC_IRQHandler>
  /* USER CODE BEGIN SDADC1_IRQn 1 */

  /* USER CODE END SDADC1_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200003ec 	.word	0x200003ec

08001448 <TIM19_IRQHandler>:

/**
  * @brief This function handles TIM19 global interrupt.
  */
void TIM19_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM19_IRQn 0 */

  /* USER CODE END TIM19_IRQn 0 */
  HAL_TIM_IRQHandler(&htim19);
 800144c:	4802      	ldr	r0, [pc, #8]	; (8001458 <TIM19_IRQHandler+0x10>)
 800144e:	f002 fdc3 	bl	8003fd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM19_IRQn 1 */

  /* USER CODE END TIM19_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000474 	.word	0x20000474

0800145c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return 1;
 8001460:	2301      	movs	r3, #1
}
 8001462:	4618      	mov	r0, r3
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <_kill>:

int _kill(int pid, int sig)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001476:	f004 fa19 	bl	80058ac <__errno>
 800147a:	4603      	mov	r3, r0
 800147c:	2216      	movs	r2, #22
 800147e:	601a      	str	r2, [r3, #0]
  return -1;
 8001480:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001484:	4618      	mov	r0, r3
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <_exit>:

void _exit (int status)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001494:	f04f 31ff 	mov.w	r1, #4294967295
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff ffe7 	bl	800146c <_kill>
  while (1) {}    /* Make sure we hang here */
 800149e:	e7fe      	b.n	800149e <_exit+0x12>

080014a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	e00a      	b.n	80014c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014b2:	f3af 8000 	nop.w
 80014b6:	4601      	mov	r1, r0
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	60ba      	str	r2, [r7, #8]
 80014be:	b2ca      	uxtb	r2, r1
 80014c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	3301      	adds	r3, #1
 80014c6:	617b      	str	r3, [r7, #20]
 80014c8:	697a      	ldr	r2, [r7, #20]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	dbf0      	blt.n	80014b2 <_read+0x12>
  }

  return len;
 80014d0:	687b      	ldr	r3, [r7, #4]
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b086      	sub	sp, #24
 80014de:	af00      	add	r7, sp, #0
 80014e0:	60f8      	str	r0, [r7, #12]
 80014e2:	60b9      	str	r1, [r7, #8]
 80014e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
 80014ea:	e009      	b.n	8001500 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	1c5a      	adds	r2, r3, #1
 80014f0:	60ba      	str	r2, [r7, #8]
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	3301      	adds	r3, #1
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	697a      	ldr	r2, [r7, #20]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	429a      	cmp	r2, r3
 8001506:	dbf1      	blt.n	80014ec <_write+0x12>
  }
  return len;
 8001508:	687b      	ldr	r3, [r7, #4]
}
 800150a:	4618      	mov	r0, r3
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <_close>:

int _close(int file)
{
 8001512:	b480      	push	{r7}
 8001514:	b083      	sub	sp, #12
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800151a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800151e:	4618      	mov	r0, r3
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800152a:	b480      	push	{r7}
 800152c:	b083      	sub	sp, #12
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
 8001532:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800153a:	605a      	str	r2, [r3, #4]
  return 0;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <_isatty>:

int _isatty(int file)
{
 800154a:	b480      	push	{r7}
 800154c:	b083      	sub	sp, #12
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001552:	2301      	movs	r3, #1
}
 8001554:	4618      	mov	r0, r3
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3714      	adds	r7, #20
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
	...

0800157c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001584:	4a14      	ldr	r2, [pc, #80]	; (80015d8 <_sbrk+0x5c>)
 8001586:	4b15      	ldr	r3, [pc, #84]	; (80015dc <_sbrk+0x60>)
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001590:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <_sbrk+0x64>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d102      	bne.n	800159e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <_sbrk+0x64>)
 800159a:	4a12      	ldr	r2, [pc, #72]	; (80015e4 <_sbrk+0x68>)
 800159c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800159e:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <_sbrk+0x64>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4413      	add	r3, r2
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d207      	bcs.n	80015bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015ac:	f004 f97e 	bl	80058ac <__errno>
 80015b0:	4603      	mov	r3, r0
 80015b2:	220c      	movs	r2, #12
 80015b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015b6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ba:	e009      	b.n	80015d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015bc:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <_sbrk+0x64>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015c2:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <_sbrk+0x64>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4413      	add	r3, r2
 80015ca:	4a05      	ldr	r2, [pc, #20]	; (80015e0 <_sbrk+0x64>)
 80015cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ce:	68fb      	ldr	r3, [r7, #12]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3718      	adds	r7, #24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20008000 	.word	0x20008000
 80015dc:	00000800 	.word	0x00000800
 80015e0:	200004c0 	.word	0x200004c0
 80015e4:	200006a0 	.word	0x200006a0

080015e8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <SystemInit+0x20>)
 80015ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015f2:	4a05      	ldr	r2, [pc, #20]	; (8001608 <SystemInit+0x20>)
 80015f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001610:	4b13      	ldr	r3, [pc, #76]	; (8001660 <MX_USART1_UART_Init+0x54>)
 8001612:	4a14      	ldr	r2, [pc, #80]	; (8001664 <MX_USART1_UART_Init+0x58>)
 8001614:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 8001616:	4b12      	ldr	r3, [pc, #72]	; (8001660 <MX_USART1_UART_Init+0x54>)
 8001618:	4a13      	ldr	r2, [pc, #76]	; (8001668 <MX_USART1_UART_Init+0x5c>)
 800161a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800161c:	4b10      	ldr	r3, [pc, #64]	; (8001660 <MX_USART1_UART_Init+0x54>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001622:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <MX_USART1_UART_Init+0x54>)
 8001624:	2200      	movs	r2, #0
 8001626:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001628:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <MX_USART1_UART_Init+0x54>)
 800162a:	2200      	movs	r2, #0
 800162c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800162e:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <MX_USART1_UART_Init+0x54>)
 8001630:	220c      	movs	r2, #12
 8001632:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001634:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <MX_USART1_UART_Init+0x54>)
 8001636:	2200      	movs	r2, #0
 8001638:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <MX_USART1_UART_Init+0x54>)
 800163c:	2200      	movs	r2, #0
 800163e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001640:	4b07      	ldr	r3, [pc, #28]	; (8001660 <MX_USART1_UART_Init+0x54>)
 8001642:	2200      	movs	r2, #0
 8001644:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001646:	4b06      	ldr	r3, [pc, #24]	; (8001660 <MX_USART1_UART_Init+0x54>)
 8001648:	2200      	movs	r2, #0
 800164a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800164c:	4804      	ldr	r0, [pc, #16]	; (8001660 <MX_USART1_UART_Init+0x54>)
 800164e:	f002 fea1 	bl	8004394 <HAL_UART_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8001658:	f7ff fd4a 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}
 8001660:	200004c4 	.word	0x200004c4
 8001664:	40013800 	.word	0x40013800
 8001668:	001e8480 	.word	0x001e8480

0800166c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08a      	sub	sp, #40	; 0x28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a18      	ldr	r2, [pc, #96]	; (80016ec <HAL_UART_MspInit+0x80>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d129      	bne.n	80016e2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800168e:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <HAL_UART_MspInit+0x84>)
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	4a17      	ldr	r2, [pc, #92]	; (80016f0 <HAL_UART_MspInit+0x84>)
 8001694:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001698:	6193      	str	r3, [r2, #24]
 800169a:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <HAL_UART_MspInit+0x84>)
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a6:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <HAL_UART_MspInit+0x84>)
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	4a11      	ldr	r2, [pc, #68]	; (80016f0 <HAL_UART_MspInit+0x84>)
 80016ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b0:	6153      	str	r3, [r2, #20]
 80016b2:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <HAL_UART_MspInit+0x84>)
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016be:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c4:	2302      	movs	r3, #2
 80016c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016cc:	2303      	movs	r3, #3
 80016ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016d0:	2307      	movs	r3, #7
 80016d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	4619      	mov	r1, r3
 80016da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016de:	f000 fa95 	bl	8001c0c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80016e2:	bf00      	nop
 80016e4:	3728      	adds	r7, #40	; 0x28
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40013800 	.word	0x40013800
 80016f0:	40021000 	.word	0x40021000

080016f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80016f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800172c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80016f8:	f7ff ff76 	bl	80015e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016fc:	480c      	ldr	r0, [pc, #48]	; (8001730 <LoopForever+0x6>)
  ldr r1, =_edata
 80016fe:	490d      	ldr	r1, [pc, #52]	; (8001734 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001700:	4a0d      	ldr	r2, [pc, #52]	; (8001738 <LoopForever+0xe>)
  movs r3, #0
 8001702:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001704:	e002      	b.n	800170c <LoopCopyDataInit>

08001706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800170a:	3304      	adds	r3, #4

0800170c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800170c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800170e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001710:	d3f9      	bcc.n	8001706 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001712:	4a0a      	ldr	r2, [pc, #40]	; (800173c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001714:	4c0a      	ldr	r4, [pc, #40]	; (8001740 <LoopForever+0x16>)
  movs r3, #0
 8001716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001718:	e001      	b.n	800171e <LoopFillZerobss>

0800171a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800171a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800171c:	3204      	adds	r2, #4

0800171e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800171e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001720:	d3fb      	bcc.n	800171a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001722:	f004 f8c9 	bl	80058b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001726:	f7ff fc51 	bl	8000fcc <main>

0800172a <LoopForever>:

LoopForever:
    b LoopForever
 800172a:	e7fe      	b.n	800172a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800172c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001730:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001734:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 8001738:	08007e4c 	.word	0x08007e4c
  ldr r2, =_sbss
 800173c:	200002cc 	.word	0x200002cc
  ldr r4, =_ebss
 8001740:	2000069c 	.word	0x2000069c

08001744 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001744:	e7fe      	b.n	8001744 <ADC1_IRQHandler>
	...

08001748 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800174c:	4b08      	ldr	r3, [pc, #32]	; (8001770 <HAL_Init+0x28>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a07      	ldr	r2, [pc, #28]	; (8001770 <HAL_Init+0x28>)
 8001752:	f043 0310 	orr.w	r3, r3, #16
 8001756:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001758:	2003      	movs	r0, #3
 800175a:	f000 f8fc 	bl	8001956 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800175e:	200f      	movs	r0, #15
 8001760:	f7ff fdc2 	bl	80012e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001764:	f7ff fd9c 	bl	80012a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40022000 	.word	0x40022000

08001774 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <HAL_IncTick+0x20>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	461a      	mov	r2, r3
 800177e:	4b06      	ldr	r3, [pc, #24]	; (8001798 <HAL_IncTick+0x24>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4413      	add	r3, r2
 8001784:	4a04      	ldr	r2, [pc, #16]	; (8001798 <HAL_IncTick+0x24>)
 8001786:	6013      	str	r3, [r2, #0]
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	20000100 	.word	0x20000100
 8001798:	2000054c 	.word	0x2000054c

0800179c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  return uwTick;  
 80017a0:	4b03      	ldr	r3, [pc, #12]	; (80017b0 <HAL_GetTick+0x14>)
 80017a2:	681b      	ldr	r3, [r3, #0]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	2000054c 	.word	0x2000054c

080017b4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017bc:	f7ff ffee 	bl	800179c <HAL_GetTick>
 80017c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017cc:	d005      	beq.n	80017da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ce:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <HAL_Delay+0x44>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	461a      	mov	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	4413      	add	r3, r2
 80017d8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80017da:	bf00      	nop
 80017dc:	f7ff ffde 	bl	800179c <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d8f7      	bhi.n	80017dc <HAL_Delay+0x28>
  {
  }
}
 80017ec:	bf00      	nop
 80017ee:	bf00      	nop
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000100 	.word	0x20000100

080017fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800180c:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <__NVIC_SetPriorityGrouping+0x44>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001818:	4013      	ands	r3, r2
 800181a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001824:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800182c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800182e:	4a04      	ldr	r2, [pc, #16]	; (8001840 <__NVIC_SetPriorityGrouping+0x44>)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	60d3      	str	r3, [r2, #12]
}
 8001834:	bf00      	nop
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001848:	4b04      	ldr	r3, [pc, #16]	; (800185c <__NVIC_GetPriorityGrouping+0x18>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	0a1b      	lsrs	r3, r3, #8
 800184e:	f003 0307 	and.w	r3, r3, #7
}
 8001852:	4618      	mov	r0, r3
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	2b00      	cmp	r3, #0
 8001870:	db0b      	blt.n	800188a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	f003 021f 	and.w	r2, r3, #31
 8001878:	4907      	ldr	r1, [pc, #28]	; (8001898 <__NVIC_EnableIRQ+0x38>)
 800187a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187e:	095b      	lsrs	r3, r3, #5
 8001880:	2001      	movs	r0, #1
 8001882:	fa00 f202 	lsl.w	r2, r0, r2
 8001886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	e000e100 	.word	0xe000e100

0800189c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	6039      	str	r1, [r7, #0]
 80018a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	db0a      	blt.n	80018c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	b2da      	uxtb	r2, r3
 80018b4:	490c      	ldr	r1, [pc, #48]	; (80018e8 <__NVIC_SetPriority+0x4c>)
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	0112      	lsls	r2, r2, #4
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	440b      	add	r3, r1
 80018c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018c4:	e00a      	b.n	80018dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	4908      	ldr	r1, [pc, #32]	; (80018ec <__NVIC_SetPriority+0x50>)
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	f003 030f 	and.w	r3, r3, #15
 80018d2:	3b04      	subs	r3, #4
 80018d4:	0112      	lsls	r2, r2, #4
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	440b      	add	r3, r1
 80018da:	761a      	strb	r2, [r3, #24]
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	e000e100 	.word	0xe000e100
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b089      	sub	sp, #36	; 0x24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	f1c3 0307 	rsb	r3, r3, #7
 800190a:	2b04      	cmp	r3, #4
 800190c:	bf28      	it	cs
 800190e:	2304      	movcs	r3, #4
 8001910:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	3304      	adds	r3, #4
 8001916:	2b06      	cmp	r3, #6
 8001918:	d902      	bls.n	8001920 <NVIC_EncodePriority+0x30>
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	3b03      	subs	r3, #3
 800191e:	e000      	b.n	8001922 <NVIC_EncodePriority+0x32>
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001924:	f04f 32ff 	mov.w	r2, #4294967295
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43da      	mvns	r2, r3
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	401a      	ands	r2, r3
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001938:	f04f 31ff 	mov.w	r1, #4294967295
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	fa01 f303 	lsl.w	r3, r1, r3
 8001942:	43d9      	mvns	r1, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001948:	4313      	orrs	r3, r2
         );
}
 800194a:	4618      	mov	r0, r3
 800194c:	3724      	adds	r7, #36	; 0x24
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff ff4c 	bl	80017fc <__NVIC_SetPriorityGrouping>
}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
 8001978:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800197e:	f7ff ff61 	bl	8001844 <__NVIC_GetPriorityGrouping>
 8001982:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	68b9      	ldr	r1, [r7, #8]
 8001988:	6978      	ldr	r0, [r7, #20]
 800198a:	f7ff ffb1 	bl	80018f0 <NVIC_EncodePriority>
 800198e:	4602      	mov	r2, r0
 8001990:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001994:	4611      	mov	r1, r2
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff ff80 	bl	800189c <__NVIC_SetPriority>
}
 800199c:	bf00      	nop
 800199e:	3718      	adds	r7, #24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff ff54 	bl	8001860 <__NVIC_EnableIRQ>
}
 80019b8:	bf00      	nop
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e037      	b.n	8001a46 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2202      	movs	r2, #2
 80019da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80019ec:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80019f0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80019fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	69db      	ldr	r3, [r3, #28]
 8001a18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68fa      	ldr	r2, [r7, #12]
 8001a26:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f000 f8b3 	bl	8001b94 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}  
 8001a46:	4618      	mov	r0, r3
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b084      	sub	sp, #16
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	2204      	movs	r2, #4
 8001a6c:	409a      	lsls	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	4013      	ands	r3, r2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d024      	beq.n	8001ac0 <HAL_DMA_IRQHandler+0x72>
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d01f      	beq.n	8001ac0 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0320 	and.w	r3, r3, #32
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d107      	bne.n	8001a9e <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 0204 	bic.w	r2, r2, #4
 8001a9c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aa6:	2104      	movs	r1, #4
 8001aa8:	fa01 f202 	lsl.w	r2, r1, r2
 8001aac:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d06a      	beq.n	8001b8c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001abe:	e065      	b.n	8001b8c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	409a      	lsls	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4013      	ands	r3, r2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d02c      	beq.n	8001b2a <HAL_DMA_IRQHandler+0xdc>
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d027      	beq.n	8001b2a <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0320 	and.w	r3, r3, #32
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d10b      	bne.n	8001b00 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 020a 	bic.w	r2, r2, #10
 8001af6:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b08:	2102      	movs	r1, #2
 8001b0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b0e:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d035      	beq.n	8001b8c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001b28:	e030      	b.n	8001b8c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	2208      	movs	r2, #8
 8001b30:	409a      	lsls	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	4013      	ands	r3, r2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d028      	beq.n	8001b8c <HAL_DMA_IRQHandler+0x13e>
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	f003 0308 	and.w	r3, r3, #8
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d023      	beq.n	8001b8c <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 020e 	bic.w	r2, r2, #14
 8001b52:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b62:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d004      	beq.n	8001b8c <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	4798      	blx	r3
    }
  }
}  
 8001b8a:	e7ff      	b.n	8001b8c <HAL_DMA_IRQHandler+0x13e>
 8001b8c:	bf00      	nop
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <DMA_CalcBaseAndBitshift+0x60>)
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d80f      	bhi.n	8001bc8 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	461a      	mov	r2, r3
 8001bae:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <DMA_CalcBaseAndBitshift+0x64>)
 8001bb0:	4413      	add	r3, r2
 8001bb2:	4a12      	ldr	r2, [pc, #72]	; (8001bfc <DMA_CalcBaseAndBitshift+0x68>)
 8001bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb8:	091b      	lsrs	r3, r3, #4
 8001bba:	009a      	lsls	r2, r3, #2
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a0f      	ldr	r2, [pc, #60]	; (8001c00 <DMA_CalcBaseAndBitshift+0x6c>)
 8001bc4:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8001bc6:	e00e      	b.n	8001be6 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <DMA_CalcBaseAndBitshift+0x70>)
 8001bd0:	4413      	add	r3, r2
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <DMA_CalcBaseAndBitshift+0x68>)
 8001bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd8:	091b      	lsrs	r3, r3, #4
 8001bda:	009a      	lsls	r2, r3, #2
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4a09      	ldr	r2, [pc, #36]	; (8001c08 <DMA_CalcBaseAndBitshift+0x74>)
 8001be4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	40020407 	.word	0x40020407
 8001bf8:	bffdfff8 	.word	0xbffdfff8
 8001bfc:	cccccccd 	.word	0xcccccccd
 8001c00:	40020000 	.word	0x40020000
 8001c04:	bffdfbf8 	.word	0xbffdfbf8
 8001c08:	40020400 	.word	0x40020400

08001c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b087      	sub	sp, #28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c1a:	e154      	b.n	8001ec6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	2101      	movs	r1, #1
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	fa01 f303 	lsl.w	r3, r1, r3
 8001c28:	4013      	ands	r3, r2
 8001c2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f000 8146 	beq.w	8001ec0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 0303 	and.w	r3, r3, #3
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d005      	beq.n	8001c4c <HAL_GPIO_Init+0x40>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 0303 	and.w	r3, r3, #3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d130      	bne.n	8001cae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	2203      	movs	r2, #3
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	4013      	ands	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	68da      	ldr	r2, [r3, #12]
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c82:	2201      	movs	r2, #1
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	091b      	lsrs	r3, r3, #4
 8001c98:	f003 0201 	and.w	r2, r3, #1
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f003 0303 	and.w	r3, r3, #3
 8001cb6:	2b03      	cmp	r3, #3
 8001cb8:	d017      	beq.n	8001cea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	689a      	ldr	r2, [r3, #8]
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d123      	bne.n	8001d3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	08da      	lsrs	r2, r3, #3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3208      	adds	r2, #8
 8001cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	220f      	movs	r2, #15
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	43db      	mvns	r3, r3
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	4013      	ands	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	691a      	ldr	r2, [r3, #16]
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	08da      	lsrs	r2, r3, #3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3208      	adds	r2, #8
 8001d38:	6939      	ldr	r1, [r7, #16]
 8001d3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	2203      	movs	r2, #3
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	4013      	ands	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 0203 	and.w	r2, r3, #3
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 80a0 	beq.w	8001ec0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d80:	4b58      	ldr	r3, [pc, #352]	; (8001ee4 <HAL_GPIO_Init+0x2d8>)
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	4a57      	ldr	r2, [pc, #348]	; (8001ee4 <HAL_GPIO_Init+0x2d8>)
 8001d86:	f043 0301 	orr.w	r3, r3, #1
 8001d8a:	6193      	str	r3, [r2, #24]
 8001d8c:	4b55      	ldr	r3, [pc, #340]	; (8001ee4 <HAL_GPIO_Init+0x2d8>)
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	60bb      	str	r3, [r7, #8]
 8001d96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d98:	4a53      	ldr	r2, [pc, #332]	; (8001ee8 <HAL_GPIO_Init+0x2dc>)
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	089b      	lsrs	r3, r3, #2
 8001d9e:	3302      	adds	r3, #2
 8001da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	f003 0303 	and.w	r3, r3, #3
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	220f      	movs	r2, #15
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4013      	ands	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001dc2:	d019      	beq.n	8001df8 <HAL_GPIO_Init+0x1ec>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a49      	ldr	r2, [pc, #292]	; (8001eec <HAL_GPIO_Init+0x2e0>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d013      	beq.n	8001df4 <HAL_GPIO_Init+0x1e8>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a48      	ldr	r2, [pc, #288]	; (8001ef0 <HAL_GPIO_Init+0x2e4>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d00d      	beq.n	8001df0 <HAL_GPIO_Init+0x1e4>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a47      	ldr	r2, [pc, #284]	; (8001ef4 <HAL_GPIO_Init+0x2e8>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d007      	beq.n	8001dec <HAL_GPIO_Init+0x1e0>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a46      	ldr	r2, [pc, #280]	; (8001ef8 <HAL_GPIO_Init+0x2ec>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d101      	bne.n	8001de8 <HAL_GPIO_Init+0x1dc>
 8001de4:	2304      	movs	r3, #4
 8001de6:	e008      	b.n	8001dfa <HAL_GPIO_Init+0x1ee>
 8001de8:	2305      	movs	r3, #5
 8001dea:	e006      	b.n	8001dfa <HAL_GPIO_Init+0x1ee>
 8001dec:	2303      	movs	r3, #3
 8001dee:	e004      	b.n	8001dfa <HAL_GPIO_Init+0x1ee>
 8001df0:	2302      	movs	r3, #2
 8001df2:	e002      	b.n	8001dfa <HAL_GPIO_Init+0x1ee>
 8001df4:	2301      	movs	r3, #1
 8001df6:	e000      	b.n	8001dfa <HAL_GPIO_Init+0x1ee>
 8001df8:	2300      	movs	r3, #0
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	f002 0203 	and.w	r2, r2, #3
 8001e00:	0092      	lsls	r2, r2, #2
 8001e02:	4093      	lsls	r3, r2
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e0a:	4937      	ldr	r1, [pc, #220]	; (8001ee8 <HAL_GPIO_Init+0x2dc>)
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	089b      	lsrs	r3, r3, #2
 8001e10:	3302      	adds	r3, #2
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e18:	4b38      	ldr	r3, [pc, #224]	; (8001efc <HAL_GPIO_Init+0x2f0>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	43db      	mvns	r3, r3
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	4013      	ands	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e3c:	4a2f      	ldr	r2, [pc, #188]	; (8001efc <HAL_GPIO_Init+0x2f0>)
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e42:	4b2e      	ldr	r3, [pc, #184]	; (8001efc <HAL_GPIO_Init+0x2f0>)
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e66:	4a25      	ldr	r2, [pc, #148]	; (8001efc <HAL_GPIO_Init+0x2f0>)
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e6c:	4b23      	ldr	r3, [pc, #140]	; (8001efc <HAL_GPIO_Init+0x2f0>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	43db      	mvns	r3, r3
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d003      	beq.n	8001e90 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e90:	4a1a      	ldr	r2, [pc, #104]	; (8001efc <HAL_GPIO_Init+0x2f0>)
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e96:	4b19      	ldr	r3, [pc, #100]	; (8001efc <HAL_GPIO_Init+0x2f0>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001eba:	4a10      	ldr	r2, [pc, #64]	; (8001efc <HAL_GPIO_Init+0x2f0>)
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f47f aea3 	bne.w	8001c1c <HAL_GPIO_Init+0x10>
  }
}
 8001ed6:	bf00      	nop
 8001ed8:	bf00      	nop
 8001eda:	371c      	adds	r7, #28
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	40010000 	.word	0x40010000
 8001eec:	48000400 	.word	0x48000400
 8001ef0:	48000800 	.word	0x48000800
 8001ef4:	48000c00 	.word	0x48000c00
 8001ef8:	48001000 	.word	0x48001000
 8001efc:	40010400 	.word	0x40010400

08001f00 <HAL_PWREx_EnableSDADC>:
  * @param  Analogx specifies the SDADC peripheral instance.
  *   This parameter can be: PWR_SDADC_ANALOG1, PWR_SDADC_ANALOG2 or PWR_SDADC_ANALOG3.
  * @retval None
  */
void HAL_PWREx_EnableSDADC(uint32_t Analogx)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_SDADC_ANALOG(Analogx));

  /* Enable PWR clock interface for SDADC use */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f08:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <HAL_PWREx_EnableSDADC+0x38>)
 8001f0a:	69db      	ldr	r3, [r3, #28]
 8001f0c:	4a0a      	ldr	r2, [pc, #40]	; (8001f38 <HAL_PWREx_EnableSDADC+0x38>)
 8001f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f12:	61d3      	str	r3, [r2, #28]
 8001f14:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <HAL_PWREx_EnableSDADC+0x38>)
 8001f16:	69db      	ldr	r3, [r3, #28]
 8001f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
    
  PWR->CR |= Analogx;
 8001f20:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <HAL_PWREx_EnableSDADC+0x3c>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	4905      	ldr	r1, [pc, #20]	; (8001f3c <HAL_PWREx_EnableSDADC+0x3c>)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	600b      	str	r3, [r1, #0]
}
 8001f2c:	bf00      	nop
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	40007000 	.word	0x40007000

08001f40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f50:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d102      	bne.n	8001f66 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	f001 b823 	b.w	8002fac <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 817d 	beq.w	8002276 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f7c:	4bbc      	ldr	r3, [pc, #752]	; (8002270 <HAL_RCC_OscConfig+0x330>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f003 030c 	and.w	r3, r3, #12
 8001f84:	2b04      	cmp	r3, #4
 8001f86:	d00c      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f88:	4bb9      	ldr	r3, [pc, #740]	; (8002270 <HAL_RCC_OscConfig+0x330>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 030c 	and.w	r3, r3, #12
 8001f90:	2b08      	cmp	r3, #8
 8001f92:	d15c      	bne.n	800204e <HAL_RCC_OscConfig+0x10e>
 8001f94:	4bb6      	ldr	r3, [pc, #728]	; (8002270 <HAL_RCC_OscConfig+0x330>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fa0:	d155      	bne.n	800204e <HAL_RCC_OscConfig+0x10e>
 8001fa2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fa6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001faa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001fae:	fa93 f3a3 	rbit	r3, r3
 8001fb2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001fb6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fba:	fab3 f383 	clz	r3, r3
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	095b      	lsrs	r3, r3, #5
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d102      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x94>
 8001fce:	4ba8      	ldr	r3, [pc, #672]	; (8002270 <HAL_RCC_OscConfig+0x330>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	e015      	b.n	8002000 <HAL_RCC_OscConfig+0xc0>
 8001fd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fd8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fdc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001fe0:	fa93 f3a3 	rbit	r3, r3
 8001fe4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001fe8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fec:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001ff0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001ff4:	fa93 f3a3 	rbit	r3, r3
 8001ff8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001ffc:	4b9c      	ldr	r3, [pc, #624]	; (8002270 <HAL_RCC_OscConfig+0x330>)
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002000:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002004:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002008:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800200c:	fa92 f2a2 	rbit	r2, r2
 8002010:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002014:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002018:	fab2 f282 	clz	r2, r2
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	f042 0220 	orr.w	r2, r2, #32
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	f002 021f 	and.w	r2, r2, #31
 8002028:	2101      	movs	r1, #1
 800202a:	fa01 f202 	lsl.w	r2, r1, r2
 800202e:	4013      	ands	r3, r2
 8002030:	2b00      	cmp	r3, #0
 8002032:	f000 811f 	beq.w	8002274 <HAL_RCC_OscConfig+0x334>
 8002036:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800203a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	f040 8116 	bne.w	8002274 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	f000 bfaf 	b.w	8002fac <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800204e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002052:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800205e:	d106      	bne.n	800206e <HAL_RCC_OscConfig+0x12e>
 8002060:	4b83      	ldr	r3, [pc, #524]	; (8002270 <HAL_RCC_OscConfig+0x330>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a82      	ldr	r2, [pc, #520]	; (8002270 <HAL_RCC_OscConfig+0x330>)
 8002066:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800206a:	6013      	str	r3, [r2, #0]
 800206c:	e036      	b.n	80020dc <HAL_RCC_OscConfig+0x19c>
 800206e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002072:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10c      	bne.n	8002098 <HAL_RCC_OscConfig+0x158>
 800207e:	4b7c      	ldr	r3, [pc, #496]	; (8002270 <HAL_RCC_OscConfig+0x330>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a7b      	ldr	r2, [pc, #492]	; (8002270 <HAL_RCC_OscConfig+0x330>)
 8002084:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002088:	6013      	str	r3, [r2, #0]
 800208a:	4b79      	ldr	r3, [pc, #484]	; (8002270 <HAL_RCC_OscConfig+0x330>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a78      	ldr	r2, [pc, #480]	; (8002270 <HAL_RCC_OscConfig+0x330>)
 8002090:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002094:	6013      	str	r3, [r2, #0]
 8002096:	e021      	b.n	80020dc <HAL_RCC_OscConfig+0x19c>
 8002098:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800209c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020a8:	d10c      	bne.n	80020c4 <HAL_RCC_OscConfig+0x184>
 80020aa:	4b71      	ldr	r3, [pc, #452]	; (8002270 <HAL_RCC_OscConfig+0x330>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a70      	ldr	r2, [pc, #448]	; (8002270 <HAL_RCC_OscConfig+0x330>)
 80020b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020b4:	6013      	str	r3, [r2, #0]
 80020b6:	4b6e      	ldr	r3, [pc, #440]	; (8002270 <HAL_RCC_OscConfig+0x330>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a6d      	ldr	r2, [pc, #436]	; (8002270 <HAL_RCC_OscConfig+0x330>)
 80020bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	e00b      	b.n	80020dc <HAL_RCC_OscConfig+0x19c>
 80020c4:	4b6a      	ldr	r3, [pc, #424]	; (8002270 <HAL_RCC_OscConfig+0x330>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a69      	ldr	r2, [pc, #420]	; (8002270 <HAL_RCC_OscConfig+0x330>)
 80020ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ce:	6013      	str	r3, [r2, #0]
 80020d0:	4b67      	ldr	r3, [pc, #412]	; (8002270 <HAL_RCC_OscConfig+0x330>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a66      	ldr	r2, [pc, #408]	; (8002270 <HAL_RCC_OscConfig+0x330>)
 80020d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020da:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020dc:	4b64      	ldr	r3, [pc, #400]	; (8002270 <HAL_RCC_OscConfig+0x330>)
 80020de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e0:	f023 020f 	bic.w	r2, r3, #15
 80020e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	495f      	ldr	r1, [pc, #380]	; (8002270 <HAL_RCC_OscConfig+0x330>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d059      	beq.n	80021ba <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002106:	f7ff fb49 	bl	800179c <HAL_GetTick>
 800210a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210e:	e00a      	b.n	8002126 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002110:	f7ff fb44 	bl	800179c <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b64      	cmp	r3, #100	; 0x64
 800211e:	d902      	bls.n	8002126 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	f000 bf43 	b.w	8002fac <HAL_RCC_OscConfig+0x106c>
 8002126:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800212a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002132:	fa93 f3a3 	rbit	r3, r3
 8002136:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800213a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213e:	fab3 f383 	clz	r3, r3
 8002142:	b2db      	uxtb	r3, r3
 8002144:	095b      	lsrs	r3, r3, #5
 8002146:	b2db      	uxtb	r3, r3
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b01      	cmp	r3, #1
 8002150:	d102      	bne.n	8002158 <HAL_RCC_OscConfig+0x218>
 8002152:	4b47      	ldr	r3, [pc, #284]	; (8002270 <HAL_RCC_OscConfig+0x330>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	e015      	b.n	8002184 <HAL_RCC_OscConfig+0x244>
 8002158:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800215c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002160:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002164:	fa93 f3a3 	rbit	r3, r3
 8002168:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800216c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002170:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002174:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002178:	fa93 f3a3 	rbit	r3, r3
 800217c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002180:	4b3b      	ldr	r3, [pc, #236]	; (8002270 <HAL_RCC_OscConfig+0x330>)
 8002182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002184:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002188:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800218c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002190:	fa92 f2a2 	rbit	r2, r2
 8002194:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002198:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800219c:	fab2 f282 	clz	r2, r2
 80021a0:	b2d2      	uxtb	r2, r2
 80021a2:	f042 0220 	orr.w	r2, r2, #32
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	f002 021f 	and.w	r2, r2, #31
 80021ac:	2101      	movs	r1, #1
 80021ae:	fa01 f202 	lsl.w	r2, r1, r2
 80021b2:	4013      	ands	r3, r2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0ab      	beq.n	8002110 <HAL_RCC_OscConfig+0x1d0>
 80021b8:	e05d      	b.n	8002276 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ba:	f7ff faef 	bl	800179c <HAL_GetTick>
 80021be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021c2:	e00a      	b.n	80021da <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021c4:	f7ff faea 	bl	800179c <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b64      	cmp	r3, #100	; 0x64
 80021d2:	d902      	bls.n	80021da <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	f000 bee9 	b.w	8002fac <HAL_RCC_OscConfig+0x106c>
 80021da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021de:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80021e6:	fa93 f3a3 	rbit	r3, r3
 80021ea:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80021ee:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021f2:	fab3 f383 	clz	r3, r3
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	095b      	lsrs	r3, r3, #5
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b01      	cmp	r3, #1
 8002204:	d102      	bne.n	800220c <HAL_RCC_OscConfig+0x2cc>
 8002206:	4b1a      	ldr	r3, [pc, #104]	; (8002270 <HAL_RCC_OscConfig+0x330>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	e015      	b.n	8002238 <HAL_RCC_OscConfig+0x2f8>
 800220c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002210:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002214:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002218:	fa93 f3a3 	rbit	r3, r3
 800221c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002220:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002224:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002228:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800222c:	fa93 f3a3 	rbit	r3, r3
 8002230:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002234:	4b0e      	ldr	r3, [pc, #56]	; (8002270 <HAL_RCC_OscConfig+0x330>)
 8002236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002238:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800223c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002240:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002244:	fa92 f2a2 	rbit	r2, r2
 8002248:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800224c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002250:	fab2 f282 	clz	r2, r2
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	f042 0220 	orr.w	r2, r2, #32
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	f002 021f 	and.w	r2, r2, #31
 8002260:	2101      	movs	r1, #1
 8002262:	fa01 f202 	lsl.w	r2, r1, r2
 8002266:	4013      	ands	r3, r2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1ab      	bne.n	80021c4 <HAL_RCC_OscConfig+0x284>
 800226c:	e003      	b.n	8002276 <HAL_RCC_OscConfig+0x336>
 800226e:	bf00      	nop
 8002270:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002274:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800227a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	f000 817d 	beq.w	8002586 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800228c:	4ba6      	ldr	r3, [pc, #664]	; (8002528 <HAL_RCC_OscConfig+0x5e8>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 030c 	and.w	r3, r3, #12
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00b      	beq.n	80022b0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002298:	4ba3      	ldr	r3, [pc, #652]	; (8002528 <HAL_RCC_OscConfig+0x5e8>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 030c 	and.w	r3, r3, #12
 80022a0:	2b08      	cmp	r3, #8
 80022a2:	d172      	bne.n	800238a <HAL_RCC_OscConfig+0x44a>
 80022a4:	4ba0      	ldr	r3, [pc, #640]	; (8002528 <HAL_RCC_OscConfig+0x5e8>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d16c      	bne.n	800238a <HAL_RCC_OscConfig+0x44a>
 80022b0:	2302      	movs	r3, #2
 80022b2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80022ba:	fa93 f3a3 	rbit	r3, r3
 80022be:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80022c2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022c6:	fab3 f383 	clz	r3, r3
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	095b      	lsrs	r3, r3, #5
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d102      	bne.n	80022e0 <HAL_RCC_OscConfig+0x3a0>
 80022da:	4b93      	ldr	r3, [pc, #588]	; (8002528 <HAL_RCC_OscConfig+0x5e8>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	e013      	b.n	8002308 <HAL_RCC_OscConfig+0x3c8>
 80022e0:	2302      	movs	r3, #2
 80022e2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80022ea:	fa93 f3a3 	rbit	r3, r3
 80022ee:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80022f2:	2302      	movs	r3, #2
 80022f4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80022f8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80022fc:	fa93 f3a3 	rbit	r3, r3
 8002300:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002304:	4b88      	ldr	r3, [pc, #544]	; (8002528 <HAL_RCC_OscConfig+0x5e8>)
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	2202      	movs	r2, #2
 800230a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800230e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002312:	fa92 f2a2 	rbit	r2, r2
 8002316:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800231a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800231e:	fab2 f282 	clz	r2, r2
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	f042 0220 	orr.w	r2, r2, #32
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	f002 021f 	and.w	r2, r2, #31
 800232e:	2101      	movs	r1, #1
 8002330:	fa01 f202 	lsl.w	r2, r1, r2
 8002334:	4013      	ands	r3, r2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00a      	beq.n	8002350 <HAL_RCC_OscConfig+0x410>
 800233a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800233e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d002      	beq.n	8002350 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	f000 be2e 	b.w	8002fac <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002350:	4b75      	ldr	r3, [pc, #468]	; (8002528 <HAL_RCC_OscConfig+0x5e8>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800235c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	21f8      	movs	r1, #248	; 0xf8
 8002366:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800236e:	fa91 f1a1 	rbit	r1, r1
 8002372:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002376:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800237a:	fab1 f181 	clz	r1, r1
 800237e:	b2c9      	uxtb	r1, r1
 8002380:	408b      	lsls	r3, r1
 8002382:	4969      	ldr	r1, [pc, #420]	; (8002528 <HAL_RCC_OscConfig+0x5e8>)
 8002384:	4313      	orrs	r3, r2
 8002386:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002388:	e0fd      	b.n	8002586 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800238a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800238e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	2b00      	cmp	r3, #0
 8002398:	f000 8088 	beq.w	80024ac <HAL_RCC_OscConfig+0x56c>
 800239c:	2301      	movs	r3, #1
 800239e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80023a6:	fa93 f3a3 	rbit	r3, r3
 80023aa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80023ae:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023b2:	fab3 f383 	clz	r3, r3
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	461a      	mov	r2, r3
 80023c4:	2301      	movs	r3, #1
 80023c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c8:	f7ff f9e8 	bl	800179c <HAL_GetTick>
 80023cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d0:	e00a      	b.n	80023e8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023d2:	f7ff f9e3 	bl	800179c <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d902      	bls.n	80023e8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	f000 bde2 	b.w	8002fac <HAL_RCC_OscConfig+0x106c>
 80023e8:	2302      	movs	r3, #2
 80023ea:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ee:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80023f2:	fa93 f3a3 	rbit	r3, r3
 80023f6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80023fa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023fe:	fab3 f383 	clz	r3, r3
 8002402:	b2db      	uxtb	r3, r3
 8002404:	095b      	lsrs	r3, r3, #5
 8002406:	b2db      	uxtb	r3, r3
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b01      	cmp	r3, #1
 8002410:	d102      	bne.n	8002418 <HAL_RCC_OscConfig+0x4d8>
 8002412:	4b45      	ldr	r3, [pc, #276]	; (8002528 <HAL_RCC_OscConfig+0x5e8>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	e013      	b.n	8002440 <HAL_RCC_OscConfig+0x500>
 8002418:	2302      	movs	r3, #2
 800241a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002422:	fa93 f3a3 	rbit	r3, r3
 8002426:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800242a:	2302      	movs	r3, #2
 800242c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002430:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002434:	fa93 f3a3 	rbit	r3, r3
 8002438:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800243c:	4b3a      	ldr	r3, [pc, #232]	; (8002528 <HAL_RCC_OscConfig+0x5e8>)
 800243e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002440:	2202      	movs	r2, #2
 8002442:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002446:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800244a:	fa92 f2a2 	rbit	r2, r2
 800244e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002452:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002456:	fab2 f282 	clz	r2, r2
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	f042 0220 	orr.w	r2, r2, #32
 8002460:	b2d2      	uxtb	r2, r2
 8002462:	f002 021f 	and.w	r2, r2, #31
 8002466:	2101      	movs	r1, #1
 8002468:	fa01 f202 	lsl.w	r2, r1, r2
 800246c:	4013      	ands	r3, r2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d0af      	beq.n	80023d2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002472:	4b2d      	ldr	r3, [pc, #180]	; (8002528 <HAL_RCC_OscConfig+0x5e8>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800247a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800247e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	21f8      	movs	r1, #248	; 0xf8
 8002488:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002490:	fa91 f1a1 	rbit	r1, r1
 8002494:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002498:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800249c:	fab1 f181 	clz	r1, r1
 80024a0:	b2c9      	uxtb	r1, r1
 80024a2:	408b      	lsls	r3, r1
 80024a4:	4920      	ldr	r1, [pc, #128]	; (8002528 <HAL_RCC_OscConfig+0x5e8>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	600b      	str	r3, [r1, #0]
 80024aa:	e06c      	b.n	8002586 <HAL_RCC_OscConfig+0x646>
 80024ac:	2301      	movs	r3, #1
 80024ae:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80024b6:	fa93 f3a3 	rbit	r3, r3
 80024ba:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80024be:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024c2:	fab3 f383 	clz	r3, r3
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	461a      	mov	r2, r3
 80024d4:	2300      	movs	r3, #0
 80024d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d8:	f7ff f960 	bl	800179c <HAL_GetTick>
 80024dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024e0:	e00a      	b.n	80024f8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024e2:	f7ff f95b 	bl	800179c <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d902      	bls.n	80024f8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	f000 bd5a 	b.w	8002fac <HAL_RCC_OscConfig+0x106c>
 80024f8:	2302      	movs	r3, #2
 80024fa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002502:	fa93 f3a3 	rbit	r3, r3
 8002506:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800250a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250e:	fab3 f383 	clz	r3, r3
 8002512:	b2db      	uxtb	r3, r3
 8002514:	095b      	lsrs	r3, r3, #5
 8002516:	b2db      	uxtb	r3, r3
 8002518:	f043 0301 	orr.w	r3, r3, #1
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b01      	cmp	r3, #1
 8002520:	d104      	bne.n	800252c <HAL_RCC_OscConfig+0x5ec>
 8002522:	4b01      	ldr	r3, [pc, #4]	; (8002528 <HAL_RCC_OscConfig+0x5e8>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	e015      	b.n	8002554 <HAL_RCC_OscConfig+0x614>
 8002528:	40021000 	.word	0x40021000
 800252c:	2302      	movs	r3, #2
 800252e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002532:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002536:	fa93 f3a3 	rbit	r3, r3
 800253a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800253e:	2302      	movs	r3, #2
 8002540:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002544:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002548:	fa93 f3a3 	rbit	r3, r3
 800254c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002550:	4bc8      	ldr	r3, [pc, #800]	; (8002874 <HAL_RCC_OscConfig+0x934>)
 8002552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002554:	2202      	movs	r2, #2
 8002556:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800255a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800255e:	fa92 f2a2 	rbit	r2, r2
 8002562:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002566:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800256a:	fab2 f282 	clz	r2, r2
 800256e:	b2d2      	uxtb	r2, r2
 8002570:	f042 0220 	orr.w	r2, r2, #32
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	f002 021f 	and.w	r2, r2, #31
 800257a:	2101      	movs	r1, #1
 800257c:	fa01 f202 	lsl.w	r2, r1, r2
 8002580:	4013      	ands	r3, r2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1ad      	bne.n	80024e2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800258a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0308 	and.w	r3, r3, #8
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 8110 	beq.w	80027bc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800259c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d079      	beq.n	80026a0 <HAL_RCC_OscConfig+0x760>
 80025ac:	2301      	movs	r3, #1
 80025ae:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80025b6:	fa93 f3a3 	rbit	r3, r3
 80025ba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80025be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025c2:	fab3 f383 	clz	r3, r3
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	461a      	mov	r2, r3
 80025ca:	4bab      	ldr	r3, [pc, #684]	; (8002878 <HAL_RCC_OscConfig+0x938>)
 80025cc:	4413      	add	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	461a      	mov	r2, r3
 80025d2:	2301      	movs	r3, #1
 80025d4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025d6:	f7ff f8e1 	bl	800179c <HAL_GetTick>
 80025da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025de:	e00a      	b.n	80025f6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025e0:	f7ff f8dc 	bl	800179c <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d902      	bls.n	80025f6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	f000 bcdb 	b.w	8002fac <HAL_RCC_OscConfig+0x106c>
 80025f6:	2302      	movs	r3, #2
 80025f8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002600:	fa93 f3a3 	rbit	r3, r3
 8002604:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800260c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002610:	2202      	movs	r2, #2
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002618:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	fa93 f2a3 	rbit	r2, r3
 8002622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002626:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002630:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002634:	2202      	movs	r2, #2
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800263c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	fa93 f2a3 	rbit	r2, r3
 8002646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800264a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800264e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002650:	4b88      	ldr	r3, [pc, #544]	; (8002874 <HAL_RCC_OscConfig+0x934>)
 8002652:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002654:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002658:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800265c:	2102      	movs	r1, #2
 800265e:	6019      	str	r1, [r3, #0]
 8002660:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002664:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	fa93 f1a3 	rbit	r1, r3
 800266e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002672:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002676:	6019      	str	r1, [r3, #0]
  return result;
 8002678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800267c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	fab3 f383 	clz	r3, r3
 8002686:	b2db      	uxtb	r3, r3
 8002688:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800268c:	b2db      	uxtb	r3, r3
 800268e:	f003 031f 	and.w	r3, r3, #31
 8002692:	2101      	movs	r1, #1
 8002694:	fa01 f303 	lsl.w	r3, r1, r3
 8002698:	4013      	ands	r3, r2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0a0      	beq.n	80025e0 <HAL_RCC_OscConfig+0x6a0>
 800269e:	e08d      	b.n	80027bc <HAL_RCC_OscConfig+0x87c>
 80026a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80026a8:	2201      	movs	r2, #1
 80026aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	fa93 f2a3 	rbit	r2, r3
 80026ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026be:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80026c2:	601a      	str	r2, [r3, #0]
  return result;
 80026c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80026cc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026ce:	fab3 f383 	clz	r3, r3
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	461a      	mov	r2, r3
 80026d6:	4b68      	ldr	r3, [pc, #416]	; (8002878 <HAL_RCC_OscConfig+0x938>)
 80026d8:	4413      	add	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	461a      	mov	r2, r3
 80026de:	2300      	movs	r3, #0
 80026e0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e2:	f7ff f85b 	bl	800179c <HAL_GetTick>
 80026e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ea:	e00a      	b.n	8002702 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ec:	f7ff f856 	bl	800179c <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d902      	bls.n	8002702 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	f000 bc55 	b.w	8002fac <HAL_RCC_OscConfig+0x106c>
 8002702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002706:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800270a:	2202      	movs	r2, #2
 800270c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002712:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	fa93 f2a3 	rbit	r2, r3
 800271c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002720:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800272a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800272e:	2202      	movs	r2, #2
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002736:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	fa93 f2a3 	rbit	r2, r3
 8002740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002744:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800274e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002752:	2202      	movs	r2, #2
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800275a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	fa93 f2a3 	rbit	r2, r3
 8002764:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002768:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800276c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800276e:	4b41      	ldr	r3, [pc, #260]	; (8002874 <HAL_RCC_OscConfig+0x934>)
 8002770:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002776:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800277a:	2102      	movs	r1, #2
 800277c:	6019      	str	r1, [r3, #0]
 800277e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002782:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	fa93 f1a3 	rbit	r1, r3
 800278c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002790:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002794:	6019      	str	r1, [r3, #0]
  return result;
 8002796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	fab3 f383 	clz	r3, r3
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	f003 031f 	and.w	r3, r3, #31
 80027b0:	2101      	movs	r1, #1
 80027b2:	fa01 f303 	lsl.w	r3, r1, r3
 80027b6:	4013      	ands	r3, r2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d197      	bne.n	80026ec <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 81a1 	beq.w	8002b14 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027d2:	2300      	movs	r3, #0
 80027d4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027d8:	4b26      	ldr	r3, [pc, #152]	; (8002874 <HAL_RCC_OscConfig+0x934>)
 80027da:	69db      	ldr	r3, [r3, #28]
 80027dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d116      	bne.n	8002812 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027e4:	4b23      	ldr	r3, [pc, #140]	; (8002874 <HAL_RCC_OscConfig+0x934>)
 80027e6:	69db      	ldr	r3, [r3, #28]
 80027e8:	4a22      	ldr	r2, [pc, #136]	; (8002874 <HAL_RCC_OscConfig+0x934>)
 80027ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ee:	61d3      	str	r3, [r2, #28]
 80027f0:	4b20      	ldr	r3, [pc, #128]	; (8002874 <HAL_RCC_OscConfig+0x934>)
 80027f2:	69db      	ldr	r3, [r3, #28]
 80027f4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80027f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027fc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002800:	601a      	str	r2, [r3, #0]
 8002802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002806:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800280a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800280c:	2301      	movs	r3, #1
 800280e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002812:	4b1a      	ldr	r3, [pc, #104]	; (800287c <HAL_RCC_OscConfig+0x93c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281a:	2b00      	cmp	r3, #0
 800281c:	d11a      	bne.n	8002854 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800281e:	4b17      	ldr	r3, [pc, #92]	; (800287c <HAL_RCC_OscConfig+0x93c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a16      	ldr	r2, [pc, #88]	; (800287c <HAL_RCC_OscConfig+0x93c>)
 8002824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002828:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800282a:	f7fe ffb7 	bl	800179c <HAL_GetTick>
 800282e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002832:	e009      	b.n	8002848 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002834:	f7fe ffb2 	bl	800179c <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b64      	cmp	r3, #100	; 0x64
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e3b1      	b.n	8002fac <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002848:	4b0c      	ldr	r3, [pc, #48]	; (800287c <HAL_RCC_OscConfig+0x93c>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0ef      	beq.n	8002834 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002854:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002858:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d10d      	bne.n	8002880 <HAL_RCC_OscConfig+0x940>
 8002864:	4b03      	ldr	r3, [pc, #12]	; (8002874 <HAL_RCC_OscConfig+0x934>)
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	4a02      	ldr	r2, [pc, #8]	; (8002874 <HAL_RCC_OscConfig+0x934>)
 800286a:	f043 0301 	orr.w	r3, r3, #1
 800286e:	6213      	str	r3, [r2, #32]
 8002870:	e03c      	b.n	80028ec <HAL_RCC_OscConfig+0x9ac>
 8002872:	bf00      	nop
 8002874:	40021000 	.word	0x40021000
 8002878:	10908120 	.word	0x10908120
 800287c:	40007000 	.word	0x40007000
 8002880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002884:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10c      	bne.n	80028aa <HAL_RCC_OscConfig+0x96a>
 8002890:	4bc1      	ldr	r3, [pc, #772]	; (8002b98 <HAL_RCC_OscConfig+0xc58>)
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	4ac0      	ldr	r2, [pc, #768]	; (8002b98 <HAL_RCC_OscConfig+0xc58>)
 8002896:	f023 0301 	bic.w	r3, r3, #1
 800289a:	6213      	str	r3, [r2, #32]
 800289c:	4bbe      	ldr	r3, [pc, #760]	; (8002b98 <HAL_RCC_OscConfig+0xc58>)
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	4abd      	ldr	r2, [pc, #756]	; (8002b98 <HAL_RCC_OscConfig+0xc58>)
 80028a2:	f023 0304 	bic.w	r3, r3, #4
 80028a6:	6213      	str	r3, [r2, #32]
 80028a8:	e020      	b.n	80028ec <HAL_RCC_OscConfig+0x9ac>
 80028aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	2b05      	cmp	r3, #5
 80028b8:	d10c      	bne.n	80028d4 <HAL_RCC_OscConfig+0x994>
 80028ba:	4bb7      	ldr	r3, [pc, #732]	; (8002b98 <HAL_RCC_OscConfig+0xc58>)
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	4ab6      	ldr	r2, [pc, #728]	; (8002b98 <HAL_RCC_OscConfig+0xc58>)
 80028c0:	f043 0304 	orr.w	r3, r3, #4
 80028c4:	6213      	str	r3, [r2, #32]
 80028c6:	4bb4      	ldr	r3, [pc, #720]	; (8002b98 <HAL_RCC_OscConfig+0xc58>)
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	4ab3      	ldr	r2, [pc, #716]	; (8002b98 <HAL_RCC_OscConfig+0xc58>)
 80028cc:	f043 0301 	orr.w	r3, r3, #1
 80028d0:	6213      	str	r3, [r2, #32]
 80028d2:	e00b      	b.n	80028ec <HAL_RCC_OscConfig+0x9ac>
 80028d4:	4bb0      	ldr	r3, [pc, #704]	; (8002b98 <HAL_RCC_OscConfig+0xc58>)
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	4aaf      	ldr	r2, [pc, #700]	; (8002b98 <HAL_RCC_OscConfig+0xc58>)
 80028da:	f023 0301 	bic.w	r3, r3, #1
 80028de:	6213      	str	r3, [r2, #32]
 80028e0:	4bad      	ldr	r3, [pc, #692]	; (8002b98 <HAL_RCC_OscConfig+0xc58>)
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	4aac      	ldr	r2, [pc, #688]	; (8002b98 <HAL_RCC_OscConfig+0xc58>)
 80028e6:	f023 0304 	bic.w	r3, r3, #4
 80028ea:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 8081 	beq.w	8002a00 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028fe:	f7fe ff4d 	bl	800179c <HAL_GetTick>
 8002902:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002906:	e00b      	b.n	8002920 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002908:	f7fe ff48 	bl	800179c <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	f241 3288 	movw	r2, #5000	; 0x1388
 8002918:	4293      	cmp	r3, r2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e345      	b.n	8002fac <HAL_RCC_OscConfig+0x106c>
 8002920:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002924:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002928:	2202      	movs	r2, #2
 800292a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002930:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	fa93 f2a3 	rbit	r2, r3
 800293a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800293e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002948:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800294c:	2202      	movs	r2, #2
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002954:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	fa93 f2a3 	rbit	r2, r3
 800295e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002962:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002966:	601a      	str	r2, [r3, #0]
  return result;
 8002968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800296c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002970:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002972:	fab3 f383 	clz	r3, r3
 8002976:	b2db      	uxtb	r3, r3
 8002978:	095b      	lsrs	r3, r3, #5
 800297a:	b2db      	uxtb	r3, r3
 800297c:	f043 0302 	orr.w	r3, r3, #2
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d102      	bne.n	800298c <HAL_RCC_OscConfig+0xa4c>
 8002986:	4b84      	ldr	r3, [pc, #528]	; (8002b98 <HAL_RCC_OscConfig+0xc58>)
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	e013      	b.n	80029b4 <HAL_RCC_OscConfig+0xa74>
 800298c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002990:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002994:	2202      	movs	r2, #2
 8002996:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800299c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	fa93 f2a3 	rbit	r2, r3
 80029a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029aa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	4b79      	ldr	r3, [pc, #484]	; (8002b98 <HAL_RCC_OscConfig+0xc58>)
 80029b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029b8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80029bc:	2102      	movs	r1, #2
 80029be:	6011      	str	r1, [r2, #0]
 80029c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029c4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80029c8:	6812      	ldr	r2, [r2, #0]
 80029ca:	fa92 f1a2 	rbit	r1, r2
 80029ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029d2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80029d6:	6011      	str	r1, [r2, #0]
  return result;
 80029d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80029dc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80029e0:	6812      	ldr	r2, [r2, #0]
 80029e2:	fab2 f282 	clz	r2, r2
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	f002 021f 	and.w	r2, r2, #31
 80029f2:	2101      	movs	r1, #1
 80029f4:	fa01 f202 	lsl.w	r2, r1, r2
 80029f8:	4013      	ands	r3, r2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d084      	beq.n	8002908 <HAL_RCC_OscConfig+0x9c8>
 80029fe:	e07f      	b.n	8002b00 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a00:	f7fe fecc 	bl	800179c <HAL_GetTick>
 8002a04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a08:	e00b      	b.n	8002a22 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a0a:	f7fe fec7 	bl	800179c <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e2c4      	b.n	8002fac <HAL_RCC_OscConfig+0x106c>
 8002a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a26:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a32:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	fa93 f2a3 	rbit	r2, r3
 8002a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a40:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a4a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002a4e:	2202      	movs	r2, #2
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a56:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	fa93 f2a3 	rbit	r2, r3
 8002a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a64:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002a68:	601a      	str	r2, [r3, #0]
  return result;
 8002a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a6e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002a72:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a74:	fab3 f383 	clz	r3, r3
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	095b      	lsrs	r3, r3, #5
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	f043 0302 	orr.w	r3, r3, #2
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d102      	bne.n	8002a8e <HAL_RCC_OscConfig+0xb4e>
 8002a88:	4b43      	ldr	r3, [pc, #268]	; (8002b98 <HAL_RCC_OscConfig+0xc58>)
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	e013      	b.n	8002ab6 <HAL_RCC_OscConfig+0xb76>
 8002a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a92:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002a96:	2202      	movs	r2, #2
 8002a98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a9e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	fa93 f2a3 	rbit	r2, r3
 8002aa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aac:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	4b39      	ldr	r3, [pc, #228]	; (8002b98 <HAL_RCC_OscConfig+0xc58>)
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002aba:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002abe:	2102      	movs	r1, #2
 8002ac0:	6011      	str	r1, [r2, #0]
 8002ac2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ac6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002aca:	6812      	ldr	r2, [r2, #0]
 8002acc:	fa92 f1a2 	rbit	r1, r2
 8002ad0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ad4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002ad8:	6011      	str	r1, [r2, #0]
  return result;
 8002ada:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ade:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002ae2:	6812      	ldr	r2, [r2, #0]
 8002ae4:	fab2 f282 	clz	r2, r2
 8002ae8:	b2d2      	uxtb	r2, r2
 8002aea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	f002 021f 	and.w	r2, r2, #31
 8002af4:	2101      	movs	r1, #1
 8002af6:	fa01 f202 	lsl.w	r2, r1, r2
 8002afa:	4013      	ands	r3, r2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d184      	bne.n	8002a0a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b00:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d105      	bne.n	8002b14 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b08:	4b23      	ldr	r3, [pc, #140]	; (8002b98 <HAL_RCC_OscConfig+0xc58>)
 8002b0a:	69db      	ldr	r3, [r3, #28]
 8002b0c:	4a22      	ldr	r2, [pc, #136]	; (8002b98 <HAL_RCC_OscConfig+0xc58>)
 8002b0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b12:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b18:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	69db      	ldr	r3, [r3, #28]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 8242 	beq.w	8002faa <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b26:	4b1c      	ldr	r3, [pc, #112]	; (8002b98 <HAL_RCC_OscConfig+0xc58>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f003 030c 	and.w	r3, r3, #12
 8002b2e:	2b08      	cmp	r3, #8
 8002b30:	f000 8213 	beq.w	8002f5a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	f040 8162 	bne.w	8002e0a <HAL_RCC_OscConfig+0xeca>
 8002b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b4a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002b4e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b58:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	fa93 f2a3 	rbit	r2, r3
 8002b62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b66:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002b6a:	601a      	str	r2, [r3, #0]
  return result;
 8002b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b70:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002b74:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b76:	fab3 f383 	clz	r3, r3
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b80:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	461a      	mov	r2, r3
 8002b88:	2300      	movs	r3, #0
 8002b8a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8c:	f7fe fe06 	bl	800179c <HAL_GetTick>
 8002b90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b94:	e00c      	b.n	8002bb0 <HAL_RCC_OscConfig+0xc70>
 8002b96:	bf00      	nop
 8002b98:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b9c:	f7fe fdfe 	bl	800179c <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e1fd      	b.n	8002fac <HAL_RCC_OscConfig+0x106c>
 8002bb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002bb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	fa93 f2a3 	rbit	r2, r3
 8002bcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002bd4:	601a      	str	r2, [r3, #0]
  return result;
 8002bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bda:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002bde:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002be0:	fab3 f383 	clz	r3, r3
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	095b      	lsrs	r3, r3, #5
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	f043 0301 	orr.w	r3, r3, #1
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d102      	bne.n	8002bfa <HAL_RCC_OscConfig+0xcba>
 8002bf4:	4bb0      	ldr	r3, [pc, #704]	; (8002eb8 <HAL_RCC_OscConfig+0xf78>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	e027      	b.n	8002c4a <HAL_RCC_OscConfig+0xd0a>
 8002bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bfe:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002c02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c0c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	fa93 f2a3 	rbit	r2, r3
 8002c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c1a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c24:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002c28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c32:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	fa93 f2a3 	rbit	r2, r3
 8002c3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c40:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	4b9c      	ldr	r3, [pc, #624]	; (8002eb8 <HAL_RCC_OscConfig+0xf78>)
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c4e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002c52:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c56:	6011      	str	r1, [r2, #0]
 8002c58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c5c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002c60:	6812      	ldr	r2, [r2, #0]
 8002c62:	fa92 f1a2 	rbit	r1, r2
 8002c66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c6a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002c6e:	6011      	str	r1, [r2, #0]
  return result;
 8002c70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c74:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002c78:	6812      	ldr	r2, [r2, #0]
 8002c7a:	fab2 f282 	clz	r2, r2
 8002c7e:	b2d2      	uxtb	r2, r2
 8002c80:	f042 0220 	orr.w	r2, r2, #32
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	f002 021f 	and.w	r2, r2, #31
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c90:	4013      	ands	r3, r2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d182      	bne.n	8002b9c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c96:	4b88      	ldr	r3, [pc, #544]	; (8002eb8 <HAL_RCC_OscConfig+0xf78>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	430b      	orrs	r3, r1
 8002cb8:	497f      	ldr	r1, [pc, #508]	; (8002eb8 <HAL_RCC_OscConfig+0xf78>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	604b      	str	r3, [r1, #4]
 8002cbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002cc6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002cca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ccc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	fa93 f2a3 	rbit	r2, r3
 8002cda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cde:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002ce2:	601a      	str	r2, [r3, #0]
  return result;
 8002ce4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002cec:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cee:	fab3 f383 	clz	r3, r3
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cf8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	461a      	mov	r2, r3
 8002d00:	2301      	movs	r3, #1
 8002d02:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d04:	f7fe fd4a 	bl	800179c <HAL_GetTick>
 8002d08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d0c:	e009      	b.n	8002d22 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d0e:	f7fe fd45 	bl	800179c <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e144      	b.n	8002fac <HAL_RCC_OscConfig+0x106c>
 8002d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d26:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002d2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d34:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	fa93 f2a3 	rbit	r2, r3
 8002d3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d42:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002d46:	601a      	str	r2, [r3, #0]
  return result;
 8002d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d4c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002d50:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d52:	fab3 f383 	clz	r3, r3
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	095b      	lsrs	r3, r3, #5
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	f043 0301 	orr.w	r3, r3, #1
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d102      	bne.n	8002d6c <HAL_RCC_OscConfig+0xe2c>
 8002d66:	4b54      	ldr	r3, [pc, #336]	; (8002eb8 <HAL_RCC_OscConfig+0xf78>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	e027      	b.n	8002dbc <HAL_RCC_OscConfig+0xe7c>
 8002d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d70:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002d74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d7e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	fa93 f2a3 	rbit	r2, r3
 8002d88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d8c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d96:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002d9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	fa93 f2a3 	rbit	r2, r3
 8002dae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	4b3f      	ldr	r3, [pc, #252]	; (8002eb8 <HAL_RCC_OscConfig+0xf78>)
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002dc0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002dc4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002dc8:	6011      	str	r1, [r2, #0]
 8002dca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002dce:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002dd2:	6812      	ldr	r2, [r2, #0]
 8002dd4:	fa92 f1a2 	rbit	r1, r2
 8002dd8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ddc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002de0:	6011      	str	r1, [r2, #0]
  return result;
 8002de2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002de6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002dea:	6812      	ldr	r2, [r2, #0]
 8002dec:	fab2 f282 	clz	r2, r2
 8002df0:	b2d2      	uxtb	r2, r2
 8002df2:	f042 0220 	orr.w	r2, r2, #32
 8002df6:	b2d2      	uxtb	r2, r2
 8002df8:	f002 021f 	and.w	r2, r2, #31
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8002e02:	4013      	ands	r3, r2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d082      	beq.n	8002d0e <HAL_RCC_OscConfig+0xdce>
 8002e08:	e0cf      	b.n	8002faa <HAL_RCC_OscConfig+0x106a>
 8002e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e0e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002e12:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e1c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	fa93 f2a3 	rbit	r2, r3
 8002e26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e2a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002e2e:	601a      	str	r2, [r3, #0]
  return result;
 8002e30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e34:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002e38:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e3a:	fab3 f383 	clz	r3, r3
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e44:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e50:	f7fe fca4 	bl	800179c <HAL_GetTick>
 8002e54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e58:	e009      	b.n	8002e6e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e5a:	f7fe fc9f 	bl	800179c <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e09e      	b.n	8002fac <HAL_RCC_OscConfig+0x106c>
 8002e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e72:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002e76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e80:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	fa93 f2a3 	rbit	r2, r3
 8002e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e8e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002e92:	601a      	str	r2, [r3, #0]
  return result;
 8002e94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e98:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002e9c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e9e:	fab3 f383 	clz	r3, r3
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	095b      	lsrs	r3, r3, #5
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	f043 0301 	orr.w	r3, r3, #1
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d104      	bne.n	8002ebc <HAL_RCC_OscConfig+0xf7c>
 8002eb2:	4b01      	ldr	r3, [pc, #4]	; (8002eb8 <HAL_RCC_OscConfig+0xf78>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	e029      	b.n	8002f0c <HAL_RCC_OscConfig+0xfcc>
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002ec4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ec8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ece:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	fa93 f2a3 	rbit	r2, r3
 8002ed8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002edc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002ee0:	601a      	str	r2, [r3, #0]
 8002ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002eea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	fa93 f2a3 	rbit	r2, r3
 8002efe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f02:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	4b2b      	ldr	r3, [pc, #172]	; (8002fb8 <HAL_RCC_OscConfig+0x1078>)
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f10:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002f14:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f18:	6011      	str	r1, [r2, #0]
 8002f1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f1e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002f22:	6812      	ldr	r2, [r2, #0]
 8002f24:	fa92 f1a2 	rbit	r1, r2
 8002f28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f2c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002f30:	6011      	str	r1, [r2, #0]
  return result;
 8002f32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f36:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002f3a:	6812      	ldr	r2, [r2, #0]
 8002f3c:	fab2 f282 	clz	r2, r2
 8002f40:	b2d2      	uxtb	r2, r2
 8002f42:	f042 0220 	orr.w	r2, r2, #32
 8002f46:	b2d2      	uxtb	r2, r2
 8002f48:	f002 021f 	and.w	r2, r2, #31
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f52:	4013      	ands	r3, r2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d180      	bne.n	8002e5a <HAL_RCC_OscConfig+0xf1a>
 8002f58:	e027      	b.n	8002faa <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d101      	bne.n	8002f6e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e01e      	b.n	8002fac <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f6e:	4b12      	ldr	r3, [pc, #72]	; (8002fb8 <HAL_RCC_OscConfig+0x1078>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002f76:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002f7a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d10b      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002f8e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002f92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d001      	beq.n	8002faa <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e000      	b.n	8002fac <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	40021000 	.word	0x40021000

08002fbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b09e      	sub	sp, #120	; 0x78
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e162      	b.n	800329a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fd4:	4b90      	ldr	r3, [pc, #576]	; (8003218 <HAL_RCC_ClockConfig+0x25c>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0307 	and.w	r3, r3, #7
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d910      	bls.n	8003004 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe2:	4b8d      	ldr	r3, [pc, #564]	; (8003218 <HAL_RCC_ClockConfig+0x25c>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f023 0207 	bic.w	r2, r3, #7
 8002fea:	498b      	ldr	r1, [pc, #556]	; (8003218 <HAL_RCC_ClockConfig+0x25c>)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff2:	4b89      	ldr	r3, [pc, #548]	; (8003218 <HAL_RCC_ClockConfig+0x25c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d001      	beq.n	8003004 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e14a      	b.n	800329a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d008      	beq.n	8003022 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003010:	4b82      	ldr	r3, [pc, #520]	; (800321c <HAL_RCC_ClockConfig+0x260>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	497f      	ldr	r1, [pc, #508]	; (800321c <HAL_RCC_ClockConfig+0x260>)
 800301e:	4313      	orrs	r3, r2
 8003020:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 80dc 	beq.w	80031e8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d13c      	bne.n	80030b2 <HAL_RCC_ClockConfig+0xf6>
 8003038:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800303c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003040:	fa93 f3a3 	rbit	r3, r3
 8003044:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003048:	fab3 f383 	clz	r3, r3
 800304c:	b2db      	uxtb	r3, r3
 800304e:	095b      	lsrs	r3, r3, #5
 8003050:	b2db      	uxtb	r3, r3
 8003052:	f043 0301 	orr.w	r3, r3, #1
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b01      	cmp	r3, #1
 800305a:	d102      	bne.n	8003062 <HAL_RCC_ClockConfig+0xa6>
 800305c:	4b6f      	ldr	r3, [pc, #444]	; (800321c <HAL_RCC_ClockConfig+0x260>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	e00f      	b.n	8003082 <HAL_RCC_ClockConfig+0xc6>
 8003062:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003066:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003068:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800306a:	fa93 f3a3 	rbit	r3, r3
 800306e:	667b      	str	r3, [r7, #100]	; 0x64
 8003070:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003074:	663b      	str	r3, [r7, #96]	; 0x60
 8003076:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003078:	fa93 f3a3 	rbit	r3, r3
 800307c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800307e:	4b67      	ldr	r3, [pc, #412]	; (800321c <HAL_RCC_ClockConfig+0x260>)
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003086:	65ba      	str	r2, [r7, #88]	; 0x58
 8003088:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800308a:	fa92 f2a2 	rbit	r2, r2
 800308e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003090:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003092:	fab2 f282 	clz	r2, r2
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	f042 0220 	orr.w	r2, r2, #32
 800309c:	b2d2      	uxtb	r2, r2
 800309e:	f002 021f 	and.w	r2, r2, #31
 80030a2:	2101      	movs	r1, #1
 80030a4:	fa01 f202 	lsl.w	r2, r1, r2
 80030a8:	4013      	ands	r3, r2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d17b      	bne.n	80031a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e0f3      	b.n	800329a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d13c      	bne.n	8003134 <HAL_RCC_ClockConfig+0x178>
 80030ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030be:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030c2:	fa93 f3a3 	rbit	r3, r3
 80030c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80030c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ca:	fab3 f383 	clz	r3, r3
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	095b      	lsrs	r3, r3, #5
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	f043 0301 	orr.w	r3, r3, #1
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d102      	bne.n	80030e4 <HAL_RCC_ClockConfig+0x128>
 80030de:	4b4f      	ldr	r3, [pc, #316]	; (800321c <HAL_RCC_ClockConfig+0x260>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	e00f      	b.n	8003104 <HAL_RCC_ClockConfig+0x148>
 80030e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030e8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030ec:	fa93 f3a3 	rbit	r3, r3
 80030f0:	647b      	str	r3, [r7, #68]	; 0x44
 80030f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030f6:	643b      	str	r3, [r7, #64]	; 0x40
 80030f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030fa:	fa93 f3a3 	rbit	r3, r3
 80030fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003100:	4b46      	ldr	r3, [pc, #280]	; (800321c <HAL_RCC_ClockConfig+0x260>)
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003108:	63ba      	str	r2, [r7, #56]	; 0x38
 800310a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800310c:	fa92 f2a2 	rbit	r2, r2
 8003110:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003112:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003114:	fab2 f282 	clz	r2, r2
 8003118:	b2d2      	uxtb	r2, r2
 800311a:	f042 0220 	orr.w	r2, r2, #32
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	f002 021f 	and.w	r2, r2, #31
 8003124:	2101      	movs	r1, #1
 8003126:	fa01 f202 	lsl.w	r2, r1, r2
 800312a:	4013      	ands	r3, r2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d13a      	bne.n	80031a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e0b2      	b.n	800329a <HAL_RCC_ClockConfig+0x2de>
 8003134:	2302      	movs	r3, #2
 8003136:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313a:	fa93 f3a3 	rbit	r3, r3
 800313e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003142:	fab3 f383 	clz	r3, r3
 8003146:	b2db      	uxtb	r3, r3
 8003148:	095b      	lsrs	r3, r3, #5
 800314a:	b2db      	uxtb	r3, r3
 800314c:	f043 0301 	orr.w	r3, r3, #1
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b01      	cmp	r3, #1
 8003154:	d102      	bne.n	800315c <HAL_RCC_ClockConfig+0x1a0>
 8003156:	4b31      	ldr	r3, [pc, #196]	; (800321c <HAL_RCC_ClockConfig+0x260>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	e00d      	b.n	8003178 <HAL_RCC_ClockConfig+0x1bc>
 800315c:	2302      	movs	r3, #2
 800315e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003162:	fa93 f3a3 	rbit	r3, r3
 8003166:	627b      	str	r3, [r7, #36]	; 0x24
 8003168:	2302      	movs	r3, #2
 800316a:	623b      	str	r3, [r7, #32]
 800316c:	6a3b      	ldr	r3, [r7, #32]
 800316e:	fa93 f3a3 	rbit	r3, r3
 8003172:	61fb      	str	r3, [r7, #28]
 8003174:	4b29      	ldr	r3, [pc, #164]	; (800321c <HAL_RCC_ClockConfig+0x260>)
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003178:	2202      	movs	r2, #2
 800317a:	61ba      	str	r2, [r7, #24]
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	fa92 f2a2 	rbit	r2, r2
 8003182:	617a      	str	r2, [r7, #20]
  return result;
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	fab2 f282 	clz	r2, r2
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	f042 0220 	orr.w	r2, r2, #32
 8003190:	b2d2      	uxtb	r2, r2
 8003192:	f002 021f 	and.w	r2, r2, #31
 8003196:	2101      	movs	r1, #1
 8003198:	fa01 f202 	lsl.w	r2, r1, r2
 800319c:	4013      	ands	r3, r2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e079      	b.n	800329a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031a6:	4b1d      	ldr	r3, [pc, #116]	; (800321c <HAL_RCC_ClockConfig+0x260>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f023 0203 	bic.w	r2, r3, #3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	491a      	ldr	r1, [pc, #104]	; (800321c <HAL_RCC_ClockConfig+0x260>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031b8:	f7fe faf0 	bl	800179c <HAL_GetTick>
 80031bc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031be:	e00a      	b.n	80031d6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031c0:	f7fe faec 	bl	800179c <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e061      	b.n	800329a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031d6:	4b11      	ldr	r3, [pc, #68]	; (800321c <HAL_RCC_ClockConfig+0x260>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f003 020c 	and.w	r2, r3, #12
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d1eb      	bne.n	80031c0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031e8:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <HAL_RCC_ClockConfig+0x25c>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d214      	bcs.n	8003220 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f6:	4b08      	ldr	r3, [pc, #32]	; (8003218 <HAL_RCC_ClockConfig+0x25c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f023 0207 	bic.w	r2, r3, #7
 80031fe:	4906      	ldr	r1, [pc, #24]	; (8003218 <HAL_RCC_ClockConfig+0x25c>)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	4313      	orrs	r3, r2
 8003204:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003206:	4b04      	ldr	r3, [pc, #16]	; (8003218 <HAL_RCC_ClockConfig+0x25c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	429a      	cmp	r2, r3
 8003212:	d005      	beq.n	8003220 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e040      	b.n	800329a <HAL_RCC_ClockConfig+0x2de>
 8003218:	40022000 	.word	0x40022000
 800321c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	d008      	beq.n	800323e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800322c:	4b1d      	ldr	r3, [pc, #116]	; (80032a4 <HAL_RCC_ClockConfig+0x2e8>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	491a      	ldr	r1, [pc, #104]	; (80032a4 <HAL_RCC_ClockConfig+0x2e8>)
 800323a:	4313      	orrs	r3, r2
 800323c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	2b00      	cmp	r3, #0
 8003248:	d009      	beq.n	800325e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800324a:	4b16      	ldr	r3, [pc, #88]	; (80032a4 <HAL_RCC_ClockConfig+0x2e8>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	4912      	ldr	r1, [pc, #72]	; (80032a4 <HAL_RCC_ClockConfig+0x2e8>)
 800325a:	4313      	orrs	r3, r2
 800325c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800325e:	f000 f829 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 8003262:	4601      	mov	r1, r0
 8003264:	4b0f      	ldr	r3, [pc, #60]	; (80032a4 <HAL_RCC_ClockConfig+0x2e8>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800326c:	22f0      	movs	r2, #240	; 0xf0
 800326e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	fa92 f2a2 	rbit	r2, r2
 8003276:	60fa      	str	r2, [r7, #12]
  return result;
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	fab2 f282 	clz	r2, r2
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	40d3      	lsrs	r3, r2
 8003282:	4a09      	ldr	r2, [pc, #36]	; (80032a8 <HAL_RCC_ClockConfig+0x2ec>)
 8003284:	5cd3      	ldrb	r3, [r2, r3]
 8003286:	fa21 f303 	lsr.w	r3, r1, r3
 800328a:	4a08      	ldr	r2, [pc, #32]	; (80032ac <HAL_RCC_ClockConfig+0x2f0>)
 800328c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800328e:	4b08      	ldr	r3, [pc, #32]	; (80032b0 <HAL_RCC_ClockConfig+0x2f4>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f7fe f828 	bl	80012e8 <HAL_InitTick>
  
  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3778      	adds	r7, #120	; 0x78
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	40021000 	.word	0x40021000
 80032a8:	08007a98 	.word	0x08007a98
 80032ac:	200000f8 	.word	0x200000f8
 80032b0:	200000fc 	.word	0x200000fc

080032b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b08b      	sub	sp, #44	; 0x2c
 80032b8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	61fb      	str	r3, [r7, #28]
 80032be:	2300      	movs	r3, #0
 80032c0:	61bb      	str	r3, [r7, #24]
 80032c2:	2300      	movs	r3, #0
 80032c4:	627b      	str	r3, [r7, #36]	; 0x24
 80032c6:	2300      	movs	r3, #0
 80032c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80032ca:	2300      	movs	r3, #0
 80032cc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80032ce:	4b29      	ldr	r3, [pc, #164]	; (8003374 <HAL_RCC_GetSysClockFreq+0xc0>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f003 030c 	and.w	r3, r3, #12
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d002      	beq.n	80032e4 <HAL_RCC_GetSysClockFreq+0x30>
 80032de:	2b08      	cmp	r3, #8
 80032e0:	d003      	beq.n	80032ea <HAL_RCC_GetSysClockFreq+0x36>
 80032e2:	e03c      	b.n	800335e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032e4:	4b24      	ldr	r3, [pc, #144]	; (8003378 <HAL_RCC_GetSysClockFreq+0xc4>)
 80032e6:	623b      	str	r3, [r7, #32]
      break;
 80032e8:	e03c      	b.n	8003364 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80032f0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80032f4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	fa92 f2a2 	rbit	r2, r2
 80032fc:	607a      	str	r2, [r7, #4]
  return result;
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	fab2 f282 	clz	r2, r2
 8003304:	b2d2      	uxtb	r2, r2
 8003306:	40d3      	lsrs	r3, r2
 8003308:	4a1c      	ldr	r2, [pc, #112]	; (800337c <HAL_RCC_GetSysClockFreq+0xc8>)
 800330a:	5cd3      	ldrb	r3, [r2, r3]
 800330c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800330e:	4b19      	ldr	r3, [pc, #100]	; (8003374 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003312:	f003 030f 	and.w	r3, r3, #15
 8003316:	220f      	movs	r2, #15
 8003318:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	fa92 f2a2 	rbit	r2, r2
 8003320:	60fa      	str	r2, [r7, #12]
  return result;
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	fab2 f282 	clz	r2, r2
 8003328:	b2d2      	uxtb	r2, r2
 800332a:	40d3      	lsrs	r3, r2
 800332c:	4a14      	ldr	r2, [pc, #80]	; (8003380 <HAL_RCC_GetSysClockFreq+0xcc>)
 800332e:	5cd3      	ldrb	r3, [r2, r3]
 8003330:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d008      	beq.n	800334e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800333c:	4a0e      	ldr	r2, [pc, #56]	; (8003378 <HAL_RCC_GetSysClockFreq+0xc4>)
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	fbb2 f2f3 	udiv	r2, r2, r3
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	fb02 f303 	mul.w	r3, r2, r3
 800334a:	627b      	str	r3, [r7, #36]	; 0x24
 800334c:	e004      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	4a0c      	ldr	r2, [pc, #48]	; (8003384 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003352:	fb02 f303 	mul.w	r3, r2, r3
 8003356:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335a:	623b      	str	r3, [r7, #32]
      break;
 800335c:	e002      	b.n	8003364 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800335e:	4b06      	ldr	r3, [pc, #24]	; (8003378 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003360:	623b      	str	r3, [r7, #32]
      break;
 8003362:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003364:	6a3b      	ldr	r3, [r7, #32]
}
 8003366:	4618      	mov	r0, r3
 8003368:	372c      	adds	r7, #44	; 0x2c
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	40021000 	.word	0x40021000
 8003378:	007a1200 	.word	0x007a1200
 800337c:	08007ab0 	.word	0x08007ab0
 8003380:	08007ac0 	.word	0x08007ac0
 8003384:	003d0900 	.word	0x003d0900

08003388 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800338c:	4b03      	ldr	r3, [pc, #12]	; (800339c <HAL_RCC_GetHCLKFreq+0x14>)
 800338e:	681b      	ldr	r3, [r3, #0]
}
 8003390:	4618      	mov	r0, r3
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	200000f8 	.word	0x200000f8

080033a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80033a6:	f7ff ffef 	bl	8003388 <HAL_RCC_GetHCLKFreq>
 80033aa:	4601      	mov	r1, r0
 80033ac:	4b0b      	ldr	r3, [pc, #44]	; (80033dc <HAL_RCC_GetPCLK1Freq+0x3c>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033b4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80033b8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	fa92 f2a2 	rbit	r2, r2
 80033c0:	603a      	str	r2, [r7, #0]
  return result;
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	fab2 f282 	clz	r2, r2
 80033c8:	b2d2      	uxtb	r2, r2
 80033ca:	40d3      	lsrs	r3, r2
 80033cc:	4a04      	ldr	r2, [pc, #16]	; (80033e0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80033ce:	5cd3      	ldrb	r3, [r2, r3]
 80033d0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80033d4:	4618      	mov	r0, r3
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40021000 	.word	0x40021000
 80033e0:	08007aa8 	.word	0x08007aa8

080033e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80033ea:	f7ff ffcd 	bl	8003388 <HAL_RCC_GetHCLKFreq>
 80033ee:	4601      	mov	r1, r0
 80033f0:	4b0b      	ldr	r3, [pc, #44]	; (8003420 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80033f8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80033fc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	fa92 f2a2 	rbit	r2, r2
 8003404:	603a      	str	r2, [r7, #0]
  return result;
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	fab2 f282 	clz	r2, r2
 800340c:	b2d2      	uxtb	r2, r2
 800340e:	40d3      	lsrs	r3, r2
 8003410:	4a04      	ldr	r2, [pc, #16]	; (8003424 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003412:	5cd3      	ldrb	r3, [r2, r3]
 8003414:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003418:	4618      	mov	r0, r3
 800341a:	3708      	adds	r7, #8
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	40021000 	.word	0x40021000
 8003424:	08007aa8 	.word	0x08007aa8

08003428 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	220f      	movs	r2, #15
 8003436:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003438:	4b12      	ldr	r3, [pc, #72]	; (8003484 <HAL_RCC_GetClockConfig+0x5c>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f003 0203 	and.w	r2, r3, #3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003444:	4b0f      	ldr	r3, [pc, #60]	; (8003484 <HAL_RCC_GetClockConfig+0x5c>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003450:	4b0c      	ldr	r3, [pc, #48]	; (8003484 <HAL_RCC_GetClockConfig+0x5c>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800345c:	4b09      	ldr	r3, [pc, #36]	; (8003484 <HAL_RCC_GetClockConfig+0x5c>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	08db      	lsrs	r3, r3, #3
 8003462:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800346a:	4b07      	ldr	r3, [pc, #28]	; (8003488 <HAL_RCC_GetClockConfig+0x60>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0207 	and.w	r2, r3, #7
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	601a      	str	r2, [r3, #0]
}
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	40021000 	.word	0x40021000
 8003488:	40022000 	.word	0x40022000

0800348c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b092      	sub	sp, #72	; 0x48
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003494:	2300      	movs	r3, #0
 8003496:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003498:	2300      	movs	r3, #0
 800349a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800349c:	2300      	movs	r3, #0
 800349e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f000 80d4 	beq.w	8003658 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034b0:	4b4e      	ldr	r3, [pc, #312]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b2:	69db      	ldr	r3, [r3, #28]
 80034b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10e      	bne.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034bc:	4b4b      	ldr	r3, [pc, #300]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034be:	69db      	ldr	r3, [r3, #28]
 80034c0:	4a4a      	ldr	r2, [pc, #296]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034c6:	61d3      	str	r3, [r2, #28]
 80034c8:	4b48      	ldr	r3, [pc, #288]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ca:	69db      	ldr	r3, [r3, #28]
 80034cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d0:	60bb      	str	r3, [r7, #8]
 80034d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034d4:	2301      	movs	r3, #1
 80034d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034da:	4b45      	ldr	r3, [pc, #276]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d118      	bne.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034e6:	4b42      	ldr	r3, [pc, #264]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a41      	ldr	r2, [pc, #260]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034f0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034f2:	f7fe f953 	bl	800179c <HAL_GetTick>
 80034f6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f8:	e008      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034fa:	f7fe f94f 	bl	800179c <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b64      	cmp	r3, #100	; 0x64
 8003506:	d901      	bls.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e12d      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800350c:	4b38      	ldr	r3, [pc, #224]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0f0      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003518:	4b34      	ldr	r3, [pc, #208]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003520:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 8084 	beq.w	8003632 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003532:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003534:	429a      	cmp	r2, r3
 8003536:	d07c      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003538:	4b2c      	ldr	r3, [pc, #176]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003540:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003542:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003546:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354a:	fa93 f3a3 	rbit	r3, r3
 800354e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003552:	fab3 f383 	clz	r3, r3
 8003556:	b2db      	uxtb	r3, r3
 8003558:	461a      	mov	r2, r3
 800355a:	4b26      	ldr	r3, [pc, #152]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800355c:	4413      	add	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	461a      	mov	r2, r3
 8003562:	2301      	movs	r3, #1
 8003564:	6013      	str	r3, [r2, #0]
 8003566:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800356a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800356e:	fa93 f3a3 	rbit	r3, r3
 8003572:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003576:	fab3 f383 	clz	r3, r3
 800357a:	b2db      	uxtb	r3, r3
 800357c:	461a      	mov	r2, r3
 800357e:	4b1d      	ldr	r3, [pc, #116]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003580:	4413      	add	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	461a      	mov	r2, r3
 8003586:	2300      	movs	r3, #0
 8003588:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800358a:	4a18      	ldr	r2, [pc, #96]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800358c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800358e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d04b      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359a:	f7fe f8ff 	bl	800179c <HAL_GetTick>
 800359e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a0:	e00a      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035a2:	f7fe f8fb 	bl	800179c <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d901      	bls.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e0d7      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 80035b8:	2302      	movs	r3, #2
 80035ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035be:	fa93 f3a3 	rbit	r3, r3
 80035c2:	627b      	str	r3, [r7, #36]	; 0x24
 80035c4:	2302      	movs	r3, #2
 80035c6:	623b      	str	r3, [r7, #32]
 80035c8:	6a3b      	ldr	r3, [r7, #32]
 80035ca:	fa93 f3a3 	rbit	r3, r3
 80035ce:	61fb      	str	r3, [r7, #28]
  return result;
 80035d0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d2:	fab3 f383 	clz	r3, r3
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	095b      	lsrs	r3, r3, #5
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	f043 0302 	orr.w	r3, r3, #2
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d108      	bne.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80035e6:	4b01      	ldr	r3, [pc, #4]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	e00d      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80035ec:	40021000 	.word	0x40021000
 80035f0:	40007000 	.word	0x40007000
 80035f4:	10908100 	.word	0x10908100
 80035f8:	2302      	movs	r3, #2
 80035fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	fa93 f3a3 	rbit	r3, r3
 8003602:	617b      	str	r3, [r7, #20]
 8003604:	4b5a      	ldr	r3, [pc, #360]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003608:	2202      	movs	r2, #2
 800360a:	613a      	str	r2, [r7, #16]
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	fa92 f2a2 	rbit	r2, r2
 8003612:	60fa      	str	r2, [r7, #12]
  return result;
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	fab2 f282 	clz	r2, r2
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003620:	b2d2      	uxtb	r2, r2
 8003622:	f002 021f 	and.w	r2, r2, #31
 8003626:	2101      	movs	r1, #1
 8003628:	fa01 f202 	lsl.w	r2, r1, r2
 800362c:	4013      	ands	r3, r2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0b7      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003632:	4b4f      	ldr	r3, [pc, #316]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	494c      	ldr	r1, [pc, #304]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003640:	4313      	orrs	r3, r2
 8003642:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003644:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003648:	2b01      	cmp	r3, #1
 800364a:	d105      	bne.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800364c:	4b48      	ldr	r3, [pc, #288]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800364e:	69db      	ldr	r3, [r3, #28]
 8003650:	4a47      	ldr	r2, [pc, #284]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003652:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003656:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b00      	cmp	r3, #0
 8003662:	d008      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003664:	4b42      	ldr	r3, [pc, #264]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003668:	f023 0203 	bic.w	r2, r3, #3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	493f      	ldr	r1, [pc, #252]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003672:	4313      	orrs	r3, r2
 8003674:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d008      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003682:	4b3b      	ldr	r3, [pc, #236]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003686:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	4938      	ldr	r1, [pc, #224]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003690:	4313      	orrs	r3, r2
 8003692:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	2b00      	cmp	r3, #0
 800369e:	d008      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036a0:	4b33      	ldr	r3, [pc, #204]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	4930      	ldr	r1, [pc, #192]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0320 	and.w	r3, r3, #32
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d008      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036be:	4b2c      	ldr	r3, [pc, #176]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c2:	f023 0210 	bic.w	r2, r3, #16
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	4929      	ldr	r1, [pc, #164]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d008      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80036dc:	4b24      	ldr	r3, [pc, #144]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e8:	4921      	ldr	r1, [pc, #132]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d008      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036fa:	4b1d      	ldr	r3, [pc, #116]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fe:	f023 0220 	bic.w	r2, r3, #32
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	491a      	ldr	r1, [pc, #104]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003708:	4313      	orrs	r3, r2
 800370a:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003714:	2b00      	cmp	r3, #0
 8003716:	d008      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003718:	4b15      	ldr	r3, [pc, #84]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	69db      	ldr	r3, [r3, #28]
 8003724:	4912      	ldr	r1, [pc, #72]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003726:	4313      	orrs	r3, r2
 8003728:	604b      	str	r3, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003732:	2b00      	cmp	r3, #0
 8003734:	d008      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 8003736:	4b0e      	ldr	r3, [pc, #56]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	490b      	ldr	r1, [pc, #44]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003744:	4313      	orrs	r3, r2
 8003746:	604b      	str	r3, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003750:	2b00      	cmp	r3, #0
 8003752:	d008      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003754:	4b06      	ldr	r3, [pc, #24]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003758:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003760:	4903      	ldr	r1, [pc, #12]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003762:	4313      	orrs	r3, r2
 8003764:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3748      	adds	r7, #72	; 0x48
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	40021000 	.word	0x40021000

08003774 <HAL_SDADC_Init>:
  *         the common reference voltage.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_SDADC_Init(SDADC_HandleTypeDef* hsdadc)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* Check SDADC handle */
  if(hsdadc == NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_SDADC_Init+0x12>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e073      	b.n	800386e <HAL_SDADC_Init+0xfa>
  assert_param(IS_SDADC_FAST_CONV_MODE(hsdadc->Init.FastConversionMode));
  assert_param(IS_SDADC_SLOW_CLOCK_MODE(hsdadc->Init.SlowClockMode));
  assert_param(IS_SDADC_VREF(hsdadc->Init.ReferenceVoltage));
  
  /* Initialize SDADC variables with default values */
  hsdadc->RegularContMode     = SDADC_CONTINUOUS_CONV_OFF;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	619a      	str	r2, [r3, #24]
  hsdadc->InjectedContMode    = SDADC_CONTINUOUS_CONV_OFF;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	61da      	str	r2, [r3, #28]
  hsdadc->InjectedChannelsNbr = 1U;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	621a      	str	r2, [r3, #32]
  hsdadc->InjConvRemaining    = 1U;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdadc->RegularTrigger      = SDADC_SOFTWARE_TRIGGER;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	629a      	str	r2, [r3, #40]	; 0x28
  hsdadc->InjectedTrigger     = SDADC_SOFTWARE_TRIGGER;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsdadc->ExtTriggerEdge      = SDADC_EXT_TRIG_RISING_EDGE;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80037b0:	631a      	str	r2, [r3, #48]	; 0x30
  hsdadc->RegularMultimode    = SDADC_MULTIMODE_SDADC1_SDADC2;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	635a      	str	r2, [r3, #52]	; 0x34
  hsdadc->InjectedMultimode   = SDADC_MULTIMODE_SDADC1_SDADC2;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	639a      	str	r2, [r3, #56]	; 0x38
  hsdadc->ErrorCode           = SDADC_ERROR_NONE;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Init the low level hardware */
  hsdadc->MspInitCallback(hsdadc);
#else
  /* Init the low level hardware */
  HAL_SDADC_MspInit(hsdadc);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f7fd fcf7 	bl	80011b8 <HAL_SDADC_MspInit>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */
  
  /* Set idle low power and slow clock modes */
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_SBI|SDADC_CR1_PDI|SDADC_CR1_SLOWCK);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80037d8:	601a      	str	r2, [r3, #0]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6819      	ldr	r1, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685a      	ldr	r2, [r3, #4]
                            hsdadc->Init.SlowClockMode);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 80037e8:	431a      	orrs	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	601a      	str	r2, [r3, #0]

  /* Set fast conversion mode */
  hsdadc->Instance->CR2 &= ~(SDADC_CR2_FAST);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685a      	ldr	r2, [r3, #4]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003800:	605a      	str	r2, [r3, #4]
  hsdadc->Instance->CR2 |= hsdadc->Init.FastConversionMode;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6859      	ldr	r1, [r3, #4]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	605a      	str	r2, [r3, #4]

  /* Set reference voltage common to all SDADC instances */
  /* Update this parameter only if needed to avoid unnecessary settling time */
  if((SDADC1->CR1 & SDADC_CR1_REFV) != hsdadc->Init.ReferenceVoltage)
 8003814:	4b18      	ldr	r3, [pc, #96]	; (8003878 <HAL_SDADC_Init+0x104>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	429a      	cmp	r2, r3
 8003822:	d00f      	beq.n	8003844 <HAL_SDADC_Init+0xd0>
  {
    /* Voltage reference bits are common to all SADC instances but are        */
    /* present in SDADC1 register.                                            */
    SDADC1->CR1 &= ~(SDADC_CR1_REFV);
 8003824:	4b14      	ldr	r3, [pc, #80]	; (8003878 <HAL_SDADC_Init+0x104>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a13      	ldr	r2, [pc, #76]	; (8003878 <HAL_SDADC_Init+0x104>)
 800382a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800382e:	6013      	str	r3, [r2, #0]
    SDADC1->CR1 |= hsdadc->Init.ReferenceVoltage;
 8003830:	4b11      	ldr	r3, [pc, #68]	; (8003878 <HAL_SDADC_Init+0x104>)
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	490f      	ldr	r1, [pc, #60]	; (8003878 <HAL_SDADC_Init+0x104>)
 800383a:	4313      	orrs	r3, r2
 800383c:	600b      	str	r3, [r1, #0]
    
    /* Wait at least 2ms before setting ADON */
    HAL_Delay(2U);
 800383e:	2002      	movs	r0, #2
 8003840:	f7fd ffb8 	bl	80017b4 <HAL_Delay>
  }
  
  /* Enable SDADC */
  hsdadc->Instance->CR2 |= SDADC_CR2_ADON;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f042 0201 	orr.w	r2, r2, #1
 8003852:	605a      	str	r2, [r3, #4]

  /* Wait end of stabilization */
  while((hsdadc->Instance->ISR & SDADC_ISR_STABIP) != 0UL)
 8003854:	bf00      	nop
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1f8      	bne.n	8003856 <HAL_SDADC_Init+0xe2>
  {
  }
  
  /* Set SDADC to ready state */
  hsdadc->State = HAL_SDADC_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return HAL status */
  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	40016000 	.word	0x40016000

0800387c <HAL_SDADC_PrepareChannelConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_PrepareChannelConfig(SDADC_HandleTypeDef *hsdadc, 
                                                 uint32_t ConfIndex,
                                                 SDADC_ConfParamTypeDef* ConfParamStruct)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003888:	2300      	movs	r3, #0
 800388a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_GAIN(ConfParamStruct->Gain));
  assert_param(IS_SDADC_COMMON_MODE(ConfParamStruct->CommonMode));
  assert_param(IS_SDADC_OFFSET_VALUE(ConfParamStruct->Offset));

  /* Check SDADC state is ready */
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003892:	2b01      	cmp	r3, #1
 8003894:	d002      	beq.n	800389c <HAL_SDADC_PrepareChannelConfig+0x20>
  {
    status = HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	75fb      	strb	r3, [r7, #23]
 800389a:	e025      	b.n	80038e8 <HAL_SDADC_PrepareChannelConfig+0x6c>
  }
  else
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f000 fa66 	bl	8003d6e <SDADC_EnterInitMode>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d006      	beq.n	80038b6 <HAL_SDADC_PrepareChannelConfig+0x3a>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	22ff      	movs	r2, #255	; 0xff
 80038ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	75fb      	strb	r3, [r7, #23]
 80038b4:	e018      	b.n	80038e8 <HAL_SDADC_PrepareChannelConfig+0x6c>
    }
    else
    {
      /* Program configuration register with parameters */
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	461a      	mov	r2, r3
                       SDADC_CONFREG_OFFSET + \
                       (uint32_t)(ConfIndex << 2UL));
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	009b      	lsls	r3, r3, #2
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 80038c0:	4413      	add	r3, r2
 80038c2:	3320      	adds	r3, #32
 80038c4:	613b      	str	r3, [r7, #16]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681a      	ldr	r2, [r3, #0]
                                             ConfParamStruct->Gain | \
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 80038ce:	431a      	orrs	r2, r3
                                             ConfParamStruct->CommonMode | \
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
                                             ConfParamStruct->Gain | \
 80038d4:	ea42 0103 	orr.w	r1, r2, r3
                                             ConfParamStruct->Offset);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68da      	ldr	r2, [r3, #12]
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 80038dc:	693b      	ldr	r3, [r7, #16]
                                             ConfParamStruct->CommonMode | \
 80038de:	430a      	orrs	r2, r1
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 80038e0:	601a      	str	r2, [r3, #0]
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 fa66 	bl	8003db4 <SDADC_ExitInitMode>
    }
  }
  /* Return function status */
  return status;
 80038e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3718      	adds	r7, #24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
	...

080038f4 <HAL_SDADC_AssociateChannelConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_AssociateChannelConfig(SDADC_HandleTypeDef *hsdadc,
                                                   uint32_t Channel,
                                                   uint32_t ConfIndex)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003900:	2300      	movs	r3, #0
 8003902:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_REGULAR_CHANNEL(Channel));
  assert_param(IS_SDADC_CONF_INDEX(ConfIndex));

  /* Check SDADC state is ready */
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800390a:	2b01      	cmp	r3, #1
 800390c:	d002      	beq.n	8003914 <HAL_SDADC_AssociateChannelConfig+0x20>
  {
    status = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	75fb      	strb	r3, [r7, #23]
 8003912:	e037      	b.n	8003984 <HAL_SDADC_AssociateChannelConfig+0x90>
  }
  else
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f000 fa2a 	bl	8003d6e <SDADC_EnterInitMode>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d006      	beq.n	800392e <HAL_SDADC_AssociateChannelConfig+0x3a>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	22ff      	movs	r2, #255	; 0xff
 8003924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	75fb      	strb	r3, [r7, #23]
 800392c:	e02a      	b.n	8003984 <HAL_SDADC_AssociateChannelConfig+0x90>
    }
    else
    {
      /* Program channel configuration register according parameters */
      if(Channel != SDADC_CHANNEL_8)
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	4a17      	ldr	r2, [pc, #92]	; (8003990 <HAL_SDADC_AssociateChannelConfig+0x9c>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d01f      	beq.n	8003976 <HAL_SDADC_AssociateChannelConfig+0x82>
      {
        /* Get channel number */
        channelnum = (uint32_t)(Channel>>16UL);
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	0c1b      	lsrs	r3, r3, #16
 800393a:	613b      	str	r3, [r7, #16]

        /* Set the channel configuration */
        hsdadc->Instance->CONFCHR1 &= (uint32_t) ~((uint32_t)SDADC_CONFCHR1_CONFCH0 << ((channelnum << 2UL) & 0x1FUL));
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	f003 031f 	and.w	r3, r3, #31
 800394a:	2203      	movs	r2, #3
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	43da      	mvns	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	400a      	ands	r2, r1
 8003958:	641a      	str	r2, [r3, #64]	; 0x40
        hsdadc->Instance->CONFCHR1 |= (uint32_t) (ConfIndex << ((channelnum << 2UL) & 0x1FUL));
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	f003 031f 	and.w	r3, r3, #31
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	409a      	lsls	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	641a      	str	r2, [r3, #64]	; 0x40
 8003974:	e003      	b.n	800397e <HAL_SDADC_AssociateChannelConfig+0x8a>
      }
      else
      {
        hsdadc->Instance->CONFCHR2 = (uint32_t) (ConfIndex);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	645a      	str	r2, [r3, #68]	; 0x44
      }      
      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f000 fa18 	bl	8003db4 <SDADC_ExitInitMode>
    }
  }
  /* Return function status */
  return status;
 8003984:	7dfb      	ldrb	r3, [r7, #23]
}
 8003986:	4618      	mov	r0, r3
 8003988:	3718      	adds	r7, #24
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	00080100 	.word	0x00080100

08003994 <HAL_SDADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_ConfigChannel(SDADC_HandleTypeDef *hsdadc,
                                          uint32_t Channel,
                                          uint32_t ContinuousMode)
{
 8003994:	b480      	push	{r7}
 8003996:	b087      	sub	sp, #28
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039a0:	2300      	movs	r3, #0
 80039a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_REGULAR_CHANNEL(Channel));
  assert_param(IS_SDADC_CONTINUOUS_MODE(ContinuousMode));
  
  /* Check SDADC state */
  if((hsdadc->State != HAL_SDADC_STATE_RESET) && (hsdadc->State != HAL_SDADC_STATE_ERROR))
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d02a      	beq.n	8003a04 <HAL_SDADC_ConfigChannel+0x70>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039b4:	2bff      	cmp	r3, #255	; 0xff
 80039b6:	d025      	beq.n	8003a04 <HAL_SDADC_ConfigChannel+0x70>
  {
    /* Set RCH[3:0] and RCONT bits in SDADC_CR2 */
    hsdadc->Instance->CR2 &= (uint32_t) ~(SDADC_CR2_RCH | SDADC_CR2_RCONT);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 029e 	bic.w	r2, r2, #5177344	; 0x4f0000
 80039c6:	605a      	str	r2, [r3, #4]
    if(ContinuousMode == SDADC_CONTINUOUS_CONV_ON)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d10c      	bne.n	80039e8 <HAL_SDADC_ConfigChannel+0x54>
    {
      hsdadc->Instance->CR2 |= (uint32_t) ((Channel & SDADC_MSB_MASK) | SDADC_CR2_RCONT);    
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	685a      	ldr	r2, [r3, #4]
 80039d4:	68b9      	ldr	r1, [r7, #8]
 80039d6:	4b10      	ldr	r3, [pc, #64]	; (8003a18 <HAL_SDADC_ConfigChannel+0x84>)
 80039d8:	400b      	ands	r3, r1
 80039da:	431a      	orrs	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80039e4:	605a      	str	r2, [r3, #4]
 80039e6:	e009      	b.n	80039fc <HAL_SDADC_ConfigChannel+0x68>
    }
    else
    {
      hsdadc->Instance->CR2 |= (uint32_t) ((Channel & SDADC_MSB_MASK));    
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6859      	ldr	r1, [r3, #4]
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	0c1b      	lsrs	r3, r3, #16
 80039f2:	041b      	lsls	r3, r3, #16
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	6812      	ldr	r2, [r2, #0]
 80039f8:	430b      	orrs	r3, r1
 80039fa:	6053      	str	r3, [r2, #4]
    }
    /* Store continuous mode information */
    hsdadc->RegularContMode = ContinuousMode;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	619a      	str	r2, [r3, #24]
 8003a02:	e001      	b.n	8003a08 <HAL_SDADC_ConfigChannel+0x74>
  }
  else
  {
    status = HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8003a08:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	371c      	adds	r7, #28
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	ffbf0000 	.word	0xffbf0000

08003a1c <HAL_SDADC_SelectRegularTrigger>:
  *            @arg SDADC_SOFTWARE_TRIGGER : Software trigger.
  *            @arg SDADC_SYNCHRONOUS_TRIGGER : Synchronous with SDADC1 (only for SDADC2 and SDADC3).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_SelectRegularTrigger(SDADC_HandleTypeDef *hsdadc, uint32_t Trigger)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a26:	2300      	movs	r3, #0
 8003a28:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));
  assert_param(IS_SDADC_REGULAR_TRIGGER(Trigger));

  /* Check parameters compatibility */
  if((hsdadc->Instance == SDADC1) && (Trigger == SDADC_SYNCHRONOUS_TRIGGER))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a12      	ldr	r2, [pc, #72]	; (8003a78 <HAL_SDADC_SelectRegularTrigger+0x5c>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d105      	bne.n	8003a40 <HAL_SDADC_SelectRegularTrigger+0x24>
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d102      	bne.n	8003a40 <HAL_SDADC_SelectRegularTrigger+0x24>
  {
    status = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	73fb      	strb	r3, [r7, #15]
 8003a3e:	e014      	b.n	8003a6a <HAL_SDADC_SelectRegularTrigger+0x4e>
  }
  /* Check SDADC state */
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d009      	beq.n	8003a5e <HAL_SDADC_SelectRegularTrigger+0x42>
          (hsdadc->State == HAL_SDADC_STATE_CALIB) || \
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d004      	beq.n	8003a5e <HAL_SDADC_SelectRegularTrigger+0x42>
          (hsdadc->State == HAL_SDADC_STATE_INJ))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
          (hsdadc->State == HAL_SDADC_STATE_CALIB) || \
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d103      	bne.n	8003a66 <HAL_SDADC_SelectRegularTrigger+0x4a>
  {
    /* Store regular trigger information */
    hsdadc->RegularTrigger = Trigger;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	629a      	str	r2, [r3, #40]	; 0x28
 8003a64:	e001      	b.n	8003a6a <HAL_SDADC_SelectRegularTrigger+0x4e>
  }
  else
  {
    status = HAL_ERROR;    
 8003a66:	2301      	movs	r3, #1
 8003a68:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8003a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3714      	adds	r7, #20
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr
 8003a78:	40016000 	.word	0x40016000

08003a7c <HAL_SDADC_Start>:
  *         or if injected conversion is ongoing.
  * @param  hsdadc SDADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_Start(SDADC_HandleTypeDef *hsdadc)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d004      	beq.n	8003a98 <HAL_SDADC_Start+0x1c>
     (hsdadc->State == HAL_SDADC_STATE_INJ))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
  if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8003a94:	2b04      	cmp	r3, #4
 8003a96:	d105      	bne.n	8003aa4 <HAL_SDADC_Start+0x28>
  {
    /* Start regular conversion */
    status = SDADC_RegConvStart(hsdadc);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 f99d 	bl	8003dd8 <SDADC_RegConvStart>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	73fb      	strb	r3, [r7, #15]
 8003aa2:	e001      	b.n	8003aa8 <HAL_SDADC_Start+0x2c>
  }
  else
  {
    status = HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <HAL_SDADC_PollForConversion>:
  * @param  hsdadc SDADC handle.
  * @param  Timeout Timeout value in milliseconds.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDADC_PollForConversion(SDADC_HandleTypeDef* hsdadc, uint32_t Timeout)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b084      	sub	sp, #16
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
 8003aba:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Check SDADC state */
  if((hsdadc->State != HAL_SDADC_STATE_REG) && \
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ac2:	2b03      	cmp	r3, #3
 8003ac4:	d006      	beq.n	8003ad4 <HAL_SDADC_PollForConversion+0x22>
     (hsdadc->State != HAL_SDADC_STATE_REG_INJ))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
  if((hsdadc->State != HAL_SDADC_STATE_REG) && \
 8003acc:	2b05      	cmp	r3, #5
 8003ace:	d001      	beq.n	8003ad4 <HAL_SDADC_PollForConversion+0x22>
  {
    /* Return error status */
    return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e044      	b.n	8003b5e <HAL_SDADC_PollForConversion+0xac>
  }
  else
  {
    /* Get timeout */
    tickstart = HAL_GetTick();  
 8003ad4:	f7fd fe62 	bl	800179c <HAL_GetTick>
 8003ad8:	60f8      	str	r0, [r7, #12]

    /* Wait REOCF bit in SDADC_ISR register */
    while((hsdadc->Instance->ISR & SDADC_ISR_REOCF) != SDADC_ISR_REOCF)
 8003ada:	e010      	b.n	8003afe <HAL_SDADC_PollForConversion+0x4c>
    {
      /* Check the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae2:	d00c      	beq.n	8003afe <HAL_SDADC_PollForConversion+0x4c>
      {
        if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0UL))
 8003ae4:	f7fd fe5a 	bl	800179c <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d302      	bcc.n	8003afa <HAL_SDADC_PollForConversion+0x48>
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_SDADC_PollForConversion+0x4c>
        {
          /* Return timeout status */
          return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e02f      	b.n	8003b5e <HAL_SDADC_PollForConversion+0xac>
    while((hsdadc->Instance->ISR & SDADC_ISR_REOCF) != SDADC_ISR_REOCF)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f003 0308 	and.w	r3, r3, #8
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d1e7      	bne.n	8003adc <HAL_SDADC_PollForConversion+0x2a>
        }
      }
    }
    /* Check if overrun occurs */
    if((hsdadc->Instance->ISR & SDADC_ISR_ROVRF) == SDADC_ISR_ROVRF)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 0310 	and.w	r3, r3, #16
 8003b16:	2b10      	cmp	r3, #16
 8003b18:	d10d      	bne.n	8003b36 <HAL_SDADC_PollForConversion+0x84>
    {
      /* Update error code and call error callback */
      hsdadc->ErrorCode = SDADC_ERROR_REGULAR_OVERRUN;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
      hsdadc->ErrorCallback(hsdadc);
#else
      HAL_SDADC_ErrorCallback(hsdadc);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 f91a 	bl	8003d5a <HAL_SDADC_ErrorCallback>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */

      /* Set CLRROVRF bit in SDADC_CLRISR register */
      hsdadc->Instance->CLRISR |= SDADC_ISR_CLRROVRF;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68da      	ldr	r2, [r3, #12]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f042 0210 	orr.w	r2, r2, #16
 8003b34:	60da      	str	r2, [r3, #12]
    }
    /* Update SDADC state only if not continuous conversion and SW trigger */
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10e      	bne.n	8003b5c <HAL_SDADC_PollForConversion+0xaa>
       (hsdadc->RegularTrigger == SDADC_SOFTWARE_TRIGGER))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10a      	bne.n	8003b5c <HAL_SDADC_PollForConversion+0xaa>
    {
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_REG) ? \
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
                      HAL_SDADC_STATE_READY : HAL_SDADC_STATE_INJ;
 8003b4c:	2b03      	cmp	r3, #3
 8003b4e:	d101      	bne.n	8003b54 <HAL_SDADC_PollForConversion+0xa2>
 8003b50:	2201      	movs	r2, #1
 8003b52:	e000      	b.n	8003b56 <HAL_SDADC_PollForConversion+0xa4>
 8003b54:	2204      	movs	r2, #4
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_REG) ? \
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Return function status */
    return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
  }
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <HAL_SDADC_GetValue>:
  * @brief  This function allows to get regular conversion value.
  * @param  hsdadc SDADC handle.
  * @retval Regular conversion value
  */
uint32_t HAL_SDADC_GetValue(SDADC_HandleTypeDef *hsdadc)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b083      	sub	sp, #12
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_SDADC_ALL_INSTANCE(hsdadc->Instance));

  /* Return regular conversion value */
  return hsdadc->Instance->RDATAR;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <HAL_SDADC_IRQHandler>:
  * @brief  This function handles the SDADC interrupts.
  * @param  hsdadc SDADC handle.
  * @retval None
  */
void HAL_SDADC_IRQHandler(SDADC_HandleTypeDef* hsdadc)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hsdadc->Instance->ISR;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hsdadc->Instance->CR1;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	60bb      	str	r3, [r7, #8]
    
  /* Check if end of regular conversion */
  if(((tmp_cr1 & SDADC_CR1_REOCIE) == SDADC_CR1_REOCIE) &&
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	f003 0308 	and.w	r3, r3, #8
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d025      	beq.n	8003bee <HAL_SDADC_IRQHandler+0x6e>
     ((tmp_isr & SDADC_ISR_REOCF) == SDADC_ISR_REOCF))
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f003 0308 	and.w	r3, r3, #8
  if(((tmp_cr1 & SDADC_CR1_REOCIE) == SDADC_CR1_REOCIE) &&
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d020      	beq.n	8003bee <HAL_SDADC_IRQHandler+0x6e>
  {
    /* Call regular conversion complete callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
    hsdadc->ConvCpltCallback(hsdadc);
#else
    HAL_SDADC_ConvCpltCallback(hsdadc);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 f8c0 	bl	8003d32 <HAL_SDADC_ConvCpltCallback>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */

    /* End of conversion if mode is not continuous and software trigger */
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f040 80a9 	bne.w	8003d0e <HAL_SDADC_IRQHandler+0x18e>
       (hsdadc->RegularTrigger == SDADC_SOFTWARE_TRIGGER))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f040 80a4 	bne.w	8003d0e <HAL_SDADC_IRQHandler+0x18e>
    {
      /* Clear REOCIE and ROVRIE bits in SDADC_CR1 register */
      hsdadc->Instance->CR1 &= ~(SDADC_CR1_REOCIE | SDADC_CR1_ROVRIE);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 0218 	bic.w	r2, r2, #24
 8003bd4:	601a      	str	r2, [r3, #0]

      /* Update SDADC state */
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_REG) ? \
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
                      HAL_SDADC_STATE_READY : HAL_SDADC_STATE_INJ;
 8003bdc:	2b03      	cmp	r3, #3
 8003bde:	d101      	bne.n	8003be4 <HAL_SDADC_IRQHandler+0x64>
 8003be0:	2201      	movs	r2, #1
 8003be2:	e000      	b.n	8003be6 <HAL_SDADC_IRQHandler+0x66>
 8003be4:	2204      	movs	r2, #4
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_REG) ? \
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8003bec:	e08f      	b.n	8003d0e <HAL_SDADC_IRQHandler+0x18e>
    }
  }
  /* Check if end of injected conversion */
  else if(((tmp_cr1 & SDADC_CR1_JEOCIE) == SDADC_CR1_JEOCIE) &&
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d036      	beq.n	8003c66 <HAL_SDADC_IRQHandler+0xe6>
          ((tmp_isr & SDADC_ISR_JEOCF) == SDADC_ISR_JEOCF))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f003 0302 	and.w	r3, r3, #2
  else if(((tmp_cr1 & SDADC_CR1_JEOCIE) == SDADC_CR1_JEOCIE) &&
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d031      	beq.n	8003c66 <HAL_SDADC_IRQHandler+0xe6>
  {
    /* Call injected conversion complete callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
    hsdadc->InjectedConvCpltCallback(hsdadc);
#else
    HAL_SDADC_InjectedConvCpltCallback(hsdadc);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f89f 	bl	8003d46 <HAL_SDADC_InjectedConvCpltCallback>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */

    /* Update remaining injected conversions */
    hsdadc->InjConvRemaining--;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0c:	1e5a      	subs	r2, r3, #1
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	625a      	str	r2, [r3, #36]	; 0x24
    if(hsdadc->InjConvRemaining ==0UL)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d103      	bne.n	8003c22 <HAL_SDADC_IRQHandler+0xa2>
    {
      /* end of injected sequence, reset the value */
      hsdadc->InjConvRemaining = hsdadc->InjectedChannelsNbr;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a1a      	ldr	r2, [r3, #32]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	625a      	str	r2, [r3, #36]	; 0x24
    }
    /* End of conversion if mode is not continuous, software trigger */
    /* and end of injected sequence */
    if((hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d173      	bne.n	8003d12 <HAL_SDADC_IRQHandler+0x192>
       (hsdadc->InjectedTrigger == SDADC_SOFTWARE_TRIGGER) && \
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    if((hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d16f      	bne.n	8003d12 <HAL_SDADC_IRQHandler+0x192>
       (hsdadc->InjConvRemaining == hsdadc->InjectedChannelsNbr))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
       (hsdadc->InjectedTrigger == SDADC_SOFTWARE_TRIGGER) && \
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d169      	bne.n	8003d12 <HAL_SDADC_IRQHandler+0x192>
    {
      /* Clear JEOCIE and JOVRIE bits in SDADC_CR1 register */
      hsdadc->Instance->CR1 &= ~(SDADC_CR1_JEOCIE | SDADC_CR1_JOVRIE);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 0206 	bic.w	r2, r2, #6
 8003c4c:	601a      	str	r2, [r3, #0]

      /* Update SDADC state */
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_INJ) ? \
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
                      HAL_SDADC_STATE_READY : HAL_SDADC_STATE_REG;
 8003c54:	2b04      	cmp	r3, #4
 8003c56:	d101      	bne.n	8003c5c <HAL_SDADC_IRQHandler+0xdc>
 8003c58:	2201      	movs	r2, #1
 8003c5a:	e000      	b.n	8003c5e <HAL_SDADC_IRQHandler+0xde>
 8003c5c:	2203      	movs	r2, #3
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_INJ) ? \
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    if((hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8003c64:	e055      	b.n	8003d12 <HAL_SDADC_IRQHandler+0x192>
    }
  }
  /* Check if end of calibration */
  else if(((tmp_cr1 & SDADC_CR1_EOCALIE) == SDADC_CR1_EOCALIE) &&
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d01c      	beq.n	8003caa <HAL_SDADC_IRQHandler+0x12a>
          ((tmp_isr & SDADC_ISR_EOCALF) == SDADC_ISR_EOCALF))
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f003 0301 	and.w	r3, r3, #1
  else if(((tmp_cr1 & SDADC_CR1_EOCALIE) == SDADC_CR1_EOCALIE) &&
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d017      	beq.n	8003caa <HAL_SDADC_IRQHandler+0x12a>
  {
    /* Clear EOCALIE bit in SDADC_CR1 register */
    hsdadc->Instance->CR1 &= ~(SDADC_CR1_EOCALIE);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0201 	bic.w	r2, r2, #1
 8003c88:	601a      	str	r2, [r3, #0]

    /* Set CLREOCALF bit in SDADC_CLRISR register */
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLREOCALF;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68da      	ldr	r2, [r3, #12]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f042 0201 	orr.w	r2, r2, #1
 8003c98:	60da      	str	r2, [r3, #12]

    /* Call calibration callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
    hsdadc->CalibrationCpltCallback(hsdadc);
#else
    HAL_SDADC_CalibrationCpltCallback(hsdadc);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f83f 	bl	8003d1e <HAL_SDADC_CalibrationCpltCallback>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */

    /* Update SDADC state */
    hsdadc->State = HAL_SDADC_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003ca8:	e034      	b.n	8003d14 <HAL_SDADC_IRQHandler+0x194>
  }
  /* Check if overrun occurs during regular conversion */
  else if(((tmp_cr1 & SDADC_CR1_ROVRIE) == SDADC_CR1_ROVRIE) &&
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	f003 0310 	and.w	r3, r3, #16
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d013      	beq.n	8003cdc <HAL_SDADC_IRQHandler+0x15c>
          ((tmp_isr & SDADC_ISR_ROVRF) == SDADC_ISR_ROVRF))
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f003 0310 	and.w	r3, r3, #16
  else if(((tmp_cr1 & SDADC_CR1_ROVRIE) == SDADC_CR1_ROVRIE) &&
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00e      	beq.n	8003cdc <HAL_SDADC_IRQHandler+0x15c>
  {
    /* Set CLRROVRF bit in SDADC_CLRISR register */
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLRROVRF;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68da      	ldr	r2, [r3, #12]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f042 0210 	orr.w	r2, r2, #16
 8003ccc:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hsdadc->ErrorCode = SDADC_ERROR_REGULAR_OVERRUN;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call error callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
    hsdadc->ErrorCallback(hsdadc);
#else
    HAL_SDADC_ErrorCallback(hsdadc);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 f840 	bl	8003d5a <HAL_SDADC_ErrorCallback>
 8003cda:	e01b      	b.n	8003d14 <HAL_SDADC_IRQHandler+0x194>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */
  }
  /* Check if overrun occurs during injected conversion */
  else if(((tmp_cr1 & SDADC_CR1_JOVRIE) == SDADC_CR1_JOVRIE) &&
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	f003 0304 	and.w	r3, r3, #4
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d017      	beq.n	8003d16 <HAL_SDADC_IRQHandler+0x196>
          ((tmp_isr & SDADC_ISR_JOVRF) == SDADC_ISR_JOVRF))
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f003 0304 	and.w	r3, r3, #4
  else if(((tmp_cr1 & SDADC_CR1_JOVRIE) == SDADC_CR1_JOVRIE) &&
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d012      	beq.n	8003d16 <HAL_SDADC_IRQHandler+0x196>
  {
    /* Set CLRJOVRF bit in SDADC_CLRISR register */
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLRJOVRF;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68da      	ldr	r2, [r3, #12]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f042 0204 	orr.w	r2, r2, #4
 8003cfe:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hsdadc->ErrorCode = SDADC_ERROR_INJECTED_OVERRUN;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2202      	movs	r2, #2
 8003d04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call error callback */
#if (USE_HAL_SDADC_REGISTER_CALLBACKS == 1)
    hsdadc->ErrorCallback(hsdadc);
#else
    HAL_SDADC_ErrorCallback(hsdadc);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f827 	bl	8003d5a <HAL_SDADC_ErrorCallback>
  else
  {
    /* No additional IRQ source */
  }
  
  return;
 8003d0c:	e002      	b.n	8003d14 <HAL_SDADC_IRQHandler+0x194>
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8003d0e:	bf00      	nop
 8003d10:	e000      	b.n	8003d14 <HAL_SDADC_IRQHandler+0x194>
    if((hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8003d12:	bf00      	nop
  return;
 8003d14:	bf00      	nop
 8003d16:	bf00      	nop
}
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <HAL_SDADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback. 
  * @param  hsdadc SDADC handle.
  * @retval None
  */
__weak void HAL_SDADC_CalibrationCpltCallback(SDADC_HandleTypeDef* hsdadc)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b083      	sub	sp, #12
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  UNUSED(hsdadc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDADC_CalibrationCpltCallback could be implemented in the user file
   */
}
 8003d26:	bf00      	nop
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr

08003d32 <HAL_SDADC_ConvCpltCallback>:
            using HAL_SDADC_GetValue or HAL_SDADC_MultiModeGetValue.
  * @param  hsdadc SDADC handle.
  * @retval None
  */
__weak void HAL_SDADC_ConvCpltCallback(SDADC_HandleTypeDef* hsdadc)
{
 8003d32:	b480      	push	{r7}
 8003d34:	b083      	sub	sp, #12
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  UNUSED(hsdadc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDADC_ConvCpltCallback could be implemented in the user file.
   */
}
 8003d3a:	bf00      	nop
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <HAL_SDADC_InjectedConvCpltCallback>:
            using HAL_SDADC_InjectedGetValue or HAL_SDADC_InjectedMultiModeGetValue.
  * @param  hsdadc SDADC handle.
  * @retval None
  */
__weak void HAL_SDADC_InjectedConvCpltCallback(SDADC_HandleTypeDef* hsdadc)
{
 8003d46:	b480      	push	{r7}
 8003d48:	b083      	sub	sp, #12
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  UNUSED(hsdadc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDADC_InjectedConvCpltCallback could be implemented in the user file.
   */
}
 8003d4e:	bf00      	nop
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr

08003d5a <HAL_SDADC_ErrorCallback>:
  * @brief  Error callback. 
  * @param  hsdadc SDADC handle.
  * @retval None
  */
__weak void HAL_SDADC_ErrorCallback(SDADC_HandleTypeDef* hsdadc)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  UNUSED(hsdadc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDADC_ErrorCallback could be implemented in the user file.
   */
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <SDADC_EnterInitMode>:
  * @brief  This function allows to enter in init mode for SDADC instance.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_EnterInitMode(SDADC_HandleTypeDef* hsdadc)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b084      	sub	sp, #16
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  
  /* Set INIT bit on SDADC_CR1 register */
  hsdadc->Instance->CR1 |= SDADC_CR1_INIT;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003d84:	601a      	str	r2, [r3, #0]

  /* Wait INITRDY bit on SDADC_ISR */
  tickstart = HAL_GetTick();
 8003d86:	f7fd fd09 	bl	800179c <HAL_GetTick>
 8003d8a:	60f8      	str	r0, [r7, #12]
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 8003d8c:	e008      	b.n	8003da0 <SDADC_EnterInitMode+0x32>
  {
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 8003d8e:	f7fd fd05 	bl	800179c <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2bc8      	cmp	r3, #200	; 0xc8
 8003d9a:	d901      	bls.n	8003da0 <SDADC_EnterInitMode+0x32>
    {       
      return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e005      	b.n	8003dac <SDADC_EnterInitMode+0x3e>
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	daf1      	bge.n	8003d8e <SDADC_EnterInitMode+0x20>
    } 
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <SDADC_ExitInitMode>:
  * @brief  This function allows to exit from init mode for SDADC instance.
  * @param  hsdadc SDADC handle.
  * @retval None.
  */
static void SDADC_ExitInitMode(SDADC_HandleTypeDef* hsdadc)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Reset INIT bit in SDADC_CR1 register */
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_INIT);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003dca:	601a      	str	r2, [r3, #0]
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <SDADC_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hsdadc SDADC handle.
  * @retval HAL status.
  */
static HAL_StatusTypeDef SDADC_RegConvStart(SDADC_HandleTypeDef* hsdadc)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003de0:	2300      	movs	r3, #0
 8003de2:	73fb      	strb	r3, [r7, #15]

  /* Check regular trigger */
  if(hsdadc->RegularTrigger == SDADC_SOFTWARE_TRIGGER)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d108      	bne.n	8003dfe <SDADC_RegConvStart+0x26>
  {
    /* Set RSWSTART bit in SDADC_CR2 register */
    hsdadc->Instance->CR2 |= SDADC_CR2_RSWSTART;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003dfa:	605a      	str	r2, [r3, #4]
 8003dfc:	e017      	b.n	8003e2e <SDADC_RegConvStart+0x56>
  }
  else /* synchronous trigger */
  {
    /* Enter init mode */
    if(SDADC_EnterInitMode(hsdadc) != HAL_OK)
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7ff ffb5 	bl	8003d6e <SDADC_EnterInitMode>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d006      	beq.n	8003e18 <SDADC_RegConvStart+0x40>
    {
      /* Set SDADC in error state */
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	22ff      	movs	r2, #255	; 0xff
 8003e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	73fb      	strb	r3, [r7, #15]
 8003e16:	e00a      	b.n	8003e2e <SDADC_RegConvStart+0x56>
    }
    else
    {
      /* Set RSYNC bit in SDADC_CR1 register */
      hsdadc->Instance->CR1 |= SDADC_CR1_RSYNC;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e26:	601a      	str	r2, [r3, #0]

      /* Exit init mode */
      SDADC_ExitInitMode(hsdadc);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f7ff ffc3 	bl	8003db4 <SDADC_ExitInitMode>
    }
  }
  /* Update SDADC state only if status is OK */
  if(status == HAL_OK)
 8003e2e:	7bfb      	ldrb	r3, [r7, #15]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d10a      	bne.n	8003e4a <SDADC_RegConvStart+0x72>
  {
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
                    HAL_SDADC_STATE_REG : HAL_SDADC_STATE_REG_INJ;
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d101      	bne.n	8003e42 <SDADC_RegConvStart+0x6a>
 8003e3e:	2203      	movs	r2, #3
 8003e40:	e000      	b.n	8003e44 <SDADC_RegConvStart+0x6c>
 8003e42:	2205      	movs	r2, #5
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  /* Return function status */
  return status;
 8003e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3710      	adds	r7, #16
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e041      	b.n	8003eea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d106      	bne.n	8003e80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f839 	bl	8003ef2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2202      	movs	r2, #2
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	3304      	adds	r3, #4
 8003e90:	4619      	mov	r1, r3
 8003e92:	4610      	mov	r0, r2
 8003e94:	f000 f9d0 	bl	8004238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b083      	sub	sp, #12
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003efa:	bf00      	nop
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
	...

08003f08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d001      	beq.n	8003f20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e049      	b.n	8003fb4 <HAL_TIM_Base_Start_IT+0xac>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2202      	movs	r2, #2
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68da      	ldr	r2, [r3, #12]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f042 0201 	orr.w	r2, r2, #1
 8003f36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f40:	d01d      	beq.n	8003f7e <HAL_TIM_Base_Start_IT+0x76>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a1e      	ldr	r2, [pc, #120]	; (8003fc0 <HAL_TIM_Base_Start_IT+0xb8>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d018      	beq.n	8003f7e <HAL_TIM_Base_Start_IT+0x76>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a1c      	ldr	r2, [pc, #112]	; (8003fc4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d013      	beq.n	8003f7e <HAL_TIM_Base_Start_IT+0x76>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a1b      	ldr	r2, [pc, #108]	; (8003fc8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d00e      	beq.n	8003f7e <HAL_TIM_Base_Start_IT+0x76>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a19      	ldr	r2, [pc, #100]	; (8003fcc <HAL_TIM_Base_Start_IT+0xc4>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d009      	beq.n	8003f7e <HAL_TIM_Base_Start_IT+0x76>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a18      	ldr	r2, [pc, #96]	; (8003fd0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d004      	beq.n	8003f7e <HAL_TIM_Base_Start_IT+0x76>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a16      	ldr	r2, [pc, #88]	; (8003fd4 <HAL_TIM_Base_Start_IT+0xcc>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d111      	bne.n	8003fa2 <HAL_TIM_Base_Start_IT+0x9a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f003 0307 	and.w	r3, r3, #7
 8003f88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2b06      	cmp	r3, #6
 8003f8e:	d010      	beq.n	8003fb2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f042 0201 	orr.w	r2, r2, #1
 8003f9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fa0:	e007      	b.n	8003fb2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f042 0201 	orr.w	r2, r2, #1
 8003fb0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3714      	adds	r7, #20
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr
 8003fc0:	40000400 	.word	0x40000400
 8003fc4:	40000800 	.word	0x40000800
 8003fc8:	40000c00 	.word	0x40000c00
 8003fcc:	40001800 	.word	0x40001800
 8003fd0:	40014000 	.word	0x40014000
 8003fd4:	40015c00 	.word	0x40015c00

08003fd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d122      	bne.n	8004034 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d11b      	bne.n	8004034 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f06f 0202 	mvn.w	r2, #2
 8004004:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	f003 0303 	and.w	r3, r3, #3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f8ee 	bl	80041fc <HAL_TIM_IC_CaptureCallback>
 8004020:	e005      	b.n	800402e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f8e0 	bl	80041e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 f8f1 	bl	8004210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	f003 0304 	and.w	r3, r3, #4
 800403e:	2b04      	cmp	r3, #4
 8004040:	d122      	bne.n	8004088 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	f003 0304 	and.w	r3, r3, #4
 800404c:	2b04      	cmp	r3, #4
 800404e:	d11b      	bne.n	8004088 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f06f 0204 	mvn.w	r2, #4
 8004058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2202      	movs	r2, #2
 800405e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f8c4 	bl	80041fc <HAL_TIM_IC_CaptureCallback>
 8004074:	e005      	b.n	8004082 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 f8b6 	bl	80041e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 f8c7 	bl	8004210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	f003 0308 	and.w	r3, r3, #8
 8004092:	2b08      	cmp	r3, #8
 8004094:	d122      	bne.n	80040dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	f003 0308 	and.w	r3, r3, #8
 80040a0:	2b08      	cmp	r3, #8
 80040a2:	d11b      	bne.n	80040dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f06f 0208 	mvn.w	r2, #8
 80040ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2204      	movs	r2, #4
 80040b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	f003 0303 	and.w	r3, r3, #3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f89a 	bl	80041fc <HAL_TIM_IC_CaptureCallback>
 80040c8:	e005      	b.n	80040d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f88c 	bl	80041e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 f89d 	bl	8004210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	f003 0310 	and.w	r3, r3, #16
 80040e6:	2b10      	cmp	r3, #16
 80040e8:	d122      	bne.n	8004130 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	f003 0310 	and.w	r3, r3, #16
 80040f4:	2b10      	cmp	r3, #16
 80040f6:	d11b      	bne.n	8004130 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f06f 0210 	mvn.w	r2, #16
 8004100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2208      	movs	r2, #8
 8004106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	69db      	ldr	r3, [r3, #28]
 800410e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f870 	bl	80041fc <HAL_TIM_IC_CaptureCallback>
 800411c:	e005      	b.n	800412a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f862 	bl	80041e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 f873 	bl	8004210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b01      	cmp	r3, #1
 800413c:	d10e      	bne.n	800415c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	2b01      	cmp	r3, #1
 800414a:	d107      	bne.n	800415c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f06f 0201 	mvn.w	r2, #1
 8004154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f7fc ffb8 	bl	80010cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004166:	2b80      	cmp	r3, #128	; 0x80
 8004168:	d10e      	bne.n	8004188 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004174:	2b80      	cmp	r3, #128	; 0x80
 8004176:	d107      	bne.n	8004188 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 f8fc 	bl	8004380 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004192:	2b40      	cmp	r3, #64	; 0x40
 8004194:	d10e      	bne.n	80041b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a0:	2b40      	cmp	r3, #64	; 0x40
 80041a2:	d107      	bne.n	80041b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 f838 	bl	8004224 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	f003 0320 	and.w	r3, r3, #32
 80041be:	2b20      	cmp	r3, #32
 80041c0:	d10e      	bne.n	80041e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	f003 0320 	and.w	r3, r3, #32
 80041cc:	2b20      	cmp	r3, #32
 80041ce:	d107      	bne.n	80041e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f06f 0220 	mvn.w	r2, #32
 80041d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f8c6 	bl	800436c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041e0:	bf00      	nop
 80041e2:	3708      	adds	r7, #8
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800424e:	d00f      	beq.n	8004270 <TIM_Base_SetConfig+0x38>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a3c      	ldr	r2, [pc, #240]	; (8004344 <TIM_Base_SetConfig+0x10c>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d00b      	beq.n	8004270 <TIM_Base_SetConfig+0x38>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a3b      	ldr	r2, [pc, #236]	; (8004348 <TIM_Base_SetConfig+0x110>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d007      	beq.n	8004270 <TIM_Base_SetConfig+0x38>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a3a      	ldr	r2, [pc, #232]	; (800434c <TIM_Base_SetConfig+0x114>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d003      	beq.n	8004270 <TIM_Base_SetConfig+0x38>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a39      	ldr	r2, [pc, #228]	; (8004350 <TIM_Base_SetConfig+0x118>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d108      	bne.n	8004282 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004276:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	4313      	orrs	r3, r2
 8004280:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004288:	d027      	beq.n	80042da <TIM_Base_SetConfig+0xa2>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a2d      	ldr	r2, [pc, #180]	; (8004344 <TIM_Base_SetConfig+0x10c>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d023      	beq.n	80042da <TIM_Base_SetConfig+0xa2>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a2c      	ldr	r2, [pc, #176]	; (8004348 <TIM_Base_SetConfig+0x110>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d01f      	beq.n	80042da <TIM_Base_SetConfig+0xa2>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a2b      	ldr	r2, [pc, #172]	; (800434c <TIM_Base_SetConfig+0x114>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d01b      	beq.n	80042da <TIM_Base_SetConfig+0xa2>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a2b      	ldr	r2, [pc, #172]	; (8004354 <TIM_Base_SetConfig+0x11c>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d017      	beq.n	80042da <TIM_Base_SetConfig+0xa2>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a2a      	ldr	r2, [pc, #168]	; (8004358 <TIM_Base_SetConfig+0x120>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d013      	beq.n	80042da <TIM_Base_SetConfig+0xa2>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a29      	ldr	r2, [pc, #164]	; (800435c <TIM_Base_SetConfig+0x124>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d00f      	beq.n	80042da <TIM_Base_SetConfig+0xa2>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a28      	ldr	r2, [pc, #160]	; (8004360 <TIM_Base_SetConfig+0x128>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d00b      	beq.n	80042da <TIM_Base_SetConfig+0xa2>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a27      	ldr	r2, [pc, #156]	; (8004364 <TIM_Base_SetConfig+0x12c>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d007      	beq.n	80042da <TIM_Base_SetConfig+0xa2>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a26      	ldr	r2, [pc, #152]	; (8004368 <TIM_Base_SetConfig+0x130>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d003      	beq.n	80042da <TIM_Base_SetConfig+0xa2>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a1e      	ldr	r2, [pc, #120]	; (8004350 <TIM_Base_SetConfig+0x118>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d108      	bne.n	80042ec <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	689a      	ldr	r2, [r3, #8]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a13      	ldr	r2, [pc, #76]	; (8004360 <TIM_Base_SetConfig+0x128>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d007      	beq.n	8004328 <TIM_Base_SetConfig+0xf0>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a12      	ldr	r2, [pc, #72]	; (8004364 <TIM_Base_SetConfig+0x12c>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d003      	beq.n	8004328 <TIM_Base_SetConfig+0xf0>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a11      	ldr	r2, [pc, #68]	; (8004368 <TIM_Base_SetConfig+0x130>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d103      	bne.n	8004330 <TIM_Base_SetConfig+0xf8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	691a      	ldr	r2, [r3, #16]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	615a      	str	r2, [r3, #20]
}
 8004336:	bf00      	nop
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	40000400 	.word	0x40000400
 8004348:	40000800 	.word	0x40000800
 800434c:	40000c00 	.word	0x40000c00
 8004350:	40015c00 	.word	0x40015c00
 8004354:	40001800 	.word	0x40001800
 8004358:	40001c00 	.word	0x40001c00
 800435c:	40002000 	.word	0x40002000
 8004360:	40014000 	.word	0x40014000
 8004364:	40014400 	.word	0x40014400
 8004368:	40014800 	.word	0x40014800

0800436c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e040      	b.n	8004428 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d106      	bne.n	80043bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7fd f958 	bl	800166c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2224      	movs	r2, #36	; 0x24
 80043c0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 0201 	bic.w	r2, r2, #1
 80043d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f8b6 	bl	8004544 <UART_SetConfig>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d101      	bne.n	80043e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e022      	b.n	8004428 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d002      	beq.n	80043f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 fa24 	bl	8004838 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689a      	ldr	r2, [r3, #8]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800440e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f042 0201 	orr.w	r2, r2, #1
 800441e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 faab 	bl	800497c <UART_CheckIdleState>
 8004426:	4603      	mov	r3, r0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3708      	adds	r7, #8
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b08a      	sub	sp, #40	; 0x28
 8004434:	af02      	add	r7, sp, #8
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	603b      	str	r3, [r7, #0]
 800443c:	4613      	mov	r3, r2
 800443e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004444:	2b20      	cmp	r3, #32
 8004446:	d178      	bne.n	800453a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d002      	beq.n	8004454 <HAL_UART_Transmit+0x24>
 800444e:	88fb      	ldrh	r3, [r7, #6]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e071      	b.n	800453c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2221      	movs	r2, #33	; 0x21
 8004464:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004466:	f7fd f999 	bl	800179c <HAL_GetTick>
 800446a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	88fa      	ldrh	r2, [r7, #6]
 8004470:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	88fa      	ldrh	r2, [r7, #6]
 8004478:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004484:	d108      	bne.n	8004498 <HAL_UART_Transmit+0x68>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d104      	bne.n	8004498 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800448e:	2300      	movs	r3, #0
 8004490:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	61bb      	str	r3, [r7, #24]
 8004496:	e003      	b.n	80044a0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800449c:	2300      	movs	r3, #0
 800449e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80044a0:	e030      	b.n	8004504 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	9300      	str	r3, [sp, #0]
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	2200      	movs	r2, #0
 80044aa:	2180      	movs	r1, #128	; 0x80
 80044ac:	68f8      	ldr	r0, [r7, #12]
 80044ae:	f000 fb0d 	bl	8004acc <UART_WaitOnFlagUntilTimeout>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d004      	beq.n	80044c2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2220      	movs	r2, #32
 80044bc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e03c      	b.n	800453c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10b      	bne.n	80044e0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	881a      	ldrh	r2, [r3, #0]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044d4:	b292      	uxth	r2, r2
 80044d6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	3302      	adds	r3, #2
 80044dc:	61bb      	str	r3, [r7, #24]
 80044de:	e008      	b.n	80044f2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	781a      	ldrb	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	b292      	uxth	r2, r2
 80044ea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	3301      	adds	r3, #1
 80044f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	3b01      	subs	r3, #1
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800450a:	b29b      	uxth	r3, r3
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1c8      	bne.n	80044a2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	9300      	str	r3, [sp, #0]
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	2200      	movs	r2, #0
 8004518:	2140      	movs	r1, #64	; 0x40
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f000 fad6 	bl	8004acc <UART_WaitOnFlagUntilTimeout>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d004      	beq.n	8004530 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2220      	movs	r2, #32
 800452a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e005      	b.n	800453c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2220      	movs	r2, #32
 8004534:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004536:	2300      	movs	r3, #0
 8004538:	e000      	b.n	800453c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800453a:	2302      	movs	r3, #2
  }
}
 800453c:	4618      	mov	r0, r3
 800453e:	3720      	adds	r7, #32
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b088      	sub	sp, #32
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800454c:	2300      	movs	r3, #0
 800454e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	689a      	ldr	r2, [r3, #8]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	431a      	orrs	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	431a      	orrs	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	69db      	ldr	r3, [r3, #28]
 8004564:	4313      	orrs	r3, r2
 8004566:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004572:	f023 030c 	bic.w	r3, r3, #12
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	6812      	ldr	r2, [r2, #0]
 800457a:	6979      	ldr	r1, [r7, #20]
 800457c:	430b      	orrs	r3, r1
 800457e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68da      	ldr	r2, [r3, #12]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	430a      	orrs	r2, r1
 8004594:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	697a      	ldr	r2, [r7, #20]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a99      	ldr	r2, [pc, #612]	; (8004824 <UART_SetConfig+0x2e0>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d120      	bne.n	8004606 <UART_SetConfig+0xc2>
 80045c4:	4b98      	ldr	r3, [pc, #608]	; (8004828 <UART_SetConfig+0x2e4>)
 80045c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c8:	f003 0303 	and.w	r3, r3, #3
 80045cc:	2b03      	cmp	r3, #3
 80045ce:	d817      	bhi.n	8004600 <UART_SetConfig+0xbc>
 80045d0:	a201      	add	r2, pc, #4	; (adr r2, 80045d8 <UART_SetConfig+0x94>)
 80045d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d6:	bf00      	nop
 80045d8:	080045e9 	.word	0x080045e9
 80045dc:	080045f5 	.word	0x080045f5
 80045e0:	080045fb 	.word	0x080045fb
 80045e4:	080045ef 	.word	0x080045ef
 80045e8:	2301      	movs	r3, #1
 80045ea:	77fb      	strb	r3, [r7, #31]
 80045ec:	e061      	b.n	80046b2 <UART_SetConfig+0x16e>
 80045ee:	2302      	movs	r3, #2
 80045f0:	77fb      	strb	r3, [r7, #31]
 80045f2:	e05e      	b.n	80046b2 <UART_SetConfig+0x16e>
 80045f4:	2304      	movs	r3, #4
 80045f6:	77fb      	strb	r3, [r7, #31]
 80045f8:	e05b      	b.n	80046b2 <UART_SetConfig+0x16e>
 80045fa:	2308      	movs	r3, #8
 80045fc:	77fb      	strb	r3, [r7, #31]
 80045fe:	e058      	b.n	80046b2 <UART_SetConfig+0x16e>
 8004600:	2310      	movs	r3, #16
 8004602:	77fb      	strb	r3, [r7, #31]
 8004604:	e055      	b.n	80046b2 <UART_SetConfig+0x16e>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a88      	ldr	r2, [pc, #544]	; (800482c <UART_SetConfig+0x2e8>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d124      	bne.n	800465a <UART_SetConfig+0x116>
 8004610:	4b85      	ldr	r3, [pc, #532]	; (8004828 <UART_SetConfig+0x2e4>)
 8004612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004614:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004618:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800461c:	d011      	beq.n	8004642 <UART_SetConfig+0xfe>
 800461e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004622:	d817      	bhi.n	8004654 <UART_SetConfig+0x110>
 8004624:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004628:	d011      	beq.n	800464e <UART_SetConfig+0x10a>
 800462a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800462e:	d811      	bhi.n	8004654 <UART_SetConfig+0x110>
 8004630:	2b00      	cmp	r3, #0
 8004632:	d003      	beq.n	800463c <UART_SetConfig+0xf8>
 8004634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004638:	d006      	beq.n	8004648 <UART_SetConfig+0x104>
 800463a:	e00b      	b.n	8004654 <UART_SetConfig+0x110>
 800463c:	2300      	movs	r3, #0
 800463e:	77fb      	strb	r3, [r7, #31]
 8004640:	e037      	b.n	80046b2 <UART_SetConfig+0x16e>
 8004642:	2302      	movs	r3, #2
 8004644:	77fb      	strb	r3, [r7, #31]
 8004646:	e034      	b.n	80046b2 <UART_SetConfig+0x16e>
 8004648:	2304      	movs	r3, #4
 800464a:	77fb      	strb	r3, [r7, #31]
 800464c:	e031      	b.n	80046b2 <UART_SetConfig+0x16e>
 800464e:	2308      	movs	r3, #8
 8004650:	77fb      	strb	r3, [r7, #31]
 8004652:	e02e      	b.n	80046b2 <UART_SetConfig+0x16e>
 8004654:	2310      	movs	r3, #16
 8004656:	77fb      	strb	r3, [r7, #31]
 8004658:	e02b      	b.n	80046b2 <UART_SetConfig+0x16e>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a74      	ldr	r2, [pc, #464]	; (8004830 <UART_SetConfig+0x2ec>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d124      	bne.n	80046ae <UART_SetConfig+0x16a>
 8004664:	4b70      	ldr	r3, [pc, #448]	; (8004828 <UART_SetConfig+0x2e4>)
 8004666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004668:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800466c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004670:	d011      	beq.n	8004696 <UART_SetConfig+0x152>
 8004672:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004676:	d817      	bhi.n	80046a8 <UART_SetConfig+0x164>
 8004678:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800467c:	d011      	beq.n	80046a2 <UART_SetConfig+0x15e>
 800467e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004682:	d811      	bhi.n	80046a8 <UART_SetConfig+0x164>
 8004684:	2b00      	cmp	r3, #0
 8004686:	d003      	beq.n	8004690 <UART_SetConfig+0x14c>
 8004688:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800468c:	d006      	beq.n	800469c <UART_SetConfig+0x158>
 800468e:	e00b      	b.n	80046a8 <UART_SetConfig+0x164>
 8004690:	2300      	movs	r3, #0
 8004692:	77fb      	strb	r3, [r7, #31]
 8004694:	e00d      	b.n	80046b2 <UART_SetConfig+0x16e>
 8004696:	2302      	movs	r3, #2
 8004698:	77fb      	strb	r3, [r7, #31]
 800469a:	e00a      	b.n	80046b2 <UART_SetConfig+0x16e>
 800469c:	2304      	movs	r3, #4
 800469e:	77fb      	strb	r3, [r7, #31]
 80046a0:	e007      	b.n	80046b2 <UART_SetConfig+0x16e>
 80046a2:	2308      	movs	r3, #8
 80046a4:	77fb      	strb	r3, [r7, #31]
 80046a6:	e004      	b.n	80046b2 <UART_SetConfig+0x16e>
 80046a8:	2310      	movs	r3, #16
 80046aa:	77fb      	strb	r3, [r7, #31]
 80046ac:	e001      	b.n	80046b2 <UART_SetConfig+0x16e>
 80046ae:	2310      	movs	r3, #16
 80046b0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046ba:	d15a      	bne.n	8004772 <UART_SetConfig+0x22e>
  {
    switch (clocksource)
 80046bc:	7ffb      	ldrb	r3, [r7, #31]
 80046be:	2b08      	cmp	r3, #8
 80046c0:	d827      	bhi.n	8004712 <UART_SetConfig+0x1ce>
 80046c2:	a201      	add	r2, pc, #4	; (adr r2, 80046c8 <UART_SetConfig+0x184>)
 80046c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c8:	080046ed 	.word	0x080046ed
 80046cc:	080046f5 	.word	0x080046f5
 80046d0:	080046fd 	.word	0x080046fd
 80046d4:	08004713 	.word	0x08004713
 80046d8:	08004703 	.word	0x08004703
 80046dc:	08004713 	.word	0x08004713
 80046e0:	08004713 	.word	0x08004713
 80046e4:	08004713 	.word	0x08004713
 80046e8:	0800470b 	.word	0x0800470b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046ec:	f7fe fe58 	bl	80033a0 <HAL_RCC_GetPCLK1Freq>
 80046f0:	61b8      	str	r0, [r7, #24]
        break;
 80046f2:	e013      	b.n	800471c <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046f4:	f7fe fe76 	bl	80033e4 <HAL_RCC_GetPCLK2Freq>
 80046f8:	61b8      	str	r0, [r7, #24]
        break;
 80046fa:	e00f      	b.n	800471c <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046fc:	4b4d      	ldr	r3, [pc, #308]	; (8004834 <UART_SetConfig+0x2f0>)
 80046fe:	61bb      	str	r3, [r7, #24]
        break;
 8004700:	e00c      	b.n	800471c <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004702:	f7fe fdd7 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 8004706:	61b8      	str	r0, [r7, #24]
        break;
 8004708:	e008      	b.n	800471c <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800470a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800470e:	61bb      	str	r3, [r7, #24]
        break;
 8004710:	e004      	b.n	800471c <UART_SetConfig+0x1d8>
      default:
        pclk = 0U;
 8004712:	2300      	movs	r3, #0
 8004714:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	77bb      	strb	r3, [r7, #30]
        break;
 800471a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d074      	beq.n	800480c <UART_SetConfig+0x2c8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	005a      	lsls	r2, r3, #1
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	085b      	lsrs	r3, r3, #1
 800472c:	441a      	add	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	fbb2 f3f3 	udiv	r3, r2, r3
 8004736:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	2b0f      	cmp	r3, #15
 800473c:	d916      	bls.n	800476c <UART_SetConfig+0x228>
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004744:	d212      	bcs.n	800476c <UART_SetConfig+0x228>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	b29b      	uxth	r3, r3
 800474a:	f023 030f 	bic.w	r3, r3, #15
 800474e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	085b      	lsrs	r3, r3, #1
 8004754:	b29b      	uxth	r3, r3
 8004756:	f003 0307 	and.w	r3, r3, #7
 800475a:	b29a      	uxth	r2, r3
 800475c:	89fb      	ldrh	r3, [r7, #14]
 800475e:	4313      	orrs	r3, r2
 8004760:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	89fa      	ldrh	r2, [r7, #14]
 8004768:	60da      	str	r2, [r3, #12]
 800476a:	e04f      	b.n	800480c <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	77bb      	strb	r3, [r7, #30]
 8004770:	e04c      	b.n	800480c <UART_SetConfig+0x2c8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004772:	7ffb      	ldrb	r3, [r7, #31]
 8004774:	2b08      	cmp	r3, #8
 8004776:	d828      	bhi.n	80047ca <UART_SetConfig+0x286>
 8004778:	a201      	add	r2, pc, #4	; (adr r2, 8004780 <UART_SetConfig+0x23c>)
 800477a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800477e:	bf00      	nop
 8004780:	080047a5 	.word	0x080047a5
 8004784:	080047ad 	.word	0x080047ad
 8004788:	080047b5 	.word	0x080047b5
 800478c:	080047cb 	.word	0x080047cb
 8004790:	080047bb 	.word	0x080047bb
 8004794:	080047cb 	.word	0x080047cb
 8004798:	080047cb 	.word	0x080047cb
 800479c:	080047cb 	.word	0x080047cb
 80047a0:	080047c3 	.word	0x080047c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047a4:	f7fe fdfc 	bl	80033a0 <HAL_RCC_GetPCLK1Freq>
 80047a8:	61b8      	str	r0, [r7, #24]
        break;
 80047aa:	e013      	b.n	80047d4 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047ac:	f7fe fe1a 	bl	80033e4 <HAL_RCC_GetPCLK2Freq>
 80047b0:	61b8      	str	r0, [r7, #24]
        break;
 80047b2:	e00f      	b.n	80047d4 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047b4:	4b1f      	ldr	r3, [pc, #124]	; (8004834 <UART_SetConfig+0x2f0>)
 80047b6:	61bb      	str	r3, [r7, #24]
        break;
 80047b8:	e00c      	b.n	80047d4 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047ba:	f7fe fd7b 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 80047be:	61b8      	str	r0, [r7, #24]
        break;
 80047c0:	e008      	b.n	80047d4 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047c6:	61bb      	str	r3, [r7, #24]
        break;
 80047c8:	e004      	b.n	80047d4 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 80047ca:	2300      	movs	r3, #0
 80047cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	77bb      	strb	r3, [r7, #30]
        break;
 80047d2:	bf00      	nop
    }

    if (pclk != 0U)
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d018      	beq.n	800480c <UART_SetConfig+0x2c8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	085a      	lsrs	r2, r3, #1
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	441a      	add	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	2b0f      	cmp	r3, #15
 80047f2:	d909      	bls.n	8004808 <UART_SetConfig+0x2c4>
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047fa:	d205      	bcs.n	8004808 <UART_SetConfig+0x2c4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	b29a      	uxth	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	60da      	str	r2, [r3, #12]
 8004806:	e001      	b.n	800480c <UART_SetConfig+0x2c8>
      }
      else
      {
        ret = HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004818:	7fbb      	ldrb	r3, [r7, #30]
}
 800481a:	4618      	mov	r0, r3
 800481c:	3720      	adds	r7, #32
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	40013800 	.word	0x40013800
 8004828:	40021000 	.word	0x40021000
 800482c:	40004400 	.word	0x40004400
 8004830:	40004800 	.word	0x40004800
 8004834:	007a1200 	.word	0x007a1200

08004838 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004844:	f003 0301 	and.w	r3, r3, #1
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00a      	beq.n	8004862 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00a      	beq.n	8004884 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	430a      	orrs	r2, r1
 8004882:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004888:	f003 0304 	and.w	r3, r3, #4
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00a      	beq.n	80048a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048aa:	f003 0308 	and.w	r3, r3, #8
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00a      	beq.n	80048c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	430a      	orrs	r2, r1
 80048c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048cc:	f003 0310 	and.w	r3, r3, #16
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00a      	beq.n	80048ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ee:	f003 0320 	and.w	r3, r3, #32
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00a      	beq.n	800490c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	430a      	orrs	r2, r1
 800490a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004914:	2b00      	cmp	r3, #0
 8004916:	d01a      	beq.n	800494e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	430a      	orrs	r2, r1
 800492c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004936:	d10a      	bne.n	800494e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00a      	beq.n	8004970 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	605a      	str	r2, [r3, #4]
  }
}
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b098      	sub	sp, #96	; 0x60
 8004980:	af02      	add	r7, sp, #8
 8004982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800498c:	f7fc ff06 	bl	800179c <HAL_GetTick>
 8004990:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0308 	and.w	r3, r3, #8
 800499c:	2b08      	cmp	r3, #8
 800499e:	d12e      	bne.n	80049fe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049a8:	2200      	movs	r2, #0
 80049aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 f88c 	bl	8004acc <UART_WaitOnFlagUntilTimeout>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d021      	beq.n	80049fe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c2:	e853 3f00 	ldrex	r3, [r3]
 80049c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049ce:	653b      	str	r3, [r7, #80]	; 0x50
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	461a      	mov	r2, r3
 80049d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049d8:	647b      	str	r3, [r7, #68]	; 0x44
 80049da:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049e0:	e841 2300 	strex	r3, r2, [r1]
 80049e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1e6      	bne.n	80049ba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2220      	movs	r2, #32
 80049f0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e062      	b.n	8004ac4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0304 	and.w	r3, r3, #4
 8004a08:	2b04      	cmp	r3, #4
 8004a0a:	d149      	bne.n	8004aa0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a10:	9300      	str	r3, [sp, #0]
 8004a12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a14:	2200      	movs	r2, #0
 8004a16:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f856 	bl	8004acc <UART_WaitOnFlagUntilTimeout>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d03c      	beq.n	8004aa0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2e:	e853 3f00 	ldrex	r3, [r3]
 8004a32:	623b      	str	r3, [r7, #32]
   return(result);
 8004a34:	6a3b      	ldr	r3, [r7, #32]
 8004a36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	461a      	mov	r2, r3
 8004a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a44:	633b      	str	r3, [r7, #48]	; 0x30
 8004a46:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a4c:	e841 2300 	strex	r3, r2, [r1]
 8004a50:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1e6      	bne.n	8004a26 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	3308      	adds	r3, #8
 8004a5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	e853 3f00 	ldrex	r3, [r3]
 8004a66:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f023 0301 	bic.w	r3, r3, #1
 8004a6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	3308      	adds	r3, #8
 8004a76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a78:	61fa      	str	r2, [r7, #28]
 8004a7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a7c:	69b9      	ldr	r1, [r7, #24]
 8004a7e:	69fa      	ldr	r2, [r7, #28]
 8004a80:	e841 2300 	strex	r3, r2, [r1]
 8004a84:	617b      	str	r3, [r7, #20]
   return(result);
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1e5      	bne.n	8004a58 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2220      	movs	r2, #32
 8004a90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e011      	b.n	8004ac4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2220      	movs	r2, #32
 8004aaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3758      	adds	r7, #88	; 0x58
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	603b      	str	r3, [r7, #0]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004adc:	e049      	b.n	8004b72 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae4:	d045      	beq.n	8004b72 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ae6:	f7fc fe59 	bl	800179c <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d302      	bcc.n	8004afc <UART_WaitOnFlagUntilTimeout+0x30>
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d101      	bne.n	8004b00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e048      	b.n	8004b92 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0304 	and.w	r3, r3, #4
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d031      	beq.n	8004b72 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	69db      	ldr	r3, [r3, #28]
 8004b14:	f003 0308 	and.w	r3, r3, #8
 8004b18:	2b08      	cmp	r3, #8
 8004b1a:	d110      	bne.n	8004b3e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2208      	movs	r2, #8
 8004b22:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f000 f838 	bl	8004b9a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2208      	movs	r2, #8
 8004b2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e029      	b.n	8004b92 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	69db      	ldr	r3, [r3, #28]
 8004b44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b4c:	d111      	bne.n	8004b72 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f000 f81e 	bl	8004b9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2220      	movs	r2, #32
 8004b62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e00f      	b.n	8004b92 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	69da      	ldr	r2, [r3, #28]
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	bf0c      	ite	eq
 8004b82:	2301      	moveq	r3, #1
 8004b84:	2300      	movne	r3, #0
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	461a      	mov	r2, r3
 8004b8a:	79fb      	ldrb	r3, [r7, #7]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d0a6      	beq.n	8004ade <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b095      	sub	sp, #84	; 0x54
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004baa:	e853 3f00 	ldrex	r3, [r3]
 8004bae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bc0:	643b      	str	r3, [r7, #64]	; 0x40
 8004bc2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004bc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004bc8:	e841 2300 	strex	r3, r2, [r1]
 8004bcc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1e6      	bne.n	8004ba2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	3308      	adds	r3, #8
 8004bda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bdc:	6a3b      	ldr	r3, [r7, #32]
 8004bde:	e853 3f00 	ldrex	r3, [r3]
 8004be2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	f023 0301 	bic.w	r3, r3, #1
 8004bea:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	3308      	adds	r3, #8
 8004bf2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bf4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bf6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bfc:	e841 2300 	strex	r3, r2, [r1]
 8004c00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1e5      	bne.n	8004bd4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d118      	bne.n	8004c42 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	e853 3f00 	ldrex	r3, [r3]
 8004c1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	f023 0310 	bic.w	r3, r3, #16
 8004c24:	647b      	str	r3, [r7, #68]	; 0x44
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c2e:	61bb      	str	r3, [r7, #24]
 8004c30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c32:	6979      	ldr	r1, [r7, #20]
 8004c34:	69ba      	ldr	r2, [r7, #24]
 8004c36:	e841 2300 	strex	r3, r2, [r1]
 8004c3a:	613b      	str	r3, [r7, #16]
   return(result);
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1e6      	bne.n	8004c10 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2220      	movs	r2, #32
 8004c46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004c56:	bf00      	nop
 8004c58:	3754      	adds	r7, #84	; 0x54
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <_ZN8classLog5printEPKc>:
	void print(char const *format) {
 8004c62:	b590      	push	{r4, r7, lr}
 8004c64:	b083      	sub	sp, #12
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
 8004c6a:	6039      	str	r1, [r7, #0]
			HAL_UART_Transmit(huart, ( uint8_t*) format, strlen(format), 1000);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
 8004c72:	6838      	ldr	r0, [r7, #0]
 8004c74:	f7fb fafc 	bl	8000270 <strlen>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c80:	6839      	ldr	r1, [r7, #0]
 8004c82:	4620      	mov	r0, r4
 8004c84:	f7ff fbd4 	bl	8004430 <HAL_UART_Transmit>
	}
 8004c88:	bf00      	nop
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd90      	pop	{r4, r7, pc}

08004c90 <_ZN8classLog5colorEi>:
	char s[16];
	sprintf(s, "\33[08m");
	print(s);
}
void classLog::color(int color)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
	char s[16];
	sprintf(s, "\33[38;05;%dm",color);
 8004c9a:	f107 0308 	add.w	r3, r7, #8
 8004c9e:	683a      	ldr	r2, [r7, #0]
 8004ca0:	4906      	ldr	r1, [pc, #24]	; (8004cbc <_ZN8classLog5colorEi+0x2c>)
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 fd4c 	bl	8005740 <siprintf>
	print(s);
 8004ca8:	f107 0308 	add.w	r3, r7, #8
 8004cac:	4619      	mov	r1, r3
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7ff ffd7 	bl	8004c62 <_ZN8classLog5printEPKc>
}
 8004cb4:	bf00      	nop
 8004cb6:	3718      	adds	r7, #24
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	08007a58 	.word	0x08007a58

08004cc0 <_ZN8classLog13colorStringlnEiPKc>:
	print(s);
	print(format);
	print("\33[0m");
}
void classLog::colorStringln(int c, char const *const format)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
	color(c);
 8004ccc:	68b9      	ldr	r1, [r7, #8]
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	f7ff ffde 	bl	8004c90 <_ZN8classLog5colorEi>
	print(format);
 8004cd4:	6879      	ldr	r1, [r7, #4]
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f7ff ffc3 	bl	8004c62 <_ZN8classLog5printEPKc>
	print("\33[0m\n");
 8004cdc:	4903      	ldr	r1, [pc, #12]	; (8004cec <_ZN8classLog13colorStringlnEiPKc+0x2c>)
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f7ff ffbf 	bl	8004c62 <_ZN8classLog5printEPKc>
}
 8004ce4:	bf00      	nop
 8004ce6:	3710      	adds	r7, #16
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	08007a90 	.word	0x08007a90

08004cf0 <__cvt>:
 8004cf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cf4:	ec55 4b10 	vmov	r4, r5, d0
 8004cf8:	2d00      	cmp	r5, #0
 8004cfa:	460e      	mov	r6, r1
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	462b      	mov	r3, r5
 8004d00:	bfbb      	ittet	lt
 8004d02:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004d06:	461d      	movlt	r5, r3
 8004d08:	2300      	movge	r3, #0
 8004d0a:	232d      	movlt	r3, #45	; 0x2d
 8004d0c:	700b      	strb	r3, [r1, #0]
 8004d0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d10:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004d14:	4691      	mov	r9, r2
 8004d16:	f023 0820 	bic.w	r8, r3, #32
 8004d1a:	bfbc      	itt	lt
 8004d1c:	4622      	movlt	r2, r4
 8004d1e:	4614      	movlt	r4, r2
 8004d20:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d24:	d005      	beq.n	8004d32 <__cvt+0x42>
 8004d26:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004d2a:	d100      	bne.n	8004d2e <__cvt+0x3e>
 8004d2c:	3601      	adds	r6, #1
 8004d2e:	2102      	movs	r1, #2
 8004d30:	e000      	b.n	8004d34 <__cvt+0x44>
 8004d32:	2103      	movs	r1, #3
 8004d34:	ab03      	add	r3, sp, #12
 8004d36:	9301      	str	r3, [sp, #4]
 8004d38:	ab02      	add	r3, sp, #8
 8004d3a:	9300      	str	r3, [sp, #0]
 8004d3c:	ec45 4b10 	vmov	d0, r4, r5
 8004d40:	4653      	mov	r3, sl
 8004d42:	4632      	mov	r2, r6
 8004d44:	f000 fe68 	bl	8005a18 <_dtoa_r>
 8004d48:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004d4c:	4607      	mov	r7, r0
 8004d4e:	d102      	bne.n	8004d56 <__cvt+0x66>
 8004d50:	f019 0f01 	tst.w	r9, #1
 8004d54:	d022      	beq.n	8004d9c <__cvt+0xac>
 8004d56:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d5a:	eb07 0906 	add.w	r9, r7, r6
 8004d5e:	d110      	bne.n	8004d82 <__cvt+0x92>
 8004d60:	783b      	ldrb	r3, [r7, #0]
 8004d62:	2b30      	cmp	r3, #48	; 0x30
 8004d64:	d10a      	bne.n	8004d7c <__cvt+0x8c>
 8004d66:	2200      	movs	r2, #0
 8004d68:	2300      	movs	r3, #0
 8004d6a:	4620      	mov	r0, r4
 8004d6c:	4629      	mov	r1, r5
 8004d6e:	f7fb feab 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d72:	b918      	cbnz	r0, 8004d7c <__cvt+0x8c>
 8004d74:	f1c6 0601 	rsb	r6, r6, #1
 8004d78:	f8ca 6000 	str.w	r6, [sl]
 8004d7c:	f8da 3000 	ldr.w	r3, [sl]
 8004d80:	4499      	add	r9, r3
 8004d82:	2200      	movs	r2, #0
 8004d84:	2300      	movs	r3, #0
 8004d86:	4620      	mov	r0, r4
 8004d88:	4629      	mov	r1, r5
 8004d8a:	f7fb fe9d 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d8e:	b108      	cbz	r0, 8004d94 <__cvt+0xa4>
 8004d90:	f8cd 900c 	str.w	r9, [sp, #12]
 8004d94:	2230      	movs	r2, #48	; 0x30
 8004d96:	9b03      	ldr	r3, [sp, #12]
 8004d98:	454b      	cmp	r3, r9
 8004d9a:	d307      	bcc.n	8004dac <__cvt+0xbc>
 8004d9c:	9b03      	ldr	r3, [sp, #12]
 8004d9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004da0:	1bdb      	subs	r3, r3, r7
 8004da2:	4638      	mov	r0, r7
 8004da4:	6013      	str	r3, [r2, #0]
 8004da6:	b004      	add	sp, #16
 8004da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dac:	1c59      	adds	r1, r3, #1
 8004dae:	9103      	str	r1, [sp, #12]
 8004db0:	701a      	strb	r2, [r3, #0]
 8004db2:	e7f0      	b.n	8004d96 <__cvt+0xa6>

08004db4 <__exponent>:
 8004db4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004db6:	4603      	mov	r3, r0
 8004db8:	2900      	cmp	r1, #0
 8004dba:	bfb8      	it	lt
 8004dbc:	4249      	neglt	r1, r1
 8004dbe:	f803 2b02 	strb.w	r2, [r3], #2
 8004dc2:	bfb4      	ite	lt
 8004dc4:	222d      	movlt	r2, #45	; 0x2d
 8004dc6:	222b      	movge	r2, #43	; 0x2b
 8004dc8:	2909      	cmp	r1, #9
 8004dca:	7042      	strb	r2, [r0, #1]
 8004dcc:	dd2a      	ble.n	8004e24 <__exponent+0x70>
 8004dce:	f10d 0207 	add.w	r2, sp, #7
 8004dd2:	4617      	mov	r7, r2
 8004dd4:	260a      	movs	r6, #10
 8004dd6:	4694      	mov	ip, r2
 8004dd8:	fb91 f5f6 	sdiv	r5, r1, r6
 8004ddc:	fb06 1415 	mls	r4, r6, r5, r1
 8004de0:	3430      	adds	r4, #48	; 0x30
 8004de2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004de6:	460c      	mov	r4, r1
 8004de8:	2c63      	cmp	r4, #99	; 0x63
 8004dea:	f102 32ff 	add.w	r2, r2, #4294967295
 8004dee:	4629      	mov	r1, r5
 8004df0:	dcf1      	bgt.n	8004dd6 <__exponent+0x22>
 8004df2:	3130      	adds	r1, #48	; 0x30
 8004df4:	f1ac 0402 	sub.w	r4, ip, #2
 8004df8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004dfc:	1c41      	adds	r1, r0, #1
 8004dfe:	4622      	mov	r2, r4
 8004e00:	42ba      	cmp	r2, r7
 8004e02:	d30a      	bcc.n	8004e1a <__exponent+0x66>
 8004e04:	f10d 0209 	add.w	r2, sp, #9
 8004e08:	eba2 020c 	sub.w	r2, r2, ip
 8004e0c:	42bc      	cmp	r4, r7
 8004e0e:	bf88      	it	hi
 8004e10:	2200      	movhi	r2, #0
 8004e12:	4413      	add	r3, r2
 8004e14:	1a18      	subs	r0, r3, r0
 8004e16:	b003      	add	sp, #12
 8004e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e1a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004e1e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004e22:	e7ed      	b.n	8004e00 <__exponent+0x4c>
 8004e24:	2330      	movs	r3, #48	; 0x30
 8004e26:	3130      	adds	r1, #48	; 0x30
 8004e28:	7083      	strb	r3, [r0, #2]
 8004e2a:	70c1      	strb	r1, [r0, #3]
 8004e2c:	1d03      	adds	r3, r0, #4
 8004e2e:	e7f1      	b.n	8004e14 <__exponent+0x60>

08004e30 <_printf_float>:
 8004e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e34:	ed2d 8b02 	vpush	{d8}
 8004e38:	b08d      	sub	sp, #52	; 0x34
 8004e3a:	460c      	mov	r4, r1
 8004e3c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004e40:	4616      	mov	r6, r2
 8004e42:	461f      	mov	r7, r3
 8004e44:	4605      	mov	r5, r0
 8004e46:	f000 fce7 	bl	8005818 <_localeconv_r>
 8004e4a:	f8d0 a000 	ldr.w	sl, [r0]
 8004e4e:	4650      	mov	r0, sl
 8004e50:	f7fb fa0e 	bl	8000270 <strlen>
 8004e54:	2300      	movs	r3, #0
 8004e56:	930a      	str	r3, [sp, #40]	; 0x28
 8004e58:	6823      	ldr	r3, [r4, #0]
 8004e5a:	9305      	str	r3, [sp, #20]
 8004e5c:	f8d8 3000 	ldr.w	r3, [r8]
 8004e60:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004e64:	3307      	adds	r3, #7
 8004e66:	f023 0307 	bic.w	r3, r3, #7
 8004e6a:	f103 0208 	add.w	r2, r3, #8
 8004e6e:	f8c8 2000 	str.w	r2, [r8]
 8004e72:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004e76:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004e7a:	9307      	str	r3, [sp, #28]
 8004e7c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004e80:	ee08 0a10 	vmov	s16, r0
 8004e84:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004e88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e8c:	4b9e      	ldr	r3, [pc, #632]	; (8005108 <_printf_float+0x2d8>)
 8004e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8004e92:	f7fb fe4b 	bl	8000b2c <__aeabi_dcmpun>
 8004e96:	bb88      	cbnz	r0, 8004efc <_printf_float+0xcc>
 8004e98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e9c:	4b9a      	ldr	r3, [pc, #616]	; (8005108 <_printf_float+0x2d8>)
 8004e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8004ea2:	f7fb fe25 	bl	8000af0 <__aeabi_dcmple>
 8004ea6:	bb48      	cbnz	r0, 8004efc <_printf_float+0xcc>
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	2300      	movs	r3, #0
 8004eac:	4640      	mov	r0, r8
 8004eae:	4649      	mov	r1, r9
 8004eb0:	f7fb fe14 	bl	8000adc <__aeabi_dcmplt>
 8004eb4:	b110      	cbz	r0, 8004ebc <_printf_float+0x8c>
 8004eb6:	232d      	movs	r3, #45	; 0x2d
 8004eb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ebc:	4a93      	ldr	r2, [pc, #588]	; (800510c <_printf_float+0x2dc>)
 8004ebe:	4b94      	ldr	r3, [pc, #592]	; (8005110 <_printf_float+0x2e0>)
 8004ec0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004ec4:	bf94      	ite	ls
 8004ec6:	4690      	movls	r8, r2
 8004ec8:	4698      	movhi	r8, r3
 8004eca:	2303      	movs	r3, #3
 8004ecc:	6123      	str	r3, [r4, #16]
 8004ece:	9b05      	ldr	r3, [sp, #20]
 8004ed0:	f023 0304 	bic.w	r3, r3, #4
 8004ed4:	6023      	str	r3, [r4, #0]
 8004ed6:	f04f 0900 	mov.w	r9, #0
 8004eda:	9700      	str	r7, [sp, #0]
 8004edc:	4633      	mov	r3, r6
 8004ede:	aa0b      	add	r2, sp, #44	; 0x2c
 8004ee0:	4621      	mov	r1, r4
 8004ee2:	4628      	mov	r0, r5
 8004ee4:	f000 f9da 	bl	800529c <_printf_common>
 8004ee8:	3001      	adds	r0, #1
 8004eea:	f040 8090 	bne.w	800500e <_printf_float+0x1de>
 8004eee:	f04f 30ff 	mov.w	r0, #4294967295
 8004ef2:	b00d      	add	sp, #52	; 0x34
 8004ef4:	ecbd 8b02 	vpop	{d8}
 8004ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004efc:	4642      	mov	r2, r8
 8004efe:	464b      	mov	r3, r9
 8004f00:	4640      	mov	r0, r8
 8004f02:	4649      	mov	r1, r9
 8004f04:	f7fb fe12 	bl	8000b2c <__aeabi_dcmpun>
 8004f08:	b140      	cbz	r0, 8004f1c <_printf_float+0xec>
 8004f0a:	464b      	mov	r3, r9
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	bfbc      	itt	lt
 8004f10:	232d      	movlt	r3, #45	; 0x2d
 8004f12:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004f16:	4a7f      	ldr	r2, [pc, #508]	; (8005114 <_printf_float+0x2e4>)
 8004f18:	4b7f      	ldr	r3, [pc, #508]	; (8005118 <_printf_float+0x2e8>)
 8004f1a:	e7d1      	b.n	8004ec0 <_printf_float+0x90>
 8004f1c:	6863      	ldr	r3, [r4, #4]
 8004f1e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004f22:	9206      	str	r2, [sp, #24]
 8004f24:	1c5a      	adds	r2, r3, #1
 8004f26:	d13f      	bne.n	8004fa8 <_printf_float+0x178>
 8004f28:	2306      	movs	r3, #6
 8004f2a:	6063      	str	r3, [r4, #4]
 8004f2c:	9b05      	ldr	r3, [sp, #20]
 8004f2e:	6861      	ldr	r1, [r4, #4]
 8004f30:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004f34:	2300      	movs	r3, #0
 8004f36:	9303      	str	r3, [sp, #12]
 8004f38:	ab0a      	add	r3, sp, #40	; 0x28
 8004f3a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004f3e:	ab09      	add	r3, sp, #36	; 0x24
 8004f40:	ec49 8b10 	vmov	d0, r8, r9
 8004f44:	9300      	str	r3, [sp, #0]
 8004f46:	6022      	str	r2, [r4, #0]
 8004f48:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004f4c:	4628      	mov	r0, r5
 8004f4e:	f7ff fecf 	bl	8004cf0 <__cvt>
 8004f52:	9b06      	ldr	r3, [sp, #24]
 8004f54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f56:	2b47      	cmp	r3, #71	; 0x47
 8004f58:	4680      	mov	r8, r0
 8004f5a:	d108      	bne.n	8004f6e <_printf_float+0x13e>
 8004f5c:	1cc8      	adds	r0, r1, #3
 8004f5e:	db02      	blt.n	8004f66 <_printf_float+0x136>
 8004f60:	6863      	ldr	r3, [r4, #4]
 8004f62:	4299      	cmp	r1, r3
 8004f64:	dd41      	ble.n	8004fea <_printf_float+0x1ba>
 8004f66:	f1ab 0302 	sub.w	r3, fp, #2
 8004f6a:	fa5f fb83 	uxtb.w	fp, r3
 8004f6e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004f72:	d820      	bhi.n	8004fb6 <_printf_float+0x186>
 8004f74:	3901      	subs	r1, #1
 8004f76:	465a      	mov	r2, fp
 8004f78:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004f7c:	9109      	str	r1, [sp, #36]	; 0x24
 8004f7e:	f7ff ff19 	bl	8004db4 <__exponent>
 8004f82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f84:	1813      	adds	r3, r2, r0
 8004f86:	2a01      	cmp	r2, #1
 8004f88:	4681      	mov	r9, r0
 8004f8a:	6123      	str	r3, [r4, #16]
 8004f8c:	dc02      	bgt.n	8004f94 <_printf_float+0x164>
 8004f8e:	6822      	ldr	r2, [r4, #0]
 8004f90:	07d2      	lsls	r2, r2, #31
 8004f92:	d501      	bpl.n	8004f98 <_printf_float+0x168>
 8004f94:	3301      	adds	r3, #1
 8004f96:	6123      	str	r3, [r4, #16]
 8004f98:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d09c      	beq.n	8004eda <_printf_float+0xaa>
 8004fa0:	232d      	movs	r3, #45	; 0x2d
 8004fa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fa6:	e798      	b.n	8004eda <_printf_float+0xaa>
 8004fa8:	9a06      	ldr	r2, [sp, #24]
 8004faa:	2a47      	cmp	r2, #71	; 0x47
 8004fac:	d1be      	bne.n	8004f2c <_printf_float+0xfc>
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1bc      	bne.n	8004f2c <_printf_float+0xfc>
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e7b9      	b.n	8004f2a <_printf_float+0xfa>
 8004fb6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004fba:	d118      	bne.n	8004fee <_printf_float+0x1be>
 8004fbc:	2900      	cmp	r1, #0
 8004fbe:	6863      	ldr	r3, [r4, #4]
 8004fc0:	dd0b      	ble.n	8004fda <_printf_float+0x1aa>
 8004fc2:	6121      	str	r1, [r4, #16]
 8004fc4:	b913      	cbnz	r3, 8004fcc <_printf_float+0x19c>
 8004fc6:	6822      	ldr	r2, [r4, #0]
 8004fc8:	07d0      	lsls	r0, r2, #31
 8004fca:	d502      	bpl.n	8004fd2 <_printf_float+0x1a2>
 8004fcc:	3301      	adds	r3, #1
 8004fce:	440b      	add	r3, r1
 8004fd0:	6123      	str	r3, [r4, #16]
 8004fd2:	65a1      	str	r1, [r4, #88]	; 0x58
 8004fd4:	f04f 0900 	mov.w	r9, #0
 8004fd8:	e7de      	b.n	8004f98 <_printf_float+0x168>
 8004fda:	b913      	cbnz	r3, 8004fe2 <_printf_float+0x1b2>
 8004fdc:	6822      	ldr	r2, [r4, #0]
 8004fde:	07d2      	lsls	r2, r2, #31
 8004fe0:	d501      	bpl.n	8004fe6 <_printf_float+0x1b6>
 8004fe2:	3302      	adds	r3, #2
 8004fe4:	e7f4      	b.n	8004fd0 <_printf_float+0x1a0>
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e7f2      	b.n	8004fd0 <_printf_float+0x1a0>
 8004fea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004fee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ff0:	4299      	cmp	r1, r3
 8004ff2:	db05      	blt.n	8005000 <_printf_float+0x1d0>
 8004ff4:	6823      	ldr	r3, [r4, #0]
 8004ff6:	6121      	str	r1, [r4, #16]
 8004ff8:	07d8      	lsls	r0, r3, #31
 8004ffa:	d5ea      	bpl.n	8004fd2 <_printf_float+0x1a2>
 8004ffc:	1c4b      	adds	r3, r1, #1
 8004ffe:	e7e7      	b.n	8004fd0 <_printf_float+0x1a0>
 8005000:	2900      	cmp	r1, #0
 8005002:	bfd4      	ite	le
 8005004:	f1c1 0202 	rsble	r2, r1, #2
 8005008:	2201      	movgt	r2, #1
 800500a:	4413      	add	r3, r2
 800500c:	e7e0      	b.n	8004fd0 <_printf_float+0x1a0>
 800500e:	6823      	ldr	r3, [r4, #0]
 8005010:	055a      	lsls	r2, r3, #21
 8005012:	d407      	bmi.n	8005024 <_printf_float+0x1f4>
 8005014:	6923      	ldr	r3, [r4, #16]
 8005016:	4642      	mov	r2, r8
 8005018:	4631      	mov	r1, r6
 800501a:	4628      	mov	r0, r5
 800501c:	47b8      	blx	r7
 800501e:	3001      	adds	r0, #1
 8005020:	d12c      	bne.n	800507c <_printf_float+0x24c>
 8005022:	e764      	b.n	8004eee <_printf_float+0xbe>
 8005024:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005028:	f240 80e0 	bls.w	80051ec <_printf_float+0x3bc>
 800502c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005030:	2200      	movs	r2, #0
 8005032:	2300      	movs	r3, #0
 8005034:	f7fb fd48 	bl	8000ac8 <__aeabi_dcmpeq>
 8005038:	2800      	cmp	r0, #0
 800503a:	d034      	beq.n	80050a6 <_printf_float+0x276>
 800503c:	4a37      	ldr	r2, [pc, #220]	; (800511c <_printf_float+0x2ec>)
 800503e:	2301      	movs	r3, #1
 8005040:	4631      	mov	r1, r6
 8005042:	4628      	mov	r0, r5
 8005044:	47b8      	blx	r7
 8005046:	3001      	adds	r0, #1
 8005048:	f43f af51 	beq.w	8004eee <_printf_float+0xbe>
 800504c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005050:	429a      	cmp	r2, r3
 8005052:	db02      	blt.n	800505a <_printf_float+0x22a>
 8005054:	6823      	ldr	r3, [r4, #0]
 8005056:	07d8      	lsls	r0, r3, #31
 8005058:	d510      	bpl.n	800507c <_printf_float+0x24c>
 800505a:	ee18 3a10 	vmov	r3, s16
 800505e:	4652      	mov	r2, sl
 8005060:	4631      	mov	r1, r6
 8005062:	4628      	mov	r0, r5
 8005064:	47b8      	blx	r7
 8005066:	3001      	adds	r0, #1
 8005068:	f43f af41 	beq.w	8004eee <_printf_float+0xbe>
 800506c:	f04f 0800 	mov.w	r8, #0
 8005070:	f104 091a 	add.w	r9, r4, #26
 8005074:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005076:	3b01      	subs	r3, #1
 8005078:	4543      	cmp	r3, r8
 800507a:	dc09      	bgt.n	8005090 <_printf_float+0x260>
 800507c:	6823      	ldr	r3, [r4, #0]
 800507e:	079b      	lsls	r3, r3, #30
 8005080:	f100 8107 	bmi.w	8005292 <_printf_float+0x462>
 8005084:	68e0      	ldr	r0, [r4, #12]
 8005086:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005088:	4298      	cmp	r0, r3
 800508a:	bfb8      	it	lt
 800508c:	4618      	movlt	r0, r3
 800508e:	e730      	b.n	8004ef2 <_printf_float+0xc2>
 8005090:	2301      	movs	r3, #1
 8005092:	464a      	mov	r2, r9
 8005094:	4631      	mov	r1, r6
 8005096:	4628      	mov	r0, r5
 8005098:	47b8      	blx	r7
 800509a:	3001      	adds	r0, #1
 800509c:	f43f af27 	beq.w	8004eee <_printf_float+0xbe>
 80050a0:	f108 0801 	add.w	r8, r8, #1
 80050a4:	e7e6      	b.n	8005074 <_printf_float+0x244>
 80050a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	dc39      	bgt.n	8005120 <_printf_float+0x2f0>
 80050ac:	4a1b      	ldr	r2, [pc, #108]	; (800511c <_printf_float+0x2ec>)
 80050ae:	2301      	movs	r3, #1
 80050b0:	4631      	mov	r1, r6
 80050b2:	4628      	mov	r0, r5
 80050b4:	47b8      	blx	r7
 80050b6:	3001      	adds	r0, #1
 80050b8:	f43f af19 	beq.w	8004eee <_printf_float+0xbe>
 80050bc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80050c0:	4313      	orrs	r3, r2
 80050c2:	d102      	bne.n	80050ca <_printf_float+0x29a>
 80050c4:	6823      	ldr	r3, [r4, #0]
 80050c6:	07d9      	lsls	r1, r3, #31
 80050c8:	d5d8      	bpl.n	800507c <_printf_float+0x24c>
 80050ca:	ee18 3a10 	vmov	r3, s16
 80050ce:	4652      	mov	r2, sl
 80050d0:	4631      	mov	r1, r6
 80050d2:	4628      	mov	r0, r5
 80050d4:	47b8      	blx	r7
 80050d6:	3001      	adds	r0, #1
 80050d8:	f43f af09 	beq.w	8004eee <_printf_float+0xbe>
 80050dc:	f04f 0900 	mov.w	r9, #0
 80050e0:	f104 0a1a 	add.w	sl, r4, #26
 80050e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050e6:	425b      	negs	r3, r3
 80050e8:	454b      	cmp	r3, r9
 80050ea:	dc01      	bgt.n	80050f0 <_printf_float+0x2c0>
 80050ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050ee:	e792      	b.n	8005016 <_printf_float+0x1e6>
 80050f0:	2301      	movs	r3, #1
 80050f2:	4652      	mov	r2, sl
 80050f4:	4631      	mov	r1, r6
 80050f6:	4628      	mov	r0, r5
 80050f8:	47b8      	blx	r7
 80050fa:	3001      	adds	r0, #1
 80050fc:	f43f aef7 	beq.w	8004eee <_printf_float+0xbe>
 8005100:	f109 0901 	add.w	r9, r9, #1
 8005104:	e7ee      	b.n	80050e4 <_printf_float+0x2b4>
 8005106:	bf00      	nop
 8005108:	7fefffff 	.word	0x7fefffff
 800510c:	08007ad0 	.word	0x08007ad0
 8005110:	08007ad4 	.word	0x08007ad4
 8005114:	08007ad8 	.word	0x08007ad8
 8005118:	08007adc 	.word	0x08007adc
 800511c:	08007ae0 	.word	0x08007ae0
 8005120:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005122:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005124:	429a      	cmp	r2, r3
 8005126:	bfa8      	it	ge
 8005128:	461a      	movge	r2, r3
 800512a:	2a00      	cmp	r2, #0
 800512c:	4691      	mov	r9, r2
 800512e:	dc37      	bgt.n	80051a0 <_printf_float+0x370>
 8005130:	f04f 0b00 	mov.w	fp, #0
 8005134:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005138:	f104 021a 	add.w	r2, r4, #26
 800513c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800513e:	9305      	str	r3, [sp, #20]
 8005140:	eba3 0309 	sub.w	r3, r3, r9
 8005144:	455b      	cmp	r3, fp
 8005146:	dc33      	bgt.n	80051b0 <_printf_float+0x380>
 8005148:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800514c:	429a      	cmp	r2, r3
 800514e:	db3b      	blt.n	80051c8 <_printf_float+0x398>
 8005150:	6823      	ldr	r3, [r4, #0]
 8005152:	07da      	lsls	r2, r3, #31
 8005154:	d438      	bmi.n	80051c8 <_printf_float+0x398>
 8005156:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800515a:	eba2 0903 	sub.w	r9, r2, r3
 800515e:	9b05      	ldr	r3, [sp, #20]
 8005160:	1ad2      	subs	r2, r2, r3
 8005162:	4591      	cmp	r9, r2
 8005164:	bfa8      	it	ge
 8005166:	4691      	movge	r9, r2
 8005168:	f1b9 0f00 	cmp.w	r9, #0
 800516c:	dc35      	bgt.n	80051da <_printf_float+0x3aa>
 800516e:	f04f 0800 	mov.w	r8, #0
 8005172:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005176:	f104 0a1a 	add.w	sl, r4, #26
 800517a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800517e:	1a9b      	subs	r3, r3, r2
 8005180:	eba3 0309 	sub.w	r3, r3, r9
 8005184:	4543      	cmp	r3, r8
 8005186:	f77f af79 	ble.w	800507c <_printf_float+0x24c>
 800518a:	2301      	movs	r3, #1
 800518c:	4652      	mov	r2, sl
 800518e:	4631      	mov	r1, r6
 8005190:	4628      	mov	r0, r5
 8005192:	47b8      	blx	r7
 8005194:	3001      	adds	r0, #1
 8005196:	f43f aeaa 	beq.w	8004eee <_printf_float+0xbe>
 800519a:	f108 0801 	add.w	r8, r8, #1
 800519e:	e7ec      	b.n	800517a <_printf_float+0x34a>
 80051a0:	4613      	mov	r3, r2
 80051a2:	4631      	mov	r1, r6
 80051a4:	4642      	mov	r2, r8
 80051a6:	4628      	mov	r0, r5
 80051a8:	47b8      	blx	r7
 80051aa:	3001      	adds	r0, #1
 80051ac:	d1c0      	bne.n	8005130 <_printf_float+0x300>
 80051ae:	e69e      	b.n	8004eee <_printf_float+0xbe>
 80051b0:	2301      	movs	r3, #1
 80051b2:	4631      	mov	r1, r6
 80051b4:	4628      	mov	r0, r5
 80051b6:	9205      	str	r2, [sp, #20]
 80051b8:	47b8      	blx	r7
 80051ba:	3001      	adds	r0, #1
 80051bc:	f43f ae97 	beq.w	8004eee <_printf_float+0xbe>
 80051c0:	9a05      	ldr	r2, [sp, #20]
 80051c2:	f10b 0b01 	add.w	fp, fp, #1
 80051c6:	e7b9      	b.n	800513c <_printf_float+0x30c>
 80051c8:	ee18 3a10 	vmov	r3, s16
 80051cc:	4652      	mov	r2, sl
 80051ce:	4631      	mov	r1, r6
 80051d0:	4628      	mov	r0, r5
 80051d2:	47b8      	blx	r7
 80051d4:	3001      	adds	r0, #1
 80051d6:	d1be      	bne.n	8005156 <_printf_float+0x326>
 80051d8:	e689      	b.n	8004eee <_printf_float+0xbe>
 80051da:	9a05      	ldr	r2, [sp, #20]
 80051dc:	464b      	mov	r3, r9
 80051de:	4442      	add	r2, r8
 80051e0:	4631      	mov	r1, r6
 80051e2:	4628      	mov	r0, r5
 80051e4:	47b8      	blx	r7
 80051e6:	3001      	adds	r0, #1
 80051e8:	d1c1      	bne.n	800516e <_printf_float+0x33e>
 80051ea:	e680      	b.n	8004eee <_printf_float+0xbe>
 80051ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80051ee:	2a01      	cmp	r2, #1
 80051f0:	dc01      	bgt.n	80051f6 <_printf_float+0x3c6>
 80051f2:	07db      	lsls	r3, r3, #31
 80051f4:	d53a      	bpl.n	800526c <_printf_float+0x43c>
 80051f6:	2301      	movs	r3, #1
 80051f8:	4642      	mov	r2, r8
 80051fa:	4631      	mov	r1, r6
 80051fc:	4628      	mov	r0, r5
 80051fe:	47b8      	blx	r7
 8005200:	3001      	adds	r0, #1
 8005202:	f43f ae74 	beq.w	8004eee <_printf_float+0xbe>
 8005206:	ee18 3a10 	vmov	r3, s16
 800520a:	4652      	mov	r2, sl
 800520c:	4631      	mov	r1, r6
 800520e:	4628      	mov	r0, r5
 8005210:	47b8      	blx	r7
 8005212:	3001      	adds	r0, #1
 8005214:	f43f ae6b 	beq.w	8004eee <_printf_float+0xbe>
 8005218:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800521c:	2200      	movs	r2, #0
 800521e:	2300      	movs	r3, #0
 8005220:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005224:	f7fb fc50 	bl	8000ac8 <__aeabi_dcmpeq>
 8005228:	b9d8      	cbnz	r0, 8005262 <_printf_float+0x432>
 800522a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800522e:	f108 0201 	add.w	r2, r8, #1
 8005232:	4631      	mov	r1, r6
 8005234:	4628      	mov	r0, r5
 8005236:	47b8      	blx	r7
 8005238:	3001      	adds	r0, #1
 800523a:	d10e      	bne.n	800525a <_printf_float+0x42a>
 800523c:	e657      	b.n	8004eee <_printf_float+0xbe>
 800523e:	2301      	movs	r3, #1
 8005240:	4652      	mov	r2, sl
 8005242:	4631      	mov	r1, r6
 8005244:	4628      	mov	r0, r5
 8005246:	47b8      	blx	r7
 8005248:	3001      	adds	r0, #1
 800524a:	f43f ae50 	beq.w	8004eee <_printf_float+0xbe>
 800524e:	f108 0801 	add.w	r8, r8, #1
 8005252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005254:	3b01      	subs	r3, #1
 8005256:	4543      	cmp	r3, r8
 8005258:	dcf1      	bgt.n	800523e <_printf_float+0x40e>
 800525a:	464b      	mov	r3, r9
 800525c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005260:	e6da      	b.n	8005018 <_printf_float+0x1e8>
 8005262:	f04f 0800 	mov.w	r8, #0
 8005266:	f104 0a1a 	add.w	sl, r4, #26
 800526a:	e7f2      	b.n	8005252 <_printf_float+0x422>
 800526c:	2301      	movs	r3, #1
 800526e:	4642      	mov	r2, r8
 8005270:	e7df      	b.n	8005232 <_printf_float+0x402>
 8005272:	2301      	movs	r3, #1
 8005274:	464a      	mov	r2, r9
 8005276:	4631      	mov	r1, r6
 8005278:	4628      	mov	r0, r5
 800527a:	47b8      	blx	r7
 800527c:	3001      	adds	r0, #1
 800527e:	f43f ae36 	beq.w	8004eee <_printf_float+0xbe>
 8005282:	f108 0801 	add.w	r8, r8, #1
 8005286:	68e3      	ldr	r3, [r4, #12]
 8005288:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800528a:	1a5b      	subs	r3, r3, r1
 800528c:	4543      	cmp	r3, r8
 800528e:	dcf0      	bgt.n	8005272 <_printf_float+0x442>
 8005290:	e6f8      	b.n	8005084 <_printf_float+0x254>
 8005292:	f04f 0800 	mov.w	r8, #0
 8005296:	f104 0919 	add.w	r9, r4, #25
 800529a:	e7f4      	b.n	8005286 <_printf_float+0x456>

0800529c <_printf_common>:
 800529c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052a0:	4616      	mov	r6, r2
 80052a2:	4699      	mov	r9, r3
 80052a4:	688a      	ldr	r2, [r1, #8]
 80052a6:	690b      	ldr	r3, [r1, #16]
 80052a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052ac:	4293      	cmp	r3, r2
 80052ae:	bfb8      	it	lt
 80052b0:	4613      	movlt	r3, r2
 80052b2:	6033      	str	r3, [r6, #0]
 80052b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052b8:	4607      	mov	r7, r0
 80052ba:	460c      	mov	r4, r1
 80052bc:	b10a      	cbz	r2, 80052c2 <_printf_common+0x26>
 80052be:	3301      	adds	r3, #1
 80052c0:	6033      	str	r3, [r6, #0]
 80052c2:	6823      	ldr	r3, [r4, #0]
 80052c4:	0699      	lsls	r1, r3, #26
 80052c6:	bf42      	ittt	mi
 80052c8:	6833      	ldrmi	r3, [r6, #0]
 80052ca:	3302      	addmi	r3, #2
 80052cc:	6033      	strmi	r3, [r6, #0]
 80052ce:	6825      	ldr	r5, [r4, #0]
 80052d0:	f015 0506 	ands.w	r5, r5, #6
 80052d4:	d106      	bne.n	80052e4 <_printf_common+0x48>
 80052d6:	f104 0a19 	add.w	sl, r4, #25
 80052da:	68e3      	ldr	r3, [r4, #12]
 80052dc:	6832      	ldr	r2, [r6, #0]
 80052de:	1a9b      	subs	r3, r3, r2
 80052e0:	42ab      	cmp	r3, r5
 80052e2:	dc26      	bgt.n	8005332 <_printf_common+0x96>
 80052e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80052e8:	1e13      	subs	r3, r2, #0
 80052ea:	6822      	ldr	r2, [r4, #0]
 80052ec:	bf18      	it	ne
 80052ee:	2301      	movne	r3, #1
 80052f0:	0692      	lsls	r2, r2, #26
 80052f2:	d42b      	bmi.n	800534c <_printf_common+0xb0>
 80052f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052f8:	4649      	mov	r1, r9
 80052fa:	4638      	mov	r0, r7
 80052fc:	47c0      	blx	r8
 80052fe:	3001      	adds	r0, #1
 8005300:	d01e      	beq.n	8005340 <_printf_common+0xa4>
 8005302:	6823      	ldr	r3, [r4, #0]
 8005304:	6922      	ldr	r2, [r4, #16]
 8005306:	f003 0306 	and.w	r3, r3, #6
 800530a:	2b04      	cmp	r3, #4
 800530c:	bf02      	ittt	eq
 800530e:	68e5      	ldreq	r5, [r4, #12]
 8005310:	6833      	ldreq	r3, [r6, #0]
 8005312:	1aed      	subeq	r5, r5, r3
 8005314:	68a3      	ldr	r3, [r4, #8]
 8005316:	bf0c      	ite	eq
 8005318:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800531c:	2500      	movne	r5, #0
 800531e:	4293      	cmp	r3, r2
 8005320:	bfc4      	itt	gt
 8005322:	1a9b      	subgt	r3, r3, r2
 8005324:	18ed      	addgt	r5, r5, r3
 8005326:	2600      	movs	r6, #0
 8005328:	341a      	adds	r4, #26
 800532a:	42b5      	cmp	r5, r6
 800532c:	d11a      	bne.n	8005364 <_printf_common+0xc8>
 800532e:	2000      	movs	r0, #0
 8005330:	e008      	b.n	8005344 <_printf_common+0xa8>
 8005332:	2301      	movs	r3, #1
 8005334:	4652      	mov	r2, sl
 8005336:	4649      	mov	r1, r9
 8005338:	4638      	mov	r0, r7
 800533a:	47c0      	blx	r8
 800533c:	3001      	adds	r0, #1
 800533e:	d103      	bne.n	8005348 <_printf_common+0xac>
 8005340:	f04f 30ff 	mov.w	r0, #4294967295
 8005344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005348:	3501      	adds	r5, #1
 800534a:	e7c6      	b.n	80052da <_printf_common+0x3e>
 800534c:	18e1      	adds	r1, r4, r3
 800534e:	1c5a      	adds	r2, r3, #1
 8005350:	2030      	movs	r0, #48	; 0x30
 8005352:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005356:	4422      	add	r2, r4
 8005358:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800535c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005360:	3302      	adds	r3, #2
 8005362:	e7c7      	b.n	80052f4 <_printf_common+0x58>
 8005364:	2301      	movs	r3, #1
 8005366:	4622      	mov	r2, r4
 8005368:	4649      	mov	r1, r9
 800536a:	4638      	mov	r0, r7
 800536c:	47c0      	blx	r8
 800536e:	3001      	adds	r0, #1
 8005370:	d0e6      	beq.n	8005340 <_printf_common+0xa4>
 8005372:	3601      	adds	r6, #1
 8005374:	e7d9      	b.n	800532a <_printf_common+0x8e>
	...

08005378 <_printf_i>:
 8005378:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800537c:	7e0f      	ldrb	r7, [r1, #24]
 800537e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005380:	2f78      	cmp	r7, #120	; 0x78
 8005382:	4691      	mov	r9, r2
 8005384:	4680      	mov	r8, r0
 8005386:	460c      	mov	r4, r1
 8005388:	469a      	mov	sl, r3
 800538a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800538e:	d807      	bhi.n	80053a0 <_printf_i+0x28>
 8005390:	2f62      	cmp	r7, #98	; 0x62
 8005392:	d80a      	bhi.n	80053aa <_printf_i+0x32>
 8005394:	2f00      	cmp	r7, #0
 8005396:	f000 80d4 	beq.w	8005542 <_printf_i+0x1ca>
 800539a:	2f58      	cmp	r7, #88	; 0x58
 800539c:	f000 80c0 	beq.w	8005520 <_printf_i+0x1a8>
 80053a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80053a8:	e03a      	b.n	8005420 <_printf_i+0xa8>
 80053aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80053ae:	2b15      	cmp	r3, #21
 80053b0:	d8f6      	bhi.n	80053a0 <_printf_i+0x28>
 80053b2:	a101      	add	r1, pc, #4	; (adr r1, 80053b8 <_printf_i+0x40>)
 80053b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053b8:	08005411 	.word	0x08005411
 80053bc:	08005425 	.word	0x08005425
 80053c0:	080053a1 	.word	0x080053a1
 80053c4:	080053a1 	.word	0x080053a1
 80053c8:	080053a1 	.word	0x080053a1
 80053cc:	080053a1 	.word	0x080053a1
 80053d0:	08005425 	.word	0x08005425
 80053d4:	080053a1 	.word	0x080053a1
 80053d8:	080053a1 	.word	0x080053a1
 80053dc:	080053a1 	.word	0x080053a1
 80053e0:	080053a1 	.word	0x080053a1
 80053e4:	08005529 	.word	0x08005529
 80053e8:	08005451 	.word	0x08005451
 80053ec:	080054e3 	.word	0x080054e3
 80053f0:	080053a1 	.word	0x080053a1
 80053f4:	080053a1 	.word	0x080053a1
 80053f8:	0800554b 	.word	0x0800554b
 80053fc:	080053a1 	.word	0x080053a1
 8005400:	08005451 	.word	0x08005451
 8005404:	080053a1 	.word	0x080053a1
 8005408:	080053a1 	.word	0x080053a1
 800540c:	080054eb 	.word	0x080054eb
 8005410:	682b      	ldr	r3, [r5, #0]
 8005412:	1d1a      	adds	r2, r3, #4
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	602a      	str	r2, [r5, #0]
 8005418:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800541c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005420:	2301      	movs	r3, #1
 8005422:	e09f      	b.n	8005564 <_printf_i+0x1ec>
 8005424:	6820      	ldr	r0, [r4, #0]
 8005426:	682b      	ldr	r3, [r5, #0]
 8005428:	0607      	lsls	r7, r0, #24
 800542a:	f103 0104 	add.w	r1, r3, #4
 800542e:	6029      	str	r1, [r5, #0]
 8005430:	d501      	bpl.n	8005436 <_printf_i+0xbe>
 8005432:	681e      	ldr	r6, [r3, #0]
 8005434:	e003      	b.n	800543e <_printf_i+0xc6>
 8005436:	0646      	lsls	r6, r0, #25
 8005438:	d5fb      	bpl.n	8005432 <_printf_i+0xba>
 800543a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800543e:	2e00      	cmp	r6, #0
 8005440:	da03      	bge.n	800544a <_printf_i+0xd2>
 8005442:	232d      	movs	r3, #45	; 0x2d
 8005444:	4276      	negs	r6, r6
 8005446:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800544a:	485a      	ldr	r0, [pc, #360]	; (80055b4 <_printf_i+0x23c>)
 800544c:	230a      	movs	r3, #10
 800544e:	e012      	b.n	8005476 <_printf_i+0xfe>
 8005450:	682b      	ldr	r3, [r5, #0]
 8005452:	6820      	ldr	r0, [r4, #0]
 8005454:	1d19      	adds	r1, r3, #4
 8005456:	6029      	str	r1, [r5, #0]
 8005458:	0605      	lsls	r5, r0, #24
 800545a:	d501      	bpl.n	8005460 <_printf_i+0xe8>
 800545c:	681e      	ldr	r6, [r3, #0]
 800545e:	e002      	b.n	8005466 <_printf_i+0xee>
 8005460:	0641      	lsls	r1, r0, #25
 8005462:	d5fb      	bpl.n	800545c <_printf_i+0xe4>
 8005464:	881e      	ldrh	r6, [r3, #0]
 8005466:	4853      	ldr	r0, [pc, #332]	; (80055b4 <_printf_i+0x23c>)
 8005468:	2f6f      	cmp	r7, #111	; 0x6f
 800546a:	bf0c      	ite	eq
 800546c:	2308      	moveq	r3, #8
 800546e:	230a      	movne	r3, #10
 8005470:	2100      	movs	r1, #0
 8005472:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005476:	6865      	ldr	r5, [r4, #4]
 8005478:	60a5      	str	r5, [r4, #8]
 800547a:	2d00      	cmp	r5, #0
 800547c:	bfa2      	ittt	ge
 800547e:	6821      	ldrge	r1, [r4, #0]
 8005480:	f021 0104 	bicge.w	r1, r1, #4
 8005484:	6021      	strge	r1, [r4, #0]
 8005486:	b90e      	cbnz	r6, 800548c <_printf_i+0x114>
 8005488:	2d00      	cmp	r5, #0
 800548a:	d04b      	beq.n	8005524 <_printf_i+0x1ac>
 800548c:	4615      	mov	r5, r2
 800548e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005492:	fb03 6711 	mls	r7, r3, r1, r6
 8005496:	5dc7      	ldrb	r7, [r0, r7]
 8005498:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800549c:	4637      	mov	r7, r6
 800549e:	42bb      	cmp	r3, r7
 80054a0:	460e      	mov	r6, r1
 80054a2:	d9f4      	bls.n	800548e <_printf_i+0x116>
 80054a4:	2b08      	cmp	r3, #8
 80054a6:	d10b      	bne.n	80054c0 <_printf_i+0x148>
 80054a8:	6823      	ldr	r3, [r4, #0]
 80054aa:	07de      	lsls	r6, r3, #31
 80054ac:	d508      	bpl.n	80054c0 <_printf_i+0x148>
 80054ae:	6923      	ldr	r3, [r4, #16]
 80054b0:	6861      	ldr	r1, [r4, #4]
 80054b2:	4299      	cmp	r1, r3
 80054b4:	bfde      	ittt	le
 80054b6:	2330      	movle	r3, #48	; 0x30
 80054b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80054bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80054c0:	1b52      	subs	r2, r2, r5
 80054c2:	6122      	str	r2, [r4, #16]
 80054c4:	f8cd a000 	str.w	sl, [sp]
 80054c8:	464b      	mov	r3, r9
 80054ca:	aa03      	add	r2, sp, #12
 80054cc:	4621      	mov	r1, r4
 80054ce:	4640      	mov	r0, r8
 80054d0:	f7ff fee4 	bl	800529c <_printf_common>
 80054d4:	3001      	adds	r0, #1
 80054d6:	d14a      	bne.n	800556e <_printf_i+0x1f6>
 80054d8:	f04f 30ff 	mov.w	r0, #4294967295
 80054dc:	b004      	add	sp, #16
 80054de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054e2:	6823      	ldr	r3, [r4, #0]
 80054e4:	f043 0320 	orr.w	r3, r3, #32
 80054e8:	6023      	str	r3, [r4, #0]
 80054ea:	4833      	ldr	r0, [pc, #204]	; (80055b8 <_printf_i+0x240>)
 80054ec:	2778      	movs	r7, #120	; 0x78
 80054ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80054f2:	6823      	ldr	r3, [r4, #0]
 80054f4:	6829      	ldr	r1, [r5, #0]
 80054f6:	061f      	lsls	r7, r3, #24
 80054f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80054fc:	d402      	bmi.n	8005504 <_printf_i+0x18c>
 80054fe:	065f      	lsls	r7, r3, #25
 8005500:	bf48      	it	mi
 8005502:	b2b6      	uxthmi	r6, r6
 8005504:	07df      	lsls	r7, r3, #31
 8005506:	bf48      	it	mi
 8005508:	f043 0320 	orrmi.w	r3, r3, #32
 800550c:	6029      	str	r1, [r5, #0]
 800550e:	bf48      	it	mi
 8005510:	6023      	strmi	r3, [r4, #0]
 8005512:	b91e      	cbnz	r6, 800551c <_printf_i+0x1a4>
 8005514:	6823      	ldr	r3, [r4, #0]
 8005516:	f023 0320 	bic.w	r3, r3, #32
 800551a:	6023      	str	r3, [r4, #0]
 800551c:	2310      	movs	r3, #16
 800551e:	e7a7      	b.n	8005470 <_printf_i+0xf8>
 8005520:	4824      	ldr	r0, [pc, #144]	; (80055b4 <_printf_i+0x23c>)
 8005522:	e7e4      	b.n	80054ee <_printf_i+0x176>
 8005524:	4615      	mov	r5, r2
 8005526:	e7bd      	b.n	80054a4 <_printf_i+0x12c>
 8005528:	682b      	ldr	r3, [r5, #0]
 800552a:	6826      	ldr	r6, [r4, #0]
 800552c:	6961      	ldr	r1, [r4, #20]
 800552e:	1d18      	adds	r0, r3, #4
 8005530:	6028      	str	r0, [r5, #0]
 8005532:	0635      	lsls	r5, r6, #24
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	d501      	bpl.n	800553c <_printf_i+0x1c4>
 8005538:	6019      	str	r1, [r3, #0]
 800553a:	e002      	b.n	8005542 <_printf_i+0x1ca>
 800553c:	0670      	lsls	r0, r6, #25
 800553e:	d5fb      	bpl.n	8005538 <_printf_i+0x1c0>
 8005540:	8019      	strh	r1, [r3, #0]
 8005542:	2300      	movs	r3, #0
 8005544:	6123      	str	r3, [r4, #16]
 8005546:	4615      	mov	r5, r2
 8005548:	e7bc      	b.n	80054c4 <_printf_i+0x14c>
 800554a:	682b      	ldr	r3, [r5, #0]
 800554c:	1d1a      	adds	r2, r3, #4
 800554e:	602a      	str	r2, [r5, #0]
 8005550:	681d      	ldr	r5, [r3, #0]
 8005552:	6862      	ldr	r2, [r4, #4]
 8005554:	2100      	movs	r1, #0
 8005556:	4628      	mov	r0, r5
 8005558:	f7fa fe3a 	bl	80001d0 <memchr>
 800555c:	b108      	cbz	r0, 8005562 <_printf_i+0x1ea>
 800555e:	1b40      	subs	r0, r0, r5
 8005560:	6060      	str	r0, [r4, #4]
 8005562:	6863      	ldr	r3, [r4, #4]
 8005564:	6123      	str	r3, [r4, #16]
 8005566:	2300      	movs	r3, #0
 8005568:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800556c:	e7aa      	b.n	80054c4 <_printf_i+0x14c>
 800556e:	6923      	ldr	r3, [r4, #16]
 8005570:	462a      	mov	r2, r5
 8005572:	4649      	mov	r1, r9
 8005574:	4640      	mov	r0, r8
 8005576:	47d0      	blx	sl
 8005578:	3001      	adds	r0, #1
 800557a:	d0ad      	beq.n	80054d8 <_printf_i+0x160>
 800557c:	6823      	ldr	r3, [r4, #0]
 800557e:	079b      	lsls	r3, r3, #30
 8005580:	d413      	bmi.n	80055aa <_printf_i+0x232>
 8005582:	68e0      	ldr	r0, [r4, #12]
 8005584:	9b03      	ldr	r3, [sp, #12]
 8005586:	4298      	cmp	r0, r3
 8005588:	bfb8      	it	lt
 800558a:	4618      	movlt	r0, r3
 800558c:	e7a6      	b.n	80054dc <_printf_i+0x164>
 800558e:	2301      	movs	r3, #1
 8005590:	4632      	mov	r2, r6
 8005592:	4649      	mov	r1, r9
 8005594:	4640      	mov	r0, r8
 8005596:	47d0      	blx	sl
 8005598:	3001      	adds	r0, #1
 800559a:	d09d      	beq.n	80054d8 <_printf_i+0x160>
 800559c:	3501      	adds	r5, #1
 800559e:	68e3      	ldr	r3, [r4, #12]
 80055a0:	9903      	ldr	r1, [sp, #12]
 80055a2:	1a5b      	subs	r3, r3, r1
 80055a4:	42ab      	cmp	r3, r5
 80055a6:	dcf2      	bgt.n	800558e <_printf_i+0x216>
 80055a8:	e7eb      	b.n	8005582 <_printf_i+0x20a>
 80055aa:	2500      	movs	r5, #0
 80055ac:	f104 0619 	add.w	r6, r4, #25
 80055b0:	e7f5      	b.n	800559e <_printf_i+0x226>
 80055b2:	bf00      	nop
 80055b4:	08007ae2 	.word	0x08007ae2
 80055b8:	08007af3 	.word	0x08007af3

080055bc <std>:
 80055bc:	2300      	movs	r3, #0
 80055be:	b510      	push	{r4, lr}
 80055c0:	4604      	mov	r4, r0
 80055c2:	e9c0 3300 	strd	r3, r3, [r0]
 80055c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80055ca:	6083      	str	r3, [r0, #8]
 80055cc:	8181      	strh	r1, [r0, #12]
 80055ce:	6643      	str	r3, [r0, #100]	; 0x64
 80055d0:	81c2      	strh	r2, [r0, #14]
 80055d2:	6183      	str	r3, [r0, #24]
 80055d4:	4619      	mov	r1, r3
 80055d6:	2208      	movs	r2, #8
 80055d8:	305c      	adds	r0, #92	; 0x5c
 80055da:	f000 f914 	bl	8005806 <memset>
 80055de:	4b0d      	ldr	r3, [pc, #52]	; (8005614 <std+0x58>)
 80055e0:	6263      	str	r3, [r4, #36]	; 0x24
 80055e2:	4b0d      	ldr	r3, [pc, #52]	; (8005618 <std+0x5c>)
 80055e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80055e6:	4b0d      	ldr	r3, [pc, #52]	; (800561c <std+0x60>)
 80055e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80055ea:	4b0d      	ldr	r3, [pc, #52]	; (8005620 <std+0x64>)
 80055ec:	6323      	str	r3, [r4, #48]	; 0x30
 80055ee:	4b0d      	ldr	r3, [pc, #52]	; (8005624 <std+0x68>)
 80055f0:	6224      	str	r4, [r4, #32]
 80055f2:	429c      	cmp	r4, r3
 80055f4:	d006      	beq.n	8005604 <std+0x48>
 80055f6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80055fa:	4294      	cmp	r4, r2
 80055fc:	d002      	beq.n	8005604 <std+0x48>
 80055fe:	33d0      	adds	r3, #208	; 0xd0
 8005600:	429c      	cmp	r4, r3
 8005602:	d105      	bne.n	8005610 <std+0x54>
 8005604:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800560c:	f000 b978 	b.w	8005900 <__retarget_lock_init_recursive>
 8005610:	bd10      	pop	{r4, pc}
 8005612:	bf00      	nop
 8005614:	08005781 	.word	0x08005781
 8005618:	080057a3 	.word	0x080057a3
 800561c:	080057db 	.word	0x080057db
 8005620:	080057ff 	.word	0x080057ff
 8005624:	20000550 	.word	0x20000550

08005628 <stdio_exit_handler>:
 8005628:	4a02      	ldr	r2, [pc, #8]	; (8005634 <stdio_exit_handler+0xc>)
 800562a:	4903      	ldr	r1, [pc, #12]	; (8005638 <stdio_exit_handler+0x10>)
 800562c:	4803      	ldr	r0, [pc, #12]	; (800563c <stdio_exit_handler+0x14>)
 800562e:	f000 b869 	b.w	8005704 <_fwalk_sglue>
 8005632:	bf00      	nop
 8005634:	20000104 	.word	0x20000104
 8005638:	080072b1 	.word	0x080072b1
 800563c:	20000110 	.word	0x20000110

08005640 <cleanup_stdio>:
 8005640:	6841      	ldr	r1, [r0, #4]
 8005642:	4b0c      	ldr	r3, [pc, #48]	; (8005674 <cleanup_stdio+0x34>)
 8005644:	4299      	cmp	r1, r3
 8005646:	b510      	push	{r4, lr}
 8005648:	4604      	mov	r4, r0
 800564a:	d001      	beq.n	8005650 <cleanup_stdio+0x10>
 800564c:	f001 fe30 	bl	80072b0 <_fflush_r>
 8005650:	68a1      	ldr	r1, [r4, #8]
 8005652:	4b09      	ldr	r3, [pc, #36]	; (8005678 <cleanup_stdio+0x38>)
 8005654:	4299      	cmp	r1, r3
 8005656:	d002      	beq.n	800565e <cleanup_stdio+0x1e>
 8005658:	4620      	mov	r0, r4
 800565a:	f001 fe29 	bl	80072b0 <_fflush_r>
 800565e:	68e1      	ldr	r1, [r4, #12]
 8005660:	4b06      	ldr	r3, [pc, #24]	; (800567c <cleanup_stdio+0x3c>)
 8005662:	4299      	cmp	r1, r3
 8005664:	d004      	beq.n	8005670 <cleanup_stdio+0x30>
 8005666:	4620      	mov	r0, r4
 8005668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800566c:	f001 be20 	b.w	80072b0 <_fflush_r>
 8005670:	bd10      	pop	{r4, pc}
 8005672:	bf00      	nop
 8005674:	20000550 	.word	0x20000550
 8005678:	200005b8 	.word	0x200005b8
 800567c:	20000620 	.word	0x20000620

08005680 <global_stdio_init.part.0>:
 8005680:	b510      	push	{r4, lr}
 8005682:	4b0b      	ldr	r3, [pc, #44]	; (80056b0 <global_stdio_init.part.0+0x30>)
 8005684:	4c0b      	ldr	r4, [pc, #44]	; (80056b4 <global_stdio_init.part.0+0x34>)
 8005686:	4a0c      	ldr	r2, [pc, #48]	; (80056b8 <global_stdio_init.part.0+0x38>)
 8005688:	601a      	str	r2, [r3, #0]
 800568a:	4620      	mov	r0, r4
 800568c:	2200      	movs	r2, #0
 800568e:	2104      	movs	r1, #4
 8005690:	f7ff ff94 	bl	80055bc <std>
 8005694:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005698:	2201      	movs	r2, #1
 800569a:	2109      	movs	r1, #9
 800569c:	f7ff ff8e 	bl	80055bc <std>
 80056a0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80056a4:	2202      	movs	r2, #2
 80056a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056aa:	2112      	movs	r1, #18
 80056ac:	f7ff bf86 	b.w	80055bc <std>
 80056b0:	20000688 	.word	0x20000688
 80056b4:	20000550 	.word	0x20000550
 80056b8:	08005629 	.word	0x08005629

080056bc <__sfp_lock_acquire>:
 80056bc:	4801      	ldr	r0, [pc, #4]	; (80056c4 <__sfp_lock_acquire+0x8>)
 80056be:	f000 b920 	b.w	8005902 <__retarget_lock_acquire_recursive>
 80056c2:	bf00      	nop
 80056c4:	20000691 	.word	0x20000691

080056c8 <__sfp_lock_release>:
 80056c8:	4801      	ldr	r0, [pc, #4]	; (80056d0 <__sfp_lock_release+0x8>)
 80056ca:	f000 b91b 	b.w	8005904 <__retarget_lock_release_recursive>
 80056ce:	bf00      	nop
 80056d0:	20000691 	.word	0x20000691

080056d4 <__sinit>:
 80056d4:	b510      	push	{r4, lr}
 80056d6:	4604      	mov	r4, r0
 80056d8:	f7ff fff0 	bl	80056bc <__sfp_lock_acquire>
 80056dc:	6a23      	ldr	r3, [r4, #32]
 80056de:	b11b      	cbz	r3, 80056e8 <__sinit+0x14>
 80056e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056e4:	f7ff bff0 	b.w	80056c8 <__sfp_lock_release>
 80056e8:	4b04      	ldr	r3, [pc, #16]	; (80056fc <__sinit+0x28>)
 80056ea:	6223      	str	r3, [r4, #32]
 80056ec:	4b04      	ldr	r3, [pc, #16]	; (8005700 <__sinit+0x2c>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1f5      	bne.n	80056e0 <__sinit+0xc>
 80056f4:	f7ff ffc4 	bl	8005680 <global_stdio_init.part.0>
 80056f8:	e7f2      	b.n	80056e0 <__sinit+0xc>
 80056fa:	bf00      	nop
 80056fc:	08005641 	.word	0x08005641
 8005700:	20000688 	.word	0x20000688

08005704 <_fwalk_sglue>:
 8005704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005708:	4607      	mov	r7, r0
 800570a:	4688      	mov	r8, r1
 800570c:	4614      	mov	r4, r2
 800570e:	2600      	movs	r6, #0
 8005710:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005714:	f1b9 0901 	subs.w	r9, r9, #1
 8005718:	d505      	bpl.n	8005726 <_fwalk_sglue+0x22>
 800571a:	6824      	ldr	r4, [r4, #0]
 800571c:	2c00      	cmp	r4, #0
 800571e:	d1f7      	bne.n	8005710 <_fwalk_sglue+0xc>
 8005720:	4630      	mov	r0, r6
 8005722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005726:	89ab      	ldrh	r3, [r5, #12]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d907      	bls.n	800573c <_fwalk_sglue+0x38>
 800572c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005730:	3301      	adds	r3, #1
 8005732:	d003      	beq.n	800573c <_fwalk_sglue+0x38>
 8005734:	4629      	mov	r1, r5
 8005736:	4638      	mov	r0, r7
 8005738:	47c0      	blx	r8
 800573a:	4306      	orrs	r6, r0
 800573c:	3568      	adds	r5, #104	; 0x68
 800573e:	e7e9      	b.n	8005714 <_fwalk_sglue+0x10>

08005740 <siprintf>:
 8005740:	b40e      	push	{r1, r2, r3}
 8005742:	b500      	push	{lr}
 8005744:	b09c      	sub	sp, #112	; 0x70
 8005746:	ab1d      	add	r3, sp, #116	; 0x74
 8005748:	9002      	str	r0, [sp, #8]
 800574a:	9006      	str	r0, [sp, #24]
 800574c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005750:	4809      	ldr	r0, [pc, #36]	; (8005778 <siprintf+0x38>)
 8005752:	9107      	str	r1, [sp, #28]
 8005754:	9104      	str	r1, [sp, #16]
 8005756:	4909      	ldr	r1, [pc, #36]	; (800577c <siprintf+0x3c>)
 8005758:	f853 2b04 	ldr.w	r2, [r3], #4
 800575c:	9105      	str	r1, [sp, #20]
 800575e:	6800      	ldr	r0, [r0, #0]
 8005760:	9301      	str	r3, [sp, #4]
 8005762:	a902      	add	r1, sp, #8
 8005764:	f001 fc20 	bl	8006fa8 <_svfiprintf_r>
 8005768:	9b02      	ldr	r3, [sp, #8]
 800576a:	2200      	movs	r2, #0
 800576c:	701a      	strb	r2, [r3, #0]
 800576e:	b01c      	add	sp, #112	; 0x70
 8005770:	f85d eb04 	ldr.w	lr, [sp], #4
 8005774:	b003      	add	sp, #12
 8005776:	4770      	bx	lr
 8005778:	2000015c 	.word	0x2000015c
 800577c:	ffff0208 	.word	0xffff0208

08005780 <__sread>:
 8005780:	b510      	push	{r4, lr}
 8005782:	460c      	mov	r4, r1
 8005784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005788:	f000 f86c 	bl	8005864 <_read_r>
 800578c:	2800      	cmp	r0, #0
 800578e:	bfab      	itete	ge
 8005790:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005792:	89a3      	ldrhlt	r3, [r4, #12]
 8005794:	181b      	addge	r3, r3, r0
 8005796:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800579a:	bfac      	ite	ge
 800579c:	6563      	strge	r3, [r4, #84]	; 0x54
 800579e:	81a3      	strhlt	r3, [r4, #12]
 80057a0:	bd10      	pop	{r4, pc}

080057a2 <__swrite>:
 80057a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057a6:	461f      	mov	r7, r3
 80057a8:	898b      	ldrh	r3, [r1, #12]
 80057aa:	05db      	lsls	r3, r3, #23
 80057ac:	4605      	mov	r5, r0
 80057ae:	460c      	mov	r4, r1
 80057b0:	4616      	mov	r6, r2
 80057b2:	d505      	bpl.n	80057c0 <__swrite+0x1e>
 80057b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057b8:	2302      	movs	r3, #2
 80057ba:	2200      	movs	r2, #0
 80057bc:	f000 f840 	bl	8005840 <_lseek_r>
 80057c0:	89a3      	ldrh	r3, [r4, #12]
 80057c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057ca:	81a3      	strh	r3, [r4, #12]
 80057cc:	4632      	mov	r2, r6
 80057ce:	463b      	mov	r3, r7
 80057d0:	4628      	mov	r0, r5
 80057d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057d6:	f000 b857 	b.w	8005888 <_write_r>

080057da <__sseek>:
 80057da:	b510      	push	{r4, lr}
 80057dc:	460c      	mov	r4, r1
 80057de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057e2:	f000 f82d 	bl	8005840 <_lseek_r>
 80057e6:	1c43      	adds	r3, r0, #1
 80057e8:	89a3      	ldrh	r3, [r4, #12]
 80057ea:	bf15      	itete	ne
 80057ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80057ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80057f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80057f6:	81a3      	strheq	r3, [r4, #12]
 80057f8:	bf18      	it	ne
 80057fa:	81a3      	strhne	r3, [r4, #12]
 80057fc:	bd10      	pop	{r4, pc}

080057fe <__sclose>:
 80057fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005802:	f000 b80d 	b.w	8005820 <_close_r>

08005806 <memset>:
 8005806:	4402      	add	r2, r0
 8005808:	4603      	mov	r3, r0
 800580a:	4293      	cmp	r3, r2
 800580c:	d100      	bne.n	8005810 <memset+0xa>
 800580e:	4770      	bx	lr
 8005810:	f803 1b01 	strb.w	r1, [r3], #1
 8005814:	e7f9      	b.n	800580a <memset+0x4>
	...

08005818 <_localeconv_r>:
 8005818:	4800      	ldr	r0, [pc, #0]	; (800581c <_localeconv_r+0x4>)
 800581a:	4770      	bx	lr
 800581c:	20000250 	.word	0x20000250

08005820 <_close_r>:
 8005820:	b538      	push	{r3, r4, r5, lr}
 8005822:	4d06      	ldr	r5, [pc, #24]	; (800583c <_close_r+0x1c>)
 8005824:	2300      	movs	r3, #0
 8005826:	4604      	mov	r4, r0
 8005828:	4608      	mov	r0, r1
 800582a:	602b      	str	r3, [r5, #0]
 800582c:	f7fb fe71 	bl	8001512 <_close>
 8005830:	1c43      	adds	r3, r0, #1
 8005832:	d102      	bne.n	800583a <_close_r+0x1a>
 8005834:	682b      	ldr	r3, [r5, #0]
 8005836:	b103      	cbz	r3, 800583a <_close_r+0x1a>
 8005838:	6023      	str	r3, [r4, #0]
 800583a:	bd38      	pop	{r3, r4, r5, pc}
 800583c:	2000068c 	.word	0x2000068c

08005840 <_lseek_r>:
 8005840:	b538      	push	{r3, r4, r5, lr}
 8005842:	4d07      	ldr	r5, [pc, #28]	; (8005860 <_lseek_r+0x20>)
 8005844:	4604      	mov	r4, r0
 8005846:	4608      	mov	r0, r1
 8005848:	4611      	mov	r1, r2
 800584a:	2200      	movs	r2, #0
 800584c:	602a      	str	r2, [r5, #0]
 800584e:	461a      	mov	r2, r3
 8005850:	f7fb fe86 	bl	8001560 <_lseek>
 8005854:	1c43      	adds	r3, r0, #1
 8005856:	d102      	bne.n	800585e <_lseek_r+0x1e>
 8005858:	682b      	ldr	r3, [r5, #0]
 800585a:	b103      	cbz	r3, 800585e <_lseek_r+0x1e>
 800585c:	6023      	str	r3, [r4, #0]
 800585e:	bd38      	pop	{r3, r4, r5, pc}
 8005860:	2000068c 	.word	0x2000068c

08005864 <_read_r>:
 8005864:	b538      	push	{r3, r4, r5, lr}
 8005866:	4d07      	ldr	r5, [pc, #28]	; (8005884 <_read_r+0x20>)
 8005868:	4604      	mov	r4, r0
 800586a:	4608      	mov	r0, r1
 800586c:	4611      	mov	r1, r2
 800586e:	2200      	movs	r2, #0
 8005870:	602a      	str	r2, [r5, #0]
 8005872:	461a      	mov	r2, r3
 8005874:	f7fb fe14 	bl	80014a0 <_read>
 8005878:	1c43      	adds	r3, r0, #1
 800587a:	d102      	bne.n	8005882 <_read_r+0x1e>
 800587c:	682b      	ldr	r3, [r5, #0]
 800587e:	b103      	cbz	r3, 8005882 <_read_r+0x1e>
 8005880:	6023      	str	r3, [r4, #0]
 8005882:	bd38      	pop	{r3, r4, r5, pc}
 8005884:	2000068c 	.word	0x2000068c

08005888 <_write_r>:
 8005888:	b538      	push	{r3, r4, r5, lr}
 800588a:	4d07      	ldr	r5, [pc, #28]	; (80058a8 <_write_r+0x20>)
 800588c:	4604      	mov	r4, r0
 800588e:	4608      	mov	r0, r1
 8005890:	4611      	mov	r1, r2
 8005892:	2200      	movs	r2, #0
 8005894:	602a      	str	r2, [r5, #0]
 8005896:	461a      	mov	r2, r3
 8005898:	f7fb fe1f 	bl	80014da <_write>
 800589c:	1c43      	adds	r3, r0, #1
 800589e:	d102      	bne.n	80058a6 <_write_r+0x1e>
 80058a0:	682b      	ldr	r3, [r5, #0]
 80058a2:	b103      	cbz	r3, 80058a6 <_write_r+0x1e>
 80058a4:	6023      	str	r3, [r4, #0]
 80058a6:	bd38      	pop	{r3, r4, r5, pc}
 80058a8:	2000068c 	.word	0x2000068c

080058ac <__errno>:
 80058ac:	4b01      	ldr	r3, [pc, #4]	; (80058b4 <__errno+0x8>)
 80058ae:	6818      	ldr	r0, [r3, #0]
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	2000015c 	.word	0x2000015c

080058b8 <__libc_init_array>:
 80058b8:	b570      	push	{r4, r5, r6, lr}
 80058ba:	4d0d      	ldr	r5, [pc, #52]	; (80058f0 <__libc_init_array+0x38>)
 80058bc:	4c0d      	ldr	r4, [pc, #52]	; (80058f4 <__libc_init_array+0x3c>)
 80058be:	1b64      	subs	r4, r4, r5
 80058c0:	10a4      	asrs	r4, r4, #2
 80058c2:	2600      	movs	r6, #0
 80058c4:	42a6      	cmp	r6, r4
 80058c6:	d109      	bne.n	80058dc <__libc_init_array+0x24>
 80058c8:	4d0b      	ldr	r5, [pc, #44]	; (80058f8 <__libc_init_array+0x40>)
 80058ca:	4c0c      	ldr	r4, [pc, #48]	; (80058fc <__libc_init_array+0x44>)
 80058cc:	f002 f894 	bl	80079f8 <_init>
 80058d0:	1b64      	subs	r4, r4, r5
 80058d2:	10a4      	asrs	r4, r4, #2
 80058d4:	2600      	movs	r6, #0
 80058d6:	42a6      	cmp	r6, r4
 80058d8:	d105      	bne.n	80058e6 <__libc_init_array+0x2e>
 80058da:	bd70      	pop	{r4, r5, r6, pc}
 80058dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80058e0:	4798      	blx	r3
 80058e2:	3601      	adds	r6, #1
 80058e4:	e7ee      	b.n	80058c4 <__libc_init_array+0xc>
 80058e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80058ea:	4798      	blx	r3
 80058ec:	3601      	adds	r6, #1
 80058ee:	e7f2      	b.n	80058d6 <__libc_init_array+0x1e>
 80058f0:	08007e44 	.word	0x08007e44
 80058f4:	08007e44 	.word	0x08007e44
 80058f8:	08007e44 	.word	0x08007e44
 80058fc:	08007e48 	.word	0x08007e48

08005900 <__retarget_lock_init_recursive>:
 8005900:	4770      	bx	lr

08005902 <__retarget_lock_acquire_recursive>:
 8005902:	4770      	bx	lr

08005904 <__retarget_lock_release_recursive>:
 8005904:	4770      	bx	lr

08005906 <quorem>:
 8005906:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800590a:	6903      	ldr	r3, [r0, #16]
 800590c:	690c      	ldr	r4, [r1, #16]
 800590e:	42a3      	cmp	r3, r4
 8005910:	4607      	mov	r7, r0
 8005912:	db7e      	blt.n	8005a12 <quorem+0x10c>
 8005914:	3c01      	subs	r4, #1
 8005916:	f101 0814 	add.w	r8, r1, #20
 800591a:	f100 0514 	add.w	r5, r0, #20
 800591e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005922:	9301      	str	r3, [sp, #4]
 8005924:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005928:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800592c:	3301      	adds	r3, #1
 800592e:	429a      	cmp	r2, r3
 8005930:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005934:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005938:	fbb2 f6f3 	udiv	r6, r2, r3
 800593c:	d331      	bcc.n	80059a2 <quorem+0x9c>
 800593e:	f04f 0e00 	mov.w	lr, #0
 8005942:	4640      	mov	r0, r8
 8005944:	46ac      	mov	ip, r5
 8005946:	46f2      	mov	sl, lr
 8005948:	f850 2b04 	ldr.w	r2, [r0], #4
 800594c:	b293      	uxth	r3, r2
 800594e:	fb06 e303 	mla	r3, r6, r3, lr
 8005952:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005956:	0c1a      	lsrs	r2, r3, #16
 8005958:	b29b      	uxth	r3, r3
 800595a:	ebaa 0303 	sub.w	r3, sl, r3
 800595e:	f8dc a000 	ldr.w	sl, [ip]
 8005962:	fa13 f38a 	uxtah	r3, r3, sl
 8005966:	fb06 220e 	mla	r2, r6, lr, r2
 800596a:	9300      	str	r3, [sp, #0]
 800596c:	9b00      	ldr	r3, [sp, #0]
 800596e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005972:	b292      	uxth	r2, r2
 8005974:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005978:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800597c:	f8bd 3000 	ldrh.w	r3, [sp]
 8005980:	4581      	cmp	r9, r0
 8005982:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005986:	f84c 3b04 	str.w	r3, [ip], #4
 800598a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800598e:	d2db      	bcs.n	8005948 <quorem+0x42>
 8005990:	f855 300b 	ldr.w	r3, [r5, fp]
 8005994:	b92b      	cbnz	r3, 80059a2 <quorem+0x9c>
 8005996:	9b01      	ldr	r3, [sp, #4]
 8005998:	3b04      	subs	r3, #4
 800599a:	429d      	cmp	r5, r3
 800599c:	461a      	mov	r2, r3
 800599e:	d32c      	bcc.n	80059fa <quorem+0xf4>
 80059a0:	613c      	str	r4, [r7, #16]
 80059a2:	4638      	mov	r0, r7
 80059a4:	f001 f9a6 	bl	8006cf4 <__mcmp>
 80059a8:	2800      	cmp	r0, #0
 80059aa:	db22      	blt.n	80059f2 <quorem+0xec>
 80059ac:	3601      	adds	r6, #1
 80059ae:	4629      	mov	r1, r5
 80059b0:	2000      	movs	r0, #0
 80059b2:	f858 2b04 	ldr.w	r2, [r8], #4
 80059b6:	f8d1 c000 	ldr.w	ip, [r1]
 80059ba:	b293      	uxth	r3, r2
 80059bc:	1ac3      	subs	r3, r0, r3
 80059be:	0c12      	lsrs	r2, r2, #16
 80059c0:	fa13 f38c 	uxtah	r3, r3, ip
 80059c4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80059c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059d2:	45c1      	cmp	r9, r8
 80059d4:	f841 3b04 	str.w	r3, [r1], #4
 80059d8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80059dc:	d2e9      	bcs.n	80059b2 <quorem+0xac>
 80059de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80059e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80059e6:	b922      	cbnz	r2, 80059f2 <quorem+0xec>
 80059e8:	3b04      	subs	r3, #4
 80059ea:	429d      	cmp	r5, r3
 80059ec:	461a      	mov	r2, r3
 80059ee:	d30a      	bcc.n	8005a06 <quorem+0x100>
 80059f0:	613c      	str	r4, [r7, #16]
 80059f2:	4630      	mov	r0, r6
 80059f4:	b003      	add	sp, #12
 80059f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059fa:	6812      	ldr	r2, [r2, #0]
 80059fc:	3b04      	subs	r3, #4
 80059fe:	2a00      	cmp	r2, #0
 8005a00:	d1ce      	bne.n	80059a0 <quorem+0x9a>
 8005a02:	3c01      	subs	r4, #1
 8005a04:	e7c9      	b.n	800599a <quorem+0x94>
 8005a06:	6812      	ldr	r2, [r2, #0]
 8005a08:	3b04      	subs	r3, #4
 8005a0a:	2a00      	cmp	r2, #0
 8005a0c:	d1f0      	bne.n	80059f0 <quorem+0xea>
 8005a0e:	3c01      	subs	r4, #1
 8005a10:	e7eb      	b.n	80059ea <quorem+0xe4>
 8005a12:	2000      	movs	r0, #0
 8005a14:	e7ee      	b.n	80059f4 <quorem+0xee>
	...

08005a18 <_dtoa_r>:
 8005a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a1c:	ed2d 8b04 	vpush	{d8-d9}
 8005a20:	69c5      	ldr	r5, [r0, #28]
 8005a22:	b093      	sub	sp, #76	; 0x4c
 8005a24:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005a28:	ec57 6b10 	vmov	r6, r7, d0
 8005a2c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005a30:	9107      	str	r1, [sp, #28]
 8005a32:	4604      	mov	r4, r0
 8005a34:	920a      	str	r2, [sp, #40]	; 0x28
 8005a36:	930d      	str	r3, [sp, #52]	; 0x34
 8005a38:	b975      	cbnz	r5, 8005a58 <_dtoa_r+0x40>
 8005a3a:	2010      	movs	r0, #16
 8005a3c:	f000 fe2a 	bl	8006694 <malloc>
 8005a40:	4602      	mov	r2, r0
 8005a42:	61e0      	str	r0, [r4, #28]
 8005a44:	b920      	cbnz	r0, 8005a50 <_dtoa_r+0x38>
 8005a46:	4bae      	ldr	r3, [pc, #696]	; (8005d00 <_dtoa_r+0x2e8>)
 8005a48:	21ef      	movs	r1, #239	; 0xef
 8005a4a:	48ae      	ldr	r0, [pc, #696]	; (8005d04 <_dtoa_r+0x2ec>)
 8005a4c:	f001 fc90 	bl	8007370 <__assert_func>
 8005a50:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005a54:	6005      	str	r5, [r0, #0]
 8005a56:	60c5      	str	r5, [r0, #12]
 8005a58:	69e3      	ldr	r3, [r4, #28]
 8005a5a:	6819      	ldr	r1, [r3, #0]
 8005a5c:	b151      	cbz	r1, 8005a74 <_dtoa_r+0x5c>
 8005a5e:	685a      	ldr	r2, [r3, #4]
 8005a60:	604a      	str	r2, [r1, #4]
 8005a62:	2301      	movs	r3, #1
 8005a64:	4093      	lsls	r3, r2
 8005a66:	608b      	str	r3, [r1, #8]
 8005a68:	4620      	mov	r0, r4
 8005a6a:	f000 ff07 	bl	800687c <_Bfree>
 8005a6e:	69e3      	ldr	r3, [r4, #28]
 8005a70:	2200      	movs	r2, #0
 8005a72:	601a      	str	r2, [r3, #0]
 8005a74:	1e3b      	subs	r3, r7, #0
 8005a76:	bfbb      	ittet	lt
 8005a78:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005a7c:	9303      	strlt	r3, [sp, #12]
 8005a7e:	2300      	movge	r3, #0
 8005a80:	2201      	movlt	r2, #1
 8005a82:	bfac      	ite	ge
 8005a84:	f8c8 3000 	strge.w	r3, [r8]
 8005a88:	f8c8 2000 	strlt.w	r2, [r8]
 8005a8c:	4b9e      	ldr	r3, [pc, #632]	; (8005d08 <_dtoa_r+0x2f0>)
 8005a8e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005a92:	ea33 0308 	bics.w	r3, r3, r8
 8005a96:	d11b      	bne.n	8005ad0 <_dtoa_r+0xb8>
 8005a98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005a9a:	f242 730f 	movw	r3, #9999	; 0x270f
 8005a9e:	6013      	str	r3, [r2, #0]
 8005aa0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005aa4:	4333      	orrs	r3, r6
 8005aa6:	f000 8593 	beq.w	80065d0 <_dtoa_r+0xbb8>
 8005aaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005aac:	b963      	cbnz	r3, 8005ac8 <_dtoa_r+0xb0>
 8005aae:	4b97      	ldr	r3, [pc, #604]	; (8005d0c <_dtoa_r+0x2f4>)
 8005ab0:	e027      	b.n	8005b02 <_dtoa_r+0xea>
 8005ab2:	4b97      	ldr	r3, [pc, #604]	; (8005d10 <_dtoa_r+0x2f8>)
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	3308      	adds	r3, #8
 8005ab8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005aba:	6013      	str	r3, [r2, #0]
 8005abc:	9800      	ldr	r0, [sp, #0]
 8005abe:	b013      	add	sp, #76	; 0x4c
 8005ac0:	ecbd 8b04 	vpop	{d8-d9}
 8005ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ac8:	4b90      	ldr	r3, [pc, #576]	; (8005d0c <_dtoa_r+0x2f4>)
 8005aca:	9300      	str	r3, [sp, #0]
 8005acc:	3303      	adds	r3, #3
 8005ace:	e7f3      	b.n	8005ab8 <_dtoa_r+0xa0>
 8005ad0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	ec51 0b17 	vmov	r0, r1, d7
 8005ada:	eeb0 8a47 	vmov.f32	s16, s14
 8005ade:	eef0 8a67 	vmov.f32	s17, s15
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	f7fa fff0 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ae8:	4681      	mov	r9, r0
 8005aea:	b160      	cbz	r0, 8005b06 <_dtoa_r+0xee>
 8005aec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005aee:	2301      	movs	r3, #1
 8005af0:	6013      	str	r3, [r2, #0]
 8005af2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	f000 8568 	beq.w	80065ca <_dtoa_r+0xbb2>
 8005afa:	4b86      	ldr	r3, [pc, #536]	; (8005d14 <_dtoa_r+0x2fc>)
 8005afc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005afe:	6013      	str	r3, [r2, #0]
 8005b00:	3b01      	subs	r3, #1
 8005b02:	9300      	str	r3, [sp, #0]
 8005b04:	e7da      	b.n	8005abc <_dtoa_r+0xa4>
 8005b06:	aa10      	add	r2, sp, #64	; 0x40
 8005b08:	a911      	add	r1, sp, #68	; 0x44
 8005b0a:	4620      	mov	r0, r4
 8005b0c:	eeb0 0a48 	vmov.f32	s0, s16
 8005b10:	eef0 0a68 	vmov.f32	s1, s17
 8005b14:	f001 f994 	bl	8006e40 <__d2b>
 8005b18:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005b1c:	4682      	mov	sl, r0
 8005b1e:	2d00      	cmp	r5, #0
 8005b20:	d07f      	beq.n	8005c22 <_dtoa_r+0x20a>
 8005b22:	ee18 3a90 	vmov	r3, s17
 8005b26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b2a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005b2e:	ec51 0b18 	vmov	r0, r1, d8
 8005b32:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005b36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005b3a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005b3e:	4619      	mov	r1, r3
 8005b40:	2200      	movs	r2, #0
 8005b42:	4b75      	ldr	r3, [pc, #468]	; (8005d18 <_dtoa_r+0x300>)
 8005b44:	f7fa fba0 	bl	8000288 <__aeabi_dsub>
 8005b48:	a367      	add	r3, pc, #412	; (adr r3, 8005ce8 <_dtoa_r+0x2d0>)
 8005b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b4e:	f7fa fd53 	bl	80005f8 <__aeabi_dmul>
 8005b52:	a367      	add	r3, pc, #412	; (adr r3, 8005cf0 <_dtoa_r+0x2d8>)
 8005b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b58:	f7fa fb98 	bl	800028c <__adddf3>
 8005b5c:	4606      	mov	r6, r0
 8005b5e:	4628      	mov	r0, r5
 8005b60:	460f      	mov	r7, r1
 8005b62:	f7fa fcdf 	bl	8000524 <__aeabi_i2d>
 8005b66:	a364      	add	r3, pc, #400	; (adr r3, 8005cf8 <_dtoa_r+0x2e0>)
 8005b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6c:	f7fa fd44 	bl	80005f8 <__aeabi_dmul>
 8005b70:	4602      	mov	r2, r0
 8005b72:	460b      	mov	r3, r1
 8005b74:	4630      	mov	r0, r6
 8005b76:	4639      	mov	r1, r7
 8005b78:	f7fa fb88 	bl	800028c <__adddf3>
 8005b7c:	4606      	mov	r6, r0
 8005b7e:	460f      	mov	r7, r1
 8005b80:	f7fa ffea 	bl	8000b58 <__aeabi_d2iz>
 8005b84:	2200      	movs	r2, #0
 8005b86:	4683      	mov	fp, r0
 8005b88:	2300      	movs	r3, #0
 8005b8a:	4630      	mov	r0, r6
 8005b8c:	4639      	mov	r1, r7
 8005b8e:	f7fa ffa5 	bl	8000adc <__aeabi_dcmplt>
 8005b92:	b148      	cbz	r0, 8005ba8 <_dtoa_r+0x190>
 8005b94:	4658      	mov	r0, fp
 8005b96:	f7fa fcc5 	bl	8000524 <__aeabi_i2d>
 8005b9a:	4632      	mov	r2, r6
 8005b9c:	463b      	mov	r3, r7
 8005b9e:	f7fa ff93 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ba2:	b908      	cbnz	r0, 8005ba8 <_dtoa_r+0x190>
 8005ba4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005ba8:	f1bb 0f16 	cmp.w	fp, #22
 8005bac:	d857      	bhi.n	8005c5e <_dtoa_r+0x246>
 8005bae:	4b5b      	ldr	r3, [pc, #364]	; (8005d1c <_dtoa_r+0x304>)
 8005bb0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb8:	ec51 0b18 	vmov	r0, r1, d8
 8005bbc:	f7fa ff8e 	bl	8000adc <__aeabi_dcmplt>
 8005bc0:	2800      	cmp	r0, #0
 8005bc2:	d04e      	beq.n	8005c62 <_dtoa_r+0x24a>
 8005bc4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005bc8:	2300      	movs	r3, #0
 8005bca:	930c      	str	r3, [sp, #48]	; 0x30
 8005bcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005bce:	1b5b      	subs	r3, r3, r5
 8005bd0:	1e5a      	subs	r2, r3, #1
 8005bd2:	bf45      	ittet	mi
 8005bd4:	f1c3 0301 	rsbmi	r3, r3, #1
 8005bd8:	9305      	strmi	r3, [sp, #20]
 8005bda:	2300      	movpl	r3, #0
 8005bdc:	2300      	movmi	r3, #0
 8005bde:	9206      	str	r2, [sp, #24]
 8005be0:	bf54      	ite	pl
 8005be2:	9305      	strpl	r3, [sp, #20]
 8005be4:	9306      	strmi	r3, [sp, #24]
 8005be6:	f1bb 0f00 	cmp.w	fp, #0
 8005bea:	db3c      	blt.n	8005c66 <_dtoa_r+0x24e>
 8005bec:	9b06      	ldr	r3, [sp, #24]
 8005bee:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005bf2:	445b      	add	r3, fp
 8005bf4:	9306      	str	r3, [sp, #24]
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	9308      	str	r3, [sp, #32]
 8005bfa:	9b07      	ldr	r3, [sp, #28]
 8005bfc:	2b09      	cmp	r3, #9
 8005bfe:	d868      	bhi.n	8005cd2 <_dtoa_r+0x2ba>
 8005c00:	2b05      	cmp	r3, #5
 8005c02:	bfc4      	itt	gt
 8005c04:	3b04      	subgt	r3, #4
 8005c06:	9307      	strgt	r3, [sp, #28]
 8005c08:	9b07      	ldr	r3, [sp, #28]
 8005c0a:	f1a3 0302 	sub.w	r3, r3, #2
 8005c0e:	bfcc      	ite	gt
 8005c10:	2500      	movgt	r5, #0
 8005c12:	2501      	movle	r5, #1
 8005c14:	2b03      	cmp	r3, #3
 8005c16:	f200 8085 	bhi.w	8005d24 <_dtoa_r+0x30c>
 8005c1a:	e8df f003 	tbb	[pc, r3]
 8005c1e:	3b2e      	.short	0x3b2e
 8005c20:	5839      	.short	0x5839
 8005c22:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005c26:	441d      	add	r5, r3
 8005c28:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005c2c:	2b20      	cmp	r3, #32
 8005c2e:	bfc1      	itttt	gt
 8005c30:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005c34:	fa08 f803 	lslgt.w	r8, r8, r3
 8005c38:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005c3c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005c40:	bfd6      	itet	le
 8005c42:	f1c3 0320 	rsble	r3, r3, #32
 8005c46:	ea48 0003 	orrgt.w	r0, r8, r3
 8005c4a:	fa06 f003 	lslle.w	r0, r6, r3
 8005c4e:	f7fa fc59 	bl	8000504 <__aeabi_ui2d>
 8005c52:	2201      	movs	r2, #1
 8005c54:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005c58:	3d01      	subs	r5, #1
 8005c5a:	920e      	str	r2, [sp, #56]	; 0x38
 8005c5c:	e76f      	b.n	8005b3e <_dtoa_r+0x126>
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e7b3      	b.n	8005bca <_dtoa_r+0x1b2>
 8005c62:	900c      	str	r0, [sp, #48]	; 0x30
 8005c64:	e7b2      	b.n	8005bcc <_dtoa_r+0x1b4>
 8005c66:	9b05      	ldr	r3, [sp, #20]
 8005c68:	eba3 030b 	sub.w	r3, r3, fp
 8005c6c:	9305      	str	r3, [sp, #20]
 8005c6e:	f1cb 0300 	rsb	r3, fp, #0
 8005c72:	9308      	str	r3, [sp, #32]
 8005c74:	2300      	movs	r3, #0
 8005c76:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c78:	e7bf      	b.n	8005bfa <_dtoa_r+0x1e2>
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8005c7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	dc52      	bgt.n	8005d2a <_dtoa_r+0x312>
 8005c84:	2301      	movs	r3, #1
 8005c86:	9301      	str	r3, [sp, #4]
 8005c88:	9304      	str	r3, [sp, #16]
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	920a      	str	r2, [sp, #40]	; 0x28
 8005c8e:	e00b      	b.n	8005ca8 <_dtoa_r+0x290>
 8005c90:	2301      	movs	r3, #1
 8005c92:	e7f3      	b.n	8005c7c <_dtoa_r+0x264>
 8005c94:	2300      	movs	r3, #0
 8005c96:	9309      	str	r3, [sp, #36]	; 0x24
 8005c98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c9a:	445b      	add	r3, fp
 8005c9c:	9301      	str	r3, [sp, #4]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	9304      	str	r3, [sp, #16]
 8005ca4:	bfb8      	it	lt
 8005ca6:	2301      	movlt	r3, #1
 8005ca8:	69e0      	ldr	r0, [r4, #28]
 8005caa:	2100      	movs	r1, #0
 8005cac:	2204      	movs	r2, #4
 8005cae:	f102 0614 	add.w	r6, r2, #20
 8005cb2:	429e      	cmp	r6, r3
 8005cb4:	d93d      	bls.n	8005d32 <_dtoa_r+0x31a>
 8005cb6:	6041      	str	r1, [r0, #4]
 8005cb8:	4620      	mov	r0, r4
 8005cba:	f000 fd9f 	bl	80067fc <_Balloc>
 8005cbe:	9000      	str	r0, [sp, #0]
 8005cc0:	2800      	cmp	r0, #0
 8005cc2:	d139      	bne.n	8005d38 <_dtoa_r+0x320>
 8005cc4:	4b16      	ldr	r3, [pc, #88]	; (8005d20 <_dtoa_r+0x308>)
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	f240 11af 	movw	r1, #431	; 0x1af
 8005ccc:	e6bd      	b.n	8005a4a <_dtoa_r+0x32>
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e7e1      	b.n	8005c96 <_dtoa_r+0x27e>
 8005cd2:	2501      	movs	r5, #1
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	9307      	str	r3, [sp, #28]
 8005cd8:	9509      	str	r5, [sp, #36]	; 0x24
 8005cda:	f04f 33ff 	mov.w	r3, #4294967295
 8005cde:	9301      	str	r3, [sp, #4]
 8005ce0:	9304      	str	r3, [sp, #16]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	2312      	movs	r3, #18
 8005ce6:	e7d1      	b.n	8005c8c <_dtoa_r+0x274>
 8005ce8:	636f4361 	.word	0x636f4361
 8005cec:	3fd287a7 	.word	0x3fd287a7
 8005cf0:	8b60c8b3 	.word	0x8b60c8b3
 8005cf4:	3fc68a28 	.word	0x3fc68a28
 8005cf8:	509f79fb 	.word	0x509f79fb
 8005cfc:	3fd34413 	.word	0x3fd34413
 8005d00:	08007b11 	.word	0x08007b11
 8005d04:	08007b28 	.word	0x08007b28
 8005d08:	7ff00000 	.word	0x7ff00000
 8005d0c:	08007b0d 	.word	0x08007b0d
 8005d10:	08007b04 	.word	0x08007b04
 8005d14:	08007ae1 	.word	0x08007ae1
 8005d18:	3ff80000 	.word	0x3ff80000
 8005d1c:	08007c18 	.word	0x08007c18
 8005d20:	08007b80 	.word	0x08007b80
 8005d24:	2301      	movs	r3, #1
 8005d26:	9309      	str	r3, [sp, #36]	; 0x24
 8005d28:	e7d7      	b.n	8005cda <_dtoa_r+0x2c2>
 8005d2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d2c:	9301      	str	r3, [sp, #4]
 8005d2e:	9304      	str	r3, [sp, #16]
 8005d30:	e7ba      	b.n	8005ca8 <_dtoa_r+0x290>
 8005d32:	3101      	adds	r1, #1
 8005d34:	0052      	lsls	r2, r2, #1
 8005d36:	e7ba      	b.n	8005cae <_dtoa_r+0x296>
 8005d38:	69e3      	ldr	r3, [r4, #28]
 8005d3a:	9a00      	ldr	r2, [sp, #0]
 8005d3c:	601a      	str	r2, [r3, #0]
 8005d3e:	9b04      	ldr	r3, [sp, #16]
 8005d40:	2b0e      	cmp	r3, #14
 8005d42:	f200 80a8 	bhi.w	8005e96 <_dtoa_r+0x47e>
 8005d46:	2d00      	cmp	r5, #0
 8005d48:	f000 80a5 	beq.w	8005e96 <_dtoa_r+0x47e>
 8005d4c:	f1bb 0f00 	cmp.w	fp, #0
 8005d50:	dd38      	ble.n	8005dc4 <_dtoa_r+0x3ac>
 8005d52:	4bc0      	ldr	r3, [pc, #768]	; (8006054 <_dtoa_r+0x63c>)
 8005d54:	f00b 020f 	and.w	r2, fp, #15
 8005d58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d5c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005d60:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005d64:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005d68:	d019      	beq.n	8005d9e <_dtoa_r+0x386>
 8005d6a:	4bbb      	ldr	r3, [pc, #748]	; (8006058 <_dtoa_r+0x640>)
 8005d6c:	ec51 0b18 	vmov	r0, r1, d8
 8005d70:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005d74:	f7fa fd6a 	bl	800084c <__aeabi_ddiv>
 8005d78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d7c:	f008 080f 	and.w	r8, r8, #15
 8005d80:	2503      	movs	r5, #3
 8005d82:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006058 <_dtoa_r+0x640>
 8005d86:	f1b8 0f00 	cmp.w	r8, #0
 8005d8a:	d10a      	bne.n	8005da2 <_dtoa_r+0x38a>
 8005d8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d90:	4632      	mov	r2, r6
 8005d92:	463b      	mov	r3, r7
 8005d94:	f7fa fd5a 	bl	800084c <__aeabi_ddiv>
 8005d98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d9c:	e02b      	b.n	8005df6 <_dtoa_r+0x3de>
 8005d9e:	2502      	movs	r5, #2
 8005da0:	e7ef      	b.n	8005d82 <_dtoa_r+0x36a>
 8005da2:	f018 0f01 	tst.w	r8, #1
 8005da6:	d008      	beq.n	8005dba <_dtoa_r+0x3a2>
 8005da8:	4630      	mov	r0, r6
 8005daa:	4639      	mov	r1, r7
 8005dac:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005db0:	f7fa fc22 	bl	80005f8 <__aeabi_dmul>
 8005db4:	3501      	adds	r5, #1
 8005db6:	4606      	mov	r6, r0
 8005db8:	460f      	mov	r7, r1
 8005dba:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005dbe:	f109 0908 	add.w	r9, r9, #8
 8005dc2:	e7e0      	b.n	8005d86 <_dtoa_r+0x36e>
 8005dc4:	f000 809f 	beq.w	8005f06 <_dtoa_r+0x4ee>
 8005dc8:	f1cb 0600 	rsb	r6, fp, #0
 8005dcc:	4ba1      	ldr	r3, [pc, #644]	; (8006054 <_dtoa_r+0x63c>)
 8005dce:	4fa2      	ldr	r7, [pc, #648]	; (8006058 <_dtoa_r+0x640>)
 8005dd0:	f006 020f 	and.w	r2, r6, #15
 8005dd4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ddc:	ec51 0b18 	vmov	r0, r1, d8
 8005de0:	f7fa fc0a 	bl	80005f8 <__aeabi_dmul>
 8005de4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005de8:	1136      	asrs	r6, r6, #4
 8005dea:	2300      	movs	r3, #0
 8005dec:	2502      	movs	r5, #2
 8005dee:	2e00      	cmp	r6, #0
 8005df0:	d17e      	bne.n	8005ef0 <_dtoa_r+0x4d8>
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1d0      	bne.n	8005d98 <_dtoa_r+0x380>
 8005df6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005df8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f000 8084 	beq.w	8005f0a <_dtoa_r+0x4f2>
 8005e02:	4b96      	ldr	r3, [pc, #600]	; (800605c <_dtoa_r+0x644>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	4640      	mov	r0, r8
 8005e08:	4649      	mov	r1, r9
 8005e0a:	f7fa fe67 	bl	8000adc <__aeabi_dcmplt>
 8005e0e:	2800      	cmp	r0, #0
 8005e10:	d07b      	beq.n	8005f0a <_dtoa_r+0x4f2>
 8005e12:	9b04      	ldr	r3, [sp, #16]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d078      	beq.n	8005f0a <_dtoa_r+0x4f2>
 8005e18:	9b01      	ldr	r3, [sp, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	dd39      	ble.n	8005e92 <_dtoa_r+0x47a>
 8005e1e:	4b90      	ldr	r3, [pc, #576]	; (8006060 <_dtoa_r+0x648>)
 8005e20:	2200      	movs	r2, #0
 8005e22:	4640      	mov	r0, r8
 8005e24:	4649      	mov	r1, r9
 8005e26:	f7fa fbe7 	bl	80005f8 <__aeabi_dmul>
 8005e2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e2e:	9e01      	ldr	r6, [sp, #4]
 8005e30:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005e34:	3501      	adds	r5, #1
 8005e36:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005e3a:	4628      	mov	r0, r5
 8005e3c:	f7fa fb72 	bl	8000524 <__aeabi_i2d>
 8005e40:	4642      	mov	r2, r8
 8005e42:	464b      	mov	r3, r9
 8005e44:	f7fa fbd8 	bl	80005f8 <__aeabi_dmul>
 8005e48:	4b86      	ldr	r3, [pc, #536]	; (8006064 <_dtoa_r+0x64c>)
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f7fa fa1e 	bl	800028c <__adddf3>
 8005e50:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005e54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e58:	9303      	str	r3, [sp, #12]
 8005e5a:	2e00      	cmp	r6, #0
 8005e5c:	d158      	bne.n	8005f10 <_dtoa_r+0x4f8>
 8005e5e:	4b82      	ldr	r3, [pc, #520]	; (8006068 <_dtoa_r+0x650>)
 8005e60:	2200      	movs	r2, #0
 8005e62:	4640      	mov	r0, r8
 8005e64:	4649      	mov	r1, r9
 8005e66:	f7fa fa0f 	bl	8000288 <__aeabi_dsub>
 8005e6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e6e:	4680      	mov	r8, r0
 8005e70:	4689      	mov	r9, r1
 8005e72:	f7fa fe51 	bl	8000b18 <__aeabi_dcmpgt>
 8005e76:	2800      	cmp	r0, #0
 8005e78:	f040 8296 	bne.w	80063a8 <_dtoa_r+0x990>
 8005e7c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005e80:	4640      	mov	r0, r8
 8005e82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005e86:	4649      	mov	r1, r9
 8005e88:	f7fa fe28 	bl	8000adc <__aeabi_dcmplt>
 8005e8c:	2800      	cmp	r0, #0
 8005e8e:	f040 8289 	bne.w	80063a4 <_dtoa_r+0x98c>
 8005e92:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005e96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f2c0 814e 	blt.w	800613a <_dtoa_r+0x722>
 8005e9e:	f1bb 0f0e 	cmp.w	fp, #14
 8005ea2:	f300 814a 	bgt.w	800613a <_dtoa_r+0x722>
 8005ea6:	4b6b      	ldr	r3, [pc, #428]	; (8006054 <_dtoa_r+0x63c>)
 8005ea8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005eac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005eb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f280 80dc 	bge.w	8006070 <_dtoa_r+0x658>
 8005eb8:	9b04      	ldr	r3, [sp, #16]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	f300 80d8 	bgt.w	8006070 <_dtoa_r+0x658>
 8005ec0:	f040 826f 	bne.w	80063a2 <_dtoa_r+0x98a>
 8005ec4:	4b68      	ldr	r3, [pc, #416]	; (8006068 <_dtoa_r+0x650>)
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	4640      	mov	r0, r8
 8005eca:	4649      	mov	r1, r9
 8005ecc:	f7fa fb94 	bl	80005f8 <__aeabi_dmul>
 8005ed0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ed4:	f7fa fe16 	bl	8000b04 <__aeabi_dcmpge>
 8005ed8:	9e04      	ldr	r6, [sp, #16]
 8005eda:	4637      	mov	r7, r6
 8005edc:	2800      	cmp	r0, #0
 8005ede:	f040 8245 	bne.w	800636c <_dtoa_r+0x954>
 8005ee2:	9d00      	ldr	r5, [sp, #0]
 8005ee4:	2331      	movs	r3, #49	; 0x31
 8005ee6:	f805 3b01 	strb.w	r3, [r5], #1
 8005eea:	f10b 0b01 	add.w	fp, fp, #1
 8005eee:	e241      	b.n	8006374 <_dtoa_r+0x95c>
 8005ef0:	07f2      	lsls	r2, r6, #31
 8005ef2:	d505      	bpl.n	8005f00 <_dtoa_r+0x4e8>
 8005ef4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ef8:	f7fa fb7e 	bl	80005f8 <__aeabi_dmul>
 8005efc:	3501      	adds	r5, #1
 8005efe:	2301      	movs	r3, #1
 8005f00:	1076      	asrs	r6, r6, #1
 8005f02:	3708      	adds	r7, #8
 8005f04:	e773      	b.n	8005dee <_dtoa_r+0x3d6>
 8005f06:	2502      	movs	r5, #2
 8005f08:	e775      	b.n	8005df6 <_dtoa_r+0x3de>
 8005f0a:	9e04      	ldr	r6, [sp, #16]
 8005f0c:	465f      	mov	r7, fp
 8005f0e:	e792      	b.n	8005e36 <_dtoa_r+0x41e>
 8005f10:	9900      	ldr	r1, [sp, #0]
 8005f12:	4b50      	ldr	r3, [pc, #320]	; (8006054 <_dtoa_r+0x63c>)
 8005f14:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005f18:	4431      	add	r1, r6
 8005f1a:	9102      	str	r1, [sp, #8]
 8005f1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f1e:	eeb0 9a47 	vmov.f32	s18, s14
 8005f22:	eef0 9a67 	vmov.f32	s19, s15
 8005f26:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005f2a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005f2e:	2900      	cmp	r1, #0
 8005f30:	d044      	beq.n	8005fbc <_dtoa_r+0x5a4>
 8005f32:	494e      	ldr	r1, [pc, #312]	; (800606c <_dtoa_r+0x654>)
 8005f34:	2000      	movs	r0, #0
 8005f36:	f7fa fc89 	bl	800084c <__aeabi_ddiv>
 8005f3a:	ec53 2b19 	vmov	r2, r3, d9
 8005f3e:	f7fa f9a3 	bl	8000288 <__aeabi_dsub>
 8005f42:	9d00      	ldr	r5, [sp, #0]
 8005f44:	ec41 0b19 	vmov	d9, r0, r1
 8005f48:	4649      	mov	r1, r9
 8005f4a:	4640      	mov	r0, r8
 8005f4c:	f7fa fe04 	bl	8000b58 <__aeabi_d2iz>
 8005f50:	4606      	mov	r6, r0
 8005f52:	f7fa fae7 	bl	8000524 <__aeabi_i2d>
 8005f56:	4602      	mov	r2, r0
 8005f58:	460b      	mov	r3, r1
 8005f5a:	4640      	mov	r0, r8
 8005f5c:	4649      	mov	r1, r9
 8005f5e:	f7fa f993 	bl	8000288 <__aeabi_dsub>
 8005f62:	3630      	adds	r6, #48	; 0x30
 8005f64:	f805 6b01 	strb.w	r6, [r5], #1
 8005f68:	ec53 2b19 	vmov	r2, r3, d9
 8005f6c:	4680      	mov	r8, r0
 8005f6e:	4689      	mov	r9, r1
 8005f70:	f7fa fdb4 	bl	8000adc <__aeabi_dcmplt>
 8005f74:	2800      	cmp	r0, #0
 8005f76:	d164      	bne.n	8006042 <_dtoa_r+0x62a>
 8005f78:	4642      	mov	r2, r8
 8005f7a:	464b      	mov	r3, r9
 8005f7c:	4937      	ldr	r1, [pc, #220]	; (800605c <_dtoa_r+0x644>)
 8005f7e:	2000      	movs	r0, #0
 8005f80:	f7fa f982 	bl	8000288 <__aeabi_dsub>
 8005f84:	ec53 2b19 	vmov	r2, r3, d9
 8005f88:	f7fa fda8 	bl	8000adc <__aeabi_dcmplt>
 8005f8c:	2800      	cmp	r0, #0
 8005f8e:	f040 80b6 	bne.w	80060fe <_dtoa_r+0x6e6>
 8005f92:	9b02      	ldr	r3, [sp, #8]
 8005f94:	429d      	cmp	r5, r3
 8005f96:	f43f af7c 	beq.w	8005e92 <_dtoa_r+0x47a>
 8005f9a:	4b31      	ldr	r3, [pc, #196]	; (8006060 <_dtoa_r+0x648>)
 8005f9c:	ec51 0b19 	vmov	r0, r1, d9
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f7fa fb29 	bl	80005f8 <__aeabi_dmul>
 8005fa6:	4b2e      	ldr	r3, [pc, #184]	; (8006060 <_dtoa_r+0x648>)
 8005fa8:	ec41 0b19 	vmov	d9, r0, r1
 8005fac:	2200      	movs	r2, #0
 8005fae:	4640      	mov	r0, r8
 8005fb0:	4649      	mov	r1, r9
 8005fb2:	f7fa fb21 	bl	80005f8 <__aeabi_dmul>
 8005fb6:	4680      	mov	r8, r0
 8005fb8:	4689      	mov	r9, r1
 8005fba:	e7c5      	b.n	8005f48 <_dtoa_r+0x530>
 8005fbc:	ec51 0b17 	vmov	r0, r1, d7
 8005fc0:	f7fa fb1a 	bl	80005f8 <__aeabi_dmul>
 8005fc4:	9b02      	ldr	r3, [sp, #8]
 8005fc6:	9d00      	ldr	r5, [sp, #0]
 8005fc8:	930f      	str	r3, [sp, #60]	; 0x3c
 8005fca:	ec41 0b19 	vmov	d9, r0, r1
 8005fce:	4649      	mov	r1, r9
 8005fd0:	4640      	mov	r0, r8
 8005fd2:	f7fa fdc1 	bl	8000b58 <__aeabi_d2iz>
 8005fd6:	4606      	mov	r6, r0
 8005fd8:	f7fa faa4 	bl	8000524 <__aeabi_i2d>
 8005fdc:	3630      	adds	r6, #48	; 0x30
 8005fde:	4602      	mov	r2, r0
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	4640      	mov	r0, r8
 8005fe4:	4649      	mov	r1, r9
 8005fe6:	f7fa f94f 	bl	8000288 <__aeabi_dsub>
 8005fea:	f805 6b01 	strb.w	r6, [r5], #1
 8005fee:	9b02      	ldr	r3, [sp, #8]
 8005ff0:	429d      	cmp	r5, r3
 8005ff2:	4680      	mov	r8, r0
 8005ff4:	4689      	mov	r9, r1
 8005ff6:	f04f 0200 	mov.w	r2, #0
 8005ffa:	d124      	bne.n	8006046 <_dtoa_r+0x62e>
 8005ffc:	4b1b      	ldr	r3, [pc, #108]	; (800606c <_dtoa_r+0x654>)
 8005ffe:	ec51 0b19 	vmov	r0, r1, d9
 8006002:	f7fa f943 	bl	800028c <__adddf3>
 8006006:	4602      	mov	r2, r0
 8006008:	460b      	mov	r3, r1
 800600a:	4640      	mov	r0, r8
 800600c:	4649      	mov	r1, r9
 800600e:	f7fa fd83 	bl	8000b18 <__aeabi_dcmpgt>
 8006012:	2800      	cmp	r0, #0
 8006014:	d173      	bne.n	80060fe <_dtoa_r+0x6e6>
 8006016:	ec53 2b19 	vmov	r2, r3, d9
 800601a:	4914      	ldr	r1, [pc, #80]	; (800606c <_dtoa_r+0x654>)
 800601c:	2000      	movs	r0, #0
 800601e:	f7fa f933 	bl	8000288 <__aeabi_dsub>
 8006022:	4602      	mov	r2, r0
 8006024:	460b      	mov	r3, r1
 8006026:	4640      	mov	r0, r8
 8006028:	4649      	mov	r1, r9
 800602a:	f7fa fd57 	bl	8000adc <__aeabi_dcmplt>
 800602e:	2800      	cmp	r0, #0
 8006030:	f43f af2f 	beq.w	8005e92 <_dtoa_r+0x47a>
 8006034:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006036:	1e6b      	subs	r3, r5, #1
 8006038:	930f      	str	r3, [sp, #60]	; 0x3c
 800603a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800603e:	2b30      	cmp	r3, #48	; 0x30
 8006040:	d0f8      	beq.n	8006034 <_dtoa_r+0x61c>
 8006042:	46bb      	mov	fp, r7
 8006044:	e04a      	b.n	80060dc <_dtoa_r+0x6c4>
 8006046:	4b06      	ldr	r3, [pc, #24]	; (8006060 <_dtoa_r+0x648>)
 8006048:	f7fa fad6 	bl	80005f8 <__aeabi_dmul>
 800604c:	4680      	mov	r8, r0
 800604e:	4689      	mov	r9, r1
 8006050:	e7bd      	b.n	8005fce <_dtoa_r+0x5b6>
 8006052:	bf00      	nop
 8006054:	08007c18 	.word	0x08007c18
 8006058:	08007bf0 	.word	0x08007bf0
 800605c:	3ff00000 	.word	0x3ff00000
 8006060:	40240000 	.word	0x40240000
 8006064:	401c0000 	.word	0x401c0000
 8006068:	40140000 	.word	0x40140000
 800606c:	3fe00000 	.word	0x3fe00000
 8006070:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006074:	9d00      	ldr	r5, [sp, #0]
 8006076:	4642      	mov	r2, r8
 8006078:	464b      	mov	r3, r9
 800607a:	4630      	mov	r0, r6
 800607c:	4639      	mov	r1, r7
 800607e:	f7fa fbe5 	bl	800084c <__aeabi_ddiv>
 8006082:	f7fa fd69 	bl	8000b58 <__aeabi_d2iz>
 8006086:	9001      	str	r0, [sp, #4]
 8006088:	f7fa fa4c 	bl	8000524 <__aeabi_i2d>
 800608c:	4642      	mov	r2, r8
 800608e:	464b      	mov	r3, r9
 8006090:	f7fa fab2 	bl	80005f8 <__aeabi_dmul>
 8006094:	4602      	mov	r2, r0
 8006096:	460b      	mov	r3, r1
 8006098:	4630      	mov	r0, r6
 800609a:	4639      	mov	r1, r7
 800609c:	f7fa f8f4 	bl	8000288 <__aeabi_dsub>
 80060a0:	9e01      	ldr	r6, [sp, #4]
 80060a2:	9f04      	ldr	r7, [sp, #16]
 80060a4:	3630      	adds	r6, #48	; 0x30
 80060a6:	f805 6b01 	strb.w	r6, [r5], #1
 80060aa:	9e00      	ldr	r6, [sp, #0]
 80060ac:	1bae      	subs	r6, r5, r6
 80060ae:	42b7      	cmp	r7, r6
 80060b0:	4602      	mov	r2, r0
 80060b2:	460b      	mov	r3, r1
 80060b4:	d134      	bne.n	8006120 <_dtoa_r+0x708>
 80060b6:	f7fa f8e9 	bl	800028c <__adddf3>
 80060ba:	4642      	mov	r2, r8
 80060bc:	464b      	mov	r3, r9
 80060be:	4606      	mov	r6, r0
 80060c0:	460f      	mov	r7, r1
 80060c2:	f7fa fd29 	bl	8000b18 <__aeabi_dcmpgt>
 80060c6:	b9c8      	cbnz	r0, 80060fc <_dtoa_r+0x6e4>
 80060c8:	4642      	mov	r2, r8
 80060ca:	464b      	mov	r3, r9
 80060cc:	4630      	mov	r0, r6
 80060ce:	4639      	mov	r1, r7
 80060d0:	f7fa fcfa 	bl	8000ac8 <__aeabi_dcmpeq>
 80060d4:	b110      	cbz	r0, 80060dc <_dtoa_r+0x6c4>
 80060d6:	9b01      	ldr	r3, [sp, #4]
 80060d8:	07db      	lsls	r3, r3, #31
 80060da:	d40f      	bmi.n	80060fc <_dtoa_r+0x6e4>
 80060dc:	4651      	mov	r1, sl
 80060de:	4620      	mov	r0, r4
 80060e0:	f000 fbcc 	bl	800687c <_Bfree>
 80060e4:	2300      	movs	r3, #0
 80060e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80060e8:	702b      	strb	r3, [r5, #0]
 80060ea:	f10b 0301 	add.w	r3, fp, #1
 80060ee:	6013      	str	r3, [r2, #0]
 80060f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	f43f ace2 	beq.w	8005abc <_dtoa_r+0xa4>
 80060f8:	601d      	str	r5, [r3, #0]
 80060fa:	e4df      	b.n	8005abc <_dtoa_r+0xa4>
 80060fc:	465f      	mov	r7, fp
 80060fe:	462b      	mov	r3, r5
 8006100:	461d      	mov	r5, r3
 8006102:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006106:	2a39      	cmp	r2, #57	; 0x39
 8006108:	d106      	bne.n	8006118 <_dtoa_r+0x700>
 800610a:	9a00      	ldr	r2, [sp, #0]
 800610c:	429a      	cmp	r2, r3
 800610e:	d1f7      	bne.n	8006100 <_dtoa_r+0x6e8>
 8006110:	9900      	ldr	r1, [sp, #0]
 8006112:	2230      	movs	r2, #48	; 0x30
 8006114:	3701      	adds	r7, #1
 8006116:	700a      	strb	r2, [r1, #0]
 8006118:	781a      	ldrb	r2, [r3, #0]
 800611a:	3201      	adds	r2, #1
 800611c:	701a      	strb	r2, [r3, #0]
 800611e:	e790      	b.n	8006042 <_dtoa_r+0x62a>
 8006120:	4ba3      	ldr	r3, [pc, #652]	; (80063b0 <_dtoa_r+0x998>)
 8006122:	2200      	movs	r2, #0
 8006124:	f7fa fa68 	bl	80005f8 <__aeabi_dmul>
 8006128:	2200      	movs	r2, #0
 800612a:	2300      	movs	r3, #0
 800612c:	4606      	mov	r6, r0
 800612e:	460f      	mov	r7, r1
 8006130:	f7fa fcca 	bl	8000ac8 <__aeabi_dcmpeq>
 8006134:	2800      	cmp	r0, #0
 8006136:	d09e      	beq.n	8006076 <_dtoa_r+0x65e>
 8006138:	e7d0      	b.n	80060dc <_dtoa_r+0x6c4>
 800613a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800613c:	2a00      	cmp	r2, #0
 800613e:	f000 80ca 	beq.w	80062d6 <_dtoa_r+0x8be>
 8006142:	9a07      	ldr	r2, [sp, #28]
 8006144:	2a01      	cmp	r2, #1
 8006146:	f300 80ad 	bgt.w	80062a4 <_dtoa_r+0x88c>
 800614a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800614c:	2a00      	cmp	r2, #0
 800614e:	f000 80a5 	beq.w	800629c <_dtoa_r+0x884>
 8006152:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006156:	9e08      	ldr	r6, [sp, #32]
 8006158:	9d05      	ldr	r5, [sp, #20]
 800615a:	9a05      	ldr	r2, [sp, #20]
 800615c:	441a      	add	r2, r3
 800615e:	9205      	str	r2, [sp, #20]
 8006160:	9a06      	ldr	r2, [sp, #24]
 8006162:	2101      	movs	r1, #1
 8006164:	441a      	add	r2, r3
 8006166:	4620      	mov	r0, r4
 8006168:	9206      	str	r2, [sp, #24]
 800616a:	f000 fc3d 	bl	80069e8 <__i2b>
 800616e:	4607      	mov	r7, r0
 8006170:	b165      	cbz	r5, 800618c <_dtoa_r+0x774>
 8006172:	9b06      	ldr	r3, [sp, #24]
 8006174:	2b00      	cmp	r3, #0
 8006176:	dd09      	ble.n	800618c <_dtoa_r+0x774>
 8006178:	42ab      	cmp	r3, r5
 800617a:	9a05      	ldr	r2, [sp, #20]
 800617c:	bfa8      	it	ge
 800617e:	462b      	movge	r3, r5
 8006180:	1ad2      	subs	r2, r2, r3
 8006182:	9205      	str	r2, [sp, #20]
 8006184:	9a06      	ldr	r2, [sp, #24]
 8006186:	1aed      	subs	r5, r5, r3
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	9306      	str	r3, [sp, #24]
 800618c:	9b08      	ldr	r3, [sp, #32]
 800618e:	b1f3      	cbz	r3, 80061ce <_dtoa_r+0x7b6>
 8006190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006192:	2b00      	cmp	r3, #0
 8006194:	f000 80a3 	beq.w	80062de <_dtoa_r+0x8c6>
 8006198:	2e00      	cmp	r6, #0
 800619a:	dd10      	ble.n	80061be <_dtoa_r+0x7a6>
 800619c:	4639      	mov	r1, r7
 800619e:	4632      	mov	r2, r6
 80061a0:	4620      	mov	r0, r4
 80061a2:	f000 fce1 	bl	8006b68 <__pow5mult>
 80061a6:	4652      	mov	r2, sl
 80061a8:	4601      	mov	r1, r0
 80061aa:	4607      	mov	r7, r0
 80061ac:	4620      	mov	r0, r4
 80061ae:	f000 fc31 	bl	8006a14 <__multiply>
 80061b2:	4651      	mov	r1, sl
 80061b4:	4680      	mov	r8, r0
 80061b6:	4620      	mov	r0, r4
 80061b8:	f000 fb60 	bl	800687c <_Bfree>
 80061bc:	46c2      	mov	sl, r8
 80061be:	9b08      	ldr	r3, [sp, #32]
 80061c0:	1b9a      	subs	r2, r3, r6
 80061c2:	d004      	beq.n	80061ce <_dtoa_r+0x7b6>
 80061c4:	4651      	mov	r1, sl
 80061c6:	4620      	mov	r0, r4
 80061c8:	f000 fcce 	bl	8006b68 <__pow5mult>
 80061cc:	4682      	mov	sl, r0
 80061ce:	2101      	movs	r1, #1
 80061d0:	4620      	mov	r0, r4
 80061d2:	f000 fc09 	bl	80069e8 <__i2b>
 80061d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061d8:	2b00      	cmp	r3, #0
 80061da:	4606      	mov	r6, r0
 80061dc:	f340 8081 	ble.w	80062e2 <_dtoa_r+0x8ca>
 80061e0:	461a      	mov	r2, r3
 80061e2:	4601      	mov	r1, r0
 80061e4:	4620      	mov	r0, r4
 80061e6:	f000 fcbf 	bl	8006b68 <__pow5mult>
 80061ea:	9b07      	ldr	r3, [sp, #28]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	4606      	mov	r6, r0
 80061f0:	dd7a      	ble.n	80062e8 <_dtoa_r+0x8d0>
 80061f2:	f04f 0800 	mov.w	r8, #0
 80061f6:	6933      	ldr	r3, [r6, #16]
 80061f8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80061fc:	6918      	ldr	r0, [r3, #16]
 80061fe:	f000 fba5 	bl	800694c <__hi0bits>
 8006202:	f1c0 0020 	rsb	r0, r0, #32
 8006206:	9b06      	ldr	r3, [sp, #24]
 8006208:	4418      	add	r0, r3
 800620a:	f010 001f 	ands.w	r0, r0, #31
 800620e:	f000 8094 	beq.w	800633a <_dtoa_r+0x922>
 8006212:	f1c0 0320 	rsb	r3, r0, #32
 8006216:	2b04      	cmp	r3, #4
 8006218:	f340 8085 	ble.w	8006326 <_dtoa_r+0x90e>
 800621c:	9b05      	ldr	r3, [sp, #20]
 800621e:	f1c0 001c 	rsb	r0, r0, #28
 8006222:	4403      	add	r3, r0
 8006224:	9305      	str	r3, [sp, #20]
 8006226:	9b06      	ldr	r3, [sp, #24]
 8006228:	4403      	add	r3, r0
 800622a:	4405      	add	r5, r0
 800622c:	9306      	str	r3, [sp, #24]
 800622e:	9b05      	ldr	r3, [sp, #20]
 8006230:	2b00      	cmp	r3, #0
 8006232:	dd05      	ble.n	8006240 <_dtoa_r+0x828>
 8006234:	4651      	mov	r1, sl
 8006236:	461a      	mov	r2, r3
 8006238:	4620      	mov	r0, r4
 800623a:	f000 fcef 	bl	8006c1c <__lshift>
 800623e:	4682      	mov	sl, r0
 8006240:	9b06      	ldr	r3, [sp, #24]
 8006242:	2b00      	cmp	r3, #0
 8006244:	dd05      	ble.n	8006252 <_dtoa_r+0x83a>
 8006246:	4631      	mov	r1, r6
 8006248:	461a      	mov	r2, r3
 800624a:	4620      	mov	r0, r4
 800624c:	f000 fce6 	bl	8006c1c <__lshift>
 8006250:	4606      	mov	r6, r0
 8006252:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006254:	2b00      	cmp	r3, #0
 8006256:	d072      	beq.n	800633e <_dtoa_r+0x926>
 8006258:	4631      	mov	r1, r6
 800625a:	4650      	mov	r0, sl
 800625c:	f000 fd4a 	bl	8006cf4 <__mcmp>
 8006260:	2800      	cmp	r0, #0
 8006262:	da6c      	bge.n	800633e <_dtoa_r+0x926>
 8006264:	2300      	movs	r3, #0
 8006266:	4651      	mov	r1, sl
 8006268:	220a      	movs	r2, #10
 800626a:	4620      	mov	r0, r4
 800626c:	f000 fb28 	bl	80068c0 <__multadd>
 8006270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006272:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006276:	4682      	mov	sl, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	f000 81b0 	beq.w	80065de <_dtoa_r+0xbc6>
 800627e:	2300      	movs	r3, #0
 8006280:	4639      	mov	r1, r7
 8006282:	220a      	movs	r2, #10
 8006284:	4620      	mov	r0, r4
 8006286:	f000 fb1b 	bl	80068c0 <__multadd>
 800628a:	9b01      	ldr	r3, [sp, #4]
 800628c:	2b00      	cmp	r3, #0
 800628e:	4607      	mov	r7, r0
 8006290:	f300 8096 	bgt.w	80063c0 <_dtoa_r+0x9a8>
 8006294:	9b07      	ldr	r3, [sp, #28]
 8006296:	2b02      	cmp	r3, #2
 8006298:	dc59      	bgt.n	800634e <_dtoa_r+0x936>
 800629a:	e091      	b.n	80063c0 <_dtoa_r+0x9a8>
 800629c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800629e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80062a2:	e758      	b.n	8006156 <_dtoa_r+0x73e>
 80062a4:	9b04      	ldr	r3, [sp, #16]
 80062a6:	1e5e      	subs	r6, r3, #1
 80062a8:	9b08      	ldr	r3, [sp, #32]
 80062aa:	42b3      	cmp	r3, r6
 80062ac:	bfbf      	itttt	lt
 80062ae:	9b08      	ldrlt	r3, [sp, #32]
 80062b0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80062b2:	9608      	strlt	r6, [sp, #32]
 80062b4:	1af3      	sublt	r3, r6, r3
 80062b6:	bfb4      	ite	lt
 80062b8:	18d2      	addlt	r2, r2, r3
 80062ba:	1b9e      	subge	r6, r3, r6
 80062bc:	9b04      	ldr	r3, [sp, #16]
 80062be:	bfbc      	itt	lt
 80062c0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80062c2:	2600      	movlt	r6, #0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	bfb7      	itett	lt
 80062c8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80062cc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80062d0:	1a9d      	sublt	r5, r3, r2
 80062d2:	2300      	movlt	r3, #0
 80062d4:	e741      	b.n	800615a <_dtoa_r+0x742>
 80062d6:	9e08      	ldr	r6, [sp, #32]
 80062d8:	9d05      	ldr	r5, [sp, #20]
 80062da:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80062dc:	e748      	b.n	8006170 <_dtoa_r+0x758>
 80062de:	9a08      	ldr	r2, [sp, #32]
 80062e0:	e770      	b.n	80061c4 <_dtoa_r+0x7ac>
 80062e2:	9b07      	ldr	r3, [sp, #28]
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	dc19      	bgt.n	800631c <_dtoa_r+0x904>
 80062e8:	9b02      	ldr	r3, [sp, #8]
 80062ea:	b9bb      	cbnz	r3, 800631c <_dtoa_r+0x904>
 80062ec:	9b03      	ldr	r3, [sp, #12]
 80062ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062f2:	b99b      	cbnz	r3, 800631c <_dtoa_r+0x904>
 80062f4:	9b03      	ldr	r3, [sp, #12]
 80062f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062fa:	0d1b      	lsrs	r3, r3, #20
 80062fc:	051b      	lsls	r3, r3, #20
 80062fe:	b183      	cbz	r3, 8006322 <_dtoa_r+0x90a>
 8006300:	9b05      	ldr	r3, [sp, #20]
 8006302:	3301      	adds	r3, #1
 8006304:	9305      	str	r3, [sp, #20]
 8006306:	9b06      	ldr	r3, [sp, #24]
 8006308:	3301      	adds	r3, #1
 800630a:	9306      	str	r3, [sp, #24]
 800630c:	f04f 0801 	mov.w	r8, #1
 8006310:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006312:	2b00      	cmp	r3, #0
 8006314:	f47f af6f 	bne.w	80061f6 <_dtoa_r+0x7de>
 8006318:	2001      	movs	r0, #1
 800631a:	e774      	b.n	8006206 <_dtoa_r+0x7ee>
 800631c:	f04f 0800 	mov.w	r8, #0
 8006320:	e7f6      	b.n	8006310 <_dtoa_r+0x8f8>
 8006322:	4698      	mov	r8, r3
 8006324:	e7f4      	b.n	8006310 <_dtoa_r+0x8f8>
 8006326:	d082      	beq.n	800622e <_dtoa_r+0x816>
 8006328:	9a05      	ldr	r2, [sp, #20]
 800632a:	331c      	adds	r3, #28
 800632c:	441a      	add	r2, r3
 800632e:	9205      	str	r2, [sp, #20]
 8006330:	9a06      	ldr	r2, [sp, #24]
 8006332:	441a      	add	r2, r3
 8006334:	441d      	add	r5, r3
 8006336:	9206      	str	r2, [sp, #24]
 8006338:	e779      	b.n	800622e <_dtoa_r+0x816>
 800633a:	4603      	mov	r3, r0
 800633c:	e7f4      	b.n	8006328 <_dtoa_r+0x910>
 800633e:	9b04      	ldr	r3, [sp, #16]
 8006340:	2b00      	cmp	r3, #0
 8006342:	dc37      	bgt.n	80063b4 <_dtoa_r+0x99c>
 8006344:	9b07      	ldr	r3, [sp, #28]
 8006346:	2b02      	cmp	r3, #2
 8006348:	dd34      	ble.n	80063b4 <_dtoa_r+0x99c>
 800634a:	9b04      	ldr	r3, [sp, #16]
 800634c:	9301      	str	r3, [sp, #4]
 800634e:	9b01      	ldr	r3, [sp, #4]
 8006350:	b963      	cbnz	r3, 800636c <_dtoa_r+0x954>
 8006352:	4631      	mov	r1, r6
 8006354:	2205      	movs	r2, #5
 8006356:	4620      	mov	r0, r4
 8006358:	f000 fab2 	bl	80068c0 <__multadd>
 800635c:	4601      	mov	r1, r0
 800635e:	4606      	mov	r6, r0
 8006360:	4650      	mov	r0, sl
 8006362:	f000 fcc7 	bl	8006cf4 <__mcmp>
 8006366:	2800      	cmp	r0, #0
 8006368:	f73f adbb 	bgt.w	8005ee2 <_dtoa_r+0x4ca>
 800636c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800636e:	9d00      	ldr	r5, [sp, #0]
 8006370:	ea6f 0b03 	mvn.w	fp, r3
 8006374:	f04f 0800 	mov.w	r8, #0
 8006378:	4631      	mov	r1, r6
 800637a:	4620      	mov	r0, r4
 800637c:	f000 fa7e 	bl	800687c <_Bfree>
 8006380:	2f00      	cmp	r7, #0
 8006382:	f43f aeab 	beq.w	80060dc <_dtoa_r+0x6c4>
 8006386:	f1b8 0f00 	cmp.w	r8, #0
 800638a:	d005      	beq.n	8006398 <_dtoa_r+0x980>
 800638c:	45b8      	cmp	r8, r7
 800638e:	d003      	beq.n	8006398 <_dtoa_r+0x980>
 8006390:	4641      	mov	r1, r8
 8006392:	4620      	mov	r0, r4
 8006394:	f000 fa72 	bl	800687c <_Bfree>
 8006398:	4639      	mov	r1, r7
 800639a:	4620      	mov	r0, r4
 800639c:	f000 fa6e 	bl	800687c <_Bfree>
 80063a0:	e69c      	b.n	80060dc <_dtoa_r+0x6c4>
 80063a2:	2600      	movs	r6, #0
 80063a4:	4637      	mov	r7, r6
 80063a6:	e7e1      	b.n	800636c <_dtoa_r+0x954>
 80063a8:	46bb      	mov	fp, r7
 80063aa:	4637      	mov	r7, r6
 80063ac:	e599      	b.n	8005ee2 <_dtoa_r+0x4ca>
 80063ae:	bf00      	nop
 80063b0:	40240000 	.word	0x40240000
 80063b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	f000 80c8 	beq.w	800654c <_dtoa_r+0xb34>
 80063bc:	9b04      	ldr	r3, [sp, #16]
 80063be:	9301      	str	r3, [sp, #4]
 80063c0:	2d00      	cmp	r5, #0
 80063c2:	dd05      	ble.n	80063d0 <_dtoa_r+0x9b8>
 80063c4:	4639      	mov	r1, r7
 80063c6:	462a      	mov	r2, r5
 80063c8:	4620      	mov	r0, r4
 80063ca:	f000 fc27 	bl	8006c1c <__lshift>
 80063ce:	4607      	mov	r7, r0
 80063d0:	f1b8 0f00 	cmp.w	r8, #0
 80063d4:	d05b      	beq.n	800648e <_dtoa_r+0xa76>
 80063d6:	6879      	ldr	r1, [r7, #4]
 80063d8:	4620      	mov	r0, r4
 80063da:	f000 fa0f 	bl	80067fc <_Balloc>
 80063de:	4605      	mov	r5, r0
 80063e0:	b928      	cbnz	r0, 80063ee <_dtoa_r+0x9d6>
 80063e2:	4b83      	ldr	r3, [pc, #524]	; (80065f0 <_dtoa_r+0xbd8>)
 80063e4:	4602      	mov	r2, r0
 80063e6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80063ea:	f7ff bb2e 	b.w	8005a4a <_dtoa_r+0x32>
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	3202      	adds	r2, #2
 80063f2:	0092      	lsls	r2, r2, #2
 80063f4:	f107 010c 	add.w	r1, r7, #12
 80063f8:	300c      	adds	r0, #12
 80063fa:	f000 ffab 	bl	8007354 <memcpy>
 80063fe:	2201      	movs	r2, #1
 8006400:	4629      	mov	r1, r5
 8006402:	4620      	mov	r0, r4
 8006404:	f000 fc0a 	bl	8006c1c <__lshift>
 8006408:	9b00      	ldr	r3, [sp, #0]
 800640a:	3301      	adds	r3, #1
 800640c:	9304      	str	r3, [sp, #16]
 800640e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006412:	4413      	add	r3, r2
 8006414:	9308      	str	r3, [sp, #32]
 8006416:	9b02      	ldr	r3, [sp, #8]
 8006418:	f003 0301 	and.w	r3, r3, #1
 800641c:	46b8      	mov	r8, r7
 800641e:	9306      	str	r3, [sp, #24]
 8006420:	4607      	mov	r7, r0
 8006422:	9b04      	ldr	r3, [sp, #16]
 8006424:	4631      	mov	r1, r6
 8006426:	3b01      	subs	r3, #1
 8006428:	4650      	mov	r0, sl
 800642a:	9301      	str	r3, [sp, #4]
 800642c:	f7ff fa6b 	bl	8005906 <quorem>
 8006430:	4641      	mov	r1, r8
 8006432:	9002      	str	r0, [sp, #8]
 8006434:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006438:	4650      	mov	r0, sl
 800643a:	f000 fc5b 	bl	8006cf4 <__mcmp>
 800643e:	463a      	mov	r2, r7
 8006440:	9005      	str	r0, [sp, #20]
 8006442:	4631      	mov	r1, r6
 8006444:	4620      	mov	r0, r4
 8006446:	f000 fc71 	bl	8006d2c <__mdiff>
 800644a:	68c2      	ldr	r2, [r0, #12]
 800644c:	4605      	mov	r5, r0
 800644e:	bb02      	cbnz	r2, 8006492 <_dtoa_r+0xa7a>
 8006450:	4601      	mov	r1, r0
 8006452:	4650      	mov	r0, sl
 8006454:	f000 fc4e 	bl	8006cf4 <__mcmp>
 8006458:	4602      	mov	r2, r0
 800645a:	4629      	mov	r1, r5
 800645c:	4620      	mov	r0, r4
 800645e:	9209      	str	r2, [sp, #36]	; 0x24
 8006460:	f000 fa0c 	bl	800687c <_Bfree>
 8006464:	9b07      	ldr	r3, [sp, #28]
 8006466:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006468:	9d04      	ldr	r5, [sp, #16]
 800646a:	ea43 0102 	orr.w	r1, r3, r2
 800646e:	9b06      	ldr	r3, [sp, #24]
 8006470:	4319      	orrs	r1, r3
 8006472:	d110      	bne.n	8006496 <_dtoa_r+0xa7e>
 8006474:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006478:	d029      	beq.n	80064ce <_dtoa_r+0xab6>
 800647a:	9b05      	ldr	r3, [sp, #20]
 800647c:	2b00      	cmp	r3, #0
 800647e:	dd02      	ble.n	8006486 <_dtoa_r+0xa6e>
 8006480:	9b02      	ldr	r3, [sp, #8]
 8006482:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006486:	9b01      	ldr	r3, [sp, #4]
 8006488:	f883 9000 	strb.w	r9, [r3]
 800648c:	e774      	b.n	8006378 <_dtoa_r+0x960>
 800648e:	4638      	mov	r0, r7
 8006490:	e7ba      	b.n	8006408 <_dtoa_r+0x9f0>
 8006492:	2201      	movs	r2, #1
 8006494:	e7e1      	b.n	800645a <_dtoa_r+0xa42>
 8006496:	9b05      	ldr	r3, [sp, #20]
 8006498:	2b00      	cmp	r3, #0
 800649a:	db04      	blt.n	80064a6 <_dtoa_r+0xa8e>
 800649c:	9907      	ldr	r1, [sp, #28]
 800649e:	430b      	orrs	r3, r1
 80064a0:	9906      	ldr	r1, [sp, #24]
 80064a2:	430b      	orrs	r3, r1
 80064a4:	d120      	bne.n	80064e8 <_dtoa_r+0xad0>
 80064a6:	2a00      	cmp	r2, #0
 80064a8:	dded      	ble.n	8006486 <_dtoa_r+0xa6e>
 80064aa:	4651      	mov	r1, sl
 80064ac:	2201      	movs	r2, #1
 80064ae:	4620      	mov	r0, r4
 80064b0:	f000 fbb4 	bl	8006c1c <__lshift>
 80064b4:	4631      	mov	r1, r6
 80064b6:	4682      	mov	sl, r0
 80064b8:	f000 fc1c 	bl	8006cf4 <__mcmp>
 80064bc:	2800      	cmp	r0, #0
 80064be:	dc03      	bgt.n	80064c8 <_dtoa_r+0xab0>
 80064c0:	d1e1      	bne.n	8006486 <_dtoa_r+0xa6e>
 80064c2:	f019 0f01 	tst.w	r9, #1
 80064c6:	d0de      	beq.n	8006486 <_dtoa_r+0xa6e>
 80064c8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80064cc:	d1d8      	bne.n	8006480 <_dtoa_r+0xa68>
 80064ce:	9a01      	ldr	r2, [sp, #4]
 80064d0:	2339      	movs	r3, #57	; 0x39
 80064d2:	7013      	strb	r3, [r2, #0]
 80064d4:	462b      	mov	r3, r5
 80064d6:	461d      	mov	r5, r3
 80064d8:	3b01      	subs	r3, #1
 80064da:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80064de:	2a39      	cmp	r2, #57	; 0x39
 80064e0:	d06c      	beq.n	80065bc <_dtoa_r+0xba4>
 80064e2:	3201      	adds	r2, #1
 80064e4:	701a      	strb	r2, [r3, #0]
 80064e6:	e747      	b.n	8006378 <_dtoa_r+0x960>
 80064e8:	2a00      	cmp	r2, #0
 80064ea:	dd07      	ble.n	80064fc <_dtoa_r+0xae4>
 80064ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80064f0:	d0ed      	beq.n	80064ce <_dtoa_r+0xab6>
 80064f2:	9a01      	ldr	r2, [sp, #4]
 80064f4:	f109 0301 	add.w	r3, r9, #1
 80064f8:	7013      	strb	r3, [r2, #0]
 80064fa:	e73d      	b.n	8006378 <_dtoa_r+0x960>
 80064fc:	9b04      	ldr	r3, [sp, #16]
 80064fe:	9a08      	ldr	r2, [sp, #32]
 8006500:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006504:	4293      	cmp	r3, r2
 8006506:	d043      	beq.n	8006590 <_dtoa_r+0xb78>
 8006508:	4651      	mov	r1, sl
 800650a:	2300      	movs	r3, #0
 800650c:	220a      	movs	r2, #10
 800650e:	4620      	mov	r0, r4
 8006510:	f000 f9d6 	bl	80068c0 <__multadd>
 8006514:	45b8      	cmp	r8, r7
 8006516:	4682      	mov	sl, r0
 8006518:	f04f 0300 	mov.w	r3, #0
 800651c:	f04f 020a 	mov.w	r2, #10
 8006520:	4641      	mov	r1, r8
 8006522:	4620      	mov	r0, r4
 8006524:	d107      	bne.n	8006536 <_dtoa_r+0xb1e>
 8006526:	f000 f9cb 	bl	80068c0 <__multadd>
 800652a:	4680      	mov	r8, r0
 800652c:	4607      	mov	r7, r0
 800652e:	9b04      	ldr	r3, [sp, #16]
 8006530:	3301      	adds	r3, #1
 8006532:	9304      	str	r3, [sp, #16]
 8006534:	e775      	b.n	8006422 <_dtoa_r+0xa0a>
 8006536:	f000 f9c3 	bl	80068c0 <__multadd>
 800653a:	4639      	mov	r1, r7
 800653c:	4680      	mov	r8, r0
 800653e:	2300      	movs	r3, #0
 8006540:	220a      	movs	r2, #10
 8006542:	4620      	mov	r0, r4
 8006544:	f000 f9bc 	bl	80068c0 <__multadd>
 8006548:	4607      	mov	r7, r0
 800654a:	e7f0      	b.n	800652e <_dtoa_r+0xb16>
 800654c:	9b04      	ldr	r3, [sp, #16]
 800654e:	9301      	str	r3, [sp, #4]
 8006550:	9d00      	ldr	r5, [sp, #0]
 8006552:	4631      	mov	r1, r6
 8006554:	4650      	mov	r0, sl
 8006556:	f7ff f9d6 	bl	8005906 <quorem>
 800655a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800655e:	9b00      	ldr	r3, [sp, #0]
 8006560:	f805 9b01 	strb.w	r9, [r5], #1
 8006564:	1aea      	subs	r2, r5, r3
 8006566:	9b01      	ldr	r3, [sp, #4]
 8006568:	4293      	cmp	r3, r2
 800656a:	dd07      	ble.n	800657c <_dtoa_r+0xb64>
 800656c:	4651      	mov	r1, sl
 800656e:	2300      	movs	r3, #0
 8006570:	220a      	movs	r2, #10
 8006572:	4620      	mov	r0, r4
 8006574:	f000 f9a4 	bl	80068c0 <__multadd>
 8006578:	4682      	mov	sl, r0
 800657a:	e7ea      	b.n	8006552 <_dtoa_r+0xb3a>
 800657c:	9b01      	ldr	r3, [sp, #4]
 800657e:	2b00      	cmp	r3, #0
 8006580:	bfc8      	it	gt
 8006582:	461d      	movgt	r5, r3
 8006584:	9b00      	ldr	r3, [sp, #0]
 8006586:	bfd8      	it	le
 8006588:	2501      	movle	r5, #1
 800658a:	441d      	add	r5, r3
 800658c:	f04f 0800 	mov.w	r8, #0
 8006590:	4651      	mov	r1, sl
 8006592:	2201      	movs	r2, #1
 8006594:	4620      	mov	r0, r4
 8006596:	f000 fb41 	bl	8006c1c <__lshift>
 800659a:	4631      	mov	r1, r6
 800659c:	4682      	mov	sl, r0
 800659e:	f000 fba9 	bl	8006cf4 <__mcmp>
 80065a2:	2800      	cmp	r0, #0
 80065a4:	dc96      	bgt.n	80064d4 <_dtoa_r+0xabc>
 80065a6:	d102      	bne.n	80065ae <_dtoa_r+0xb96>
 80065a8:	f019 0f01 	tst.w	r9, #1
 80065ac:	d192      	bne.n	80064d4 <_dtoa_r+0xabc>
 80065ae:	462b      	mov	r3, r5
 80065b0:	461d      	mov	r5, r3
 80065b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80065b6:	2a30      	cmp	r2, #48	; 0x30
 80065b8:	d0fa      	beq.n	80065b0 <_dtoa_r+0xb98>
 80065ba:	e6dd      	b.n	8006378 <_dtoa_r+0x960>
 80065bc:	9a00      	ldr	r2, [sp, #0]
 80065be:	429a      	cmp	r2, r3
 80065c0:	d189      	bne.n	80064d6 <_dtoa_r+0xabe>
 80065c2:	f10b 0b01 	add.w	fp, fp, #1
 80065c6:	2331      	movs	r3, #49	; 0x31
 80065c8:	e796      	b.n	80064f8 <_dtoa_r+0xae0>
 80065ca:	4b0a      	ldr	r3, [pc, #40]	; (80065f4 <_dtoa_r+0xbdc>)
 80065cc:	f7ff ba99 	b.w	8005b02 <_dtoa_r+0xea>
 80065d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	f47f aa6d 	bne.w	8005ab2 <_dtoa_r+0x9a>
 80065d8:	4b07      	ldr	r3, [pc, #28]	; (80065f8 <_dtoa_r+0xbe0>)
 80065da:	f7ff ba92 	b.w	8005b02 <_dtoa_r+0xea>
 80065de:	9b01      	ldr	r3, [sp, #4]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	dcb5      	bgt.n	8006550 <_dtoa_r+0xb38>
 80065e4:	9b07      	ldr	r3, [sp, #28]
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	f73f aeb1 	bgt.w	800634e <_dtoa_r+0x936>
 80065ec:	e7b0      	b.n	8006550 <_dtoa_r+0xb38>
 80065ee:	bf00      	nop
 80065f0:	08007b80 	.word	0x08007b80
 80065f4:	08007ae0 	.word	0x08007ae0
 80065f8:	08007b04 	.word	0x08007b04

080065fc <_free_r>:
 80065fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065fe:	2900      	cmp	r1, #0
 8006600:	d044      	beq.n	800668c <_free_r+0x90>
 8006602:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006606:	9001      	str	r0, [sp, #4]
 8006608:	2b00      	cmp	r3, #0
 800660a:	f1a1 0404 	sub.w	r4, r1, #4
 800660e:	bfb8      	it	lt
 8006610:	18e4      	addlt	r4, r4, r3
 8006612:	f000 f8e7 	bl	80067e4 <__malloc_lock>
 8006616:	4a1e      	ldr	r2, [pc, #120]	; (8006690 <_free_r+0x94>)
 8006618:	9801      	ldr	r0, [sp, #4]
 800661a:	6813      	ldr	r3, [r2, #0]
 800661c:	b933      	cbnz	r3, 800662c <_free_r+0x30>
 800661e:	6063      	str	r3, [r4, #4]
 8006620:	6014      	str	r4, [r2, #0]
 8006622:	b003      	add	sp, #12
 8006624:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006628:	f000 b8e2 	b.w	80067f0 <__malloc_unlock>
 800662c:	42a3      	cmp	r3, r4
 800662e:	d908      	bls.n	8006642 <_free_r+0x46>
 8006630:	6825      	ldr	r5, [r4, #0]
 8006632:	1961      	adds	r1, r4, r5
 8006634:	428b      	cmp	r3, r1
 8006636:	bf01      	itttt	eq
 8006638:	6819      	ldreq	r1, [r3, #0]
 800663a:	685b      	ldreq	r3, [r3, #4]
 800663c:	1949      	addeq	r1, r1, r5
 800663e:	6021      	streq	r1, [r4, #0]
 8006640:	e7ed      	b.n	800661e <_free_r+0x22>
 8006642:	461a      	mov	r2, r3
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	b10b      	cbz	r3, 800664c <_free_r+0x50>
 8006648:	42a3      	cmp	r3, r4
 800664a:	d9fa      	bls.n	8006642 <_free_r+0x46>
 800664c:	6811      	ldr	r1, [r2, #0]
 800664e:	1855      	adds	r5, r2, r1
 8006650:	42a5      	cmp	r5, r4
 8006652:	d10b      	bne.n	800666c <_free_r+0x70>
 8006654:	6824      	ldr	r4, [r4, #0]
 8006656:	4421      	add	r1, r4
 8006658:	1854      	adds	r4, r2, r1
 800665a:	42a3      	cmp	r3, r4
 800665c:	6011      	str	r1, [r2, #0]
 800665e:	d1e0      	bne.n	8006622 <_free_r+0x26>
 8006660:	681c      	ldr	r4, [r3, #0]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	6053      	str	r3, [r2, #4]
 8006666:	440c      	add	r4, r1
 8006668:	6014      	str	r4, [r2, #0]
 800666a:	e7da      	b.n	8006622 <_free_r+0x26>
 800666c:	d902      	bls.n	8006674 <_free_r+0x78>
 800666e:	230c      	movs	r3, #12
 8006670:	6003      	str	r3, [r0, #0]
 8006672:	e7d6      	b.n	8006622 <_free_r+0x26>
 8006674:	6825      	ldr	r5, [r4, #0]
 8006676:	1961      	adds	r1, r4, r5
 8006678:	428b      	cmp	r3, r1
 800667a:	bf04      	itt	eq
 800667c:	6819      	ldreq	r1, [r3, #0]
 800667e:	685b      	ldreq	r3, [r3, #4]
 8006680:	6063      	str	r3, [r4, #4]
 8006682:	bf04      	itt	eq
 8006684:	1949      	addeq	r1, r1, r5
 8006686:	6021      	streq	r1, [r4, #0]
 8006688:	6054      	str	r4, [r2, #4]
 800668a:	e7ca      	b.n	8006622 <_free_r+0x26>
 800668c:	b003      	add	sp, #12
 800668e:	bd30      	pop	{r4, r5, pc}
 8006690:	20000694 	.word	0x20000694

08006694 <malloc>:
 8006694:	4b02      	ldr	r3, [pc, #8]	; (80066a0 <malloc+0xc>)
 8006696:	4601      	mov	r1, r0
 8006698:	6818      	ldr	r0, [r3, #0]
 800669a:	f000 b823 	b.w	80066e4 <_malloc_r>
 800669e:	bf00      	nop
 80066a0:	2000015c 	.word	0x2000015c

080066a4 <sbrk_aligned>:
 80066a4:	b570      	push	{r4, r5, r6, lr}
 80066a6:	4e0e      	ldr	r6, [pc, #56]	; (80066e0 <sbrk_aligned+0x3c>)
 80066a8:	460c      	mov	r4, r1
 80066aa:	6831      	ldr	r1, [r6, #0]
 80066ac:	4605      	mov	r5, r0
 80066ae:	b911      	cbnz	r1, 80066b6 <sbrk_aligned+0x12>
 80066b0:	f000 fe40 	bl	8007334 <_sbrk_r>
 80066b4:	6030      	str	r0, [r6, #0]
 80066b6:	4621      	mov	r1, r4
 80066b8:	4628      	mov	r0, r5
 80066ba:	f000 fe3b 	bl	8007334 <_sbrk_r>
 80066be:	1c43      	adds	r3, r0, #1
 80066c0:	d00a      	beq.n	80066d8 <sbrk_aligned+0x34>
 80066c2:	1cc4      	adds	r4, r0, #3
 80066c4:	f024 0403 	bic.w	r4, r4, #3
 80066c8:	42a0      	cmp	r0, r4
 80066ca:	d007      	beq.n	80066dc <sbrk_aligned+0x38>
 80066cc:	1a21      	subs	r1, r4, r0
 80066ce:	4628      	mov	r0, r5
 80066d0:	f000 fe30 	bl	8007334 <_sbrk_r>
 80066d4:	3001      	adds	r0, #1
 80066d6:	d101      	bne.n	80066dc <sbrk_aligned+0x38>
 80066d8:	f04f 34ff 	mov.w	r4, #4294967295
 80066dc:	4620      	mov	r0, r4
 80066de:	bd70      	pop	{r4, r5, r6, pc}
 80066e0:	20000698 	.word	0x20000698

080066e4 <_malloc_r>:
 80066e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066e8:	1ccd      	adds	r5, r1, #3
 80066ea:	f025 0503 	bic.w	r5, r5, #3
 80066ee:	3508      	adds	r5, #8
 80066f0:	2d0c      	cmp	r5, #12
 80066f2:	bf38      	it	cc
 80066f4:	250c      	movcc	r5, #12
 80066f6:	2d00      	cmp	r5, #0
 80066f8:	4607      	mov	r7, r0
 80066fa:	db01      	blt.n	8006700 <_malloc_r+0x1c>
 80066fc:	42a9      	cmp	r1, r5
 80066fe:	d905      	bls.n	800670c <_malloc_r+0x28>
 8006700:	230c      	movs	r3, #12
 8006702:	603b      	str	r3, [r7, #0]
 8006704:	2600      	movs	r6, #0
 8006706:	4630      	mov	r0, r6
 8006708:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800670c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80067e0 <_malloc_r+0xfc>
 8006710:	f000 f868 	bl	80067e4 <__malloc_lock>
 8006714:	f8d8 3000 	ldr.w	r3, [r8]
 8006718:	461c      	mov	r4, r3
 800671a:	bb5c      	cbnz	r4, 8006774 <_malloc_r+0x90>
 800671c:	4629      	mov	r1, r5
 800671e:	4638      	mov	r0, r7
 8006720:	f7ff ffc0 	bl	80066a4 <sbrk_aligned>
 8006724:	1c43      	adds	r3, r0, #1
 8006726:	4604      	mov	r4, r0
 8006728:	d155      	bne.n	80067d6 <_malloc_r+0xf2>
 800672a:	f8d8 4000 	ldr.w	r4, [r8]
 800672e:	4626      	mov	r6, r4
 8006730:	2e00      	cmp	r6, #0
 8006732:	d145      	bne.n	80067c0 <_malloc_r+0xdc>
 8006734:	2c00      	cmp	r4, #0
 8006736:	d048      	beq.n	80067ca <_malloc_r+0xe6>
 8006738:	6823      	ldr	r3, [r4, #0]
 800673a:	4631      	mov	r1, r6
 800673c:	4638      	mov	r0, r7
 800673e:	eb04 0903 	add.w	r9, r4, r3
 8006742:	f000 fdf7 	bl	8007334 <_sbrk_r>
 8006746:	4581      	cmp	r9, r0
 8006748:	d13f      	bne.n	80067ca <_malloc_r+0xe6>
 800674a:	6821      	ldr	r1, [r4, #0]
 800674c:	1a6d      	subs	r5, r5, r1
 800674e:	4629      	mov	r1, r5
 8006750:	4638      	mov	r0, r7
 8006752:	f7ff ffa7 	bl	80066a4 <sbrk_aligned>
 8006756:	3001      	adds	r0, #1
 8006758:	d037      	beq.n	80067ca <_malloc_r+0xe6>
 800675a:	6823      	ldr	r3, [r4, #0]
 800675c:	442b      	add	r3, r5
 800675e:	6023      	str	r3, [r4, #0]
 8006760:	f8d8 3000 	ldr.w	r3, [r8]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d038      	beq.n	80067da <_malloc_r+0xf6>
 8006768:	685a      	ldr	r2, [r3, #4]
 800676a:	42a2      	cmp	r2, r4
 800676c:	d12b      	bne.n	80067c6 <_malloc_r+0xe2>
 800676e:	2200      	movs	r2, #0
 8006770:	605a      	str	r2, [r3, #4]
 8006772:	e00f      	b.n	8006794 <_malloc_r+0xb0>
 8006774:	6822      	ldr	r2, [r4, #0]
 8006776:	1b52      	subs	r2, r2, r5
 8006778:	d41f      	bmi.n	80067ba <_malloc_r+0xd6>
 800677a:	2a0b      	cmp	r2, #11
 800677c:	d917      	bls.n	80067ae <_malloc_r+0xca>
 800677e:	1961      	adds	r1, r4, r5
 8006780:	42a3      	cmp	r3, r4
 8006782:	6025      	str	r5, [r4, #0]
 8006784:	bf18      	it	ne
 8006786:	6059      	strne	r1, [r3, #4]
 8006788:	6863      	ldr	r3, [r4, #4]
 800678a:	bf08      	it	eq
 800678c:	f8c8 1000 	streq.w	r1, [r8]
 8006790:	5162      	str	r2, [r4, r5]
 8006792:	604b      	str	r3, [r1, #4]
 8006794:	4638      	mov	r0, r7
 8006796:	f104 060b 	add.w	r6, r4, #11
 800679a:	f000 f829 	bl	80067f0 <__malloc_unlock>
 800679e:	f026 0607 	bic.w	r6, r6, #7
 80067a2:	1d23      	adds	r3, r4, #4
 80067a4:	1af2      	subs	r2, r6, r3
 80067a6:	d0ae      	beq.n	8006706 <_malloc_r+0x22>
 80067a8:	1b9b      	subs	r3, r3, r6
 80067aa:	50a3      	str	r3, [r4, r2]
 80067ac:	e7ab      	b.n	8006706 <_malloc_r+0x22>
 80067ae:	42a3      	cmp	r3, r4
 80067b0:	6862      	ldr	r2, [r4, #4]
 80067b2:	d1dd      	bne.n	8006770 <_malloc_r+0x8c>
 80067b4:	f8c8 2000 	str.w	r2, [r8]
 80067b8:	e7ec      	b.n	8006794 <_malloc_r+0xb0>
 80067ba:	4623      	mov	r3, r4
 80067bc:	6864      	ldr	r4, [r4, #4]
 80067be:	e7ac      	b.n	800671a <_malloc_r+0x36>
 80067c0:	4634      	mov	r4, r6
 80067c2:	6876      	ldr	r6, [r6, #4]
 80067c4:	e7b4      	b.n	8006730 <_malloc_r+0x4c>
 80067c6:	4613      	mov	r3, r2
 80067c8:	e7cc      	b.n	8006764 <_malloc_r+0x80>
 80067ca:	230c      	movs	r3, #12
 80067cc:	603b      	str	r3, [r7, #0]
 80067ce:	4638      	mov	r0, r7
 80067d0:	f000 f80e 	bl	80067f0 <__malloc_unlock>
 80067d4:	e797      	b.n	8006706 <_malloc_r+0x22>
 80067d6:	6025      	str	r5, [r4, #0]
 80067d8:	e7dc      	b.n	8006794 <_malloc_r+0xb0>
 80067da:	605b      	str	r3, [r3, #4]
 80067dc:	deff      	udf	#255	; 0xff
 80067de:	bf00      	nop
 80067e0:	20000694 	.word	0x20000694

080067e4 <__malloc_lock>:
 80067e4:	4801      	ldr	r0, [pc, #4]	; (80067ec <__malloc_lock+0x8>)
 80067e6:	f7ff b88c 	b.w	8005902 <__retarget_lock_acquire_recursive>
 80067ea:	bf00      	nop
 80067ec:	20000690 	.word	0x20000690

080067f0 <__malloc_unlock>:
 80067f0:	4801      	ldr	r0, [pc, #4]	; (80067f8 <__malloc_unlock+0x8>)
 80067f2:	f7ff b887 	b.w	8005904 <__retarget_lock_release_recursive>
 80067f6:	bf00      	nop
 80067f8:	20000690 	.word	0x20000690

080067fc <_Balloc>:
 80067fc:	b570      	push	{r4, r5, r6, lr}
 80067fe:	69c6      	ldr	r6, [r0, #28]
 8006800:	4604      	mov	r4, r0
 8006802:	460d      	mov	r5, r1
 8006804:	b976      	cbnz	r6, 8006824 <_Balloc+0x28>
 8006806:	2010      	movs	r0, #16
 8006808:	f7ff ff44 	bl	8006694 <malloc>
 800680c:	4602      	mov	r2, r0
 800680e:	61e0      	str	r0, [r4, #28]
 8006810:	b920      	cbnz	r0, 800681c <_Balloc+0x20>
 8006812:	4b18      	ldr	r3, [pc, #96]	; (8006874 <_Balloc+0x78>)
 8006814:	4818      	ldr	r0, [pc, #96]	; (8006878 <_Balloc+0x7c>)
 8006816:	216b      	movs	r1, #107	; 0x6b
 8006818:	f000 fdaa 	bl	8007370 <__assert_func>
 800681c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006820:	6006      	str	r6, [r0, #0]
 8006822:	60c6      	str	r6, [r0, #12]
 8006824:	69e6      	ldr	r6, [r4, #28]
 8006826:	68f3      	ldr	r3, [r6, #12]
 8006828:	b183      	cbz	r3, 800684c <_Balloc+0x50>
 800682a:	69e3      	ldr	r3, [r4, #28]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006832:	b9b8      	cbnz	r0, 8006864 <_Balloc+0x68>
 8006834:	2101      	movs	r1, #1
 8006836:	fa01 f605 	lsl.w	r6, r1, r5
 800683a:	1d72      	adds	r2, r6, #5
 800683c:	0092      	lsls	r2, r2, #2
 800683e:	4620      	mov	r0, r4
 8006840:	f000 fdb4 	bl	80073ac <_calloc_r>
 8006844:	b160      	cbz	r0, 8006860 <_Balloc+0x64>
 8006846:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800684a:	e00e      	b.n	800686a <_Balloc+0x6e>
 800684c:	2221      	movs	r2, #33	; 0x21
 800684e:	2104      	movs	r1, #4
 8006850:	4620      	mov	r0, r4
 8006852:	f000 fdab 	bl	80073ac <_calloc_r>
 8006856:	69e3      	ldr	r3, [r4, #28]
 8006858:	60f0      	str	r0, [r6, #12]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1e4      	bne.n	800682a <_Balloc+0x2e>
 8006860:	2000      	movs	r0, #0
 8006862:	bd70      	pop	{r4, r5, r6, pc}
 8006864:	6802      	ldr	r2, [r0, #0]
 8006866:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800686a:	2300      	movs	r3, #0
 800686c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006870:	e7f7      	b.n	8006862 <_Balloc+0x66>
 8006872:	bf00      	nop
 8006874:	08007b11 	.word	0x08007b11
 8006878:	08007b91 	.word	0x08007b91

0800687c <_Bfree>:
 800687c:	b570      	push	{r4, r5, r6, lr}
 800687e:	69c6      	ldr	r6, [r0, #28]
 8006880:	4605      	mov	r5, r0
 8006882:	460c      	mov	r4, r1
 8006884:	b976      	cbnz	r6, 80068a4 <_Bfree+0x28>
 8006886:	2010      	movs	r0, #16
 8006888:	f7ff ff04 	bl	8006694 <malloc>
 800688c:	4602      	mov	r2, r0
 800688e:	61e8      	str	r0, [r5, #28]
 8006890:	b920      	cbnz	r0, 800689c <_Bfree+0x20>
 8006892:	4b09      	ldr	r3, [pc, #36]	; (80068b8 <_Bfree+0x3c>)
 8006894:	4809      	ldr	r0, [pc, #36]	; (80068bc <_Bfree+0x40>)
 8006896:	218f      	movs	r1, #143	; 0x8f
 8006898:	f000 fd6a 	bl	8007370 <__assert_func>
 800689c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80068a0:	6006      	str	r6, [r0, #0]
 80068a2:	60c6      	str	r6, [r0, #12]
 80068a4:	b13c      	cbz	r4, 80068b6 <_Bfree+0x3a>
 80068a6:	69eb      	ldr	r3, [r5, #28]
 80068a8:	6862      	ldr	r2, [r4, #4]
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80068b0:	6021      	str	r1, [r4, #0]
 80068b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80068b6:	bd70      	pop	{r4, r5, r6, pc}
 80068b8:	08007b11 	.word	0x08007b11
 80068bc:	08007b91 	.word	0x08007b91

080068c0 <__multadd>:
 80068c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068c4:	690d      	ldr	r5, [r1, #16]
 80068c6:	4607      	mov	r7, r0
 80068c8:	460c      	mov	r4, r1
 80068ca:	461e      	mov	r6, r3
 80068cc:	f101 0c14 	add.w	ip, r1, #20
 80068d0:	2000      	movs	r0, #0
 80068d2:	f8dc 3000 	ldr.w	r3, [ip]
 80068d6:	b299      	uxth	r1, r3
 80068d8:	fb02 6101 	mla	r1, r2, r1, r6
 80068dc:	0c1e      	lsrs	r6, r3, #16
 80068de:	0c0b      	lsrs	r3, r1, #16
 80068e0:	fb02 3306 	mla	r3, r2, r6, r3
 80068e4:	b289      	uxth	r1, r1
 80068e6:	3001      	adds	r0, #1
 80068e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80068ec:	4285      	cmp	r5, r0
 80068ee:	f84c 1b04 	str.w	r1, [ip], #4
 80068f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80068f6:	dcec      	bgt.n	80068d2 <__multadd+0x12>
 80068f8:	b30e      	cbz	r6, 800693e <__multadd+0x7e>
 80068fa:	68a3      	ldr	r3, [r4, #8]
 80068fc:	42ab      	cmp	r3, r5
 80068fe:	dc19      	bgt.n	8006934 <__multadd+0x74>
 8006900:	6861      	ldr	r1, [r4, #4]
 8006902:	4638      	mov	r0, r7
 8006904:	3101      	adds	r1, #1
 8006906:	f7ff ff79 	bl	80067fc <_Balloc>
 800690a:	4680      	mov	r8, r0
 800690c:	b928      	cbnz	r0, 800691a <__multadd+0x5a>
 800690e:	4602      	mov	r2, r0
 8006910:	4b0c      	ldr	r3, [pc, #48]	; (8006944 <__multadd+0x84>)
 8006912:	480d      	ldr	r0, [pc, #52]	; (8006948 <__multadd+0x88>)
 8006914:	21ba      	movs	r1, #186	; 0xba
 8006916:	f000 fd2b 	bl	8007370 <__assert_func>
 800691a:	6922      	ldr	r2, [r4, #16]
 800691c:	3202      	adds	r2, #2
 800691e:	f104 010c 	add.w	r1, r4, #12
 8006922:	0092      	lsls	r2, r2, #2
 8006924:	300c      	adds	r0, #12
 8006926:	f000 fd15 	bl	8007354 <memcpy>
 800692a:	4621      	mov	r1, r4
 800692c:	4638      	mov	r0, r7
 800692e:	f7ff ffa5 	bl	800687c <_Bfree>
 8006932:	4644      	mov	r4, r8
 8006934:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006938:	3501      	adds	r5, #1
 800693a:	615e      	str	r6, [r3, #20]
 800693c:	6125      	str	r5, [r4, #16]
 800693e:	4620      	mov	r0, r4
 8006940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006944:	08007b80 	.word	0x08007b80
 8006948:	08007b91 	.word	0x08007b91

0800694c <__hi0bits>:
 800694c:	0c03      	lsrs	r3, r0, #16
 800694e:	041b      	lsls	r3, r3, #16
 8006950:	b9d3      	cbnz	r3, 8006988 <__hi0bits+0x3c>
 8006952:	0400      	lsls	r0, r0, #16
 8006954:	2310      	movs	r3, #16
 8006956:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800695a:	bf04      	itt	eq
 800695c:	0200      	lsleq	r0, r0, #8
 800695e:	3308      	addeq	r3, #8
 8006960:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006964:	bf04      	itt	eq
 8006966:	0100      	lsleq	r0, r0, #4
 8006968:	3304      	addeq	r3, #4
 800696a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800696e:	bf04      	itt	eq
 8006970:	0080      	lsleq	r0, r0, #2
 8006972:	3302      	addeq	r3, #2
 8006974:	2800      	cmp	r0, #0
 8006976:	db05      	blt.n	8006984 <__hi0bits+0x38>
 8006978:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800697c:	f103 0301 	add.w	r3, r3, #1
 8006980:	bf08      	it	eq
 8006982:	2320      	moveq	r3, #32
 8006984:	4618      	mov	r0, r3
 8006986:	4770      	bx	lr
 8006988:	2300      	movs	r3, #0
 800698a:	e7e4      	b.n	8006956 <__hi0bits+0xa>

0800698c <__lo0bits>:
 800698c:	6803      	ldr	r3, [r0, #0]
 800698e:	f013 0207 	ands.w	r2, r3, #7
 8006992:	d00c      	beq.n	80069ae <__lo0bits+0x22>
 8006994:	07d9      	lsls	r1, r3, #31
 8006996:	d422      	bmi.n	80069de <__lo0bits+0x52>
 8006998:	079a      	lsls	r2, r3, #30
 800699a:	bf49      	itett	mi
 800699c:	085b      	lsrmi	r3, r3, #1
 800699e:	089b      	lsrpl	r3, r3, #2
 80069a0:	6003      	strmi	r3, [r0, #0]
 80069a2:	2201      	movmi	r2, #1
 80069a4:	bf5c      	itt	pl
 80069a6:	6003      	strpl	r3, [r0, #0]
 80069a8:	2202      	movpl	r2, #2
 80069aa:	4610      	mov	r0, r2
 80069ac:	4770      	bx	lr
 80069ae:	b299      	uxth	r1, r3
 80069b0:	b909      	cbnz	r1, 80069b6 <__lo0bits+0x2a>
 80069b2:	0c1b      	lsrs	r3, r3, #16
 80069b4:	2210      	movs	r2, #16
 80069b6:	b2d9      	uxtb	r1, r3
 80069b8:	b909      	cbnz	r1, 80069be <__lo0bits+0x32>
 80069ba:	3208      	adds	r2, #8
 80069bc:	0a1b      	lsrs	r3, r3, #8
 80069be:	0719      	lsls	r1, r3, #28
 80069c0:	bf04      	itt	eq
 80069c2:	091b      	lsreq	r3, r3, #4
 80069c4:	3204      	addeq	r2, #4
 80069c6:	0799      	lsls	r1, r3, #30
 80069c8:	bf04      	itt	eq
 80069ca:	089b      	lsreq	r3, r3, #2
 80069cc:	3202      	addeq	r2, #2
 80069ce:	07d9      	lsls	r1, r3, #31
 80069d0:	d403      	bmi.n	80069da <__lo0bits+0x4e>
 80069d2:	085b      	lsrs	r3, r3, #1
 80069d4:	f102 0201 	add.w	r2, r2, #1
 80069d8:	d003      	beq.n	80069e2 <__lo0bits+0x56>
 80069da:	6003      	str	r3, [r0, #0]
 80069dc:	e7e5      	b.n	80069aa <__lo0bits+0x1e>
 80069de:	2200      	movs	r2, #0
 80069e0:	e7e3      	b.n	80069aa <__lo0bits+0x1e>
 80069e2:	2220      	movs	r2, #32
 80069e4:	e7e1      	b.n	80069aa <__lo0bits+0x1e>
	...

080069e8 <__i2b>:
 80069e8:	b510      	push	{r4, lr}
 80069ea:	460c      	mov	r4, r1
 80069ec:	2101      	movs	r1, #1
 80069ee:	f7ff ff05 	bl	80067fc <_Balloc>
 80069f2:	4602      	mov	r2, r0
 80069f4:	b928      	cbnz	r0, 8006a02 <__i2b+0x1a>
 80069f6:	4b05      	ldr	r3, [pc, #20]	; (8006a0c <__i2b+0x24>)
 80069f8:	4805      	ldr	r0, [pc, #20]	; (8006a10 <__i2b+0x28>)
 80069fa:	f240 1145 	movw	r1, #325	; 0x145
 80069fe:	f000 fcb7 	bl	8007370 <__assert_func>
 8006a02:	2301      	movs	r3, #1
 8006a04:	6144      	str	r4, [r0, #20]
 8006a06:	6103      	str	r3, [r0, #16]
 8006a08:	bd10      	pop	{r4, pc}
 8006a0a:	bf00      	nop
 8006a0c:	08007b80 	.word	0x08007b80
 8006a10:	08007b91 	.word	0x08007b91

08006a14 <__multiply>:
 8006a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a18:	4691      	mov	r9, r2
 8006a1a:	690a      	ldr	r2, [r1, #16]
 8006a1c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	bfb8      	it	lt
 8006a24:	460b      	movlt	r3, r1
 8006a26:	460c      	mov	r4, r1
 8006a28:	bfbc      	itt	lt
 8006a2a:	464c      	movlt	r4, r9
 8006a2c:	4699      	movlt	r9, r3
 8006a2e:	6927      	ldr	r7, [r4, #16]
 8006a30:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006a34:	68a3      	ldr	r3, [r4, #8]
 8006a36:	6861      	ldr	r1, [r4, #4]
 8006a38:	eb07 060a 	add.w	r6, r7, sl
 8006a3c:	42b3      	cmp	r3, r6
 8006a3e:	b085      	sub	sp, #20
 8006a40:	bfb8      	it	lt
 8006a42:	3101      	addlt	r1, #1
 8006a44:	f7ff feda 	bl	80067fc <_Balloc>
 8006a48:	b930      	cbnz	r0, 8006a58 <__multiply+0x44>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	4b44      	ldr	r3, [pc, #272]	; (8006b60 <__multiply+0x14c>)
 8006a4e:	4845      	ldr	r0, [pc, #276]	; (8006b64 <__multiply+0x150>)
 8006a50:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006a54:	f000 fc8c 	bl	8007370 <__assert_func>
 8006a58:	f100 0514 	add.w	r5, r0, #20
 8006a5c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006a60:	462b      	mov	r3, r5
 8006a62:	2200      	movs	r2, #0
 8006a64:	4543      	cmp	r3, r8
 8006a66:	d321      	bcc.n	8006aac <__multiply+0x98>
 8006a68:	f104 0314 	add.w	r3, r4, #20
 8006a6c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006a70:	f109 0314 	add.w	r3, r9, #20
 8006a74:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006a78:	9202      	str	r2, [sp, #8]
 8006a7a:	1b3a      	subs	r2, r7, r4
 8006a7c:	3a15      	subs	r2, #21
 8006a7e:	f022 0203 	bic.w	r2, r2, #3
 8006a82:	3204      	adds	r2, #4
 8006a84:	f104 0115 	add.w	r1, r4, #21
 8006a88:	428f      	cmp	r7, r1
 8006a8a:	bf38      	it	cc
 8006a8c:	2204      	movcc	r2, #4
 8006a8e:	9201      	str	r2, [sp, #4]
 8006a90:	9a02      	ldr	r2, [sp, #8]
 8006a92:	9303      	str	r3, [sp, #12]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d80c      	bhi.n	8006ab2 <__multiply+0x9e>
 8006a98:	2e00      	cmp	r6, #0
 8006a9a:	dd03      	ble.n	8006aa4 <__multiply+0x90>
 8006a9c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d05b      	beq.n	8006b5c <__multiply+0x148>
 8006aa4:	6106      	str	r6, [r0, #16]
 8006aa6:	b005      	add	sp, #20
 8006aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aac:	f843 2b04 	str.w	r2, [r3], #4
 8006ab0:	e7d8      	b.n	8006a64 <__multiply+0x50>
 8006ab2:	f8b3 a000 	ldrh.w	sl, [r3]
 8006ab6:	f1ba 0f00 	cmp.w	sl, #0
 8006aba:	d024      	beq.n	8006b06 <__multiply+0xf2>
 8006abc:	f104 0e14 	add.w	lr, r4, #20
 8006ac0:	46a9      	mov	r9, r5
 8006ac2:	f04f 0c00 	mov.w	ip, #0
 8006ac6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006aca:	f8d9 1000 	ldr.w	r1, [r9]
 8006ace:	fa1f fb82 	uxth.w	fp, r2
 8006ad2:	b289      	uxth	r1, r1
 8006ad4:	fb0a 110b 	mla	r1, sl, fp, r1
 8006ad8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006adc:	f8d9 2000 	ldr.w	r2, [r9]
 8006ae0:	4461      	add	r1, ip
 8006ae2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006ae6:	fb0a c20b 	mla	r2, sl, fp, ip
 8006aea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006aee:	b289      	uxth	r1, r1
 8006af0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006af4:	4577      	cmp	r7, lr
 8006af6:	f849 1b04 	str.w	r1, [r9], #4
 8006afa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006afe:	d8e2      	bhi.n	8006ac6 <__multiply+0xb2>
 8006b00:	9a01      	ldr	r2, [sp, #4]
 8006b02:	f845 c002 	str.w	ip, [r5, r2]
 8006b06:	9a03      	ldr	r2, [sp, #12]
 8006b08:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006b0c:	3304      	adds	r3, #4
 8006b0e:	f1b9 0f00 	cmp.w	r9, #0
 8006b12:	d021      	beq.n	8006b58 <__multiply+0x144>
 8006b14:	6829      	ldr	r1, [r5, #0]
 8006b16:	f104 0c14 	add.w	ip, r4, #20
 8006b1a:	46ae      	mov	lr, r5
 8006b1c:	f04f 0a00 	mov.w	sl, #0
 8006b20:	f8bc b000 	ldrh.w	fp, [ip]
 8006b24:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006b28:	fb09 220b 	mla	r2, r9, fp, r2
 8006b2c:	4452      	add	r2, sl
 8006b2e:	b289      	uxth	r1, r1
 8006b30:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006b34:	f84e 1b04 	str.w	r1, [lr], #4
 8006b38:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006b3c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006b40:	f8be 1000 	ldrh.w	r1, [lr]
 8006b44:	fb09 110a 	mla	r1, r9, sl, r1
 8006b48:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006b4c:	4567      	cmp	r7, ip
 8006b4e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006b52:	d8e5      	bhi.n	8006b20 <__multiply+0x10c>
 8006b54:	9a01      	ldr	r2, [sp, #4]
 8006b56:	50a9      	str	r1, [r5, r2]
 8006b58:	3504      	adds	r5, #4
 8006b5a:	e799      	b.n	8006a90 <__multiply+0x7c>
 8006b5c:	3e01      	subs	r6, #1
 8006b5e:	e79b      	b.n	8006a98 <__multiply+0x84>
 8006b60:	08007b80 	.word	0x08007b80
 8006b64:	08007b91 	.word	0x08007b91

08006b68 <__pow5mult>:
 8006b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b6c:	4615      	mov	r5, r2
 8006b6e:	f012 0203 	ands.w	r2, r2, #3
 8006b72:	4606      	mov	r6, r0
 8006b74:	460f      	mov	r7, r1
 8006b76:	d007      	beq.n	8006b88 <__pow5mult+0x20>
 8006b78:	4c25      	ldr	r4, [pc, #148]	; (8006c10 <__pow5mult+0xa8>)
 8006b7a:	3a01      	subs	r2, #1
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006b82:	f7ff fe9d 	bl	80068c0 <__multadd>
 8006b86:	4607      	mov	r7, r0
 8006b88:	10ad      	asrs	r5, r5, #2
 8006b8a:	d03d      	beq.n	8006c08 <__pow5mult+0xa0>
 8006b8c:	69f4      	ldr	r4, [r6, #28]
 8006b8e:	b97c      	cbnz	r4, 8006bb0 <__pow5mult+0x48>
 8006b90:	2010      	movs	r0, #16
 8006b92:	f7ff fd7f 	bl	8006694 <malloc>
 8006b96:	4602      	mov	r2, r0
 8006b98:	61f0      	str	r0, [r6, #28]
 8006b9a:	b928      	cbnz	r0, 8006ba8 <__pow5mult+0x40>
 8006b9c:	4b1d      	ldr	r3, [pc, #116]	; (8006c14 <__pow5mult+0xac>)
 8006b9e:	481e      	ldr	r0, [pc, #120]	; (8006c18 <__pow5mult+0xb0>)
 8006ba0:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006ba4:	f000 fbe4 	bl	8007370 <__assert_func>
 8006ba8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006bac:	6004      	str	r4, [r0, #0]
 8006bae:	60c4      	str	r4, [r0, #12]
 8006bb0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006bb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006bb8:	b94c      	cbnz	r4, 8006bce <__pow5mult+0x66>
 8006bba:	f240 2171 	movw	r1, #625	; 0x271
 8006bbe:	4630      	mov	r0, r6
 8006bc0:	f7ff ff12 	bl	80069e8 <__i2b>
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	f8c8 0008 	str.w	r0, [r8, #8]
 8006bca:	4604      	mov	r4, r0
 8006bcc:	6003      	str	r3, [r0, #0]
 8006bce:	f04f 0900 	mov.w	r9, #0
 8006bd2:	07eb      	lsls	r3, r5, #31
 8006bd4:	d50a      	bpl.n	8006bec <__pow5mult+0x84>
 8006bd6:	4639      	mov	r1, r7
 8006bd8:	4622      	mov	r2, r4
 8006bda:	4630      	mov	r0, r6
 8006bdc:	f7ff ff1a 	bl	8006a14 <__multiply>
 8006be0:	4639      	mov	r1, r7
 8006be2:	4680      	mov	r8, r0
 8006be4:	4630      	mov	r0, r6
 8006be6:	f7ff fe49 	bl	800687c <_Bfree>
 8006bea:	4647      	mov	r7, r8
 8006bec:	106d      	asrs	r5, r5, #1
 8006bee:	d00b      	beq.n	8006c08 <__pow5mult+0xa0>
 8006bf0:	6820      	ldr	r0, [r4, #0]
 8006bf2:	b938      	cbnz	r0, 8006c04 <__pow5mult+0x9c>
 8006bf4:	4622      	mov	r2, r4
 8006bf6:	4621      	mov	r1, r4
 8006bf8:	4630      	mov	r0, r6
 8006bfa:	f7ff ff0b 	bl	8006a14 <__multiply>
 8006bfe:	6020      	str	r0, [r4, #0]
 8006c00:	f8c0 9000 	str.w	r9, [r0]
 8006c04:	4604      	mov	r4, r0
 8006c06:	e7e4      	b.n	8006bd2 <__pow5mult+0x6a>
 8006c08:	4638      	mov	r0, r7
 8006c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c0e:	bf00      	nop
 8006c10:	08007ce0 	.word	0x08007ce0
 8006c14:	08007b11 	.word	0x08007b11
 8006c18:	08007b91 	.word	0x08007b91

08006c1c <__lshift>:
 8006c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c20:	460c      	mov	r4, r1
 8006c22:	6849      	ldr	r1, [r1, #4]
 8006c24:	6923      	ldr	r3, [r4, #16]
 8006c26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006c2a:	68a3      	ldr	r3, [r4, #8]
 8006c2c:	4607      	mov	r7, r0
 8006c2e:	4691      	mov	r9, r2
 8006c30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006c34:	f108 0601 	add.w	r6, r8, #1
 8006c38:	42b3      	cmp	r3, r6
 8006c3a:	db0b      	blt.n	8006c54 <__lshift+0x38>
 8006c3c:	4638      	mov	r0, r7
 8006c3e:	f7ff fddd 	bl	80067fc <_Balloc>
 8006c42:	4605      	mov	r5, r0
 8006c44:	b948      	cbnz	r0, 8006c5a <__lshift+0x3e>
 8006c46:	4602      	mov	r2, r0
 8006c48:	4b28      	ldr	r3, [pc, #160]	; (8006cec <__lshift+0xd0>)
 8006c4a:	4829      	ldr	r0, [pc, #164]	; (8006cf0 <__lshift+0xd4>)
 8006c4c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006c50:	f000 fb8e 	bl	8007370 <__assert_func>
 8006c54:	3101      	adds	r1, #1
 8006c56:	005b      	lsls	r3, r3, #1
 8006c58:	e7ee      	b.n	8006c38 <__lshift+0x1c>
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	f100 0114 	add.w	r1, r0, #20
 8006c60:	f100 0210 	add.w	r2, r0, #16
 8006c64:	4618      	mov	r0, r3
 8006c66:	4553      	cmp	r3, sl
 8006c68:	db33      	blt.n	8006cd2 <__lshift+0xb6>
 8006c6a:	6920      	ldr	r0, [r4, #16]
 8006c6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006c70:	f104 0314 	add.w	r3, r4, #20
 8006c74:	f019 091f 	ands.w	r9, r9, #31
 8006c78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006c7c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006c80:	d02b      	beq.n	8006cda <__lshift+0xbe>
 8006c82:	f1c9 0e20 	rsb	lr, r9, #32
 8006c86:	468a      	mov	sl, r1
 8006c88:	2200      	movs	r2, #0
 8006c8a:	6818      	ldr	r0, [r3, #0]
 8006c8c:	fa00 f009 	lsl.w	r0, r0, r9
 8006c90:	4310      	orrs	r0, r2
 8006c92:	f84a 0b04 	str.w	r0, [sl], #4
 8006c96:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c9a:	459c      	cmp	ip, r3
 8006c9c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006ca0:	d8f3      	bhi.n	8006c8a <__lshift+0x6e>
 8006ca2:	ebac 0304 	sub.w	r3, ip, r4
 8006ca6:	3b15      	subs	r3, #21
 8006ca8:	f023 0303 	bic.w	r3, r3, #3
 8006cac:	3304      	adds	r3, #4
 8006cae:	f104 0015 	add.w	r0, r4, #21
 8006cb2:	4584      	cmp	ip, r0
 8006cb4:	bf38      	it	cc
 8006cb6:	2304      	movcc	r3, #4
 8006cb8:	50ca      	str	r2, [r1, r3]
 8006cba:	b10a      	cbz	r2, 8006cc0 <__lshift+0xa4>
 8006cbc:	f108 0602 	add.w	r6, r8, #2
 8006cc0:	3e01      	subs	r6, #1
 8006cc2:	4638      	mov	r0, r7
 8006cc4:	612e      	str	r6, [r5, #16]
 8006cc6:	4621      	mov	r1, r4
 8006cc8:	f7ff fdd8 	bl	800687c <_Bfree>
 8006ccc:	4628      	mov	r0, r5
 8006cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cd2:	f842 0f04 	str.w	r0, [r2, #4]!
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	e7c5      	b.n	8006c66 <__lshift+0x4a>
 8006cda:	3904      	subs	r1, #4
 8006cdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ce0:	f841 2f04 	str.w	r2, [r1, #4]!
 8006ce4:	459c      	cmp	ip, r3
 8006ce6:	d8f9      	bhi.n	8006cdc <__lshift+0xc0>
 8006ce8:	e7ea      	b.n	8006cc0 <__lshift+0xa4>
 8006cea:	bf00      	nop
 8006cec:	08007b80 	.word	0x08007b80
 8006cf0:	08007b91 	.word	0x08007b91

08006cf4 <__mcmp>:
 8006cf4:	b530      	push	{r4, r5, lr}
 8006cf6:	6902      	ldr	r2, [r0, #16]
 8006cf8:	690c      	ldr	r4, [r1, #16]
 8006cfa:	1b12      	subs	r2, r2, r4
 8006cfc:	d10e      	bne.n	8006d1c <__mcmp+0x28>
 8006cfe:	f100 0314 	add.w	r3, r0, #20
 8006d02:	3114      	adds	r1, #20
 8006d04:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006d08:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006d0c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006d10:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006d14:	42a5      	cmp	r5, r4
 8006d16:	d003      	beq.n	8006d20 <__mcmp+0x2c>
 8006d18:	d305      	bcc.n	8006d26 <__mcmp+0x32>
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	4610      	mov	r0, r2
 8006d1e:	bd30      	pop	{r4, r5, pc}
 8006d20:	4283      	cmp	r3, r0
 8006d22:	d3f3      	bcc.n	8006d0c <__mcmp+0x18>
 8006d24:	e7fa      	b.n	8006d1c <__mcmp+0x28>
 8006d26:	f04f 32ff 	mov.w	r2, #4294967295
 8006d2a:	e7f7      	b.n	8006d1c <__mcmp+0x28>

08006d2c <__mdiff>:
 8006d2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d30:	460c      	mov	r4, r1
 8006d32:	4606      	mov	r6, r0
 8006d34:	4611      	mov	r1, r2
 8006d36:	4620      	mov	r0, r4
 8006d38:	4690      	mov	r8, r2
 8006d3a:	f7ff ffdb 	bl	8006cf4 <__mcmp>
 8006d3e:	1e05      	subs	r5, r0, #0
 8006d40:	d110      	bne.n	8006d64 <__mdiff+0x38>
 8006d42:	4629      	mov	r1, r5
 8006d44:	4630      	mov	r0, r6
 8006d46:	f7ff fd59 	bl	80067fc <_Balloc>
 8006d4a:	b930      	cbnz	r0, 8006d5a <__mdiff+0x2e>
 8006d4c:	4b3a      	ldr	r3, [pc, #232]	; (8006e38 <__mdiff+0x10c>)
 8006d4e:	4602      	mov	r2, r0
 8006d50:	f240 2137 	movw	r1, #567	; 0x237
 8006d54:	4839      	ldr	r0, [pc, #228]	; (8006e3c <__mdiff+0x110>)
 8006d56:	f000 fb0b 	bl	8007370 <__assert_func>
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006d60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d64:	bfa4      	itt	ge
 8006d66:	4643      	movge	r3, r8
 8006d68:	46a0      	movge	r8, r4
 8006d6a:	4630      	mov	r0, r6
 8006d6c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006d70:	bfa6      	itte	ge
 8006d72:	461c      	movge	r4, r3
 8006d74:	2500      	movge	r5, #0
 8006d76:	2501      	movlt	r5, #1
 8006d78:	f7ff fd40 	bl	80067fc <_Balloc>
 8006d7c:	b920      	cbnz	r0, 8006d88 <__mdiff+0x5c>
 8006d7e:	4b2e      	ldr	r3, [pc, #184]	; (8006e38 <__mdiff+0x10c>)
 8006d80:	4602      	mov	r2, r0
 8006d82:	f240 2145 	movw	r1, #581	; 0x245
 8006d86:	e7e5      	b.n	8006d54 <__mdiff+0x28>
 8006d88:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006d8c:	6926      	ldr	r6, [r4, #16]
 8006d8e:	60c5      	str	r5, [r0, #12]
 8006d90:	f104 0914 	add.w	r9, r4, #20
 8006d94:	f108 0514 	add.w	r5, r8, #20
 8006d98:	f100 0e14 	add.w	lr, r0, #20
 8006d9c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006da0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006da4:	f108 0210 	add.w	r2, r8, #16
 8006da8:	46f2      	mov	sl, lr
 8006daa:	2100      	movs	r1, #0
 8006dac:	f859 3b04 	ldr.w	r3, [r9], #4
 8006db0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006db4:	fa11 f88b 	uxtah	r8, r1, fp
 8006db8:	b299      	uxth	r1, r3
 8006dba:	0c1b      	lsrs	r3, r3, #16
 8006dbc:	eba8 0801 	sub.w	r8, r8, r1
 8006dc0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006dc4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006dc8:	fa1f f888 	uxth.w	r8, r8
 8006dcc:	1419      	asrs	r1, r3, #16
 8006dce:	454e      	cmp	r6, r9
 8006dd0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006dd4:	f84a 3b04 	str.w	r3, [sl], #4
 8006dd8:	d8e8      	bhi.n	8006dac <__mdiff+0x80>
 8006dda:	1b33      	subs	r3, r6, r4
 8006ddc:	3b15      	subs	r3, #21
 8006dde:	f023 0303 	bic.w	r3, r3, #3
 8006de2:	3304      	adds	r3, #4
 8006de4:	3415      	adds	r4, #21
 8006de6:	42a6      	cmp	r6, r4
 8006de8:	bf38      	it	cc
 8006dea:	2304      	movcc	r3, #4
 8006dec:	441d      	add	r5, r3
 8006dee:	4473      	add	r3, lr
 8006df0:	469e      	mov	lr, r3
 8006df2:	462e      	mov	r6, r5
 8006df4:	4566      	cmp	r6, ip
 8006df6:	d30e      	bcc.n	8006e16 <__mdiff+0xea>
 8006df8:	f10c 0203 	add.w	r2, ip, #3
 8006dfc:	1b52      	subs	r2, r2, r5
 8006dfe:	f022 0203 	bic.w	r2, r2, #3
 8006e02:	3d03      	subs	r5, #3
 8006e04:	45ac      	cmp	ip, r5
 8006e06:	bf38      	it	cc
 8006e08:	2200      	movcc	r2, #0
 8006e0a:	4413      	add	r3, r2
 8006e0c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006e10:	b17a      	cbz	r2, 8006e32 <__mdiff+0x106>
 8006e12:	6107      	str	r7, [r0, #16]
 8006e14:	e7a4      	b.n	8006d60 <__mdiff+0x34>
 8006e16:	f856 8b04 	ldr.w	r8, [r6], #4
 8006e1a:	fa11 f288 	uxtah	r2, r1, r8
 8006e1e:	1414      	asrs	r4, r2, #16
 8006e20:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006e24:	b292      	uxth	r2, r2
 8006e26:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006e2a:	f84e 2b04 	str.w	r2, [lr], #4
 8006e2e:	1421      	asrs	r1, r4, #16
 8006e30:	e7e0      	b.n	8006df4 <__mdiff+0xc8>
 8006e32:	3f01      	subs	r7, #1
 8006e34:	e7ea      	b.n	8006e0c <__mdiff+0xe0>
 8006e36:	bf00      	nop
 8006e38:	08007b80 	.word	0x08007b80
 8006e3c:	08007b91 	.word	0x08007b91

08006e40 <__d2b>:
 8006e40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006e44:	460f      	mov	r7, r1
 8006e46:	2101      	movs	r1, #1
 8006e48:	ec59 8b10 	vmov	r8, r9, d0
 8006e4c:	4616      	mov	r6, r2
 8006e4e:	f7ff fcd5 	bl	80067fc <_Balloc>
 8006e52:	4604      	mov	r4, r0
 8006e54:	b930      	cbnz	r0, 8006e64 <__d2b+0x24>
 8006e56:	4602      	mov	r2, r0
 8006e58:	4b24      	ldr	r3, [pc, #144]	; (8006eec <__d2b+0xac>)
 8006e5a:	4825      	ldr	r0, [pc, #148]	; (8006ef0 <__d2b+0xb0>)
 8006e5c:	f240 310f 	movw	r1, #783	; 0x30f
 8006e60:	f000 fa86 	bl	8007370 <__assert_func>
 8006e64:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006e68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e6c:	bb2d      	cbnz	r5, 8006eba <__d2b+0x7a>
 8006e6e:	9301      	str	r3, [sp, #4]
 8006e70:	f1b8 0300 	subs.w	r3, r8, #0
 8006e74:	d026      	beq.n	8006ec4 <__d2b+0x84>
 8006e76:	4668      	mov	r0, sp
 8006e78:	9300      	str	r3, [sp, #0]
 8006e7a:	f7ff fd87 	bl	800698c <__lo0bits>
 8006e7e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006e82:	b1e8      	cbz	r0, 8006ec0 <__d2b+0x80>
 8006e84:	f1c0 0320 	rsb	r3, r0, #32
 8006e88:	fa02 f303 	lsl.w	r3, r2, r3
 8006e8c:	430b      	orrs	r3, r1
 8006e8e:	40c2      	lsrs	r2, r0
 8006e90:	6163      	str	r3, [r4, #20]
 8006e92:	9201      	str	r2, [sp, #4]
 8006e94:	9b01      	ldr	r3, [sp, #4]
 8006e96:	61a3      	str	r3, [r4, #24]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	bf14      	ite	ne
 8006e9c:	2202      	movne	r2, #2
 8006e9e:	2201      	moveq	r2, #1
 8006ea0:	6122      	str	r2, [r4, #16]
 8006ea2:	b1bd      	cbz	r5, 8006ed4 <__d2b+0x94>
 8006ea4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006ea8:	4405      	add	r5, r0
 8006eaa:	603d      	str	r5, [r7, #0]
 8006eac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006eb0:	6030      	str	r0, [r6, #0]
 8006eb2:	4620      	mov	r0, r4
 8006eb4:	b003      	add	sp, #12
 8006eb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006eba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ebe:	e7d6      	b.n	8006e6e <__d2b+0x2e>
 8006ec0:	6161      	str	r1, [r4, #20]
 8006ec2:	e7e7      	b.n	8006e94 <__d2b+0x54>
 8006ec4:	a801      	add	r0, sp, #4
 8006ec6:	f7ff fd61 	bl	800698c <__lo0bits>
 8006eca:	9b01      	ldr	r3, [sp, #4]
 8006ecc:	6163      	str	r3, [r4, #20]
 8006ece:	3020      	adds	r0, #32
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	e7e5      	b.n	8006ea0 <__d2b+0x60>
 8006ed4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006ed8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006edc:	6038      	str	r0, [r7, #0]
 8006ede:	6918      	ldr	r0, [r3, #16]
 8006ee0:	f7ff fd34 	bl	800694c <__hi0bits>
 8006ee4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006ee8:	e7e2      	b.n	8006eb0 <__d2b+0x70>
 8006eea:	bf00      	nop
 8006eec:	08007b80 	.word	0x08007b80
 8006ef0:	08007b91 	.word	0x08007b91

08006ef4 <__ssputs_r>:
 8006ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ef8:	688e      	ldr	r6, [r1, #8]
 8006efa:	461f      	mov	r7, r3
 8006efc:	42be      	cmp	r6, r7
 8006efe:	680b      	ldr	r3, [r1, #0]
 8006f00:	4682      	mov	sl, r0
 8006f02:	460c      	mov	r4, r1
 8006f04:	4690      	mov	r8, r2
 8006f06:	d82c      	bhi.n	8006f62 <__ssputs_r+0x6e>
 8006f08:	898a      	ldrh	r2, [r1, #12]
 8006f0a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f0e:	d026      	beq.n	8006f5e <__ssputs_r+0x6a>
 8006f10:	6965      	ldr	r5, [r4, #20]
 8006f12:	6909      	ldr	r1, [r1, #16]
 8006f14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f18:	eba3 0901 	sub.w	r9, r3, r1
 8006f1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f20:	1c7b      	adds	r3, r7, #1
 8006f22:	444b      	add	r3, r9
 8006f24:	106d      	asrs	r5, r5, #1
 8006f26:	429d      	cmp	r5, r3
 8006f28:	bf38      	it	cc
 8006f2a:	461d      	movcc	r5, r3
 8006f2c:	0553      	lsls	r3, r2, #21
 8006f2e:	d527      	bpl.n	8006f80 <__ssputs_r+0x8c>
 8006f30:	4629      	mov	r1, r5
 8006f32:	f7ff fbd7 	bl	80066e4 <_malloc_r>
 8006f36:	4606      	mov	r6, r0
 8006f38:	b360      	cbz	r0, 8006f94 <__ssputs_r+0xa0>
 8006f3a:	6921      	ldr	r1, [r4, #16]
 8006f3c:	464a      	mov	r2, r9
 8006f3e:	f000 fa09 	bl	8007354 <memcpy>
 8006f42:	89a3      	ldrh	r3, [r4, #12]
 8006f44:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f4c:	81a3      	strh	r3, [r4, #12]
 8006f4e:	6126      	str	r6, [r4, #16]
 8006f50:	6165      	str	r5, [r4, #20]
 8006f52:	444e      	add	r6, r9
 8006f54:	eba5 0509 	sub.w	r5, r5, r9
 8006f58:	6026      	str	r6, [r4, #0]
 8006f5a:	60a5      	str	r5, [r4, #8]
 8006f5c:	463e      	mov	r6, r7
 8006f5e:	42be      	cmp	r6, r7
 8006f60:	d900      	bls.n	8006f64 <__ssputs_r+0x70>
 8006f62:	463e      	mov	r6, r7
 8006f64:	6820      	ldr	r0, [r4, #0]
 8006f66:	4632      	mov	r2, r6
 8006f68:	4641      	mov	r1, r8
 8006f6a:	f000 f9c9 	bl	8007300 <memmove>
 8006f6e:	68a3      	ldr	r3, [r4, #8]
 8006f70:	1b9b      	subs	r3, r3, r6
 8006f72:	60a3      	str	r3, [r4, #8]
 8006f74:	6823      	ldr	r3, [r4, #0]
 8006f76:	4433      	add	r3, r6
 8006f78:	6023      	str	r3, [r4, #0]
 8006f7a:	2000      	movs	r0, #0
 8006f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f80:	462a      	mov	r2, r5
 8006f82:	f000 fa3b 	bl	80073fc <_realloc_r>
 8006f86:	4606      	mov	r6, r0
 8006f88:	2800      	cmp	r0, #0
 8006f8a:	d1e0      	bne.n	8006f4e <__ssputs_r+0x5a>
 8006f8c:	6921      	ldr	r1, [r4, #16]
 8006f8e:	4650      	mov	r0, sl
 8006f90:	f7ff fb34 	bl	80065fc <_free_r>
 8006f94:	230c      	movs	r3, #12
 8006f96:	f8ca 3000 	str.w	r3, [sl]
 8006f9a:	89a3      	ldrh	r3, [r4, #12]
 8006f9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fa0:	81a3      	strh	r3, [r4, #12]
 8006fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8006fa6:	e7e9      	b.n	8006f7c <__ssputs_r+0x88>

08006fa8 <_svfiprintf_r>:
 8006fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fac:	4698      	mov	r8, r3
 8006fae:	898b      	ldrh	r3, [r1, #12]
 8006fb0:	061b      	lsls	r3, r3, #24
 8006fb2:	b09d      	sub	sp, #116	; 0x74
 8006fb4:	4607      	mov	r7, r0
 8006fb6:	460d      	mov	r5, r1
 8006fb8:	4614      	mov	r4, r2
 8006fba:	d50e      	bpl.n	8006fda <_svfiprintf_r+0x32>
 8006fbc:	690b      	ldr	r3, [r1, #16]
 8006fbe:	b963      	cbnz	r3, 8006fda <_svfiprintf_r+0x32>
 8006fc0:	2140      	movs	r1, #64	; 0x40
 8006fc2:	f7ff fb8f 	bl	80066e4 <_malloc_r>
 8006fc6:	6028      	str	r0, [r5, #0]
 8006fc8:	6128      	str	r0, [r5, #16]
 8006fca:	b920      	cbnz	r0, 8006fd6 <_svfiprintf_r+0x2e>
 8006fcc:	230c      	movs	r3, #12
 8006fce:	603b      	str	r3, [r7, #0]
 8006fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fd4:	e0d0      	b.n	8007178 <_svfiprintf_r+0x1d0>
 8006fd6:	2340      	movs	r3, #64	; 0x40
 8006fd8:	616b      	str	r3, [r5, #20]
 8006fda:	2300      	movs	r3, #0
 8006fdc:	9309      	str	r3, [sp, #36]	; 0x24
 8006fde:	2320      	movs	r3, #32
 8006fe0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006fe4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fe8:	2330      	movs	r3, #48	; 0x30
 8006fea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007190 <_svfiprintf_r+0x1e8>
 8006fee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ff2:	f04f 0901 	mov.w	r9, #1
 8006ff6:	4623      	mov	r3, r4
 8006ff8:	469a      	mov	sl, r3
 8006ffa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ffe:	b10a      	cbz	r2, 8007004 <_svfiprintf_r+0x5c>
 8007000:	2a25      	cmp	r2, #37	; 0x25
 8007002:	d1f9      	bne.n	8006ff8 <_svfiprintf_r+0x50>
 8007004:	ebba 0b04 	subs.w	fp, sl, r4
 8007008:	d00b      	beq.n	8007022 <_svfiprintf_r+0x7a>
 800700a:	465b      	mov	r3, fp
 800700c:	4622      	mov	r2, r4
 800700e:	4629      	mov	r1, r5
 8007010:	4638      	mov	r0, r7
 8007012:	f7ff ff6f 	bl	8006ef4 <__ssputs_r>
 8007016:	3001      	adds	r0, #1
 8007018:	f000 80a9 	beq.w	800716e <_svfiprintf_r+0x1c6>
 800701c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800701e:	445a      	add	r2, fp
 8007020:	9209      	str	r2, [sp, #36]	; 0x24
 8007022:	f89a 3000 	ldrb.w	r3, [sl]
 8007026:	2b00      	cmp	r3, #0
 8007028:	f000 80a1 	beq.w	800716e <_svfiprintf_r+0x1c6>
 800702c:	2300      	movs	r3, #0
 800702e:	f04f 32ff 	mov.w	r2, #4294967295
 8007032:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007036:	f10a 0a01 	add.w	sl, sl, #1
 800703a:	9304      	str	r3, [sp, #16]
 800703c:	9307      	str	r3, [sp, #28]
 800703e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007042:	931a      	str	r3, [sp, #104]	; 0x68
 8007044:	4654      	mov	r4, sl
 8007046:	2205      	movs	r2, #5
 8007048:	f814 1b01 	ldrb.w	r1, [r4], #1
 800704c:	4850      	ldr	r0, [pc, #320]	; (8007190 <_svfiprintf_r+0x1e8>)
 800704e:	f7f9 f8bf 	bl	80001d0 <memchr>
 8007052:	9a04      	ldr	r2, [sp, #16]
 8007054:	b9d8      	cbnz	r0, 800708e <_svfiprintf_r+0xe6>
 8007056:	06d0      	lsls	r0, r2, #27
 8007058:	bf44      	itt	mi
 800705a:	2320      	movmi	r3, #32
 800705c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007060:	0711      	lsls	r1, r2, #28
 8007062:	bf44      	itt	mi
 8007064:	232b      	movmi	r3, #43	; 0x2b
 8007066:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800706a:	f89a 3000 	ldrb.w	r3, [sl]
 800706e:	2b2a      	cmp	r3, #42	; 0x2a
 8007070:	d015      	beq.n	800709e <_svfiprintf_r+0xf6>
 8007072:	9a07      	ldr	r2, [sp, #28]
 8007074:	4654      	mov	r4, sl
 8007076:	2000      	movs	r0, #0
 8007078:	f04f 0c0a 	mov.w	ip, #10
 800707c:	4621      	mov	r1, r4
 800707e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007082:	3b30      	subs	r3, #48	; 0x30
 8007084:	2b09      	cmp	r3, #9
 8007086:	d94d      	bls.n	8007124 <_svfiprintf_r+0x17c>
 8007088:	b1b0      	cbz	r0, 80070b8 <_svfiprintf_r+0x110>
 800708a:	9207      	str	r2, [sp, #28]
 800708c:	e014      	b.n	80070b8 <_svfiprintf_r+0x110>
 800708e:	eba0 0308 	sub.w	r3, r0, r8
 8007092:	fa09 f303 	lsl.w	r3, r9, r3
 8007096:	4313      	orrs	r3, r2
 8007098:	9304      	str	r3, [sp, #16]
 800709a:	46a2      	mov	sl, r4
 800709c:	e7d2      	b.n	8007044 <_svfiprintf_r+0x9c>
 800709e:	9b03      	ldr	r3, [sp, #12]
 80070a0:	1d19      	adds	r1, r3, #4
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	9103      	str	r1, [sp, #12]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	bfbb      	ittet	lt
 80070aa:	425b      	neglt	r3, r3
 80070ac:	f042 0202 	orrlt.w	r2, r2, #2
 80070b0:	9307      	strge	r3, [sp, #28]
 80070b2:	9307      	strlt	r3, [sp, #28]
 80070b4:	bfb8      	it	lt
 80070b6:	9204      	strlt	r2, [sp, #16]
 80070b8:	7823      	ldrb	r3, [r4, #0]
 80070ba:	2b2e      	cmp	r3, #46	; 0x2e
 80070bc:	d10c      	bne.n	80070d8 <_svfiprintf_r+0x130>
 80070be:	7863      	ldrb	r3, [r4, #1]
 80070c0:	2b2a      	cmp	r3, #42	; 0x2a
 80070c2:	d134      	bne.n	800712e <_svfiprintf_r+0x186>
 80070c4:	9b03      	ldr	r3, [sp, #12]
 80070c6:	1d1a      	adds	r2, r3, #4
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	9203      	str	r2, [sp, #12]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	bfb8      	it	lt
 80070d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80070d4:	3402      	adds	r4, #2
 80070d6:	9305      	str	r3, [sp, #20]
 80070d8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80071a0 <_svfiprintf_r+0x1f8>
 80070dc:	7821      	ldrb	r1, [r4, #0]
 80070de:	2203      	movs	r2, #3
 80070e0:	4650      	mov	r0, sl
 80070e2:	f7f9 f875 	bl	80001d0 <memchr>
 80070e6:	b138      	cbz	r0, 80070f8 <_svfiprintf_r+0x150>
 80070e8:	9b04      	ldr	r3, [sp, #16]
 80070ea:	eba0 000a 	sub.w	r0, r0, sl
 80070ee:	2240      	movs	r2, #64	; 0x40
 80070f0:	4082      	lsls	r2, r0
 80070f2:	4313      	orrs	r3, r2
 80070f4:	3401      	adds	r4, #1
 80070f6:	9304      	str	r3, [sp, #16]
 80070f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070fc:	4825      	ldr	r0, [pc, #148]	; (8007194 <_svfiprintf_r+0x1ec>)
 80070fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007102:	2206      	movs	r2, #6
 8007104:	f7f9 f864 	bl	80001d0 <memchr>
 8007108:	2800      	cmp	r0, #0
 800710a:	d038      	beq.n	800717e <_svfiprintf_r+0x1d6>
 800710c:	4b22      	ldr	r3, [pc, #136]	; (8007198 <_svfiprintf_r+0x1f0>)
 800710e:	bb1b      	cbnz	r3, 8007158 <_svfiprintf_r+0x1b0>
 8007110:	9b03      	ldr	r3, [sp, #12]
 8007112:	3307      	adds	r3, #7
 8007114:	f023 0307 	bic.w	r3, r3, #7
 8007118:	3308      	adds	r3, #8
 800711a:	9303      	str	r3, [sp, #12]
 800711c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800711e:	4433      	add	r3, r6
 8007120:	9309      	str	r3, [sp, #36]	; 0x24
 8007122:	e768      	b.n	8006ff6 <_svfiprintf_r+0x4e>
 8007124:	fb0c 3202 	mla	r2, ip, r2, r3
 8007128:	460c      	mov	r4, r1
 800712a:	2001      	movs	r0, #1
 800712c:	e7a6      	b.n	800707c <_svfiprintf_r+0xd4>
 800712e:	2300      	movs	r3, #0
 8007130:	3401      	adds	r4, #1
 8007132:	9305      	str	r3, [sp, #20]
 8007134:	4619      	mov	r1, r3
 8007136:	f04f 0c0a 	mov.w	ip, #10
 800713a:	4620      	mov	r0, r4
 800713c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007140:	3a30      	subs	r2, #48	; 0x30
 8007142:	2a09      	cmp	r2, #9
 8007144:	d903      	bls.n	800714e <_svfiprintf_r+0x1a6>
 8007146:	2b00      	cmp	r3, #0
 8007148:	d0c6      	beq.n	80070d8 <_svfiprintf_r+0x130>
 800714a:	9105      	str	r1, [sp, #20]
 800714c:	e7c4      	b.n	80070d8 <_svfiprintf_r+0x130>
 800714e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007152:	4604      	mov	r4, r0
 8007154:	2301      	movs	r3, #1
 8007156:	e7f0      	b.n	800713a <_svfiprintf_r+0x192>
 8007158:	ab03      	add	r3, sp, #12
 800715a:	9300      	str	r3, [sp, #0]
 800715c:	462a      	mov	r2, r5
 800715e:	4b0f      	ldr	r3, [pc, #60]	; (800719c <_svfiprintf_r+0x1f4>)
 8007160:	a904      	add	r1, sp, #16
 8007162:	4638      	mov	r0, r7
 8007164:	f7fd fe64 	bl	8004e30 <_printf_float>
 8007168:	1c42      	adds	r2, r0, #1
 800716a:	4606      	mov	r6, r0
 800716c:	d1d6      	bne.n	800711c <_svfiprintf_r+0x174>
 800716e:	89ab      	ldrh	r3, [r5, #12]
 8007170:	065b      	lsls	r3, r3, #25
 8007172:	f53f af2d 	bmi.w	8006fd0 <_svfiprintf_r+0x28>
 8007176:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007178:	b01d      	add	sp, #116	; 0x74
 800717a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800717e:	ab03      	add	r3, sp, #12
 8007180:	9300      	str	r3, [sp, #0]
 8007182:	462a      	mov	r2, r5
 8007184:	4b05      	ldr	r3, [pc, #20]	; (800719c <_svfiprintf_r+0x1f4>)
 8007186:	a904      	add	r1, sp, #16
 8007188:	4638      	mov	r0, r7
 800718a:	f7fe f8f5 	bl	8005378 <_printf_i>
 800718e:	e7eb      	b.n	8007168 <_svfiprintf_r+0x1c0>
 8007190:	08007cec 	.word	0x08007cec
 8007194:	08007cf6 	.word	0x08007cf6
 8007198:	08004e31 	.word	0x08004e31
 800719c:	08006ef5 	.word	0x08006ef5
 80071a0:	08007cf2 	.word	0x08007cf2

080071a4 <__sflush_r>:
 80071a4:	898a      	ldrh	r2, [r1, #12]
 80071a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071aa:	4605      	mov	r5, r0
 80071ac:	0710      	lsls	r0, r2, #28
 80071ae:	460c      	mov	r4, r1
 80071b0:	d458      	bmi.n	8007264 <__sflush_r+0xc0>
 80071b2:	684b      	ldr	r3, [r1, #4]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	dc05      	bgt.n	80071c4 <__sflush_r+0x20>
 80071b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	dc02      	bgt.n	80071c4 <__sflush_r+0x20>
 80071be:	2000      	movs	r0, #0
 80071c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80071c6:	2e00      	cmp	r6, #0
 80071c8:	d0f9      	beq.n	80071be <__sflush_r+0x1a>
 80071ca:	2300      	movs	r3, #0
 80071cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80071d0:	682f      	ldr	r7, [r5, #0]
 80071d2:	6a21      	ldr	r1, [r4, #32]
 80071d4:	602b      	str	r3, [r5, #0]
 80071d6:	d032      	beq.n	800723e <__sflush_r+0x9a>
 80071d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80071da:	89a3      	ldrh	r3, [r4, #12]
 80071dc:	075a      	lsls	r2, r3, #29
 80071de:	d505      	bpl.n	80071ec <__sflush_r+0x48>
 80071e0:	6863      	ldr	r3, [r4, #4]
 80071e2:	1ac0      	subs	r0, r0, r3
 80071e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80071e6:	b10b      	cbz	r3, 80071ec <__sflush_r+0x48>
 80071e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80071ea:	1ac0      	subs	r0, r0, r3
 80071ec:	2300      	movs	r3, #0
 80071ee:	4602      	mov	r2, r0
 80071f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80071f2:	6a21      	ldr	r1, [r4, #32]
 80071f4:	4628      	mov	r0, r5
 80071f6:	47b0      	blx	r6
 80071f8:	1c43      	adds	r3, r0, #1
 80071fa:	89a3      	ldrh	r3, [r4, #12]
 80071fc:	d106      	bne.n	800720c <__sflush_r+0x68>
 80071fe:	6829      	ldr	r1, [r5, #0]
 8007200:	291d      	cmp	r1, #29
 8007202:	d82b      	bhi.n	800725c <__sflush_r+0xb8>
 8007204:	4a29      	ldr	r2, [pc, #164]	; (80072ac <__sflush_r+0x108>)
 8007206:	410a      	asrs	r2, r1
 8007208:	07d6      	lsls	r6, r2, #31
 800720a:	d427      	bmi.n	800725c <__sflush_r+0xb8>
 800720c:	2200      	movs	r2, #0
 800720e:	6062      	str	r2, [r4, #4]
 8007210:	04d9      	lsls	r1, r3, #19
 8007212:	6922      	ldr	r2, [r4, #16]
 8007214:	6022      	str	r2, [r4, #0]
 8007216:	d504      	bpl.n	8007222 <__sflush_r+0x7e>
 8007218:	1c42      	adds	r2, r0, #1
 800721a:	d101      	bne.n	8007220 <__sflush_r+0x7c>
 800721c:	682b      	ldr	r3, [r5, #0]
 800721e:	b903      	cbnz	r3, 8007222 <__sflush_r+0x7e>
 8007220:	6560      	str	r0, [r4, #84]	; 0x54
 8007222:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007224:	602f      	str	r7, [r5, #0]
 8007226:	2900      	cmp	r1, #0
 8007228:	d0c9      	beq.n	80071be <__sflush_r+0x1a>
 800722a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800722e:	4299      	cmp	r1, r3
 8007230:	d002      	beq.n	8007238 <__sflush_r+0x94>
 8007232:	4628      	mov	r0, r5
 8007234:	f7ff f9e2 	bl	80065fc <_free_r>
 8007238:	2000      	movs	r0, #0
 800723a:	6360      	str	r0, [r4, #52]	; 0x34
 800723c:	e7c0      	b.n	80071c0 <__sflush_r+0x1c>
 800723e:	2301      	movs	r3, #1
 8007240:	4628      	mov	r0, r5
 8007242:	47b0      	blx	r6
 8007244:	1c41      	adds	r1, r0, #1
 8007246:	d1c8      	bne.n	80071da <__sflush_r+0x36>
 8007248:	682b      	ldr	r3, [r5, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d0c5      	beq.n	80071da <__sflush_r+0x36>
 800724e:	2b1d      	cmp	r3, #29
 8007250:	d001      	beq.n	8007256 <__sflush_r+0xb2>
 8007252:	2b16      	cmp	r3, #22
 8007254:	d101      	bne.n	800725a <__sflush_r+0xb6>
 8007256:	602f      	str	r7, [r5, #0]
 8007258:	e7b1      	b.n	80071be <__sflush_r+0x1a>
 800725a:	89a3      	ldrh	r3, [r4, #12]
 800725c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007260:	81a3      	strh	r3, [r4, #12]
 8007262:	e7ad      	b.n	80071c0 <__sflush_r+0x1c>
 8007264:	690f      	ldr	r7, [r1, #16]
 8007266:	2f00      	cmp	r7, #0
 8007268:	d0a9      	beq.n	80071be <__sflush_r+0x1a>
 800726a:	0793      	lsls	r3, r2, #30
 800726c:	680e      	ldr	r6, [r1, #0]
 800726e:	bf08      	it	eq
 8007270:	694b      	ldreq	r3, [r1, #20]
 8007272:	600f      	str	r7, [r1, #0]
 8007274:	bf18      	it	ne
 8007276:	2300      	movne	r3, #0
 8007278:	eba6 0807 	sub.w	r8, r6, r7
 800727c:	608b      	str	r3, [r1, #8]
 800727e:	f1b8 0f00 	cmp.w	r8, #0
 8007282:	dd9c      	ble.n	80071be <__sflush_r+0x1a>
 8007284:	6a21      	ldr	r1, [r4, #32]
 8007286:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007288:	4643      	mov	r3, r8
 800728a:	463a      	mov	r2, r7
 800728c:	4628      	mov	r0, r5
 800728e:	47b0      	blx	r6
 8007290:	2800      	cmp	r0, #0
 8007292:	dc06      	bgt.n	80072a2 <__sflush_r+0xfe>
 8007294:	89a3      	ldrh	r3, [r4, #12]
 8007296:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800729a:	81a3      	strh	r3, [r4, #12]
 800729c:	f04f 30ff 	mov.w	r0, #4294967295
 80072a0:	e78e      	b.n	80071c0 <__sflush_r+0x1c>
 80072a2:	4407      	add	r7, r0
 80072a4:	eba8 0800 	sub.w	r8, r8, r0
 80072a8:	e7e9      	b.n	800727e <__sflush_r+0xda>
 80072aa:	bf00      	nop
 80072ac:	dfbffffe 	.word	0xdfbffffe

080072b0 <_fflush_r>:
 80072b0:	b538      	push	{r3, r4, r5, lr}
 80072b2:	690b      	ldr	r3, [r1, #16]
 80072b4:	4605      	mov	r5, r0
 80072b6:	460c      	mov	r4, r1
 80072b8:	b913      	cbnz	r3, 80072c0 <_fflush_r+0x10>
 80072ba:	2500      	movs	r5, #0
 80072bc:	4628      	mov	r0, r5
 80072be:	bd38      	pop	{r3, r4, r5, pc}
 80072c0:	b118      	cbz	r0, 80072ca <_fflush_r+0x1a>
 80072c2:	6a03      	ldr	r3, [r0, #32]
 80072c4:	b90b      	cbnz	r3, 80072ca <_fflush_r+0x1a>
 80072c6:	f7fe fa05 	bl	80056d4 <__sinit>
 80072ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d0f3      	beq.n	80072ba <_fflush_r+0xa>
 80072d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80072d4:	07d0      	lsls	r0, r2, #31
 80072d6:	d404      	bmi.n	80072e2 <_fflush_r+0x32>
 80072d8:	0599      	lsls	r1, r3, #22
 80072da:	d402      	bmi.n	80072e2 <_fflush_r+0x32>
 80072dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072de:	f7fe fb10 	bl	8005902 <__retarget_lock_acquire_recursive>
 80072e2:	4628      	mov	r0, r5
 80072e4:	4621      	mov	r1, r4
 80072e6:	f7ff ff5d 	bl	80071a4 <__sflush_r>
 80072ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072ec:	07da      	lsls	r2, r3, #31
 80072ee:	4605      	mov	r5, r0
 80072f0:	d4e4      	bmi.n	80072bc <_fflush_r+0xc>
 80072f2:	89a3      	ldrh	r3, [r4, #12]
 80072f4:	059b      	lsls	r3, r3, #22
 80072f6:	d4e1      	bmi.n	80072bc <_fflush_r+0xc>
 80072f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072fa:	f7fe fb03 	bl	8005904 <__retarget_lock_release_recursive>
 80072fe:	e7dd      	b.n	80072bc <_fflush_r+0xc>

08007300 <memmove>:
 8007300:	4288      	cmp	r0, r1
 8007302:	b510      	push	{r4, lr}
 8007304:	eb01 0402 	add.w	r4, r1, r2
 8007308:	d902      	bls.n	8007310 <memmove+0x10>
 800730a:	4284      	cmp	r4, r0
 800730c:	4623      	mov	r3, r4
 800730e:	d807      	bhi.n	8007320 <memmove+0x20>
 8007310:	1e43      	subs	r3, r0, #1
 8007312:	42a1      	cmp	r1, r4
 8007314:	d008      	beq.n	8007328 <memmove+0x28>
 8007316:	f811 2b01 	ldrb.w	r2, [r1], #1
 800731a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800731e:	e7f8      	b.n	8007312 <memmove+0x12>
 8007320:	4402      	add	r2, r0
 8007322:	4601      	mov	r1, r0
 8007324:	428a      	cmp	r2, r1
 8007326:	d100      	bne.n	800732a <memmove+0x2a>
 8007328:	bd10      	pop	{r4, pc}
 800732a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800732e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007332:	e7f7      	b.n	8007324 <memmove+0x24>

08007334 <_sbrk_r>:
 8007334:	b538      	push	{r3, r4, r5, lr}
 8007336:	4d06      	ldr	r5, [pc, #24]	; (8007350 <_sbrk_r+0x1c>)
 8007338:	2300      	movs	r3, #0
 800733a:	4604      	mov	r4, r0
 800733c:	4608      	mov	r0, r1
 800733e:	602b      	str	r3, [r5, #0]
 8007340:	f7fa f91c 	bl	800157c <_sbrk>
 8007344:	1c43      	adds	r3, r0, #1
 8007346:	d102      	bne.n	800734e <_sbrk_r+0x1a>
 8007348:	682b      	ldr	r3, [r5, #0]
 800734a:	b103      	cbz	r3, 800734e <_sbrk_r+0x1a>
 800734c:	6023      	str	r3, [r4, #0]
 800734e:	bd38      	pop	{r3, r4, r5, pc}
 8007350:	2000068c 	.word	0x2000068c

08007354 <memcpy>:
 8007354:	440a      	add	r2, r1
 8007356:	4291      	cmp	r1, r2
 8007358:	f100 33ff 	add.w	r3, r0, #4294967295
 800735c:	d100      	bne.n	8007360 <memcpy+0xc>
 800735e:	4770      	bx	lr
 8007360:	b510      	push	{r4, lr}
 8007362:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007366:	f803 4f01 	strb.w	r4, [r3, #1]!
 800736a:	4291      	cmp	r1, r2
 800736c:	d1f9      	bne.n	8007362 <memcpy+0xe>
 800736e:	bd10      	pop	{r4, pc}

08007370 <__assert_func>:
 8007370:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007372:	4614      	mov	r4, r2
 8007374:	461a      	mov	r2, r3
 8007376:	4b09      	ldr	r3, [pc, #36]	; (800739c <__assert_func+0x2c>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4605      	mov	r5, r0
 800737c:	68d8      	ldr	r0, [r3, #12]
 800737e:	b14c      	cbz	r4, 8007394 <__assert_func+0x24>
 8007380:	4b07      	ldr	r3, [pc, #28]	; (80073a0 <__assert_func+0x30>)
 8007382:	9100      	str	r1, [sp, #0]
 8007384:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007388:	4906      	ldr	r1, [pc, #24]	; (80073a4 <__assert_func+0x34>)
 800738a:	462b      	mov	r3, r5
 800738c:	f000 f872 	bl	8007474 <fiprintf>
 8007390:	f000 f882 	bl	8007498 <abort>
 8007394:	4b04      	ldr	r3, [pc, #16]	; (80073a8 <__assert_func+0x38>)
 8007396:	461c      	mov	r4, r3
 8007398:	e7f3      	b.n	8007382 <__assert_func+0x12>
 800739a:	bf00      	nop
 800739c:	2000015c 	.word	0x2000015c
 80073a0:	08007d07 	.word	0x08007d07
 80073a4:	08007d14 	.word	0x08007d14
 80073a8:	08007d42 	.word	0x08007d42

080073ac <_calloc_r>:
 80073ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80073ae:	fba1 2402 	umull	r2, r4, r1, r2
 80073b2:	b94c      	cbnz	r4, 80073c8 <_calloc_r+0x1c>
 80073b4:	4611      	mov	r1, r2
 80073b6:	9201      	str	r2, [sp, #4]
 80073b8:	f7ff f994 	bl	80066e4 <_malloc_r>
 80073bc:	9a01      	ldr	r2, [sp, #4]
 80073be:	4605      	mov	r5, r0
 80073c0:	b930      	cbnz	r0, 80073d0 <_calloc_r+0x24>
 80073c2:	4628      	mov	r0, r5
 80073c4:	b003      	add	sp, #12
 80073c6:	bd30      	pop	{r4, r5, pc}
 80073c8:	220c      	movs	r2, #12
 80073ca:	6002      	str	r2, [r0, #0]
 80073cc:	2500      	movs	r5, #0
 80073ce:	e7f8      	b.n	80073c2 <_calloc_r+0x16>
 80073d0:	4621      	mov	r1, r4
 80073d2:	f7fe fa18 	bl	8005806 <memset>
 80073d6:	e7f4      	b.n	80073c2 <_calloc_r+0x16>

080073d8 <__ascii_mbtowc>:
 80073d8:	b082      	sub	sp, #8
 80073da:	b901      	cbnz	r1, 80073de <__ascii_mbtowc+0x6>
 80073dc:	a901      	add	r1, sp, #4
 80073de:	b142      	cbz	r2, 80073f2 <__ascii_mbtowc+0x1a>
 80073e0:	b14b      	cbz	r3, 80073f6 <__ascii_mbtowc+0x1e>
 80073e2:	7813      	ldrb	r3, [r2, #0]
 80073e4:	600b      	str	r3, [r1, #0]
 80073e6:	7812      	ldrb	r2, [r2, #0]
 80073e8:	1e10      	subs	r0, r2, #0
 80073ea:	bf18      	it	ne
 80073ec:	2001      	movne	r0, #1
 80073ee:	b002      	add	sp, #8
 80073f0:	4770      	bx	lr
 80073f2:	4610      	mov	r0, r2
 80073f4:	e7fb      	b.n	80073ee <__ascii_mbtowc+0x16>
 80073f6:	f06f 0001 	mvn.w	r0, #1
 80073fa:	e7f8      	b.n	80073ee <__ascii_mbtowc+0x16>

080073fc <_realloc_r>:
 80073fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007400:	4680      	mov	r8, r0
 8007402:	4614      	mov	r4, r2
 8007404:	460e      	mov	r6, r1
 8007406:	b921      	cbnz	r1, 8007412 <_realloc_r+0x16>
 8007408:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800740c:	4611      	mov	r1, r2
 800740e:	f7ff b969 	b.w	80066e4 <_malloc_r>
 8007412:	b92a      	cbnz	r2, 8007420 <_realloc_r+0x24>
 8007414:	f7ff f8f2 	bl	80065fc <_free_r>
 8007418:	4625      	mov	r5, r4
 800741a:	4628      	mov	r0, r5
 800741c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007420:	f000 f841 	bl	80074a6 <_malloc_usable_size_r>
 8007424:	4284      	cmp	r4, r0
 8007426:	4607      	mov	r7, r0
 8007428:	d802      	bhi.n	8007430 <_realloc_r+0x34>
 800742a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800742e:	d812      	bhi.n	8007456 <_realloc_r+0x5a>
 8007430:	4621      	mov	r1, r4
 8007432:	4640      	mov	r0, r8
 8007434:	f7ff f956 	bl	80066e4 <_malloc_r>
 8007438:	4605      	mov	r5, r0
 800743a:	2800      	cmp	r0, #0
 800743c:	d0ed      	beq.n	800741a <_realloc_r+0x1e>
 800743e:	42bc      	cmp	r4, r7
 8007440:	4622      	mov	r2, r4
 8007442:	4631      	mov	r1, r6
 8007444:	bf28      	it	cs
 8007446:	463a      	movcs	r2, r7
 8007448:	f7ff ff84 	bl	8007354 <memcpy>
 800744c:	4631      	mov	r1, r6
 800744e:	4640      	mov	r0, r8
 8007450:	f7ff f8d4 	bl	80065fc <_free_r>
 8007454:	e7e1      	b.n	800741a <_realloc_r+0x1e>
 8007456:	4635      	mov	r5, r6
 8007458:	e7df      	b.n	800741a <_realloc_r+0x1e>

0800745a <__ascii_wctomb>:
 800745a:	b149      	cbz	r1, 8007470 <__ascii_wctomb+0x16>
 800745c:	2aff      	cmp	r2, #255	; 0xff
 800745e:	bf85      	ittet	hi
 8007460:	238a      	movhi	r3, #138	; 0x8a
 8007462:	6003      	strhi	r3, [r0, #0]
 8007464:	700a      	strbls	r2, [r1, #0]
 8007466:	f04f 30ff 	movhi.w	r0, #4294967295
 800746a:	bf98      	it	ls
 800746c:	2001      	movls	r0, #1
 800746e:	4770      	bx	lr
 8007470:	4608      	mov	r0, r1
 8007472:	4770      	bx	lr

08007474 <fiprintf>:
 8007474:	b40e      	push	{r1, r2, r3}
 8007476:	b503      	push	{r0, r1, lr}
 8007478:	4601      	mov	r1, r0
 800747a:	ab03      	add	r3, sp, #12
 800747c:	4805      	ldr	r0, [pc, #20]	; (8007494 <fiprintf+0x20>)
 800747e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007482:	6800      	ldr	r0, [r0, #0]
 8007484:	9301      	str	r3, [sp, #4]
 8007486:	f000 f83f 	bl	8007508 <_vfiprintf_r>
 800748a:	b002      	add	sp, #8
 800748c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007490:	b003      	add	sp, #12
 8007492:	4770      	bx	lr
 8007494:	2000015c 	.word	0x2000015c

08007498 <abort>:
 8007498:	b508      	push	{r3, lr}
 800749a:	2006      	movs	r0, #6
 800749c:	f000 fa0c 	bl	80078b8 <raise>
 80074a0:	2001      	movs	r0, #1
 80074a2:	f7f9 fff3 	bl	800148c <_exit>

080074a6 <_malloc_usable_size_r>:
 80074a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074aa:	1f18      	subs	r0, r3, #4
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	bfbc      	itt	lt
 80074b0:	580b      	ldrlt	r3, [r1, r0]
 80074b2:	18c0      	addlt	r0, r0, r3
 80074b4:	4770      	bx	lr

080074b6 <__sfputc_r>:
 80074b6:	6893      	ldr	r3, [r2, #8]
 80074b8:	3b01      	subs	r3, #1
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	b410      	push	{r4}
 80074be:	6093      	str	r3, [r2, #8]
 80074c0:	da08      	bge.n	80074d4 <__sfputc_r+0x1e>
 80074c2:	6994      	ldr	r4, [r2, #24]
 80074c4:	42a3      	cmp	r3, r4
 80074c6:	db01      	blt.n	80074cc <__sfputc_r+0x16>
 80074c8:	290a      	cmp	r1, #10
 80074ca:	d103      	bne.n	80074d4 <__sfputc_r+0x1e>
 80074cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074d0:	f000 b934 	b.w	800773c <__swbuf_r>
 80074d4:	6813      	ldr	r3, [r2, #0]
 80074d6:	1c58      	adds	r0, r3, #1
 80074d8:	6010      	str	r0, [r2, #0]
 80074da:	7019      	strb	r1, [r3, #0]
 80074dc:	4608      	mov	r0, r1
 80074de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <__sfputs_r>:
 80074e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074e6:	4606      	mov	r6, r0
 80074e8:	460f      	mov	r7, r1
 80074ea:	4614      	mov	r4, r2
 80074ec:	18d5      	adds	r5, r2, r3
 80074ee:	42ac      	cmp	r4, r5
 80074f0:	d101      	bne.n	80074f6 <__sfputs_r+0x12>
 80074f2:	2000      	movs	r0, #0
 80074f4:	e007      	b.n	8007506 <__sfputs_r+0x22>
 80074f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074fa:	463a      	mov	r2, r7
 80074fc:	4630      	mov	r0, r6
 80074fe:	f7ff ffda 	bl	80074b6 <__sfputc_r>
 8007502:	1c43      	adds	r3, r0, #1
 8007504:	d1f3      	bne.n	80074ee <__sfputs_r+0xa>
 8007506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007508 <_vfiprintf_r>:
 8007508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800750c:	460d      	mov	r5, r1
 800750e:	b09d      	sub	sp, #116	; 0x74
 8007510:	4614      	mov	r4, r2
 8007512:	4698      	mov	r8, r3
 8007514:	4606      	mov	r6, r0
 8007516:	b118      	cbz	r0, 8007520 <_vfiprintf_r+0x18>
 8007518:	6a03      	ldr	r3, [r0, #32]
 800751a:	b90b      	cbnz	r3, 8007520 <_vfiprintf_r+0x18>
 800751c:	f7fe f8da 	bl	80056d4 <__sinit>
 8007520:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007522:	07d9      	lsls	r1, r3, #31
 8007524:	d405      	bmi.n	8007532 <_vfiprintf_r+0x2a>
 8007526:	89ab      	ldrh	r3, [r5, #12]
 8007528:	059a      	lsls	r2, r3, #22
 800752a:	d402      	bmi.n	8007532 <_vfiprintf_r+0x2a>
 800752c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800752e:	f7fe f9e8 	bl	8005902 <__retarget_lock_acquire_recursive>
 8007532:	89ab      	ldrh	r3, [r5, #12]
 8007534:	071b      	lsls	r3, r3, #28
 8007536:	d501      	bpl.n	800753c <_vfiprintf_r+0x34>
 8007538:	692b      	ldr	r3, [r5, #16]
 800753a:	b99b      	cbnz	r3, 8007564 <_vfiprintf_r+0x5c>
 800753c:	4629      	mov	r1, r5
 800753e:	4630      	mov	r0, r6
 8007540:	f000 f93a 	bl	80077b8 <__swsetup_r>
 8007544:	b170      	cbz	r0, 8007564 <_vfiprintf_r+0x5c>
 8007546:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007548:	07dc      	lsls	r4, r3, #31
 800754a:	d504      	bpl.n	8007556 <_vfiprintf_r+0x4e>
 800754c:	f04f 30ff 	mov.w	r0, #4294967295
 8007550:	b01d      	add	sp, #116	; 0x74
 8007552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007556:	89ab      	ldrh	r3, [r5, #12]
 8007558:	0598      	lsls	r0, r3, #22
 800755a:	d4f7      	bmi.n	800754c <_vfiprintf_r+0x44>
 800755c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800755e:	f7fe f9d1 	bl	8005904 <__retarget_lock_release_recursive>
 8007562:	e7f3      	b.n	800754c <_vfiprintf_r+0x44>
 8007564:	2300      	movs	r3, #0
 8007566:	9309      	str	r3, [sp, #36]	; 0x24
 8007568:	2320      	movs	r3, #32
 800756a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800756e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007572:	2330      	movs	r3, #48	; 0x30
 8007574:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007728 <_vfiprintf_r+0x220>
 8007578:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800757c:	f04f 0901 	mov.w	r9, #1
 8007580:	4623      	mov	r3, r4
 8007582:	469a      	mov	sl, r3
 8007584:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007588:	b10a      	cbz	r2, 800758e <_vfiprintf_r+0x86>
 800758a:	2a25      	cmp	r2, #37	; 0x25
 800758c:	d1f9      	bne.n	8007582 <_vfiprintf_r+0x7a>
 800758e:	ebba 0b04 	subs.w	fp, sl, r4
 8007592:	d00b      	beq.n	80075ac <_vfiprintf_r+0xa4>
 8007594:	465b      	mov	r3, fp
 8007596:	4622      	mov	r2, r4
 8007598:	4629      	mov	r1, r5
 800759a:	4630      	mov	r0, r6
 800759c:	f7ff ffa2 	bl	80074e4 <__sfputs_r>
 80075a0:	3001      	adds	r0, #1
 80075a2:	f000 80a9 	beq.w	80076f8 <_vfiprintf_r+0x1f0>
 80075a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075a8:	445a      	add	r2, fp
 80075aa:	9209      	str	r2, [sp, #36]	; 0x24
 80075ac:	f89a 3000 	ldrb.w	r3, [sl]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	f000 80a1 	beq.w	80076f8 <_vfiprintf_r+0x1f0>
 80075b6:	2300      	movs	r3, #0
 80075b8:	f04f 32ff 	mov.w	r2, #4294967295
 80075bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075c0:	f10a 0a01 	add.w	sl, sl, #1
 80075c4:	9304      	str	r3, [sp, #16]
 80075c6:	9307      	str	r3, [sp, #28]
 80075c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075cc:	931a      	str	r3, [sp, #104]	; 0x68
 80075ce:	4654      	mov	r4, sl
 80075d0:	2205      	movs	r2, #5
 80075d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075d6:	4854      	ldr	r0, [pc, #336]	; (8007728 <_vfiprintf_r+0x220>)
 80075d8:	f7f8 fdfa 	bl	80001d0 <memchr>
 80075dc:	9a04      	ldr	r2, [sp, #16]
 80075de:	b9d8      	cbnz	r0, 8007618 <_vfiprintf_r+0x110>
 80075e0:	06d1      	lsls	r1, r2, #27
 80075e2:	bf44      	itt	mi
 80075e4:	2320      	movmi	r3, #32
 80075e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075ea:	0713      	lsls	r3, r2, #28
 80075ec:	bf44      	itt	mi
 80075ee:	232b      	movmi	r3, #43	; 0x2b
 80075f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075f4:	f89a 3000 	ldrb.w	r3, [sl]
 80075f8:	2b2a      	cmp	r3, #42	; 0x2a
 80075fa:	d015      	beq.n	8007628 <_vfiprintf_r+0x120>
 80075fc:	9a07      	ldr	r2, [sp, #28]
 80075fe:	4654      	mov	r4, sl
 8007600:	2000      	movs	r0, #0
 8007602:	f04f 0c0a 	mov.w	ip, #10
 8007606:	4621      	mov	r1, r4
 8007608:	f811 3b01 	ldrb.w	r3, [r1], #1
 800760c:	3b30      	subs	r3, #48	; 0x30
 800760e:	2b09      	cmp	r3, #9
 8007610:	d94d      	bls.n	80076ae <_vfiprintf_r+0x1a6>
 8007612:	b1b0      	cbz	r0, 8007642 <_vfiprintf_r+0x13a>
 8007614:	9207      	str	r2, [sp, #28]
 8007616:	e014      	b.n	8007642 <_vfiprintf_r+0x13a>
 8007618:	eba0 0308 	sub.w	r3, r0, r8
 800761c:	fa09 f303 	lsl.w	r3, r9, r3
 8007620:	4313      	orrs	r3, r2
 8007622:	9304      	str	r3, [sp, #16]
 8007624:	46a2      	mov	sl, r4
 8007626:	e7d2      	b.n	80075ce <_vfiprintf_r+0xc6>
 8007628:	9b03      	ldr	r3, [sp, #12]
 800762a:	1d19      	adds	r1, r3, #4
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	9103      	str	r1, [sp, #12]
 8007630:	2b00      	cmp	r3, #0
 8007632:	bfbb      	ittet	lt
 8007634:	425b      	neglt	r3, r3
 8007636:	f042 0202 	orrlt.w	r2, r2, #2
 800763a:	9307      	strge	r3, [sp, #28]
 800763c:	9307      	strlt	r3, [sp, #28]
 800763e:	bfb8      	it	lt
 8007640:	9204      	strlt	r2, [sp, #16]
 8007642:	7823      	ldrb	r3, [r4, #0]
 8007644:	2b2e      	cmp	r3, #46	; 0x2e
 8007646:	d10c      	bne.n	8007662 <_vfiprintf_r+0x15a>
 8007648:	7863      	ldrb	r3, [r4, #1]
 800764a:	2b2a      	cmp	r3, #42	; 0x2a
 800764c:	d134      	bne.n	80076b8 <_vfiprintf_r+0x1b0>
 800764e:	9b03      	ldr	r3, [sp, #12]
 8007650:	1d1a      	adds	r2, r3, #4
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	9203      	str	r2, [sp, #12]
 8007656:	2b00      	cmp	r3, #0
 8007658:	bfb8      	it	lt
 800765a:	f04f 33ff 	movlt.w	r3, #4294967295
 800765e:	3402      	adds	r4, #2
 8007660:	9305      	str	r3, [sp, #20]
 8007662:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007738 <_vfiprintf_r+0x230>
 8007666:	7821      	ldrb	r1, [r4, #0]
 8007668:	2203      	movs	r2, #3
 800766a:	4650      	mov	r0, sl
 800766c:	f7f8 fdb0 	bl	80001d0 <memchr>
 8007670:	b138      	cbz	r0, 8007682 <_vfiprintf_r+0x17a>
 8007672:	9b04      	ldr	r3, [sp, #16]
 8007674:	eba0 000a 	sub.w	r0, r0, sl
 8007678:	2240      	movs	r2, #64	; 0x40
 800767a:	4082      	lsls	r2, r0
 800767c:	4313      	orrs	r3, r2
 800767e:	3401      	adds	r4, #1
 8007680:	9304      	str	r3, [sp, #16]
 8007682:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007686:	4829      	ldr	r0, [pc, #164]	; (800772c <_vfiprintf_r+0x224>)
 8007688:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800768c:	2206      	movs	r2, #6
 800768e:	f7f8 fd9f 	bl	80001d0 <memchr>
 8007692:	2800      	cmp	r0, #0
 8007694:	d03f      	beq.n	8007716 <_vfiprintf_r+0x20e>
 8007696:	4b26      	ldr	r3, [pc, #152]	; (8007730 <_vfiprintf_r+0x228>)
 8007698:	bb1b      	cbnz	r3, 80076e2 <_vfiprintf_r+0x1da>
 800769a:	9b03      	ldr	r3, [sp, #12]
 800769c:	3307      	adds	r3, #7
 800769e:	f023 0307 	bic.w	r3, r3, #7
 80076a2:	3308      	adds	r3, #8
 80076a4:	9303      	str	r3, [sp, #12]
 80076a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076a8:	443b      	add	r3, r7
 80076aa:	9309      	str	r3, [sp, #36]	; 0x24
 80076ac:	e768      	b.n	8007580 <_vfiprintf_r+0x78>
 80076ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80076b2:	460c      	mov	r4, r1
 80076b4:	2001      	movs	r0, #1
 80076b6:	e7a6      	b.n	8007606 <_vfiprintf_r+0xfe>
 80076b8:	2300      	movs	r3, #0
 80076ba:	3401      	adds	r4, #1
 80076bc:	9305      	str	r3, [sp, #20]
 80076be:	4619      	mov	r1, r3
 80076c0:	f04f 0c0a 	mov.w	ip, #10
 80076c4:	4620      	mov	r0, r4
 80076c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076ca:	3a30      	subs	r2, #48	; 0x30
 80076cc:	2a09      	cmp	r2, #9
 80076ce:	d903      	bls.n	80076d8 <_vfiprintf_r+0x1d0>
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d0c6      	beq.n	8007662 <_vfiprintf_r+0x15a>
 80076d4:	9105      	str	r1, [sp, #20]
 80076d6:	e7c4      	b.n	8007662 <_vfiprintf_r+0x15a>
 80076d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80076dc:	4604      	mov	r4, r0
 80076de:	2301      	movs	r3, #1
 80076e0:	e7f0      	b.n	80076c4 <_vfiprintf_r+0x1bc>
 80076e2:	ab03      	add	r3, sp, #12
 80076e4:	9300      	str	r3, [sp, #0]
 80076e6:	462a      	mov	r2, r5
 80076e8:	4b12      	ldr	r3, [pc, #72]	; (8007734 <_vfiprintf_r+0x22c>)
 80076ea:	a904      	add	r1, sp, #16
 80076ec:	4630      	mov	r0, r6
 80076ee:	f7fd fb9f 	bl	8004e30 <_printf_float>
 80076f2:	4607      	mov	r7, r0
 80076f4:	1c78      	adds	r0, r7, #1
 80076f6:	d1d6      	bne.n	80076a6 <_vfiprintf_r+0x19e>
 80076f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076fa:	07d9      	lsls	r1, r3, #31
 80076fc:	d405      	bmi.n	800770a <_vfiprintf_r+0x202>
 80076fe:	89ab      	ldrh	r3, [r5, #12]
 8007700:	059a      	lsls	r2, r3, #22
 8007702:	d402      	bmi.n	800770a <_vfiprintf_r+0x202>
 8007704:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007706:	f7fe f8fd 	bl	8005904 <__retarget_lock_release_recursive>
 800770a:	89ab      	ldrh	r3, [r5, #12]
 800770c:	065b      	lsls	r3, r3, #25
 800770e:	f53f af1d 	bmi.w	800754c <_vfiprintf_r+0x44>
 8007712:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007714:	e71c      	b.n	8007550 <_vfiprintf_r+0x48>
 8007716:	ab03      	add	r3, sp, #12
 8007718:	9300      	str	r3, [sp, #0]
 800771a:	462a      	mov	r2, r5
 800771c:	4b05      	ldr	r3, [pc, #20]	; (8007734 <_vfiprintf_r+0x22c>)
 800771e:	a904      	add	r1, sp, #16
 8007720:	4630      	mov	r0, r6
 8007722:	f7fd fe29 	bl	8005378 <_printf_i>
 8007726:	e7e4      	b.n	80076f2 <_vfiprintf_r+0x1ea>
 8007728:	08007cec 	.word	0x08007cec
 800772c:	08007cf6 	.word	0x08007cf6
 8007730:	08004e31 	.word	0x08004e31
 8007734:	080074e5 	.word	0x080074e5
 8007738:	08007cf2 	.word	0x08007cf2

0800773c <__swbuf_r>:
 800773c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800773e:	460e      	mov	r6, r1
 8007740:	4614      	mov	r4, r2
 8007742:	4605      	mov	r5, r0
 8007744:	b118      	cbz	r0, 800774e <__swbuf_r+0x12>
 8007746:	6a03      	ldr	r3, [r0, #32]
 8007748:	b90b      	cbnz	r3, 800774e <__swbuf_r+0x12>
 800774a:	f7fd ffc3 	bl	80056d4 <__sinit>
 800774e:	69a3      	ldr	r3, [r4, #24]
 8007750:	60a3      	str	r3, [r4, #8]
 8007752:	89a3      	ldrh	r3, [r4, #12]
 8007754:	071a      	lsls	r2, r3, #28
 8007756:	d525      	bpl.n	80077a4 <__swbuf_r+0x68>
 8007758:	6923      	ldr	r3, [r4, #16]
 800775a:	b31b      	cbz	r3, 80077a4 <__swbuf_r+0x68>
 800775c:	6823      	ldr	r3, [r4, #0]
 800775e:	6922      	ldr	r2, [r4, #16]
 8007760:	1a98      	subs	r0, r3, r2
 8007762:	6963      	ldr	r3, [r4, #20]
 8007764:	b2f6      	uxtb	r6, r6
 8007766:	4283      	cmp	r3, r0
 8007768:	4637      	mov	r7, r6
 800776a:	dc04      	bgt.n	8007776 <__swbuf_r+0x3a>
 800776c:	4621      	mov	r1, r4
 800776e:	4628      	mov	r0, r5
 8007770:	f7ff fd9e 	bl	80072b0 <_fflush_r>
 8007774:	b9e0      	cbnz	r0, 80077b0 <__swbuf_r+0x74>
 8007776:	68a3      	ldr	r3, [r4, #8]
 8007778:	3b01      	subs	r3, #1
 800777a:	60a3      	str	r3, [r4, #8]
 800777c:	6823      	ldr	r3, [r4, #0]
 800777e:	1c5a      	adds	r2, r3, #1
 8007780:	6022      	str	r2, [r4, #0]
 8007782:	701e      	strb	r6, [r3, #0]
 8007784:	6962      	ldr	r2, [r4, #20]
 8007786:	1c43      	adds	r3, r0, #1
 8007788:	429a      	cmp	r2, r3
 800778a:	d004      	beq.n	8007796 <__swbuf_r+0x5a>
 800778c:	89a3      	ldrh	r3, [r4, #12]
 800778e:	07db      	lsls	r3, r3, #31
 8007790:	d506      	bpl.n	80077a0 <__swbuf_r+0x64>
 8007792:	2e0a      	cmp	r6, #10
 8007794:	d104      	bne.n	80077a0 <__swbuf_r+0x64>
 8007796:	4621      	mov	r1, r4
 8007798:	4628      	mov	r0, r5
 800779a:	f7ff fd89 	bl	80072b0 <_fflush_r>
 800779e:	b938      	cbnz	r0, 80077b0 <__swbuf_r+0x74>
 80077a0:	4638      	mov	r0, r7
 80077a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077a4:	4621      	mov	r1, r4
 80077a6:	4628      	mov	r0, r5
 80077a8:	f000 f806 	bl	80077b8 <__swsetup_r>
 80077ac:	2800      	cmp	r0, #0
 80077ae:	d0d5      	beq.n	800775c <__swbuf_r+0x20>
 80077b0:	f04f 37ff 	mov.w	r7, #4294967295
 80077b4:	e7f4      	b.n	80077a0 <__swbuf_r+0x64>
	...

080077b8 <__swsetup_r>:
 80077b8:	b538      	push	{r3, r4, r5, lr}
 80077ba:	4b2a      	ldr	r3, [pc, #168]	; (8007864 <__swsetup_r+0xac>)
 80077bc:	4605      	mov	r5, r0
 80077be:	6818      	ldr	r0, [r3, #0]
 80077c0:	460c      	mov	r4, r1
 80077c2:	b118      	cbz	r0, 80077cc <__swsetup_r+0x14>
 80077c4:	6a03      	ldr	r3, [r0, #32]
 80077c6:	b90b      	cbnz	r3, 80077cc <__swsetup_r+0x14>
 80077c8:	f7fd ff84 	bl	80056d4 <__sinit>
 80077cc:	89a3      	ldrh	r3, [r4, #12]
 80077ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80077d2:	0718      	lsls	r0, r3, #28
 80077d4:	d422      	bmi.n	800781c <__swsetup_r+0x64>
 80077d6:	06d9      	lsls	r1, r3, #27
 80077d8:	d407      	bmi.n	80077ea <__swsetup_r+0x32>
 80077da:	2309      	movs	r3, #9
 80077dc:	602b      	str	r3, [r5, #0]
 80077de:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80077e2:	81a3      	strh	r3, [r4, #12]
 80077e4:	f04f 30ff 	mov.w	r0, #4294967295
 80077e8:	e034      	b.n	8007854 <__swsetup_r+0x9c>
 80077ea:	0758      	lsls	r0, r3, #29
 80077ec:	d512      	bpl.n	8007814 <__swsetup_r+0x5c>
 80077ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077f0:	b141      	cbz	r1, 8007804 <__swsetup_r+0x4c>
 80077f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077f6:	4299      	cmp	r1, r3
 80077f8:	d002      	beq.n	8007800 <__swsetup_r+0x48>
 80077fa:	4628      	mov	r0, r5
 80077fc:	f7fe fefe 	bl	80065fc <_free_r>
 8007800:	2300      	movs	r3, #0
 8007802:	6363      	str	r3, [r4, #52]	; 0x34
 8007804:	89a3      	ldrh	r3, [r4, #12]
 8007806:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800780a:	81a3      	strh	r3, [r4, #12]
 800780c:	2300      	movs	r3, #0
 800780e:	6063      	str	r3, [r4, #4]
 8007810:	6923      	ldr	r3, [r4, #16]
 8007812:	6023      	str	r3, [r4, #0]
 8007814:	89a3      	ldrh	r3, [r4, #12]
 8007816:	f043 0308 	orr.w	r3, r3, #8
 800781a:	81a3      	strh	r3, [r4, #12]
 800781c:	6923      	ldr	r3, [r4, #16]
 800781e:	b94b      	cbnz	r3, 8007834 <__swsetup_r+0x7c>
 8007820:	89a3      	ldrh	r3, [r4, #12]
 8007822:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007826:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800782a:	d003      	beq.n	8007834 <__swsetup_r+0x7c>
 800782c:	4621      	mov	r1, r4
 800782e:	4628      	mov	r0, r5
 8007830:	f000 f884 	bl	800793c <__smakebuf_r>
 8007834:	89a0      	ldrh	r0, [r4, #12]
 8007836:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800783a:	f010 0301 	ands.w	r3, r0, #1
 800783e:	d00a      	beq.n	8007856 <__swsetup_r+0x9e>
 8007840:	2300      	movs	r3, #0
 8007842:	60a3      	str	r3, [r4, #8]
 8007844:	6963      	ldr	r3, [r4, #20]
 8007846:	425b      	negs	r3, r3
 8007848:	61a3      	str	r3, [r4, #24]
 800784a:	6923      	ldr	r3, [r4, #16]
 800784c:	b943      	cbnz	r3, 8007860 <__swsetup_r+0xa8>
 800784e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007852:	d1c4      	bne.n	80077de <__swsetup_r+0x26>
 8007854:	bd38      	pop	{r3, r4, r5, pc}
 8007856:	0781      	lsls	r1, r0, #30
 8007858:	bf58      	it	pl
 800785a:	6963      	ldrpl	r3, [r4, #20]
 800785c:	60a3      	str	r3, [r4, #8]
 800785e:	e7f4      	b.n	800784a <__swsetup_r+0x92>
 8007860:	2000      	movs	r0, #0
 8007862:	e7f7      	b.n	8007854 <__swsetup_r+0x9c>
 8007864:	2000015c 	.word	0x2000015c

08007868 <_raise_r>:
 8007868:	291f      	cmp	r1, #31
 800786a:	b538      	push	{r3, r4, r5, lr}
 800786c:	4604      	mov	r4, r0
 800786e:	460d      	mov	r5, r1
 8007870:	d904      	bls.n	800787c <_raise_r+0x14>
 8007872:	2316      	movs	r3, #22
 8007874:	6003      	str	r3, [r0, #0]
 8007876:	f04f 30ff 	mov.w	r0, #4294967295
 800787a:	bd38      	pop	{r3, r4, r5, pc}
 800787c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800787e:	b112      	cbz	r2, 8007886 <_raise_r+0x1e>
 8007880:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007884:	b94b      	cbnz	r3, 800789a <_raise_r+0x32>
 8007886:	4620      	mov	r0, r4
 8007888:	f000 f830 	bl	80078ec <_getpid_r>
 800788c:	462a      	mov	r2, r5
 800788e:	4601      	mov	r1, r0
 8007890:	4620      	mov	r0, r4
 8007892:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007896:	f000 b817 	b.w	80078c8 <_kill_r>
 800789a:	2b01      	cmp	r3, #1
 800789c:	d00a      	beq.n	80078b4 <_raise_r+0x4c>
 800789e:	1c59      	adds	r1, r3, #1
 80078a0:	d103      	bne.n	80078aa <_raise_r+0x42>
 80078a2:	2316      	movs	r3, #22
 80078a4:	6003      	str	r3, [r0, #0]
 80078a6:	2001      	movs	r0, #1
 80078a8:	e7e7      	b.n	800787a <_raise_r+0x12>
 80078aa:	2400      	movs	r4, #0
 80078ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80078b0:	4628      	mov	r0, r5
 80078b2:	4798      	blx	r3
 80078b4:	2000      	movs	r0, #0
 80078b6:	e7e0      	b.n	800787a <_raise_r+0x12>

080078b8 <raise>:
 80078b8:	4b02      	ldr	r3, [pc, #8]	; (80078c4 <raise+0xc>)
 80078ba:	4601      	mov	r1, r0
 80078bc:	6818      	ldr	r0, [r3, #0]
 80078be:	f7ff bfd3 	b.w	8007868 <_raise_r>
 80078c2:	bf00      	nop
 80078c4:	2000015c 	.word	0x2000015c

080078c8 <_kill_r>:
 80078c8:	b538      	push	{r3, r4, r5, lr}
 80078ca:	4d07      	ldr	r5, [pc, #28]	; (80078e8 <_kill_r+0x20>)
 80078cc:	2300      	movs	r3, #0
 80078ce:	4604      	mov	r4, r0
 80078d0:	4608      	mov	r0, r1
 80078d2:	4611      	mov	r1, r2
 80078d4:	602b      	str	r3, [r5, #0]
 80078d6:	f7f9 fdc9 	bl	800146c <_kill>
 80078da:	1c43      	adds	r3, r0, #1
 80078dc:	d102      	bne.n	80078e4 <_kill_r+0x1c>
 80078de:	682b      	ldr	r3, [r5, #0]
 80078e0:	b103      	cbz	r3, 80078e4 <_kill_r+0x1c>
 80078e2:	6023      	str	r3, [r4, #0]
 80078e4:	bd38      	pop	{r3, r4, r5, pc}
 80078e6:	bf00      	nop
 80078e8:	2000068c 	.word	0x2000068c

080078ec <_getpid_r>:
 80078ec:	f7f9 bdb6 	b.w	800145c <_getpid>

080078f0 <__swhatbuf_r>:
 80078f0:	b570      	push	{r4, r5, r6, lr}
 80078f2:	460c      	mov	r4, r1
 80078f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078f8:	2900      	cmp	r1, #0
 80078fa:	b096      	sub	sp, #88	; 0x58
 80078fc:	4615      	mov	r5, r2
 80078fe:	461e      	mov	r6, r3
 8007900:	da0d      	bge.n	800791e <__swhatbuf_r+0x2e>
 8007902:	89a3      	ldrh	r3, [r4, #12]
 8007904:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007908:	f04f 0100 	mov.w	r1, #0
 800790c:	bf0c      	ite	eq
 800790e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007912:	2340      	movne	r3, #64	; 0x40
 8007914:	2000      	movs	r0, #0
 8007916:	6031      	str	r1, [r6, #0]
 8007918:	602b      	str	r3, [r5, #0]
 800791a:	b016      	add	sp, #88	; 0x58
 800791c:	bd70      	pop	{r4, r5, r6, pc}
 800791e:	466a      	mov	r2, sp
 8007920:	f000 f848 	bl	80079b4 <_fstat_r>
 8007924:	2800      	cmp	r0, #0
 8007926:	dbec      	blt.n	8007902 <__swhatbuf_r+0x12>
 8007928:	9901      	ldr	r1, [sp, #4]
 800792a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800792e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007932:	4259      	negs	r1, r3
 8007934:	4159      	adcs	r1, r3
 8007936:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800793a:	e7eb      	b.n	8007914 <__swhatbuf_r+0x24>

0800793c <__smakebuf_r>:
 800793c:	898b      	ldrh	r3, [r1, #12]
 800793e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007940:	079d      	lsls	r5, r3, #30
 8007942:	4606      	mov	r6, r0
 8007944:	460c      	mov	r4, r1
 8007946:	d507      	bpl.n	8007958 <__smakebuf_r+0x1c>
 8007948:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800794c:	6023      	str	r3, [r4, #0]
 800794e:	6123      	str	r3, [r4, #16]
 8007950:	2301      	movs	r3, #1
 8007952:	6163      	str	r3, [r4, #20]
 8007954:	b002      	add	sp, #8
 8007956:	bd70      	pop	{r4, r5, r6, pc}
 8007958:	ab01      	add	r3, sp, #4
 800795a:	466a      	mov	r2, sp
 800795c:	f7ff ffc8 	bl	80078f0 <__swhatbuf_r>
 8007960:	9900      	ldr	r1, [sp, #0]
 8007962:	4605      	mov	r5, r0
 8007964:	4630      	mov	r0, r6
 8007966:	f7fe febd 	bl	80066e4 <_malloc_r>
 800796a:	b948      	cbnz	r0, 8007980 <__smakebuf_r+0x44>
 800796c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007970:	059a      	lsls	r2, r3, #22
 8007972:	d4ef      	bmi.n	8007954 <__smakebuf_r+0x18>
 8007974:	f023 0303 	bic.w	r3, r3, #3
 8007978:	f043 0302 	orr.w	r3, r3, #2
 800797c:	81a3      	strh	r3, [r4, #12]
 800797e:	e7e3      	b.n	8007948 <__smakebuf_r+0xc>
 8007980:	89a3      	ldrh	r3, [r4, #12]
 8007982:	6020      	str	r0, [r4, #0]
 8007984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007988:	81a3      	strh	r3, [r4, #12]
 800798a:	9b00      	ldr	r3, [sp, #0]
 800798c:	6163      	str	r3, [r4, #20]
 800798e:	9b01      	ldr	r3, [sp, #4]
 8007990:	6120      	str	r0, [r4, #16]
 8007992:	b15b      	cbz	r3, 80079ac <__smakebuf_r+0x70>
 8007994:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007998:	4630      	mov	r0, r6
 800799a:	f000 f81d 	bl	80079d8 <_isatty_r>
 800799e:	b128      	cbz	r0, 80079ac <__smakebuf_r+0x70>
 80079a0:	89a3      	ldrh	r3, [r4, #12]
 80079a2:	f023 0303 	bic.w	r3, r3, #3
 80079a6:	f043 0301 	orr.w	r3, r3, #1
 80079aa:	81a3      	strh	r3, [r4, #12]
 80079ac:	89a3      	ldrh	r3, [r4, #12]
 80079ae:	431d      	orrs	r5, r3
 80079b0:	81a5      	strh	r5, [r4, #12]
 80079b2:	e7cf      	b.n	8007954 <__smakebuf_r+0x18>

080079b4 <_fstat_r>:
 80079b4:	b538      	push	{r3, r4, r5, lr}
 80079b6:	4d07      	ldr	r5, [pc, #28]	; (80079d4 <_fstat_r+0x20>)
 80079b8:	2300      	movs	r3, #0
 80079ba:	4604      	mov	r4, r0
 80079bc:	4608      	mov	r0, r1
 80079be:	4611      	mov	r1, r2
 80079c0:	602b      	str	r3, [r5, #0]
 80079c2:	f7f9 fdb2 	bl	800152a <_fstat>
 80079c6:	1c43      	adds	r3, r0, #1
 80079c8:	d102      	bne.n	80079d0 <_fstat_r+0x1c>
 80079ca:	682b      	ldr	r3, [r5, #0]
 80079cc:	b103      	cbz	r3, 80079d0 <_fstat_r+0x1c>
 80079ce:	6023      	str	r3, [r4, #0]
 80079d0:	bd38      	pop	{r3, r4, r5, pc}
 80079d2:	bf00      	nop
 80079d4:	2000068c 	.word	0x2000068c

080079d8 <_isatty_r>:
 80079d8:	b538      	push	{r3, r4, r5, lr}
 80079da:	4d06      	ldr	r5, [pc, #24]	; (80079f4 <_isatty_r+0x1c>)
 80079dc:	2300      	movs	r3, #0
 80079de:	4604      	mov	r4, r0
 80079e0:	4608      	mov	r0, r1
 80079e2:	602b      	str	r3, [r5, #0]
 80079e4:	f7f9 fdb1 	bl	800154a <_isatty>
 80079e8:	1c43      	adds	r3, r0, #1
 80079ea:	d102      	bne.n	80079f2 <_isatty_r+0x1a>
 80079ec:	682b      	ldr	r3, [r5, #0]
 80079ee:	b103      	cbz	r3, 80079f2 <_isatty_r+0x1a>
 80079f0:	6023      	str	r3, [r4, #0]
 80079f2:	bd38      	pop	{r3, r4, r5, pc}
 80079f4:	2000068c 	.word	0x2000068c

080079f8 <_init>:
 80079f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079fa:	bf00      	nop
 80079fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079fe:	bc08      	pop	{r3}
 8007a00:	469e      	mov	lr, r3
 8007a02:	4770      	bx	lr

08007a04 <_fini>:
 8007a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a06:	bf00      	nop
 8007a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a0a:	bc08      	pop	{r3}
 8007a0c:	469e      	mov	lr, r3
 8007a0e:	4770      	bx	lr
