
Tonometr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007210  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  080073a0  080073a0  000173a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077a4  080077a4  000202cc  2**0
                  CONTENTS
  4 .ARM          00000000  080077a4  080077a4  000202cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080077a4  080077a4  000202cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077a4  080077a4  000177a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077a8  080077a8  000177a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002cc  20000000  080077ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009cc  200002cc  08007a78  000202cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20000c98  08007a78  00020c98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002128f  00000000  00000000  0002033f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c6a  00000000  00000000  000415ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000f091  00000000  00000000  00046238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001020  00000000  00000000  000552d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000018d5  00000000  00000000  000562f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021ca9  00000000  00000000  00057bc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002459c  00000000  00000000  0007986e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b1163  00000000  00000000  0009de0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004480  00000000  00000000  0014ef70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  001533f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002cc 	.word	0x200002cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007388 	.word	0x08007388

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d0 	.word	0x200002d0
 80001cc:	08007388 	.word	0x08007388

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c48:	b500      	push	{lr}

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c4a:	4817      	ldr	r0, [pc, #92]	; (8000ca8 <MX_ADC1_Init+0x60>)
 8000c4c:	4917      	ldr	r1, [pc, #92]	; (8000cac <MX_ADC1_Init+0x64>)
 8000c4e:	6001      	str	r1, [r0, #0]
{
 8000c50:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c52:	2300      	movs	r3, #0
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c54:	2201      	movs	r2, #1
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c56:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c5a:	e9cd 3300 	strd	r3, r3, [sp]
 8000c5e:	9302      	str	r3, [sp, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c60:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c62:	7302      	strb	r2, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c64:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c66:	61c1      	str	r1, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c68:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000c6a:	6102      	str	r2, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c6c:	f000 fd38 	bl	80016e0 <HAL_ADC_Init>
 8000c70:	b968      	cbnz	r0, 8000c8e <MX_ADC1_Init+0x46>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000c72:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 8000ca0 <MX_ADC1_Init+0x58>
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000c76:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c78:	480b      	ldr	r0, [pc, #44]	; (8000ca8 <MX_ADC1_Init+0x60>)
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000c7a:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c7c:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_6;
 8000c7e:	ed8d 7b00 	vstr	d7, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c82:	f000 ff23 	bl	8001acc <HAL_ADC_ConfigChannel>
 8000c86:	b928      	cbnz	r0, 8000c94 <MX_ADC1_Init+0x4c>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c88:	b005      	add	sp, #20
 8000c8a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000c8e:	f000 f915 	bl	8000ebc <Error_Handler>
 8000c92:	e7ee      	b.n	8000c72 <MX_ADC1_Init+0x2a>
    Error_Handler();
 8000c94:	f000 f912 	bl	8000ebc <Error_Handler>
}
 8000c98:	b005      	add	sp, #20
 8000c9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c9e:	bf00      	nop
 8000ca0:	00000006 	.word	0x00000006
 8000ca4:	00000001 	.word	0x00000001
 8000ca8:	200002e8 	.word	0x200002e8
 8000cac:	40012400 	.word	0x40012400

08000cb0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000cb0:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(adcHandle->Instance==ADC1)
 8000cb2:	4b22      	ldr	r3, [pc, #136]	; (8000d3c <HAL_ADC_MspInit+0x8c>)
 8000cb4:	6802      	ldr	r2, [r0, #0]
{
 8000cb6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	2400      	movs	r4, #0
  if(adcHandle->Instance==ADC1)
 8000cba:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000cc0:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8000cc4:	9406      	str	r4, [sp, #24]
  if(adcHandle->Instance==ADC1)
 8000cc6:	d001      	beq.n	8000ccc <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000cc8:	b008      	add	sp, #32
 8000cca:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ccc:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8000cd0:	4605      	mov	r5, r0
 8000cd2:	699a      	ldr	r2, [r3, #24]
    hdma_adc1.Instance = DMA1_Channel1;
 8000cd4:	4e1a      	ldr	r6, [pc, #104]	; (8000d40 <HAL_ADC_MspInit+0x90>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cda:	619a      	str	r2, [r3, #24]
 8000cdc:	699a      	ldr	r2, [r3, #24]
 8000cde:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000ce2:	9200      	str	r2, [sp, #0]
 8000ce4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	695a      	ldr	r2, [r3, #20]
 8000ce8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000cec:	615a      	str	r2, [r3, #20]
 8000cee:	695b      	ldr	r3, [r3, #20]
 8000cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cf4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cf6:	2240      	movs	r2, #64	; 0x40
 8000cf8:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cfe:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d00:	e9cd 2302 	strd	r2, r3, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d04:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d06:	f001 f8e9 	bl	8001edc <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8000d0a:	4a0e      	ldr	r2, [pc, #56]	; (8000d44 <HAL_ADC_MspInit+0x94>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d0c:	2380      	movs	r3, #128	; 0x80
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d0e:	e9c6 2400 	strd	r2, r4, [r6]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d12:	e9c6 4302 	strd	r4, r3, [r6, #8]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d1e:	4630      	mov	r0, r6
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d20:	e9c6 2304 	strd	r2, r3, [r6, #16]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d24:	e9c6 4406 	strd	r4, r4, [r6, #24]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d28:	f000 ffc2 	bl	8001cb0 <HAL_DMA_Init>
 8000d2c:	b918      	cbnz	r0, 8000d36 <HAL_ADC_MspInit+0x86>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000d2e:	622e      	str	r6, [r5, #32]
 8000d30:	6275      	str	r5, [r6, #36]	; 0x24
}
 8000d32:	b008      	add	sp, #32
 8000d34:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8000d36:	f000 f8c1 	bl	8000ebc <Error_Handler>
 8000d3a:	e7f8      	b.n	8000d2e <HAL_ADC_MspInit+0x7e>
 8000d3c:	40012400 	.word	0x40012400
 8000d40:	20000318 	.word	0x20000318
 8000d44:	40020008 	.word	0x40020008

08000d48 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d48:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <MX_DMA_Init+0x40>)
{
 8000d4a:	b500      	push	{lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d4c:	6958      	ldr	r0, [r3, #20]
 8000d4e:	f040 0001 	orr.w	r0, r0, #1
 8000d52:	6158      	str	r0, [r3, #20]
 8000d54:	695b      	ldr	r3, [r3, #20]
{
 8000d56:	b083      	sub	sp, #12

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d58:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d5a:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d5e:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d60:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d62:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d64:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d66:	f000 ff57 	bl	8001c18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d6a:	200b      	movs	r0, #11
 8000d6c:	f000 ff92 	bl	8001c94 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000d70:	2200      	movs	r2, #0
 8000d72:	2011      	movs	r0, #17
 8000d74:	4611      	mov	r1, r2
 8000d76:	f000 ff4f 	bl	8001c18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000d7a:	2011      	movs	r0, #17

}
 8000d7c:	b003      	add	sp, #12
 8000d7e:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000d82:	f000 bf87 	b.w	8001c94 <HAL_NVIC_EnableIRQ>
 8000d86:	bf00      	nop
 8000d88:	40021000 	.word	0x40021000

08000d8c <MX_GPIO_Init>:
*/
void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <MX_GPIO_Init+0x40>)
 8000d8e:	695a      	ldr	r2, [r3, #20]
 8000d90:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000d94:	615a      	str	r2, [r3, #20]
 8000d96:	695a      	ldr	r2, [r3, #20]
{
 8000d98:	b084      	sub	sp, #16
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d9a:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8000d9e:	9201      	str	r2, [sp, #4]
 8000da0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	695a      	ldr	r2, [r3, #20]
 8000da4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000da8:	615a      	str	r2, [r3, #20]
 8000daa:	695a      	ldr	r2, [r3, #20]
 8000dac:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000db0:	9202      	str	r2, [sp, #8]
 8000db2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db4:	695a      	ldr	r2, [r3, #20]
 8000db6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000dba:	615a      	str	r2, [r3, #20]
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dc2:	9303      	str	r3, [sp, #12]
 8000dc4:	9b03      	ldr	r3, [sp, #12]

}
 8000dc6:	b004      	add	sp, #16
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd0:	b510      	push	{r4, lr}
 8000dd2:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dd4:	2100      	movs	r1, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dd6:	222c      	movs	r2, #44	; 0x2c
 8000dd8:	a810      	add	r0, sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dda:	e9cd 110b 	strd	r1, r1, [sp, #44]	; 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dde:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8000de2:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de6:	9108      	str	r1, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de8:	9101      	str	r1, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dea:	9109      	str	r1, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dec:	f004 f9d1 	bl	8005192 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000df0:	2201      	movs	r2, #1
 8000df2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000df6:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dfa:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dfc:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dfe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e02:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e06:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e08:	e9cd 420d 	strd	r4, r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e0c:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e0e:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e10:	f001 f962 	bl	80020d8 <HAL_RCC_OscConfig>
 8000e14:	b108      	cbz	r0, 8000e1a <SystemClock_Config+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e16:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e1a:	220f      	movs	r2, #15
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	9201      	str	r2, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e20:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e22:	f44f 6280 	mov.w	r2, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e26:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e28:	e9cd 3203 	strd	r3, r2, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e2c:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e2e:	9402      	str	r4, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e30:	f001 fc1a 	bl	8002668 <HAL_RCC_ClockConfig>
 8000e34:	4603      	mov	r3, r0
 8000e36:	b108      	cbz	r0, 8000e3c <SystemClock_Config+0x6c>
 8000e38:	b672      	cpsid	i
  while (1)
 8000e3a:	e7fe      	b.n	8000e3a <SystemClock_Config+0x6a>
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e3c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8000e70 <SystemClock_Config+0xa0>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000e40:	f640 0183 	movw	r1, #2179	; 0x883
  PeriphClkInit.SdadcClockSelection = RCC_SDADCSYSCLK_DIV48;
 8000e44:	f04f 4278 	mov.w	r2, #4160749568	; 0xf8000000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e48:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e4a:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PCLK2_DIV2;
 8000e4e:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000e52:	9110      	str	r1, [sp, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e54:	f001 fd74 	bl	8002940 <HAL_RCCEx_PeriphCLKConfig>
 8000e58:	b108      	cbz	r0, 8000e5e <SystemClock_Config+0x8e>
 8000e5a:	b672      	cpsid	i
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <SystemClock_Config+0x8c>
  HAL_PWREx_EnableSDADC(PWR_SDADC_ANALOG1);
 8000e5e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e62:	f001 f923 	bl	80020ac <HAL_PWREx_EnableSDADC>
}
 8000e66:	b01c      	add	sp, #112	; 0x70
 8000e68:	bd10      	pop	{r4, pc}
 8000e6a:	bf00      	nop
 8000e6c:	f3af 8000 	nop.w
	...

08000e78 <main>:
{
 8000e78:	b508      	push	{r3, lr}
  HAL_Init();
 8000e7a:	f000 fb7d 	bl	8001578 <HAL_Init>
  SystemClock_Config();
 8000e7e:	f7ff ffa7 	bl	8000dd0 <SystemClock_Config>
  MX_GPIO_Init();
 8000e82:	f7ff ff83 	bl	8000d8c <MX_GPIO_Init>
  MX_DMA_Init();
 8000e86:	f7ff ff5f 	bl	8000d48 <MX_DMA_Init>
  MX_SDADC1_Init();
 8000e8a:	f000 f819 	bl	8000ec0 <MX_SDADC1_Init>
  MX_USART1_UART_Init();
 8000e8e:	f000 fa8b 	bl	80013a8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000e92:	f000 faa7 	bl	80013e4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000e96:	f7ff fed7 	bl	8000c48 <MX_ADC1_Init>
  MX_TIM19_Init();
 8000e9a:	f000 fa1d 	bl	80012d8 <MX_TIM19_Init>
  MX_TIM3_Init();
 8000e9e:	f000 f9af 	bl	8001200 <MX_TIM3_Init>
   setup();
 8000ea2:	f003 fbd9 	bl	8004658 <setup>
  while (1)
 8000ea6:	e7fe      	b.n	8000ea6 <main+0x2e>

08000ea8 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM18) {
 8000ea8:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000eaa:	6802      	ldr	r2, [r0, #0]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d000      	beq.n	8000eb2 <HAL_TIM_PeriodElapsedCallback+0xa>
}
 8000eb0:	4770      	bx	lr
    HAL_IncTick();
 8000eb2:	f000 bb73 	b.w	800159c <HAL_IncTick>
 8000eb6:	bf00      	nop
 8000eb8:	40009c00 	.word	0x40009c00

08000ebc <Error_Handler>:
 8000ebc:	b672      	cpsid	i
  while (1)
 8000ebe:	e7fe      	b.n	8000ebe <Error_Handler+0x2>

08000ec0 <MX_SDADC1_Init>:

SDADC_HandleTypeDef hsdadc1;

/* SDADC1 init function */
void MX_SDADC1_Init(void)
{
 8000ec0:	b500      	push	{lr}
  /* USER CODE END SDADC1_Init 1 */

  /** Configure the SDADC low power mode, fast conversion mode,
  slow clock mode and SDADC1 reference voltage
  */
  hsdadc1.Instance = SDADC1;
 8000ec2:	4829      	ldr	r0, [pc, #164]	; (8000f68 <MX_SDADC1_Init+0xa8>)
 8000ec4:	4929      	ldr	r1, [pc, #164]	; (8000f6c <MX_SDADC1_Init+0xac>)
  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 8000ec6:	2300      	movs	r3, #0
{
 8000ec8:	b085      	sub	sp, #20
  hsdadc1.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
  hsdadc1.Init.FastConversionMode = SDADC_FAST_CONV_DISABLE;
  hsdadc1.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
  hsdadc1.Init.ReferenceVoltage = SDADC_VREF_VDDA;
 8000eca:	f44f 7240 	mov.w	r2, #768	; 0x300
  SDADC_ConfParamTypeDef ConfParamStruct = {0};
 8000ece:	e9cd 3300 	strd	r3, r3, [sp]
 8000ed2:	e9cd 3302 	strd	r3, r3, [sp, #8]
  hsdadc1.Init.IdleLowPowerMode = SDADC_LOWPOWER_NONE;
 8000ed6:	e9c0 1300 	strd	r1, r3, [r0]
  hsdadc1.Init.SlowClockMode = SDADC_SLOW_CLOCK_DISABLE;
 8000eda:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hsdadc1.Init.ReferenceVoltage = SDADC_VREF_VDDA;
 8000ede:	6102      	str	r2, [r0, #16]
  if (HAL_SDADC_Init(&hsdadc1) != HAL_OK)
 8000ee0:	f001 fe16 	bl	8002b10 <HAL_SDADC_Init>
 8000ee4:	bb08      	cbnz	r0, 8000f2a <MX_SDADC1_Init+0x6a>
    Error_Handler();
  }

  /** Configure The Regular Mode
  */
  if (HAL_SDADC_SelectRegularTrigger(&hsdadc1, SDADC_SOFTWARE_TRIGGER) != HAL_OK)
 8000ee6:	4820      	ldr	r0, [pc, #128]	; (8000f68 <MX_SDADC1_Init+0xa8>)
 8000ee8:	2100      	movs	r1, #0
 8000eea:	f001 fef3 	bl	8002cd4 <HAL_SDADC_SelectRegularTrigger>
 8000eee:	bb20      	cbnz	r0, 8000f3a <MX_SDADC1_Init+0x7a>
    Error_Handler();
  }

  /** Set parameters for SDADC configuration 0 Register
  */
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_SE_OFFSET;
 8000ef0:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8000f58 <MX_SDADC1_Init+0x98>
 8000ef4:	ed8d 7b00 	vstr	d7, [sp]
 8000ef8:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8000f60 <MX_SDADC1_Init+0xa0>
  ConfParamStruct.Gain = SDADC_GAIN_1_2;
  ConfParamStruct.CommonMode = SDADC_COMMON_MODE_VSSA;
  ConfParamStruct.Offset = 0;
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc1, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 8000efc:	481a      	ldr	r0, [pc, #104]	; (8000f68 <MX_SDADC1_Init+0xa8>)
 8000efe:	466a      	mov	r2, sp
 8000f00:	2100      	movs	r1, #0
  ConfParamStruct.InputMode = SDADC_INPUT_MODE_SE_OFFSET;
 8000f02:	ed8d 7b02 	vstr	d7, [sp, #8]
  if (HAL_SDADC_PrepareChannelConfig(&hsdadc1, SDADC_CONF_INDEX_0, &ConfParamStruct) != HAL_OK)
 8000f06:	f001 fe4f 	bl	8002ba8 <HAL_SDADC_PrepareChannelConfig>
 8000f0a:	bb08      	cbnz	r0, 8000f50 <MX_SDADC1_Init+0x90>
    Error_Handler();
  }

  /** Configure the Regular Channel
  */
  if (HAL_SDADC_AssociateChannelConfig(&hsdadc1, SDADC_CHANNEL_6, SDADC_CONF_INDEX_0) != HAL_OK)
 8000f0c:	4918      	ldr	r1, [pc, #96]	; (8000f70 <MX_SDADC1_Init+0xb0>)
 8000f0e:	4816      	ldr	r0, [pc, #88]	; (8000f68 <MX_SDADC1_Init+0xa8>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	f001 fe7d 	bl	8002c10 <HAL_SDADC_AssociateChannelConfig>
 8000f16:	b9c0      	cbnz	r0, 8000f4a <MX_SDADC1_Init+0x8a>
  {
    Error_Handler();
  }
  if (HAL_SDADC_ConfigChannel(&hsdadc1, SDADC_CHANNEL_6, SDADC_CONTINUOUS_CONV_ON) != HAL_OK)
 8000f18:	4915      	ldr	r1, [pc, #84]	; (8000f70 <MX_SDADC1_Init+0xb0>)
 8000f1a:	4813      	ldr	r0, [pc, #76]	; (8000f68 <MX_SDADC1_Init+0xa8>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	f001 feb3 	bl	8002c88 <HAL_SDADC_ConfigChannel>
 8000f22:	b968      	cbnz	r0, 8000f40 <MX_SDADC1_Init+0x80>
  }
  /* USER CODE BEGIN SDADC1_Init 2 */

  /* USER CODE END SDADC1_Init 2 */

}
 8000f24:	b005      	add	sp, #20
 8000f26:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000f2a:	f7ff ffc7 	bl	8000ebc <Error_Handler>
  if (HAL_SDADC_SelectRegularTrigger(&hsdadc1, SDADC_SOFTWARE_TRIGGER) != HAL_OK)
 8000f2e:	480e      	ldr	r0, [pc, #56]	; (8000f68 <MX_SDADC1_Init+0xa8>)
 8000f30:	2100      	movs	r1, #0
 8000f32:	f001 fecf 	bl	8002cd4 <HAL_SDADC_SelectRegularTrigger>
 8000f36:	2800      	cmp	r0, #0
 8000f38:	d0da      	beq.n	8000ef0 <MX_SDADC1_Init+0x30>
    Error_Handler();
 8000f3a:	f7ff ffbf 	bl	8000ebc <Error_Handler>
 8000f3e:	e7d7      	b.n	8000ef0 <MX_SDADC1_Init+0x30>
    Error_Handler();
 8000f40:	f7ff ffbc 	bl	8000ebc <Error_Handler>
}
 8000f44:	b005      	add	sp, #20
 8000f46:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000f4a:	f7ff ffb7 	bl	8000ebc <Error_Handler>
 8000f4e:	e7e3      	b.n	8000f18 <MX_SDADC1_Init+0x58>
    Error_Handler();
 8000f50:	f7ff ffb4 	bl	8000ebc <Error_Handler>
 8000f54:	e7da      	b.n	8000f0c <MX_SDADC1_Init+0x4c>
 8000f56:	bf00      	nop
 8000f58:	04000000 	.word	0x04000000
 8000f5c:	00700000 	.word	0x00700000
	...
 8000f68:	2000035c 	.word	0x2000035c
 8000f6c:	40016000 	.word	0x40016000
 8000f70:	00060040 	.word	0x00060040

08000f74 <HAL_SDADC_MspInit>:

void HAL_SDADC_MspInit(SDADC_HandleTypeDef* sdadcHandle)
{
 8000f74:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(sdadcHandle->Instance==SDADC1)
 8000f76:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <HAL_SDADC_MspInit+0x68>)
 8000f78:	6802      	ldr	r2, [r0, #0]
{
 8000f7a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	2400      	movs	r4, #0
  if(sdadcHandle->Instance==SDADC1)
 8000f7e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000f84:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8000f88:	9406      	str	r4, [sp, #24]
  if(sdadcHandle->Instance==SDADC1)
 8000f8a:	d001      	beq.n	8000f90 <HAL_SDADC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SDADC1_IRQn);
  /* USER CODE BEGIN SDADC1_MspInit 1 */

  /* USER CODE END SDADC1_MspInit 1 */
  }
}
 8000f8c:	b008      	add	sp, #32
 8000f8e:	bd10      	pop	{r4, pc}
    __HAL_RCC_SDADC1_CLK_ENABLE();
 8000f90:	f503 4330 	add.w	r3, r3, #45056	; 0xb000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f94:	a902      	add	r1, sp, #8
    __HAL_RCC_SDADC1_CLK_ENABLE();
 8000f96:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f98:	4811      	ldr	r0, [pc, #68]	; (8000fe0 <HAL_SDADC_MspInit+0x6c>)
    __HAL_RCC_SDADC1_CLK_ENABLE();
 8000f9a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000f9e:	619a      	str	r2, [r3, #24]
 8000fa0:	699a      	ldr	r2, [r3, #24]
 8000fa2:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 8000fa6:	9200      	str	r2, [sp, #0]
 8000fa8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000faa:	695a      	ldr	r2, [r3, #20]
 8000fac:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000fb0:	615a      	str	r2, [r3, #20]
 8000fb2:	695b      	ldr	r3, [r3, #20]
 8000fb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fb8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fba:	2201      	movs	r2, #1
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc2:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc4:	f000 ff8a 	bl	8001edc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDADC1_IRQn, 0, 0);
 8000fc8:	4622      	mov	r2, r4
 8000fca:	4621      	mov	r1, r4
 8000fcc:	203d      	movs	r0, #61	; 0x3d
 8000fce:	f000 fe23 	bl	8001c18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDADC1_IRQn);
 8000fd2:	203d      	movs	r0, #61	; 0x3d
 8000fd4:	f000 fe5e 	bl	8001c94 <HAL_NVIC_EnableIRQ>
}
 8000fd8:	b008      	add	sp, #32
 8000fda:	bd10      	pop	{r4, pc}
 8000fdc:	40016000 	.word	0x40016000
 8000fe0:	48000400 	.word	0x48000400

08000fe4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe4:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <HAL_MspInit+0x2c>)
 8000fe6:	699a      	ldr	r2, [r3, #24]
 8000fe8:	f042 0201 	orr.w	r2, r2, #1
 8000fec:	619a      	str	r2, [r3, #24]
 8000fee:	699a      	ldr	r2, [r3, #24]
{
 8000ff0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff2:	f002 0201 	and.w	r2, r2, #1
 8000ff6:	9200      	str	r2, [sp, #0]
 8000ff8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffa:	69da      	ldr	r2, [r3, #28]
 8000ffc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001000:	61da      	str	r2, [r3, #28]
 8001002:	69db      	ldr	r3, [r3, #28]
 8001004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001008:	9301      	str	r3, [sp, #4]
 800100a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100c:	b002      	add	sp, #8
 800100e:	4770      	bx	lr
 8001010:	40021000 	.word	0x40021000

08001014 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM18 clock */
  __HAL_RCC_TIM18_CLK_ENABLE();
 8001014:	4b23      	ldr	r3, [pc, #140]	; (80010a4 <HAL_InitTick+0x90>)
{
 8001016:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM18_CLK_ENABLE();
 8001018:	69da      	ldr	r2, [r3, #28]
 800101a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800101e:	61da      	str	r2, [r3, #28]
 8001020:	69db      	ldr	r3, [r3, #28]
{
 8001022:	b088      	sub	sp, #32
  __HAL_RCC_TIM18_CLK_ENABLE();
 8001024:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001028:	9302      	str	r3, [sp, #8]
{
 800102a:	4605      	mov	r5, r0

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800102c:	a901      	add	r1, sp, #4
 800102e:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM18_CLK_ENABLE();
 8001030:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001032:	f001 fc63 	bl	80028fc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM18 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001036:	9b06      	ldr	r3, [sp, #24]
 8001038:	b9d3      	cbnz	r3, 8001070 <HAL_InitTick+0x5c>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800103a:	f001 fc2f 	bl	800289c <HAL_RCC_GetPCLK1Freq>
 800103e:	4603      	mov	r3, r0
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM18 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001040:	4a19      	ldr	r2, [pc, #100]	; (80010a8 <HAL_InitTick+0x94>)

  /* Initialize TIM18 */
  htim18.Instance = TIM18;
 8001042:	4c1a      	ldr	r4, [pc, #104]	; (80010ac <HAL_InitTick+0x98>)
 8001044:	491a      	ldr	r1, [pc, #104]	; (80010b0 <HAL_InitTick+0x9c>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001046:	fba2 2303 	umull	r2, r3, r2, r3
 800104a:	0c9b      	lsrs	r3, r3, #18
 800104c:	3b01      	subs	r3, #1
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim18.Init.Period = (1000000U / 1000U) - 1U;
  htim18.Init.Prescaler = uwPrescalerValue;
  htim18.Init.ClockDivision = 0;
 800104e:	2200      	movs	r2, #0
  htim18.Init.Prescaler = uwPrescalerValue;
 8001050:	e9c4 1300 	strd	r1, r3, [r4]
  htim18.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim18.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim18);
 8001054:	4620      	mov	r0, r4
  htim18.Init.Period = (1000000U / 1000U) - 1U;
 8001056:	f240 33e7 	movw	r3, #999	; 0x3e7
  htim18.Init.ClockDivision = 0;
 800105a:	6122      	str	r2, [r4, #16]
  htim18.Init.CounterMode = TIM_COUNTERMODE_UP;
 800105c:	60a2      	str	r2, [r4, #8]
  htim18.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800105e:	61a2      	str	r2, [r4, #24]
  htim18.Init.Period = (1000000U / 1000U) - 1U;
 8001060:	60e3      	str	r3, [r4, #12]
  status = HAL_TIM_Base_Init(&htim18);
 8001062:	f001 ff4d 	bl	8002f00 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8001066:	4606      	mov	r6, r0
 8001068:	b130      	cbz	r0, 8001078 <HAL_InitTick+0x64>
    }
  }

 /* Return function status */
  return status;
}
 800106a:	4630      	mov	r0, r6
 800106c:	b008      	add	sp, #32
 800106e:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001070:	f001 fc14 	bl	800289c <HAL_RCC_GetPCLK1Freq>
 8001074:	0043      	lsls	r3, r0, #1
 8001076:	e7e3      	b.n	8001040 <HAL_InitTick+0x2c>
    status = HAL_TIM_Base_Start_IT(&htim18);
 8001078:	4620      	mov	r0, r4
 800107a:	f001 ffd1 	bl	8003020 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 800107e:	4606      	mov	r6, r0
 8001080:	2800      	cmp	r0, #0
 8001082:	d1f2      	bne.n	800106a <HAL_InitTick+0x56>
        HAL_NVIC_EnableIRQ(TIM18_DAC2_IRQn);
 8001084:	201b      	movs	r0, #27
 8001086:	f000 fe05 	bl	8001c94 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108a:	2d0f      	cmp	r5, #15
 800108c:	d901      	bls.n	8001092 <HAL_InitTick+0x7e>
        status = HAL_ERROR;
 800108e:	2601      	movs	r6, #1
 8001090:	e7eb      	b.n	800106a <HAL_InitTick+0x56>
        HAL_NVIC_SetPriority(TIM18_DAC2_IRQn, TickPriority, 0U);
 8001092:	4632      	mov	r2, r6
 8001094:	4629      	mov	r1, r5
 8001096:	201b      	movs	r0, #27
 8001098:	f000 fdbe 	bl	8001c18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <HAL_InitTick+0xa0>)
 800109e:	601d      	str	r5, [r3, #0]
 80010a0:	e7e3      	b.n	800106a <HAL_InitTick+0x56>
 80010a2:	bf00      	nop
 80010a4:	40021000 	.word	0x40021000
 80010a8:	431bde83 	.word	0x431bde83
 80010ac:	200003a0 	.word	0x200003a0
 80010b0:	40009c00 	.word	0x40009c00
 80010b4:	20000008 	.word	0x20000008

080010b8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80010b8:	e7fe      	b.n	80010b8 <NMI_Handler>
 80010ba:	bf00      	nop

080010bc <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010bc:	e7fe      	b.n	80010bc <HardFault_Handler>
 80010be:	bf00      	nop

080010c0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <MemManage_Handler>
 80010c2:	bf00      	nop

080010c4 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c4:	e7fe      	b.n	80010c4 <BusFault_Handler>
 80010c6:	bf00      	nop

080010c8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <UsageFault_Handler>
 80010ca:	bf00      	nop

080010cc <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop

080010d0 <DebugMon_Handler>:
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop

080010d4 <PendSV_Handler>:
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop

080010d8 <SysTick_Handler>:
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop

080010dc <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80010dc:	4801      	ldr	r0, [pc, #4]	; (80010e4 <DMA1_Channel1_IRQHandler+0x8>)
 80010de:	f000 beb3 	b.w	8001e48 <HAL_DMA_IRQHandler>
 80010e2:	bf00      	nop
 80010e4:	20000318 	.word	0x20000318

080010e8 <DMA1_Channel7_IRQHandler>:
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */
	USART2_DMA_TX_Complete = 0;
 80010e8:	4b02      	ldr	r3, [pc, #8]	; (80010f4 <DMA1_Channel7_IRQHandler+0xc>)
  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80010ea:	4803      	ldr	r0, [pc, #12]	; (80010f8 <DMA1_Channel7_IRQHandler+0x10>)
	USART2_DMA_TX_Complete = 0;
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80010f0:	f000 beaa 	b.w	8001e48 <HAL_DMA_IRQHandler>
 80010f4:	200003ec 	.word	0x200003ec
 80010f8:	2000048c 	.word	0x2000048c

080010fc <TIM18_DAC2_IRQHandler>:
void TIM18_DAC2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM18_DAC2_IRQn 0 */

  /* USER CODE END TIM18_DAC2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim18);
 80010fc:	4801      	ldr	r0, [pc, #4]	; (8001104 <TIM18_DAC2_IRQHandler+0x8>)
 80010fe:	f002 ba6f 	b.w	80035e0 <HAL_TIM_IRQHandler>
 8001102:	bf00      	nop
 8001104:	200003a0 	.word	0x200003a0

08001108 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */
	//При приеме помещаем в буффер данные

	if ((USART2->ISR &  USART_ISR_RXNE) && ((USART2->ISR & USART_ISR_ORE) == 0))
 8001108:	4b05      	ldr	r3, [pc, #20]	; (8001120 <USART2_IRQHandler+0x18>)
 800110a:	69da      	ldr	r2, [r3, #28]
 800110c:	0691      	lsls	r1, r2, #26
 800110e:	d503      	bpl.n	8001118 <USART2_IRQHandler+0x10>
 8001110:	69da      	ldr	r2, [r3, #28]
 8001112:	0712      	lsls	r2, r2, #28
	{
		uint8_t USART_data = USART2->RDR;
 8001114:	bf58      	it	pl
 8001116:	8c9b      	ldrhpl	r3, [r3, #36]	; 0x24
		//PutChar(USART_data);//принятый байт
	}

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001118:	4802      	ldr	r0, [pc, #8]	; (8001124 <USART2_IRQHandler+0x1c>)
 800111a:	f002 bc8b 	b.w	8003a34 <HAL_UART_IRQHandler>
 800111e:	bf00      	nop
 8001120:	40004400 	.word	0x40004400
 8001124:	20000558 	.word	0x20000558

08001128 <SDADC1_IRQHandler>:
void SDADC1_IRQHandler(void)
{
  /* USER CODE BEGIN SDADC1_IRQn 0 */

  /* USER CODE END SDADC1_IRQn 0 */
  HAL_SDADC_IRQHandler(&hsdadc1);
 8001128:	4801      	ldr	r0, [pc, #4]	; (8001130 <SDADC1_IRQHandler+0x8>)
 800112a:	f001 be73 	b.w	8002e14 <HAL_SDADC_IRQHandler>
 800112e:	bf00      	nop
 8001130:	2000035c 	.word	0x2000035c

08001134 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001134:	2001      	movs	r0, #1
 8001136:	4770      	bx	lr

08001138 <_kill>:

int _kill(int pid, int sig)
{
 8001138:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800113a:	f004 f87d 	bl	8005238 <__errno>
 800113e:	2316      	movs	r3, #22
 8001140:	6003      	str	r3, [r0, #0]
  return -1;
}
 8001142:	f04f 30ff 	mov.w	r0, #4294967295
 8001146:	bd08      	pop	{r3, pc}

08001148 <_exit>:

void _exit (int status)
{
 8001148:	b508      	push	{r3, lr}
  errno = EINVAL;
 800114a:	f004 f875 	bl	8005238 <__errno>
 800114e:	2316      	movs	r3, #22
 8001150:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8001152:	e7fe      	b.n	8001152 <_exit+0xa>

08001154 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001154:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001156:	1e16      	subs	r6, r2, #0
 8001158:	dd07      	ble.n	800116a <_read+0x16>
 800115a:	460c      	mov	r4, r1
 800115c:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 800115e:	f3af 8000 	nop.w
 8001162:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001166:	42a5      	cmp	r5, r4
 8001168:	d1f9      	bne.n	800115e <_read+0xa>
  }

  return len;
}
 800116a:	4630      	mov	r0, r6
 800116c:	bd70      	pop	{r4, r5, r6, pc}
 800116e:	bf00      	nop

08001170 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001170:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001172:	1e16      	subs	r6, r2, #0
 8001174:	dd07      	ble.n	8001186 <_write+0x16>
 8001176:	460c      	mov	r4, r1
 8001178:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 800117a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800117e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001182:	42ac      	cmp	r4, r5
 8001184:	d1f9      	bne.n	800117a <_write+0xa>
  }
  return len;
}
 8001186:	4630      	mov	r0, r6
 8001188:	bd70      	pop	{r4, r5, r6, pc}
 800118a:	bf00      	nop

0800118c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 800118c:	f04f 30ff 	mov.w	r0, #4294967295
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop

08001194 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001194:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001198:	604b      	str	r3, [r1, #4]
  return 0;
}
 800119a:	2000      	movs	r0, #0
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop

080011a0 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80011a0:	2001      	movs	r0, #1
 80011a2:	4770      	bx	lr

080011a4 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80011a4:	2000      	movs	r0, #0
 80011a6:	4770      	bx	lr

080011a8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011a8:	490c      	ldr	r1, [pc, #48]	; (80011dc <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011aa:	4a0d      	ldr	r2, [pc, #52]	; (80011e0 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 80011ac:	680b      	ldr	r3, [r1, #0]
{
 80011ae:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011b0:	4c0c      	ldr	r4, [pc, #48]	; (80011e4 <_sbrk+0x3c>)
 80011b2:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80011b4:	b12b      	cbz	r3, 80011c2 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011b6:	4418      	add	r0, r3
 80011b8:	4290      	cmp	r0, r2
 80011ba:	d807      	bhi.n	80011cc <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80011bc:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 80011be:	4618      	mov	r0, r3
 80011c0:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <_sbrk+0x40>)
 80011c4:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80011c6:	4418      	add	r0, r3
 80011c8:	4290      	cmp	r0, r2
 80011ca:	d9f7      	bls.n	80011bc <_sbrk+0x14>
    errno = ENOMEM;
 80011cc:	f004 f834 	bl	8005238 <__errno>
 80011d0:	230c      	movs	r3, #12
 80011d2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80011d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011d8:	4618      	mov	r0, r3
 80011da:	bd10      	pop	{r4, pc}
 80011dc:	200003f0 	.word	0x200003f0
 80011e0:	20008000 	.word	0x20008000
 80011e4:	00000800 	.word	0x00000800
 80011e8:	20000c98 	.word	0x20000c98

080011ec <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011ec:	4a03      	ldr	r2, [pc, #12]	; (80011fc <SystemInit+0x10>)
 80011ee:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80011f2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011f6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011fa:	4770      	bx	lr
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim19;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001200:	b510      	push	{r4, lr}
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001202:	4c33      	ldr	r4, [pc, #204]	; (80012d0 <MX_TIM3_Init+0xd0>)
 8001204:	4a33      	ldr	r2, [pc, #204]	; (80012d4 <MX_TIM3_Init+0xd4>)
 8001206:	6022      	str	r2, [r4, #0]
{
 8001208:	b092      	sub	sp, #72	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800120a:	2300      	movs	r3, #0
  htim3.Init.Prescaler = 0;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 30000;
 800120c:	f247 5230 	movw	r2, #30000	; 0x7530
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001210:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001212:	e9cd 3302 	strd	r3, r3, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001216:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 800121a:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 800121e:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001222:	e9c4 3301 	strd	r3, r3, [r4, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001226:	9310      	str	r3, [sp, #64]	; 0x40
  htim3.Init.Period = 30000;
 8001228:	60e2      	str	r2, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800122a:	6123      	str	r3, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800122c:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800122e:	f001 ff2f 	bl	8003090 <HAL_TIM_PWM_Init>
 8001232:	bb18      	cbnz	r0, 800127c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001234:	2200      	movs	r2, #0
 8001236:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001238:	4825      	ldr	r0, [pc, #148]	; (80012d0 <MX_TIM3_Init+0xd0>)
 800123a:	a902      	add	r1, sp, #8
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800123c:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001240:	f002 fa78 	bl	8003734 <HAL_TIMEx_MasterConfigSynchronization>
 8001244:	bb00      	cbnz	r0, 8001288 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001246:	2260      	movs	r2, #96	; 0x60
 8001248:	f643 2398 	movw	r3, #15000	; 0x3a98
 800124c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  sConfigOC.Pulse = 15000;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001250:	2202      	movs	r2, #2
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001252:	2300      	movs	r3, #0
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001254:	920c      	str	r2, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001256:	481e      	ldr	r0, [pc, #120]	; (80012d0 <MX_TIM3_Init+0xd0>)
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001258:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800125a:	a90a      	add	r1, sp, #40	; 0x28
 800125c:	2204      	movs	r2, #4
 800125e:	f002 f817 	bl	8003290 <HAL_TIM_PWM_ConfigChannel>
 8001262:	b970      	cbnz	r0, 8001282 <MX_TIM3_Init+0x82>
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM3)
 8001264:	4a1b      	ldr	r2, [pc, #108]	; (80012d4 <MX_TIM3_Init+0xd4>)
 8001266:	6821      	ldr	r1, [r4, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM3)
 800126a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001270:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8001274:	9308      	str	r3, [sp, #32]
  if(timHandle->Instance==TIM3)
 8001276:	d00a      	beq.n	800128e <MX_TIM3_Init+0x8e>
}
 8001278:	b012      	add	sp, #72	; 0x48
 800127a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800127c:	f7ff fe1e 	bl	8000ebc <Error_Handler>
 8001280:	e7d8      	b.n	8001234 <MX_TIM3_Init+0x34>
    Error_Handler();
 8001282:	f7ff fe1b 	bl	8000ebc <Error_Handler>
 8001286:	e7ed      	b.n	8001264 <MX_TIM3_Init+0x64>
    Error_Handler();
 8001288:	f7ff fe18 	bl	8000ebc <Error_Handler>
 800128c:	e7db      	b.n	8001246 <MX_TIM3_Init+0x46>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001292:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001296:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 80012c8 <MX_TIM3_Init+0xc8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129a:	695a      	ldr	r2, [r3, #20]
 800129c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80012a0:	615a      	str	r2, [r3, #20]
 80012a2:	695b      	ldr	r3, [r3, #20]
 80012a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012aa:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012ac:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012b2:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b6:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012b8:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ba:	f000 fe0f 	bl	8001edc <HAL_GPIO_Init>
}
 80012be:	b012      	add	sp, #72	; 0x48
 80012c0:	bd10      	pop	{r4, pc}
 80012c2:	bf00      	nop
 80012c4:	f3af 8000 	nop.w
 80012c8:	00000010 	.word	0x00000010
 80012cc:	00000002 	.word	0x00000002
 80012d0:	20000440 	.word	0x20000440
 80012d4:	40000400 	.word	0x40000400

080012d8 <MX_TIM19_Init>:
{
 80012d8:	b500      	push	{lr}
  htim19.Instance = TIM19;
 80012da:	481b      	ldr	r0, [pc, #108]	; (8001348 <MX_TIM19_Init+0x70>)
 80012dc:	4a1b      	ldr	r2, [pc, #108]	; (800134c <MX_TIM19_Init+0x74>)
 80012de:	6002      	str	r2, [r0, #0]
  htim19.Init.Prescaler = 2;
 80012e0:	2202      	movs	r2, #2
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012e2:	2300      	movs	r3, #0
  htim19.Init.Prescaler = 2;
 80012e4:	6042      	str	r2, [r0, #4]
  htim19.Init.Period = 49999;
 80012e6:	f24c 324f 	movw	r2, #49999	; 0xc34f
{
 80012ea:	b087      	sub	sp, #28
  htim19.Init.Period = 49999;
 80012ec:	e9c0 3202 	strd	r3, r2, [r0, #8]
  htim19.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012f0:	2280      	movs	r2, #128	; 0x80
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80012f6:	e9cd 3304 	strd	r3, r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012fa:	e9cd 3300 	strd	r3, r3, [sp]
  htim19.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fe:	6103      	str	r3, [r0, #16]
  htim19.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001300:	6182      	str	r2, [r0, #24]
  if (HAL_TIM_Base_Init(&htim19) != HAL_OK)
 8001302:	f001 fdfd 	bl	8002f00 <HAL_TIM_Base_Init>
 8001306:	b998      	cbnz	r0, 8001330 <MX_TIM19_Init+0x58>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001308:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim19, &sClockSourceConfig) != HAL_OK)
 800130c:	480e      	ldr	r0, [pc, #56]	; (8001348 <MX_TIM19_Init+0x70>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800130e:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim19, &sClockSourceConfig) != HAL_OK)
 8001310:	a902      	add	r1, sp, #8
 8001312:	f002 f8ad 	bl	8003470 <HAL_TIM_ConfigClockSource>
 8001316:	b998      	cbnz	r0, 8001340 <MX_TIM19_Init+0x68>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001318:	2220      	movs	r2, #32
 800131a:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim19, &sMasterConfig) != HAL_OK)
 800131c:	480a      	ldr	r0, [pc, #40]	; (8001348 <MX_TIM19_Init+0x70>)
 800131e:	4669      	mov	r1, sp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001320:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim19, &sMasterConfig) != HAL_OK)
 8001324:	f002 fa06 	bl	8003734 <HAL_TIMEx_MasterConfigSynchronization>
 8001328:	b928      	cbnz	r0, 8001336 <MX_TIM19_Init+0x5e>
}
 800132a:	b007      	add	sp, #28
 800132c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001330:	f7ff fdc4 	bl	8000ebc <Error_Handler>
 8001334:	e7e8      	b.n	8001308 <MX_TIM19_Init+0x30>
    Error_Handler();
 8001336:	f7ff fdc1 	bl	8000ebc <Error_Handler>
}
 800133a:	b007      	add	sp, #28
 800133c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001340:	f7ff fdbc 	bl	8000ebc <Error_Handler>
 8001344:	e7e8      	b.n	8001318 <MX_TIM19_Init+0x40>
 8001346:	bf00      	nop
 8001348:	200003f4 	.word	0x200003f4
 800134c:	40015c00 	.word	0x40015c00

08001350 <HAL_TIM_PWM_MspInit>:
  if(tim_pwmHandle->Instance==TIM3)
 8001350:	4b09      	ldr	r3, [pc, #36]	; (8001378 <HAL_TIM_PWM_MspInit+0x28>)
 8001352:	6802      	ldr	r2, [r0, #0]
 8001354:	429a      	cmp	r2, r3
 8001356:	d000      	beq.n	800135a <HAL_TIM_PWM_MspInit+0xa>
 8001358:	4770      	bx	lr
    __HAL_RCC_TIM3_CLK_ENABLE();
 800135a:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
{
 800135e:	b082      	sub	sp, #8
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001360:	69da      	ldr	r2, [r3, #28]
 8001362:	f042 0202 	orr.w	r2, r2, #2
 8001366:	61da      	str	r2, [r3, #28]
 8001368:	69db      	ldr	r3, [r3, #28]
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	9301      	str	r3, [sp, #4]
 8001370:	9b01      	ldr	r3, [sp, #4]
}
 8001372:	b002      	add	sp, #8
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	40000400 	.word	0x40000400

0800137c <HAL_TIM_Base_MspInit>:
  if(tim_baseHandle->Instance==TIM19)
 800137c:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <HAL_TIM_Base_MspInit+0x28>)
 800137e:	6802      	ldr	r2, [r0, #0]
 8001380:	429a      	cmp	r2, r3
 8001382:	d000      	beq.n	8001386 <HAL_TIM_Base_MspInit+0xa>
 8001384:	4770      	bx	lr
    __HAL_RCC_TIM19_CLK_ENABLE();
 8001386:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
{
 800138a:	b082      	sub	sp, #8
    __HAL_RCC_TIM19_CLK_ENABLE();
 800138c:	699a      	ldr	r2, [r3, #24]
 800138e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001392:	619a      	str	r2, [r3, #24]
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800139a:	9301      	str	r3, [sp, #4]
 800139c:	9b01      	ldr	r3, [sp, #4]
}
 800139e:	b002      	add	sp, #8
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	40015c00 	.word	0x40015c00

080013a8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80013a8:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013aa:	480b      	ldr	r0, [pc, #44]	; (80013d8 <MX_USART1_UART_Init+0x30>)
 80013ac:	4c0b      	ldr	r4, [pc, #44]	; (80013dc <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 2000000;
 80013ae:	490c      	ldr	r1, [pc, #48]	; (80013e0 <MX_USART1_UART_Init+0x38>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013b0:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013b2:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 2000000;
 80013b4:	e9c0 4100 	strd	r4, r1, [r0]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013b8:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013bc:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c0:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013c4:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013c8:	f002 fe40 	bl	800404c <HAL_UART_Init>
 80013cc:	b900      	cbnz	r0, 80013d0 <MX_USART1_UART_Init+0x28>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013ce:	bd10      	pop	{r4, pc}
 80013d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80013d4:	f7ff bd72 	b.w	8000ebc <Error_Handler>
 80013d8:	200004d0 	.word	0x200004d0
 80013dc:	40013800 	.word	0x40013800
 80013e0:	001e8480 	.word	0x001e8480

080013e4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80013e4:	b510      	push	{r4, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013e6:	480c      	ldr	r0, [pc, #48]	; (8001418 <MX_USART2_UART_Init+0x34>)
 80013e8:	4c0c      	ldr	r4, [pc, #48]	; (800141c <MX_USART2_UART_Init+0x38>)
  huart2.Init.BaudRate = 230400;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ea:	2300      	movs	r3, #0
  huart2.Init.BaudRate = 230400;
 80013ec:	f44f 3161 	mov.w	r1, #230400	; 0x38400
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013f0:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 230400;
 80013f2:	e9c0 4100 	strd	r4, r1, [r0]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013f6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013fa:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013fe:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001402:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001406:	f002 fe21 	bl	800404c <HAL_UART_Init>
 800140a:	b900      	cbnz	r0, 800140e <MX_USART2_UART_Init+0x2a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800140c:	bd10      	pop	{r4, pc}
 800140e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001412:	f7ff bd53 	b.w	8000ebc <Error_Handler>
 8001416:	bf00      	nop
 8001418:	20000558 	.word	0x20000558
 800141c:	40004400 	.word	0x40004400

08001420 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001420:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART1)
 8001422:	6803      	ldr	r3, [r0, #0]
 8001424:	4a3a      	ldr	r2, [pc, #232]	; (8001510 <HAL_UART_MspInit+0xf0>)
{
 8001426:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	2400      	movs	r4, #0
  if(uartHandle->Instance==USART1)
 800142a:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001430:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8001434:	9408      	str	r4, [sp, #32]
  if(uartHandle->Instance==USART1)
 8001436:	d004      	beq.n	8001442 <HAL_UART_MspInit+0x22>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8001438:	4a36      	ldr	r2, [pc, #216]	; (8001514 <HAL_UART_MspInit+0xf4>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d026      	beq.n	800148c <HAL_UART_MspInit+0x6c>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800143e:	b00a      	add	sp, #40	; 0x28
 8001440:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8001442:	4b35      	ldr	r3, [pc, #212]	; (8001518 <HAL_UART_MspInit+0xf8>)
 8001444:	699a      	ldr	r2, [r3, #24]
 8001446:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800144a:	619a      	str	r2, [r3, #24]
 800144c:	699a      	ldr	r2, [r3, #24]
 800144e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001452:	9200      	str	r2, [sp, #0]
 8001454:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001456:	695a      	ldr	r2, [r3, #20]
 8001458:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800145c:	615a      	str	r2, [r3, #20]
 800145e:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001460:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 8001464:	2502      	movs	r5, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800146a:	e9cd 4504 	strd	r4, r5, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001470:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001472:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001474:	2401      	movs	r4, #1
 8001476:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001478:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800147c:	e9cd 4506 	strd	r4, r5, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001480:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001482:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001484:	f000 fd2a 	bl	8001edc <HAL_GPIO_Init>
}
 8001488:	b00a      	add	sp, #40	; 0x28
 800148a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 800148c:	4b22      	ldr	r3, [pc, #136]	; (8001518 <HAL_UART_MspInit+0xf8>)
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800148e:	4e23      	ldr	r6, [pc, #140]	; (800151c <HAL_UART_MspInit+0xfc>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001490:	69da      	ldr	r2, [r3, #28]
 8001492:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001496:	61da      	str	r2, [r3, #28]
 8001498:	69da      	ldr	r2, [r3, #28]
 800149a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800149e:	9202      	str	r2, [sp, #8]
 80014a0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a2:	695a      	ldr	r2, [r3, #20]
 80014a4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80014a8:	615a      	str	r2, [r3, #20]
 80014aa:	695b      	ldr	r3, [r3, #20]
 80014ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014b2:	220c      	movs	r2, #12
 80014b4:	2302      	movs	r3, #2
 80014b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80014ba:	2201      	movs	r2, #1
 80014bc:	2303      	movs	r3, #3
 80014be:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80014c2:	4605      	mov	r5, r0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014c4:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ca:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014cc:	9308      	str	r3, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d0:	f000 fd04 	bl	8001edc <HAL_GPIO_Init>
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014d4:	4a12      	ldr	r2, [pc, #72]	; (8001520 <HAL_UART_MspInit+0x100>)
 80014d6:	2310      	movs	r3, #16
 80014d8:	e9c6 2300 	strd	r2, r3, [r6]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80014dc:	4630      	mov	r0, r6
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014de:	2380      	movs	r3, #128	; 0x80
 80014e0:	e9c6 4302 	strd	r4, r3, [r6, #8]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014e4:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014e8:	e9c6 4406 	strd	r4, r4, [r6, #24]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80014ec:	f000 fbe0 	bl	8001cb0 <HAL_DMA_Init>
 80014f0:	b958      	cbnz	r0, 800150a <HAL_UART_MspInit+0xea>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014f2:	2200      	movs	r2, #0
 80014f4:	4611      	mov	r1, r2
 80014f6:	2026      	movs	r0, #38	; 0x26
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80014f8:	672e      	str	r6, [r5, #112]	; 0x70
 80014fa:	6275      	str	r5, [r6, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014fc:	f000 fb8c 	bl	8001c18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001500:	2026      	movs	r0, #38	; 0x26
 8001502:	f000 fbc7 	bl	8001c94 <HAL_NVIC_EnableIRQ>
}
 8001506:	b00a      	add	sp, #40	; 0x28
 8001508:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 800150a:	f7ff fcd7 	bl	8000ebc <Error_Handler>
 800150e:	e7f0      	b.n	80014f2 <HAL_UART_MspInit+0xd2>
 8001510:	40013800 	.word	0x40013800
 8001514:	40004400 	.word	0x40004400
 8001518:	40021000 	.word	0x40021000
 800151c:	2000048c 	.word	0x2000048c
 8001520:	40020080 	.word	0x40020080

08001524 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001524:	f8df d034 	ldr.w	sp, [pc, #52]	; 800155c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001528:	f7ff fe60 	bl	80011ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800152c:	480c      	ldr	r0, [pc, #48]	; (8001560 <LoopForever+0x6>)
  ldr r1, =_edata
 800152e:	490d      	ldr	r1, [pc, #52]	; (8001564 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001530:	4a0d      	ldr	r2, [pc, #52]	; (8001568 <LoopForever+0xe>)
  movs r3, #0
 8001532:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001534:	e002      	b.n	800153c <LoopCopyDataInit>

08001536 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001536:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001538:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800153a:	3304      	adds	r3, #4

0800153c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800153c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800153e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001540:	d3f9      	bcc.n	8001536 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001542:	4a0a      	ldr	r2, [pc, #40]	; (800156c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001544:	4c0a      	ldr	r4, [pc, #40]	; (8001570 <LoopForever+0x16>)
  movs r3, #0
 8001546:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001548:	e001      	b.n	800154e <LoopFillZerobss>

0800154a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800154a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800154c:	3204      	adds	r2, #4

0800154e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800154e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001550:	d3fb      	bcc.n	800154a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001552:	f003 fe77 	bl	8005244 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001556:	f7ff fc8f 	bl	8000e78 <main>

0800155a <LoopForever>:

LoopForever:
    b LoopForever
 800155a:	e7fe      	b.n	800155a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800155c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001564:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 8001568:	080077ac 	.word	0x080077ac
  ldr r2, =_sbss
 800156c:	200002cc 	.word	0x200002cc
  ldr r4, =_ebss
 8001570:	20000c98 	.word	0x20000c98

08001574 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001574:	e7fe      	b.n	8001574 <ADC1_IRQHandler>
	...

08001578 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001578:	4a07      	ldr	r2, [pc, #28]	; (8001598 <HAL_Init+0x20>)
{
 800157a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800157c:	6813      	ldr	r3, [r2, #0]
 800157e:	f043 0310 	orr.w	r3, r3, #16
 8001582:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001584:	2003      	movs	r0, #3
 8001586:	f000 fb35 	bl	8001bf4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800158a:	200f      	movs	r0, #15
 800158c:	f7ff fd42 	bl	8001014 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001590:	f7ff fd28 	bl	8000fe4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001594:	2000      	movs	r0, #0
 8001596:	bd08      	pop	{r3, pc}
 8001598:	40022000 	.word	0x40022000

0800159c <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800159c:	4a03      	ldr	r2, [pc, #12]	; (80015ac <HAL_IncTick+0x10>)
 800159e:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <HAL_IncTick+0x14>)
 80015a0:	6811      	ldr	r1, [r2, #0]
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	440b      	add	r3, r1
 80015a6:	6013      	str	r3, [r2, #0]
}
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	200005e0 	.word	0x200005e0
 80015b0:	20000004 	.word	0x20000004

080015b4 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80015b4:	4b01      	ldr	r3, [pc, #4]	; (80015bc <HAL_GetTick+0x8>)
 80015b6:	6818      	ldr	r0, [r3, #0]
}
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	200005e0 	.word	0x200005e0

080015c0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015c0:	b538      	push	{r3, r4, r5, lr}
 80015c2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80015c4:	f7ff fff6 	bl	80015b4 <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015c8:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80015ca:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80015cc:	d002      	beq.n	80015d4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ce:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <HAL_Delay+0x20>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	441c      	add	r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80015d4:	f7ff ffee 	bl	80015b4 <HAL_GetTick>
 80015d8:	1b43      	subs	r3, r0, r5
 80015da:	42a3      	cmp	r3, r4
 80015dc:	d3fa      	bcc.n	80015d4 <HAL_Delay+0x14>
  {
  }
}
 80015de:	bd38      	pop	{r3, r4, r5, pc}
 80015e0:	20000004 	.word	0x20000004

080015e4 <HAL_ADC_ConvHalfCpltCallback>:
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop

080015e8 <HAL_ADC_ErrorCallback>:
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop

080015ec <ADC_DMAError>:
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015ec:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80015ee:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80015f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015f4:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80015f6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80015f8:	f043 0304 	orr.w	r3, r3, #4
 80015fc:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80015fe:	f7ff bff3 	b.w	80015e8 <HAL_ADC_ErrorCallback>
 8001602:	bf00      	nop

08001604 <ADC_DMAHalfConvCplt>:
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001604:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001606:	f7ff bfed 	b.w	80015e4 <HAL_ADC_ConvHalfCpltCallback>
 800160a:	bf00      	nop

0800160c <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800160c:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800160e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001610:	f012 0f50 	tst.w	r2, #80	; 0x50
 8001614:	d10d      	bne.n	8001632 <ADC_DMAConvCplt+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001616:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001618:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800161a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800161e:	629a      	str	r2, [r3, #40]	; 0x28
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001620:	688a      	ldr	r2, [r1, #8]
 8001622:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001626:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 800162a:	d005      	beq.n	8001638 <ADC_DMAConvCplt+0x2c>
      HAL_ADC_ConvCpltCallback(hadc);
 800162c:	4618      	mov	r0, r3
 800162e:	f002 bf2d 	b.w	800448c <HAL_ADC_ConvCpltCallback>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4718      	bx	r3
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001638:	7b1a      	ldrb	r2, [r3, #12]
 800163a:	2a00      	cmp	r2, #0
 800163c:	d1f6      	bne.n	800162c <ADC_DMAConvCplt+0x20>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800163e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001640:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001644:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001646:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001648:	04d2      	lsls	r2, r2, #19
 800164a:	d4ef      	bmi.n	800162c <ADC_DMAConvCplt+0x20>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800164c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800164e:	f042 0201 	orr.w	r2, r2, #1
 8001652:	629a      	str	r2, [r3, #40]	; 0x28
 8001654:	e7ea      	b.n	800162c <ADC_DMAConvCplt+0x20>
 8001656:	bf00      	nop

08001658 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001658:	b530      	push	{r4, r5, lr}
 800165a:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 800165c:	2300      	movs	r3, #0
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800165e:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001660:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001662:	6893      	ldr	r3, [r2, #8]
 8001664:	07d9      	lsls	r1, r3, #31
 8001666:	d427      	bmi.n	80016b8 <ADC_Enable+0x60>
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001668:	4b1b      	ldr	r3, [pc, #108]	; (80016d8 <ADC_Enable+0x80>)
    __HAL_ADC_ENABLE(hadc);
 800166a:	6891      	ldr	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4604      	mov	r4, r0
 8001670:	481a      	ldr	r0, [pc, #104]	; (80016dc <ADC_Enable+0x84>)
 8001672:	fba0 0303 	umull	r0, r3, r0, r3
 8001676:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 8001678:	f041 0101 	orr.w	r1, r1, #1
 800167c:	6091      	str	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800167e:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001680:	9b01      	ldr	r3, [sp, #4]
 8001682:	b12b      	cbz	r3, 8001690 <ADC_Enable+0x38>
    {
      wait_loop_index--;
 8001684:	9b01      	ldr	r3, [sp, #4]
 8001686:	3b01      	subs	r3, #1
 8001688:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800168a:	9b01      	ldr	r3, [sp, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d1f9      	bne.n	8001684 <ADC_Enable+0x2c>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001690:	f7ff ff90 	bl	80015b4 <HAL_GetTick>
    
    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001694:	6823      	ldr	r3, [r4, #0]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	07da      	lsls	r2, r3, #31
    tickstart = HAL_GetTick();
 800169a:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 800169c:	d40c      	bmi.n	80016b8 <ADC_Enable+0x60>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800169e:	f7ff ff89 	bl	80015b4 <HAL_GetTick>
 80016a2:	1b43      	subs	r3, r0, r5
 80016a4:	2b02      	cmp	r3, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80016a6:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80016a8:	d903      	bls.n	80016b2 <ADC_Enable+0x5a>
        if(ADC_IS_ENABLE(hadc) == RESET)
 80016aa:	689a      	ldr	r2, [r3, #8]
 80016ac:	f012 0201 	ands.w	r2, r2, #1
 80016b0:	d005      	beq.n	80016be <ADC_Enable+0x66>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	07db      	lsls	r3, r3, #31
 80016b6:	d5f2      	bpl.n	800169e <ADC_Enable+0x46>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80016b8:	2000      	movs	r0, #0
}
 80016ba:	b003      	add	sp, #12
 80016bc:	bd30      	pop	{r4, r5, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 80016c0:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016c4:	f043 0310 	orr.w	r3, r3, #16
 80016c8:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 80016cc:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ce:	4303      	orrs	r3, r0
 80016d0:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 80016d2:	b003      	add	sp, #12
 80016d4:	bd30      	pop	{r4, r5, pc}
 80016d6:	bf00      	nop
 80016d8:	20000000 	.word	0x20000000
 80016dc:	431bde83 	.word	0x431bde83

080016e0 <HAL_ADC_Init>:
  if(hadc == NULL)
 80016e0:	2800      	cmp	r0, #0
 80016e2:	f000 8087 	beq.w	80017f4 <HAL_ADC_Init+0x114>
{
 80016e6:	b538      	push	{r3, r4, r5, lr}
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016e8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80016ea:	4604      	mov	r4, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d069      	beq.n	80017c4 <HAL_ADC_Init+0xe4>
static HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80016f0:	6823      	ldr	r3, [r4, #0]
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	07d5      	lsls	r5, r2, #31
 80016f6:	d442      	bmi.n	800177e <HAL_ADC_Init+0x9e>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80016f8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80016fa:	06d2      	lsls	r2, r2, #27
 80016fc:	d45c      	bmi.n	80017b8 <HAL_ADC_Init+0xd8>
    ADC_STATE_CLR_SET(hadc->State,
 80016fe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 8001700:	6861      	ldr	r1, [r4, #4]
 8001702:	69e0      	ldr	r0, [r4, #28]
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) );
 8001704:	7b25      	ldrb	r5, [r4, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8001706:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800170a:	f022 0202 	bic.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                             |
 800170e:	4301      	orrs	r1, r0
    ADC_STATE_CLR_SET(hadc->State,
 8001710:	f042 0202 	orr.w	r2, r2, #2
 8001714:	62a2      	str	r2, [r4, #40]	; 0x28
                hadc->Init.ExternalTrigConv                      |
 8001716:	ea41 0245 	orr.w	r2, r1, r5, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800171a:	68a1      	ldr	r1, [r4, #8]
 800171c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001720:	d056      	beq.n	80017d0 <HAL_ADC_Init+0xf0>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001722:	f894 c014 	ldrb.w	ip, [r4, #20]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001726:	f1a1 0001 	sub.w	r0, r1, #1
 800172a:	fab0 f080 	clz	r0, r0
 800172e:	0940      	lsrs	r0, r0, #5
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001730:	f1bc 0f01 	cmp.w	ip, #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001734:	ea4f 2000 	mov.w	r0, r0, lsl #8
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001738:	d068      	beq.n	800180c <HAL_ADC_Init+0x12c>
      MODIFY_REG(hadc->Instance->CR1,
 800173a:	685d      	ldr	r5, [r3, #4]
 800173c:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8001740:	4328      	orrs	r0, r5
 8001742:	6058      	str	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001744:	689d      	ldr	r5, [r3, #8]
 8001746:	4840      	ldr	r0, [pc, #256]	; (8001848 <HAL_ADC_Init+0x168>)
 8001748:	4028      	ands	r0, r5
 800174a:	4310      	orrs	r0, r2
 800174c:	6098      	str	r0, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800174e:	2901      	cmp	r1, #1
 8001750:	d04c      	beq.n	80017ec <HAL_ADC_Init+0x10c>
  uint32_t tmp_sqr1 = 0U;
 8001752:	2000      	movs	r0, #0
    MODIFY_REG(hadc->Instance->SQR1,
 8001754:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001756:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 800175a:	4301      	orrs	r1, r0
 800175c:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800175e:	6899      	ldr	r1, [r3, #8]
 8001760:	4b3a      	ldr	r3, [pc, #232]	; (800184c <HAL_ADC_Init+0x16c>)
 8001762:	400b      	ands	r3, r1
 8001764:	429a      	cmp	r2, r3
 8001766:	d047      	beq.n	80017f8 <HAL_ADC_Init+0x118>
      ADC_STATE_CLR_SET(hadc->State,
 8001768:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800176a:	f023 0312 	bic.w	r3, r3, #18
 800176e:	f043 0310 	orr.w	r3, r3, #16
 8001772:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001774:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      tmp_hal_status = HAL_ERROR;
 8001776:	2001      	movs	r0, #1
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001778:	4303      	orrs	r3, r0
 800177a:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800177c:	bd38      	pop	{r3, r4, r5, pc}
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800177e:	689a      	ldr	r2, [r3, #8]
 8001780:	f022 0201 	bic.w	r2, r2, #1
 8001784:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001786:	f7ff ff15 	bl	80015b4 <HAL_GetTick>
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800178a:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800178c:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800178e:	689a      	ldr	r2, [r3, #8]
 8001790:	07d0      	lsls	r0, r2, #31
 8001792:	d5b1      	bpl.n	80016f8 <HAL_ADC_Init+0x18>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001794:	f7ff ff0e 	bl	80015b4 <HAL_GetTick>
 8001798:	1b40      	subs	r0, r0, r5
 800179a:	2802      	cmp	r0, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800179c:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800179e:	d9f6      	bls.n	800178e <HAL_ADC_Init+0xae>
        if(ADC_IS_ENABLE(hadc) != RESET)
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	07d1      	lsls	r1, r2, #31
 80017a4:	d5f3      	bpl.n	800178e <HAL_ADC_Init+0xae>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80017a8:	f043 0310 	orr.w	r3, r3, #16
 80017ac:	62a3      	str	r3, [r4, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80017b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80017ba:	f043 0310 	orr.w	r3, r3, #16
    tmp_hal_status = HAL_ERROR;
 80017be:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017c0:	62a3      	str	r3, [r4, #40]	; 0x28
}
 80017c2:	bd38      	pop	{r3, r4, r5, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 80017c4:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80017c6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80017ca:	f7ff fa71 	bl	8000cb0 <HAL_ADC_MspInit>
 80017ce:	e78f      	b.n	80016f0 <HAL_ADC_Init+0x10>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017d0:	7d20      	ldrb	r0, [r4, #20]
 80017d2:	2801      	cmp	r0, #1
 80017d4:	d019      	beq.n	800180a <HAL_ADC_Init+0x12a>
      MODIFY_REG(hadc->Instance->CR1,
 80017d6:	6858      	ldr	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80017d8:	491b      	ldr	r1, [pc, #108]	; (8001848 <HAL_ADC_Init+0x168>)
      MODIFY_REG(hadc->Instance->CR1,
 80017da:	f420 4069 	bic.w	r0, r0, #59648	; 0xe900
 80017de:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 80017e2:	6058      	str	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80017e4:	6898      	ldr	r0, [r3, #8]
 80017e6:	4001      	ands	r1, r0
 80017e8:	4311      	orrs	r1, r2
 80017ea:	6099      	str	r1, [r3, #8]
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80017ec:	6920      	ldr	r0, [r4, #16]
 80017ee:	3801      	subs	r0, #1
 80017f0:	0500      	lsls	r0, r0, #20
 80017f2:	e7af      	b.n	8001754 <HAL_ADC_Init+0x74>
    return HAL_ERROR;
 80017f4:	2001      	movs	r0, #1
}
 80017f6:	4770      	bx	lr
      ADC_CLEAR_ERRORCODE(hadc);
 80017f8:	2000      	movs	r0, #0
 80017fa:	62e0      	str	r0, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80017fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80017fe:	f023 0303 	bic.w	r3, r3, #3
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8001808:	bd38      	pop	{r3, r4, r5, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800180a:	4608      	mov	r0, r1
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800180c:	b1ad      	cbz	r5, 800183a <HAL_ADC_Init+0x15a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800180e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8001810:	f045 0520 	orr.w	r5, r5, #32
 8001814:	62a5      	str	r5, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001816:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8001818:	f045 0501 	orr.w	r5, r5, #1
 800181c:	62e5      	str	r5, [r4, #44]	; 0x2c
      MODIFY_REG(hadc->Instance->CR1,
 800181e:	685d      	ldr	r5, [r3, #4]
 8001820:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8001824:	4328      	orrs	r0, r5
 8001826:	6058      	str	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001828:	689d      	ldr	r5, [r3, #8]
 800182a:	4807      	ldr	r0, [pc, #28]	; (8001848 <HAL_ADC_Init+0x168>)
 800182c:	4028      	ands	r0, r5
 800182e:	4310      	orrs	r0, r2
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001830:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR2,
 8001834:	6098      	str	r0, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001836:	d18a      	bne.n	800174e <HAL_ADC_Init+0x6e>
 8001838:	e7d8      	b.n	80017ec <HAL_ADC_Init+0x10c>
                  ADC_CR1_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion) );
 800183a:	69a5      	ldr	r5, [r4, #24]
 800183c:	3d01      	subs	r5, #1
      tmp_cr1 |= (ADC_CR1_DISCEN                                           |
 800183e:	ea40 3045 	orr.w	r0, r0, r5, lsl #13
 8001842:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8001846:	e7ea      	b.n	800181e <HAL_ADC_Init+0x13e>
 8001848:	ffe1f7fd 	.word	0xffe1f7fd
 800184c:	ff1f0efe 	.word	0xff1f0efe

08001850 <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001850:	6803      	ldr	r3, [r0, #0]
{
 8001852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001856:	689c      	ldr	r4, [r3, #8]
 8001858:	f414 7480 	ands.w	r4, r4, #256	; 0x100
{
 800185c:	4605      	mov	r5, r0
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800185e:	d009      	beq.n	8001874 <HAL_ADC_PollForConversion+0x24>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001860:	6a83      	ldr	r3, [r0, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 8001862:	2200      	movs	r2, #0
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001864:	f043 0320 	orr.w	r3, r3, #32
 8001868:	6283      	str	r3, [r0, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 800186a:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 800186e:	2001      	movs	r0, #1
}
 8001870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  tickstart = HAL_GetTick();
 8001874:	460e      	mov	r6, r1
 8001876:	f7ff fe9d 	bl	80015b4 <HAL_GetTick>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800187a:	682b      	ldr	r3, [r5, #0]
 800187c:	6859      	ldr	r1, [r3, #4]
 800187e:	05c9      	lsls	r1, r1, #23
  tickstart = HAL_GetTick();
 8001880:	4607      	mov	r7, r0
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001882:	461a      	mov	r2, r3
 8001884:	d419      	bmi.n	80018ba <HAL_ADC_PollForConversion+0x6a>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001886:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001888:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 800188c:	d115      	bne.n	80018ba <HAL_ADC_PollForConversion+0x6a>
 800188e:	1c74      	adds	r4, r6, #1
 8001890:	f040 8096 	bne.w	80019c0 <HAL_ADC_PollForConversion+0x170>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001894:	6813      	ldr	r3, [r2, #0]
 8001896:	0798      	lsls	r0, r3, #30
 8001898:	d5fc      	bpl.n	8001894 <HAL_ADC_PollForConversion+0x44>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800189a:	f06f 0312 	mvn.w	r3, #18
 800189e:	6013      	str	r3, [r2, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018a0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80018a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018a6:	62ab      	str	r3, [r5, #40]	; 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80018a8:	6893      	ldr	r3, [r2, #8]
 80018aa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80018ae:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80018b2:	d063      	beq.n	800197c <HAL_ADC_PollForConversion+0x12c>
  return HAL_OK;
 80018b4:	2000      	movs	r0, #0
}
 80018b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    Conversion_Timeout_CPU_cycles_max = ADC_CLOCK_PRESCALER_RANGE() ;
 80018ba:	4a4f      	ldr	r2, [pc, #316]	; (80019f8 <HAL_ADC_PollForConversion+0x1a8>)
 80018bc:	6851      	ldr	r1, [r2, #4]
 80018be:	6852      	ldr	r2, [r2, #4]
 80018c0:	f411 4f40 	tst.w	r1, #49152	; 0xc000
 80018c4:	d029      	beq.n	800191a <HAL_ADC_PollForConversion+0xca>
 80018c6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80018ca:	2a00      	cmp	r2, #0
    Conversion_Timeout_CPU_cycles_max *= ADC_CONVCYCLES_MAX_RANGE(hadc);
 80018cc:	6919      	ldr	r1, [r3, #16]
 80018ce:	4a4b      	ldr	r2, [pc, #300]	; (80019fc <HAL_ADC_PollForConversion+0x1ac>)
    Conversion_Timeout_CPU_cycles_max = ADC_CLOCK_PRESCALER_RANGE() ;
 80018d0:	bf15      	itete	ne
 80018d2:	f44f 5ca4 	movne.w	ip, #5248	; 0x1480
 80018d6:	f44f 6ca4 	moveq.w	ip, #1312	; 0x520
 80018da:	f44f 48fc 	movne.w	r8, #32256	; 0x7e00
 80018de:	f44f 58fc 	moveq.w	r8, #8064	; 0x1f80
 80018e2:	bf15      	itete	ne
 80018e4:	f44f 5028 	movne.w	r0, #10752	; 0x2a00
 80018e8:	f44f 6028 	moveq.w	r0, #2688	; 0xa80
 80018ec:	f44f 6e20 	movne.w	lr, #2560	; 0xa00
 80018f0:	f44f 7e20 	moveq.w	lr, #640	; 0x280
    Conversion_Timeout_CPU_cycles_max *= ADC_CONVCYCLES_MAX_RANGE(hadc);
 80018f4:	4211      	tst	r1, r2
 80018f6:	d128      	bne.n	800194a <HAL_ADC_PollForConversion+0xfa>
 80018f8:	68d9      	ldr	r1, [r3, #12]
 80018fa:	f102 425c 	add.w	r2, r2, #3690987520	; 0xdc000000
 80018fe:	4211      	tst	r1, r2
 8001900:	d123      	bne.n	800194a <HAL_ADC_PollForConversion+0xfa>
 8001902:	6919      	ldr	r1, [r3, #16]
 8001904:	4a3e      	ldr	r2, [pc, #248]	; (8001a00 <HAL_ADC_PollForConversion+0x1b0>)
 8001906:	4211      	tst	r1, r2
 8001908:	d16c      	bne.n	80019e4 <HAL_ADC_PollForConversion+0x194>
 800190a:	68d9      	ldr	r1, [r3, #12]
 800190c:	f102 426e 	add.w	r2, r2, #3992977408	; 0xee000000
 8001910:	4211      	tst	r1, r2
 8001912:	bf14      	ite	ne
 8001914:	46e0      	movne	r8, ip
 8001916:	46f0      	moveq	r8, lr
 8001918:	e021      	b.n	800195e <HAL_ADC_PollForConversion+0x10e>
    Conversion_Timeout_CPU_cycles_max = ADC_CLOCK_PRESCALER_RANGE() ;
 800191a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800191e:	2a00      	cmp	r2, #0
    Conversion_Timeout_CPU_cycles_max *= ADC_CONVCYCLES_MAX_RANGE(hadc);
 8001920:	6919      	ldr	r1, [r3, #16]
 8001922:	4a36      	ldr	r2, [pc, #216]	; (80019fc <HAL_ADC_PollForConversion+0x1ac>)
    Conversion_Timeout_CPU_cycles_max = ADC_CLOCK_PRESCALER_RANGE() ;
 8001924:	bf15      	itete	ne
 8001926:	f44f 6ca4 	movne.w	ip, #1312	; 0x520
 800192a:	f04f 0c52 	moveq.w	ip, #82	; 0x52
 800192e:	f44f 58fc 	movne.w	r8, #8064	; 0x1f80
 8001932:	f44f 78fc 	moveq.w	r8, #504	; 0x1f8
 8001936:	bf15      	itete	ne
 8001938:	f44f 6028 	movne.w	r0, #2688	; 0xa80
 800193c:	20a8      	moveq	r0, #168	; 0xa8
 800193e:	f44f 7e20 	movne.w	lr, #640	; 0x280
 8001942:	f04f 0e28 	moveq.w	lr, #40	; 0x28
    Conversion_Timeout_CPU_cycles_max *= ADC_CONVCYCLES_MAX_RANGE(hadc);
 8001946:	4211      	tst	r1, r2
 8001948:	d0d6      	beq.n	80018f8 <HAL_ADC_PollForConversion+0xa8>
 800194a:	6919      	ldr	r1, [r3, #16]
 800194c:	4a2c      	ldr	r2, [pc, #176]	; (8001a00 <HAL_ADC_PollForConversion+0x1b0>)
 800194e:	4211      	tst	r1, r2
 8001950:	d123      	bne.n	800199a <HAL_ADC_PollForConversion+0x14a>
 8001952:	68d9      	ldr	r1, [r3, #12]
 8001954:	f102 426e 	add.w	r2, r2, #3992977408	; 0xee000000
 8001958:	4211      	tst	r1, r2
 800195a:	d11e      	bne.n	800199a <HAL_ADC_PollForConversion+0x14a>
 800195c:	4680      	mov	r8, r0
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800195e:	1c72      	adds	r2, r6, #1
 8001960:	d00a      	beq.n	8001978 <HAL_ADC_PollForConversion+0x128>
 8001962:	b31e      	cbz	r6, 80019ac <HAL_ADC_PollForConversion+0x15c>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001964:	f7ff fe26 	bl	80015b4 <HAL_GetTick>
 8001968:	1bc3      	subs	r3, r0, r7
 800196a:	429e      	cmp	r6, r3
      Conversion_Timeout_CPU_cycles ++;
 800196c:	f104 0401 	add.w	r4, r4, #1
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001970:	d31c      	bcc.n	80019ac <HAL_ADC_PollForConversion+0x15c>
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001972:	45a0      	cmp	r8, r4
 8001974:	d1f6      	bne.n	8001964 <HAL_ADC_PollForConversion+0x114>
 8001976:	682b      	ldr	r3, [r5, #0]
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001978:	461a      	mov	r2, r3
 800197a:	e78e      	b.n	800189a <HAL_ADC_PollForConversion+0x4a>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800197c:	7b28      	ldrb	r0, [r5, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800197e:	2800      	cmp	r0, #0
 8001980:	d198      	bne.n	80018b4 <HAL_ADC_PollForConversion+0x64>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001982:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001984:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001988:	62ab      	str	r3, [r5, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800198a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800198c:	04db      	lsls	r3, r3, #19
 800198e:	d491      	bmi.n	80018b4 <HAL_ADC_PollForConversion+0x64>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001990:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	62ab      	str	r3, [r5, #40]	; 0x28
 8001998:	e76a      	b.n	8001870 <HAL_ADC_PollForConversion+0x20>
    Conversion_Timeout_CPU_cycles_max *= ADC_CONVCYCLES_MAX_RANGE(hadc);
 800199a:	6919      	ldr	r1, [r3, #16]
 800199c:	4a19      	ldr	r2, [pc, #100]	; (8001a04 <HAL_ADC_PollForConversion+0x1b4>)
 800199e:	4211      	tst	r1, r2
 80019a0:	d1dd      	bne.n	800195e <HAL_ADC_PollForConversion+0x10e>
 80019a2:	68d9      	ldr	r1, [r3, #12]
 80019a4:	4211      	tst	r1, r2
 80019a6:	bf08      	it	eq
 80019a8:	4680      	moveq	r8, r0
 80019aa:	e7d8      	b.n	800195e <HAL_ADC_PollForConversion+0x10e>
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019ac:	6aab      	ldr	r3, [r5, #40]	; 0x28
            __HAL_UNLOCK(hadc);
 80019ae:	2200      	movs	r2, #0
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019b0:	f043 0304 	orr.w	r3, r3, #4
            __HAL_UNLOCK(hadc);
 80019b4:	f885 2024 	strb.w	r2, [r5, #36]	; 0x24
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019b8:	62ab      	str	r3, [r5, #40]	; 0x28
            return HAL_TIMEOUT;
 80019ba:	2003      	movs	r0, #3
}
 80019bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80019c0:	6813      	ldr	r3, [r2, #0]
 80019c2:	0799      	lsls	r1, r3, #30
 80019c4:	f53f af69 	bmi.w	800189a <HAL_ADC_PollForConversion+0x4a>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80019c8:	b976      	cbnz	r6, 80019e8 <HAL_ADC_PollForConversion+0x198>
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80019ca:	6813      	ldr	r3, [r2, #0]
 80019cc:	f013 0302 	ands.w	r3, r3, #2
 80019d0:	f47f af5d 	bne.w	800188e <HAL_ADC_PollForConversion+0x3e>
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019d4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
            __HAL_UNLOCK(hadc);
 80019d6:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019da:	f042 0204 	orr.w	r2, r2, #4
 80019de:	62aa      	str	r2, [r5, #40]	; 0x28
            return HAL_TIMEOUT;
 80019e0:	2003      	movs	r0, #3
 80019e2:	e745      	b.n	8001870 <HAL_ADC_PollForConversion+0x20>
 80019e4:	46e0      	mov	r8, ip
 80019e6:	e7ba      	b.n	800195e <HAL_ADC_PollForConversion+0x10e>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80019e8:	f7ff fde4 	bl	80015b4 <HAL_GetTick>
 80019ec:	1bc0      	subs	r0, r0, r7
 80019ee:	42b0      	cmp	r0, r6
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80019f0:	682a      	ldr	r2, [r5, #0]
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80019f2:	f67f af4c 	bls.w	800188e <HAL_ADC_PollForConversion+0x3e>
 80019f6:	e7e8      	b.n	80019ca <HAL_ADC_PollForConversion+0x17a>
 80019f8:	40021000 	.word	0x40021000
 80019fc:	24924924 	.word	0x24924924
 8001a00:	12492492 	.word	0x12492492
 8001a04:	00249249 	.word	0x00249249

08001a08 <HAL_ADC_Start_DMA>:
{
 8001a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hadc);
 8001a0c:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
 8001a10:	2d01      	cmp	r5, #1
 8001a12:	d04d      	beq.n	8001ab0 <HAL_ADC_Start_DMA+0xa8>
 8001a14:	2301      	movs	r3, #1
 8001a16:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8001a1a:	4604      	mov	r4, r0
 8001a1c:	4688      	mov	r8, r1
 8001a1e:	4617      	mov	r7, r2
 8001a20:	f7ff fe1a 	bl	8001658 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8001a24:	4605      	mov	r5, r0
 8001a26:	2800      	cmp	r0, #0
 8001a28:	d13f      	bne.n	8001aaa <HAL_ADC_Start_DMA+0xa2>
    ADC_STATE_CLR_SET(hadc->State,
 8001a2a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a2c:	6826      	ldr	r6, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8001a2e:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001a32:	f020 0001 	bic.w	r0, r0, #1
 8001a36:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8001a3a:	62a0      	str	r0, [r4, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a3c:	6873      	ldr	r3, [r6, #4]
 8001a3e:	055b      	lsls	r3, r3, #21
 8001a40:	d505      	bpl.n	8001a4e <HAL_ADC_Start_DMA+0x46>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a42:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a44:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a4c:	62a3      	str	r3, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a50:	6a20      	ldr	r0, [r4, #32]
 8001a52:	f8df c06c 	ldr.w	ip, [pc, #108]	; 8001ac0 <HAL_ADC_Start_DMA+0xb8>
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a56:	4918      	ldr	r1, [pc, #96]	; (8001ab8 <HAL_ADC_Start_DMA+0xb0>)
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a58:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a5c:	bf1c      	itt	ne
 8001a5e:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
 8001a60:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8001a64:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 8001a66:	f04f 0e00 	mov.w	lr, #0
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a6a:	463b      	mov	r3, r7
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a6c:	4f13      	ldr	r7, [pc, #76]	; (8001abc <HAL_ADC_Start_DMA+0xb4>)
    __HAL_UNLOCK(hadc);
 8001a6e:	f884 e024 	strb.w	lr, [r4, #36]	; 0x24
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a72:	6301      	str	r1, [r0, #48]	; 0x30
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001a74:	f06f 0102 	mvn.w	r1, #2
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a78:	e9c0 c70a 	strd	ip, r7, [r0, #40]	; 0x28
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001a7c:	6031      	str	r1, [r6, #0]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001a7e:	68b1      	ldr	r1, [r6, #8]
 8001a80:	f441 7180 	orr.w	r1, r1, #256	; 0x100
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a84:	4642      	mov	r2, r8
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001a86:	60b1      	str	r1, [r6, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a88:	f106 014c 	add.w	r1, r6, #76	; 0x4c
 8001a8c:	f000 f954 	bl	8001d38 <HAL_DMA_Start_IT>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001a90:	6822      	ldr	r2, [r4, #0]
 8001a92:	6893      	ldr	r3, [r2, #8]
 8001a94:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001a98:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001a9c:	6893      	ldr	r3, [r2, #8]
 8001a9e:	bf0c      	ite	eq
 8001aa0:	f443 03a0 	orreq.w	r3, r3, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001aa4:	f443 1380 	orrne.w	r3, r3, #1048576	; 0x100000
 8001aa8:	6093      	str	r3, [r2, #8]
}
 8001aaa:	4628      	mov	r0, r5
 8001aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hadc);
 8001ab0:	2502      	movs	r5, #2
}
 8001ab2:	4628      	mov	r0, r5
 8001ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ab8:	080015ed 	.word	0x080015ed
 8001abc:	08001605 	.word	0x08001605
 8001ac0:	0800160d 	.word	0x0800160d

08001ac4 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8001ac4:	6803      	ldr	r3, [r0, #0]
 8001ac6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop

08001acc <HAL_ADC_ConfigChannel>:
{ 
 8001acc:	b430      	push	{r4, r5}
  __HAL_LOCK(hadc);
 8001ace:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{ 
 8001ad2:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8001ad4:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8001ad6:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0U;
 8001ad8:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001ada:	f000 8081 	beq.w	8001be0 <HAL_ADC_ConfigChannel+0x114>
 8001ade:	2301      	movs	r3, #1
 8001ae0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8001ae4:	684b      	ldr	r3, [r1, #4]
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001ae6:	6804      	ldr	r4, [r0, #0]
  if (sConfig->Rank < 7U)
 8001ae8:	2b06      	cmp	r3, #6
 8001aea:	d925      	bls.n	8001b38 <HAL_ADC_ConfigChannel+0x6c>
  else if (sConfig->Rank < 13U)
 8001aec:	2b0c      	cmp	r3, #12
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001aee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  else if (sConfig->Rank < 13U)
 8001af2:	d85f      	bhi.n	8001bb4 <HAL_ADC_ConfigChannel+0xe8>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001af4:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8001af6:	680a      	ldr	r2, [r1, #0]
 8001af8:	3b23      	subs	r3, #35	; 0x23
 8001afa:	f04f 0c1f 	mov.w	ip, #31
 8001afe:	fa0c fc03 	lsl.w	ip, ip, r3
 8001b02:	ea25 050c 	bic.w	r5, r5, ip
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	432b      	orrs	r3, r5
 8001b0c:	6323      	str	r3, [r4, #48]	; 0x30
  if (sConfig->Channel > ADC_CHANNEL_10)
 8001b0e:	2a0a      	cmp	r2, #10
 8001b10:	d824      	bhi.n	8001b5c <HAL_ADC_ConfigChannel+0x90>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b12:	6889      	ldr	r1, [r1, #8]
 8001b14:	6923      	ldr	r3, [r4, #16]
 8001b16:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001b1a:	2507      	movs	r5, #7
 8001b1c:	4091      	lsls	r1, r2
 8001b1e:	fa05 f202 	lsl.w	r2, r5, r2
 8001b22:	ea23 0302 	bic.w	r3, r3, r2
 8001b26:	430b      	orrs	r3, r1
 8001b28:	6123      	str	r3, [r4, #16]
  __HAL_UNLOCK(hadc);
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  return tmp_hal_status;
 8001b30:	4618      	mov	r0, r3
}
 8001b32:	b002      	add	sp, #8
 8001b34:	bc30      	pop	{r4, r5}
 8001b36:	4770      	bx	lr
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b38:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001b3c:	680a      	ldr	r2, [r1, #0]
 8001b3e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8001b40:	3b05      	subs	r3, #5
 8001b42:	f04f 0c1f 	mov.w	ip, #31
 8001b46:	fa0c fc03 	lsl.w	ip, ip, r3
 8001b4a:	ea25 0c0c 	bic.w	ip, r5, ip
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	ea4c 0303 	orr.w	r3, ip, r3
  if (sConfig->Channel > ADC_CHANNEL_10)
 8001b56:	2a0a      	cmp	r2, #10
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b58:	6363      	str	r3, [r4, #52]	; 0x34
  if (sConfig->Channel > ADC_CHANNEL_10)
 8001b5a:	d9da      	bls.n	8001b12 <HAL_ADC_ConfigChannel+0x46>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b5c:	688d      	ldr	r5, [r1, #8]
 8001b5e:	68e3      	ldr	r3, [r4, #12]
 8001b60:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8001b64:	391e      	subs	r1, #30
 8001b66:	f04f 0c07 	mov.w	ip, #7
 8001b6a:	408d      	lsls	r5, r1
 8001b6c:	fa0c f101 	lsl.w	r1, ip, r1
 8001b70:	ea23 0301 	bic.w	r3, r3, r1
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b74:	f1a2 0110 	sub.w	r1, r2, #16
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b78:	432b      	orrs	r3, r5
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b7a:	2901      	cmp	r1, #1
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b7c:	60e3      	str	r3, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b7e:	d827      	bhi.n	8001bd0 <HAL_ADC_ConfigChannel+0x104>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001b80:	68a3      	ldr	r3, [r4, #8]
    if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001b82:	2a10      	cmp	r2, #16
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001b84:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b88:	60a3      	str	r3, [r4, #8]
    if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001b8a:	d1ce      	bne.n	8001b2a <HAL_ADC_ConfigChannel+0x5e>
      wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b8c:	4b16      	ldr	r3, [pc, #88]	; (8001be8 <HAL_ADC_ConfigChannel+0x11c>)
 8001b8e:	4a17      	ldr	r2, [pc, #92]	; (8001bec <HAL_ADC_ConfigChannel+0x120>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	fba2 2303 	umull	r2, r3, r2, r3
 8001b96:	0c9b      	lsrs	r3, r3, #18
 8001b98:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0U)
 8001ba0:	9b01      	ldr	r3, [sp, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d0c1      	beq.n	8001b2a <HAL_ADC_ConfigChannel+0x5e>
        wait_loop_index--;
 8001ba6:	9b01      	ldr	r3, [sp, #4]
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0U)
 8001bac:	9b01      	ldr	r3, [sp, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f9      	bne.n	8001ba6 <HAL_ADC_ConfigChannel+0xda>
 8001bb2:	e7ba      	b.n	8001b2a <HAL_ADC_ConfigChannel+0x5e>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001bb4:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8001bb6:	680a      	ldr	r2, [r1, #0]
 8001bb8:	3b41      	subs	r3, #65	; 0x41
 8001bba:	f04f 0c1f 	mov.w	ip, #31
 8001bbe:	fa0c fc03 	lsl.w	ip, ip, r3
 8001bc2:	ea25 050c 	bic.w	r5, r5, ip
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	432b      	orrs	r3, r5
 8001bcc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001bce:	e79e      	b.n	8001b0e <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8001bd0:	2a12      	cmp	r2, #18
 8001bd2:	d1aa      	bne.n	8001b2a <HAL_ADC_ConfigChannel+0x5e>
    SET_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_VBAT);
 8001bd4:	4a06      	ldr	r2, [pc, #24]	; (8001bf0 <HAL_ADC_ConfigChannel+0x124>)
 8001bd6:	6813      	ldr	r3, [r2, #0]
 8001bd8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bdc:	6013      	str	r3, [r2, #0]
 8001bde:	e7a4      	b.n	8001b2a <HAL_ADC_ConfigChannel+0x5e>
  __HAL_LOCK(hadc);
 8001be0:	2002      	movs	r0, #2
}
 8001be2:	b002      	add	sp, #8
 8001be4:	bc30      	pop	{r4, r5}
 8001be6:	4770      	bx	lr
 8001be8:	20000000 	.word	0x20000000
 8001bec:	431bde83 	.word	0x431bde83
 8001bf0:	40010000 	.word	0x40010000

08001bf4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bf4:	4907      	ldr	r1, [pc, #28]	; (8001c14 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001bf6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bf8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bfa:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bfe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c02:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c04:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c06:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001c0e:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c18:	4b1c      	ldr	r3, [pc, #112]	; (8001c8c <HAL_NVIC_SetPriority+0x74>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c20:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c22:	f1c3 0e07 	rsb	lr, r3, #7
 8001c26:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c2a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c2e:	bf28      	it	cs
 8001c30:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c34:	f1bc 0f06 	cmp.w	ip, #6
 8001c38:	d91b      	bls.n	8001c72 <HAL_NVIC_SetPriority+0x5a>
 8001c3a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c3c:	f04f 3cff 	mov.w	ip, #4294967295
 8001c40:	fa0c fc03 	lsl.w	ip, ip, r3
 8001c44:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c48:	f04f 3cff 	mov.w	ip, #4294967295
 8001c4c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001c50:	ea21 010c 	bic.w	r1, r1, ip
 8001c54:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001c56:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c58:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001c5c:	db0c      	blt.n	8001c78 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001c62:	0109      	lsls	r1, r1, #4
 8001c64:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001c68:	b2c9      	uxtb	r1, r1
 8001c6a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001c6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c72:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c74:	4613      	mov	r3, r2
 8001c76:	e7e7      	b.n	8001c48 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c78:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <HAL_NVIC_SetPriority+0x78>)
 8001c7a:	f000 000f 	and.w	r0, r0, #15
 8001c7e:	0109      	lsls	r1, r1, #4
 8001c80:	4403      	add	r3, r0
 8001c82:	b2c9      	uxtb	r1, r1
 8001c84:	7619      	strb	r1, [r3, #24]
 8001c86:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c8a:	bf00      	nop
 8001c8c:	e000ed00 	.word	0xe000ed00
 8001c90:	e000ecfc 	.word	0xe000ecfc

08001c94 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001c94:	2800      	cmp	r0, #0
 8001c96:	db07      	blt.n	8001ca8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c98:	0941      	lsrs	r1, r0, #5
 8001c9a:	4a04      	ldr	r2, [pc, #16]	; (8001cac <HAL_NVIC_EnableIRQ+0x18>)
 8001c9c:	f000 001f 	and.w	r0, r0, #31
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	4083      	lsls	r3, r0
 8001ca4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	e000e100 	.word	0xe000e100

08001cb0 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001cb0:	2800      	cmp	r0, #0
 8001cb2:	d035      	beq.n	8001d20 <HAL_DMA_Init+0x70>
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001cb4:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
{ 
 8001cb8:	b410      	push	{r4}
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cba:	68c4      	ldr	r4, [r0, #12]
  tmp = hdma->Instance->CCR;
 8001cbc:	6801      	ldr	r1, [r0, #0]
  tmp |=  hdma->Init.Direction        |
 8001cbe:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cc0:	6902      	ldr	r2, [r0, #16]
 8001cc2:	4323      	orrs	r3, r4
 8001cc4:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cc6:	e9d0 4205 	ldrd	r4, r2, [r0, #20]
 8001cca:	4323      	orrs	r3, r4
 8001ccc:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cce:	69c2      	ldr	r2, [r0, #28]
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001cd0:	4c14      	ldr	r4, [pc, #80]	; (8001d24 <HAL_DMA_Init+0x74>)
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cd2:	4313      	orrs	r3, r2
  tmp = hdma->Instance->CCR;
 8001cd4:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001cd6:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8001cda:	f022 0230 	bic.w	r2, r2, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8001cde:	4313      	orrs	r3, r2
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001ce0:	42a1      	cmp	r1, r4
  hdma->Instance->CCR = tmp;  
 8001ce2:	600b      	str	r3, [r1, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001ce4:	d912      	bls.n	8001d0c <HAL_DMA_Init+0x5c>
    hdma->DmaBaseAddress = DMA1;
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001ce6:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <HAL_DMA_Init+0x78>)
 8001ce8:	4a10      	ldr	r2, [pc, #64]	; (8001d2c <HAL_DMA_Init+0x7c>)
    hdma->DmaBaseAddress = DMA2;
 8001cea:	4c11      	ldr	r4, [pc, #68]	; (8001d30 <HAL_DMA_Init+0x80>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001cec:	440b      	add	r3, r1
 8001cee:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf2:	091b      	lsrs	r3, r3, #4
 8001cf4:	009b      	lsls	r3, r3, #2
  hdma->Lock = HAL_UNLOCKED;
 8001cf6:	f44f 7180 	mov.w	r1, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cfa:	2200      	movs	r2, #0
  hdma->Lock = HAL_UNLOCKED;
 8001cfc:	8401      	strh	r1, [r0, #32]
 8001cfe:	e9c0 430f 	strd	r4, r3, [r0, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d02:	6382      	str	r2, [r0, #56]	; 0x38
}  
 8001d04:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 8001d08:	4610      	mov	r0, r2
}  
 8001d0a:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001d0c:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <HAL_DMA_Init+0x84>)
 8001d0e:	4a07      	ldr	r2, [pc, #28]	; (8001d2c <HAL_DMA_Init+0x7c>)
 8001d10:	440b      	add	r3, r1
 8001d12:	fba2 2303 	umull	r2, r3, r2, r3
 8001d16:	091b      	lsrs	r3, r3, #4
    hdma->DmaBaseAddress = DMA1;
 8001d18:	f2a4 4407 	subw	r4, r4, #1031	; 0x407
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001d1c:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 8001d1e:	e7ea      	b.n	8001cf6 <HAL_DMA_Init+0x46>
    return HAL_ERROR;
 8001d20:	2001      	movs	r0, #1
}  
 8001d22:	4770      	bx	lr
 8001d24:	40020407 	.word	0x40020407
 8001d28:	bffdfbf8 	.word	0xbffdfbf8
 8001d2c:	cccccccd 	.word	0xcccccccd
 8001d30:	40020400 	.word	0x40020400
 8001d34:	bffdfff8 	.word	0xbffdfff8

08001d38 <HAL_DMA_Start_IT>:
{
 8001d38:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 8001d3a:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001d3e:	2c01      	cmp	r4, #1
 8001d40:	d039      	beq.n	8001db6 <HAL_DMA_Start_IT+0x7e>
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d42:	f890 c021 	ldrb.w	ip, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8001d46:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d48:	45a4      	cmp	ip, r4
  __HAL_LOCK(hdma);
 8001d4a:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d4e:	d005      	beq.n	8001d5c <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma); 
 8001d50:	2300      	movs	r3, #0
 8001d52:	f880 3020 	strb.w	r3, [r0, #32]
} 
 8001d56:	bc70      	pop	{r4, r5, r6}
    status = HAL_BUSY;
 8001d58:	2002      	movs	r0, #2
} 
 8001d5a:	4770      	bx	lr
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001d5c:	2502      	movs	r5, #2
 8001d5e:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001d62:	6804      	ldr	r4, [r0, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001d64:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d66:	2500      	movs	r5, #0
 8001d68:	6385      	str	r5, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001d6a:	6825      	ldr	r5, [r4, #0]
 8001d6c:	f025 0501 	bic.w	r5, r5, #1
 8001d70:	6025      	str	r5, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001d72:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8001d74:	fa0c f505 	lsl.w	r5, ip, r5
 8001d78:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8001d7a:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d7c:	6843      	ldr	r3, [r0, #4]
 8001d7e:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8001d80:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = DstAddress;
 8001d82:	bf0b      	itete	eq
 8001d84:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8001d86:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001d88:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8001d8a:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8001d8c:	b153      	cbz	r3, 8001da4 <HAL_DMA_Start_IT+0x6c>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001d8e:	6823      	ldr	r3, [r4, #0]
 8001d90:	f043 030e 	orr.w	r3, r3, #14
 8001d94:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001d96:	6823      	ldr	r3, [r4, #0]
 8001d98:	f043 0301 	orr.w	r3, r3, #1
	HAL_StatusTypeDef status = HAL_OK;
 8001d9c:	2000      	movs	r0, #0
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001d9e:	6023      	str	r3, [r4, #0]
} 
 8001da0:	bc70      	pop	{r4, r5, r6}
 8001da2:	4770      	bx	lr
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001da4:	6823      	ldr	r3, [r4, #0]
 8001da6:	f043 030a 	orr.w	r3, r3, #10
 8001daa:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001dac:	6823      	ldr	r3, [r4, #0]
 8001dae:	f023 0304 	bic.w	r3, r3, #4
 8001db2:	6023      	str	r3, [r4, #0]
 8001db4:	e7ef      	b.n	8001d96 <HAL_DMA_Start_IT+0x5e>
  __HAL_LOCK(hdma);
 8001db6:	2002      	movs	r0, #2
} 
 8001db8:	bc70      	pop	{r4, r5, r6}
 8001dba:	4770      	bx	lr

08001dbc <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dbc:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8001dc0:	2a02      	cmp	r2, #2
{
 8001dc2:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dc4:	d006      	beq.n	8001dd4 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dc6:	2204      	movs	r2, #4
 8001dc8:	6382      	str	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8001dca:	2200      	movs	r2, #0
    return HAL_ERROR;
 8001dcc:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8001dce:	f883 2020 	strb.w	r2, [r3, #32]
}
 8001dd2:	4770      	bx	lr
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001dd4:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001dd6:	6c01      	ldr	r1, [r0, #64]	; 0x40
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001dd8:	6810      	ldr	r0, [r2, #0]
 8001dda:	f020 000e 	bic.w	r0, r0, #14
 8001dde:	6010      	str	r0, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001de0:	6810      	ldr	r0, [r2, #0]
 8001de2:	f020 0001 	bic.w	r0, r0, #1
 8001de6:	6010      	str	r0, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001de8:	f04f 0c01 	mov.w	ip, #1
 8001dec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001dee:	fa0c f101 	lsl.w	r1, ip, r1
 8001df2:	6051      	str	r1, [r2, #4]
    __HAL_UNLOCK(hdma);
 8001df4:	2200      	movs	r2, #0
  return HAL_OK;
 8001df6:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY; 
 8001df8:	f883 c021 	strb.w	ip, [r3, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001dfc:	f883 2020 	strb.w	r2, [r3, #32]
}
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop

08001e04 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e04:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8001e08:	2a02      	cmp	r2, #2
 8001e0a:	d003      	beq.n	8001e14 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e0c:	2204      	movs	r2, #4
 8001e0e:	6382      	str	r2, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8001e10:	2001      	movs	r0, #1
}
 8001e12:	4770      	bx	lr
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e14:	6802      	ldr	r2, [r0, #0]
 8001e16:	6811      	ldr	r1, [r2, #0]
 8001e18:	f021 010e 	bic.w	r1, r1, #14
{  
 8001e1c:	b510      	push	{r4, lr}
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001e1e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e20:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001e22:	6811      	ldr	r1, [r2, #0]
 8001e24:	f021 0101 	bic.w	r1, r1, #1
 8001e28:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001e2a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	4091      	lsls	r1, r2
    if(hdma->XferAbortCallback != NULL)
 8001e30:	6b42      	ldr	r2, [r0, #52]	; 0x34
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001e32:	6061      	str	r1, [r4, #4]
    __HAL_UNLOCK(hdma);
 8001e34:	f44f 7c80 	mov.w	ip, #256	; 0x100
 8001e38:	f8a0 c020 	strh.w	ip, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001e3c:	b112      	cbz	r2, 8001e44 <HAL_DMA_Abort_IT+0x40>
      hdma->XferAbortCallback(hdma);
 8001e3e:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8001e40:	2000      	movs	r0, #0
}
 8001e42:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8001e44:	4610      	mov	r0, r2
}
 8001e46:	bd10      	pop	{r4, pc}

08001e48 <HAL_DMA_IRQHandler>:
{
 8001e48:	b470      	push	{r4, r5, r6}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e4a:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001e4c:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e4e:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001e50:	6804      	ldr	r4, [r0, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001e52:	2304      	movs	r3, #4
 8001e54:	4093      	lsls	r3, r2
 8001e56:	420b      	tst	r3, r1
  uint32_t source_it = hdma->Instance->CCR;
 8001e58:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001e5a:	d00e      	beq.n	8001e7a <HAL_DMA_IRQHandler+0x32>
 8001e5c:	f015 0f04 	tst.w	r5, #4
 8001e60:	d00b      	beq.n	8001e7a <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e62:	6822      	ldr	r2, [r4, #0]
 8001e64:	0692      	lsls	r2, r2, #26
 8001e66:	d403      	bmi.n	8001e70 <HAL_DMA_IRQHandler+0x28>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001e68:	6822      	ldr	r2, [r4, #0]
 8001e6a:	f022 0204 	bic.w	r2, r2, #4
 8001e6e:	6022      	str	r2, [r4, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8001e70:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001e72:	6073      	str	r3, [r6, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8001e74:	b1ca      	cbz	r2, 8001eaa <HAL_DMA_IRQHandler+0x62>
}  
 8001e76:	bc70      	pop	{r4, r5, r6}
  		hdma->XferCpltCallback(hdma);
 8001e78:	4710      	bx	r2
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	4093      	lsls	r3, r2
 8001e7e:	420b      	tst	r3, r1
 8001e80:	d015      	beq.n	8001eae <HAL_DMA_IRQHandler+0x66>
 8001e82:	f015 0f02 	tst.w	r5, #2
 8001e86:	d012      	beq.n	8001eae <HAL_DMA_IRQHandler+0x66>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e88:	6822      	ldr	r2, [r4, #0]
 8001e8a:	0692      	lsls	r2, r2, #26
 8001e8c:	d406      	bmi.n	8001e9c <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001e8e:	6822      	ldr	r2, [r4, #0]
 8001e90:	f022 020a 	bic.w	r2, r2, #10
 8001e94:	6022      	str	r2, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8001e96:	2201      	movs	r2, #1
 8001e98:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  	if(hdma->XferCpltCallback != NULL)
 8001e9c:	6a82      	ldr	r2, [r0, #40]	; 0x28
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001e9e:	6073      	str	r3, [r6, #4]
  	__HAL_UNLOCK(hdma);
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	f880 1020 	strb.w	r1, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 8001ea6:	2a00      	cmp	r2, #0
 8001ea8:	d1e5      	bne.n	8001e76 <HAL_DMA_IRQHandler+0x2e>
}  
 8001eaa:	bc70      	pop	{r4, r5, r6}
 8001eac:	4770      	bx	lr
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001eae:	2308      	movs	r3, #8
 8001eb0:	4093      	lsls	r3, r2
 8001eb2:	420b      	tst	r3, r1
 8001eb4:	d0f9      	beq.n	8001eaa <HAL_DMA_IRQHandler+0x62>
 8001eb6:	072b      	lsls	r3, r5, #28
 8001eb8:	d5f7      	bpl.n	8001eaa <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001eba:	6823      	ldr	r3, [r4, #0]
    if(hdma->XferErrorCallback != NULL)
 8001ebc:	6b01      	ldr	r1, [r0, #48]	; 0x30
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001ebe:	f023 030e 	bic.w	r3, r3, #14
 8001ec2:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	fa03 f202 	lsl.w	r2, r3, r2
    __HAL_UNLOCK(hdma); 
 8001eca:	f44f 7480 	mov.w	r4, #256	; 0x100
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001ece:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma); 
 8001ed0:	8404      	strh	r4, [r0, #32]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ed2:	6383      	str	r3, [r0, #56]	; 0x38
    if(hdma->XferErrorCallback != NULL)
 8001ed4:	2900      	cmp	r1, #0
 8001ed6:	d0e8      	beq.n	8001eaa <HAL_DMA_IRQHandler+0x62>
}  
 8001ed8:	bc70      	pop	{r4, r5, r6}
    	hdma->XferErrorCallback(hdma);
 8001eda:	4708      	bx	r1

08001edc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ee0:	680c      	ldr	r4, [r1, #0]
{
 8001ee2:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ee4:	2c00      	cmp	r4, #0
 8001ee6:	d077      	beq.n	8001fd8 <HAL_GPIO_Init+0xfc>
 8001ee8:	f04f 0c00 	mov.w	ip, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eec:	4e69      	ldr	r6, [pc, #420]	; (8002094 <HAL_GPIO_Init+0x1b8>)
  uint32_t position = 0x00u;
 8001eee:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ef0:	f04f 0b01 	mov.w	fp, #1
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ef4:	468e      	mov	lr, r1
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ef6:	fa0b f703 	lsl.w	r7, fp, r3
    if (iocurrent != 0x00u)
 8001efa:	ea17 0a04 	ands.w	sl, r7, r4
 8001efe:	d065      	beq.n	8001fcc <HAL_GPIO_Init+0xf0>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f00:	f8de 1004 	ldr.w	r1, [lr, #4]
 8001f04:	f001 0203 	and.w	r2, r1, #3
 8001f08:	1e55      	subs	r5, r2, #1
 8001f0a:	2d01      	cmp	r5, #1
 8001f0c:	d967      	bls.n	8001fde <HAL_GPIO_Init+0x102>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f0e:	2a03      	cmp	r2, #3
 8001f10:	f040 80ab 	bne.w	800206a <HAL_GPIO_Init+0x18e>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f14:	fa02 f20c 	lsl.w	r2, r2, ip
 8001f18:	43d5      	mvns	r5, r2
      temp = GPIOx->MODER;
 8001f1a:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001f1c:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f1e:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f20:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      GPIOx->MODER = temp;
 8001f24:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f26:	d051      	beq.n	8001fcc <HAL_GPIO_Init+0xf0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f28:	4d5b      	ldr	r5, [pc, #364]	; (8002098 <HAL_GPIO_Init+0x1bc>)
 8001f2a:	69aa      	ldr	r2, [r5, #24]
 8001f2c:	f042 0201 	orr.w	r2, r2, #1
 8001f30:	61aa      	str	r2, [r5, #24]
 8001f32:	69aa      	ldr	r2, [r5, #24]
 8001f34:	f002 0201 	and.w	r2, r2, #1
 8001f38:	9203      	str	r2, [sp, #12]
 8001f3a:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001f3c:	f023 0203 	bic.w	r2, r3, #3
 8001f40:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001f44:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f48:	f003 0503 	and.w	r5, r3, #3
 8001f4c:	ea4f 0985 	mov.w	r9, r5, lsl #2
        temp = SYSCFG->EXTICR[position >> 2u];
 8001f50:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f52:	250f      	movs	r5, #15
 8001f54:	fa05 f809 	lsl.w	r8, r5, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f58:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f5c:	ea27 0708 	bic.w	r7, r7, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f60:	d015      	beq.n	8001f8e <HAL_GPIO_Init+0xb2>
 8001f62:	4d4e      	ldr	r5, [pc, #312]	; (800209c <HAL_GPIO_Init+0x1c0>)
 8001f64:	42a8      	cmp	r0, r5
 8001f66:	f000 808b 	beq.w	8002080 <HAL_GPIO_Init+0x1a4>
 8001f6a:	4d4d      	ldr	r5, [pc, #308]	; (80020a0 <HAL_GPIO_Init+0x1c4>)
 8001f6c:	42a8      	cmp	r0, r5
 8001f6e:	f000 808b 	beq.w	8002088 <HAL_GPIO_Init+0x1ac>
 8001f72:	4d4c      	ldr	r5, [pc, #304]	; (80020a4 <HAL_GPIO_Init+0x1c8>)
 8001f74:	42a8      	cmp	r0, r5
 8001f76:	d07d      	beq.n	8002074 <HAL_GPIO_Init+0x198>
 8001f78:	4d4b      	ldr	r5, [pc, #300]	; (80020a8 <HAL_GPIO_Init+0x1cc>)
 8001f7a:	42a8      	cmp	r0, r5
 8001f7c:	bf13      	iteet	ne
 8001f7e:	2505      	movne	r5, #5
 8001f80:	f04f 0804 	moveq.w	r8, #4
 8001f84:	fa08 f509 	lsleq.w	r5, r8, r9
 8001f88:	fa05 f509 	lslne.w	r5, r5, r9
 8001f8c:	432f      	orrs	r7, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f8e:	6097      	str	r7, [r2, #8]
        temp = EXTI->RTSR;
 8001f90:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(iocurrent);
 8001f92:	ea6f 050a 	mvn.w	r5, sl
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f96:	02cf      	lsls	r7, r1, #11
        temp &= ~(iocurrent);
 8001f98:	bf54      	ite	pl
 8001f9a:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8001f9c:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->RTSR = temp;
 8001fa0:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 8001fa2:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fa4:	028f      	lsls	r7, r1, #10
        temp &= ~(iocurrent);
 8001fa6:	bf54      	ite	pl
 8001fa8:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8001faa:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR = temp;
 8001fae:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR;
 8001fb0:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fb2:	038f      	lsls	r7, r1, #14
        temp &= ~(iocurrent);
 8001fb4:	bf54      	ite	pl
 8001fb6:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8001fb8:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->EMR = temp;
 8001fbc:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fbe:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fc0:	03c9      	lsls	r1, r1, #15
        temp &= ~(iocurrent);
 8001fc2:	bf54      	ite	pl
 8001fc4:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8001fc6:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->IMR = temp;
 8001fca:	6032      	str	r2, [r6, #0]
      }
    }

    position++;
 8001fcc:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fce:	fa34 f203 	lsrs.w	r2, r4, r3
 8001fd2:	f10c 0c02 	add.w	ip, ip, #2
 8001fd6:	d18e      	bne.n	8001ef6 <HAL_GPIO_Init+0x1a>
  }
}
 8001fd8:	b005      	add	sp, #20
 8001fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8001fde:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fe2:	f8de 500c 	ldr.w	r5, [lr, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001fe6:	f04f 0803 	mov.w	r8, #3
 8001fea:	fa08 f80c 	lsl.w	r8, r8, ip
 8001fee:	ea29 0908 	bic.w	r9, r9, r8
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ff2:	fa05 f50c 	lsl.w	r5, r5, ip
 8001ff6:	ea45 0509 	orr.w	r5, r5, r9
        GPIOx->OSPEEDR = temp;
 8001ffa:	6085      	str	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001ffc:	ea6f 0508 	mvn.w	r5, r8
        temp = GPIOx->OTYPER;
 8002000:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002004:	ea28 0807 	bic.w	r8, r8, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002008:	f3c1 1700 	ubfx	r7, r1, #4, #1
 800200c:	409f      	lsls	r7, r3
 800200e:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8002012:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8002014:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002016:	ea07 0805 	and.w	r8, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800201a:	f8de 7008 	ldr.w	r7, [lr, #8]
 800201e:	fa07 f70c 	lsl.w	r7, r7, ip
 8002022:	ea47 0708 	orr.w	r7, r7, r8
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002026:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8002028:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800202a:	fa02 f20c 	lsl.w	r2, r2, ip
 800202e:	f47f af74 	bne.w	8001f1a <HAL_GPIO_Init+0x3e>
        temp = GPIOx->AFR[position >> 3u];
 8002032:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8002036:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800203a:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 800203e:	f8d9 7020 	ldr.w	r7, [r9, #32]
 8002042:	9700      	str	r7, [sp, #0]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002044:	f8de 7010 	ldr.w	r7, [lr, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002048:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800204c:	fa07 f708 	lsl.w	r7, r7, r8
 8002050:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002052:	270f      	movs	r7, #15
 8002054:	fa07 f808 	lsl.w	r8, r7, r8
 8002058:	9f00      	ldr	r7, [sp, #0]
 800205a:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800205e:	9f01      	ldr	r7, [sp, #4]
 8002060:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3u] = temp;
 8002064:	f8c9 7020 	str.w	r7, [r9, #32]
 8002068:	e757      	b.n	8001f1a <HAL_GPIO_Init+0x3e>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800206a:	2503      	movs	r5, #3
 800206c:	fa05 f50c 	lsl.w	r5, r5, ip
 8002070:	43ed      	mvns	r5, r5
 8002072:	e7cf      	b.n	8002014 <HAL_GPIO_Init+0x138>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002074:	f04f 0803 	mov.w	r8, #3
 8002078:	fa08 f509 	lsl.w	r5, r8, r9
 800207c:	432f      	orrs	r7, r5
 800207e:	e786      	b.n	8001f8e <HAL_GPIO_Init+0xb2>
 8002080:	fa0b f509 	lsl.w	r5, fp, r9
 8002084:	432f      	orrs	r7, r5
 8002086:	e782      	b.n	8001f8e <HAL_GPIO_Init+0xb2>
 8002088:	f04f 0802 	mov.w	r8, #2
 800208c:	fa08 f509 	lsl.w	r5, r8, r9
 8002090:	432f      	orrs	r7, r5
 8002092:	e77c      	b.n	8001f8e <HAL_GPIO_Init+0xb2>
 8002094:	40010400 	.word	0x40010400
 8002098:	40021000 	.word	0x40021000
 800209c:	48000400 	.word	0x48000400
 80020a0:	48000800 	.word	0x48000800
 80020a4:	48000c00 	.word	0x48000c00
 80020a8:	48001000 	.word	0x48001000

080020ac <HAL_PWREx_EnableSDADC>:
{
  /* Check the parameters */
  assert_param(IS_PWR_SDADC_ANALOG(Analogx));

  /* Enable PWR clock interface for SDADC use */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020ac:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <HAL_PWREx_EnableSDADC+0x24>)
    
  PWR->CR |= Analogx;
 80020ae:	4909      	ldr	r1, [pc, #36]	; (80020d4 <HAL_PWREx_EnableSDADC+0x28>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80020b0:	69da      	ldr	r2, [r3, #28]
 80020b2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80020b6:	61da      	str	r2, [r3, #28]
 80020b8:	69db      	ldr	r3, [r3, #28]
{
 80020ba:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 80020bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c0:	9301      	str	r3, [sp, #4]
 80020c2:	9b01      	ldr	r3, [sp, #4]
  PWR->CR |= Analogx;
 80020c4:	680b      	ldr	r3, [r1, #0]
 80020c6:	4318      	orrs	r0, r3
 80020c8:	6008      	str	r0, [r1, #0]
}
 80020ca:	b002      	add	sp, #8
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	40021000 	.word	0x40021000
 80020d4:	40007000 	.word	0x40007000

080020d8 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020d8:	2800      	cmp	r0, #0
 80020da:	f000 8270 	beq.w	80025be <HAL_RCC_OscConfig+0x4e6>
{
 80020de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020e2:	6803      	ldr	r3, [r0, #0]
 80020e4:	07d9      	lsls	r1, r3, #31
{
 80020e6:	b083      	sub	sp, #12
 80020e8:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ea:	d54d      	bpl.n	8002188 <HAL_RCC_OscConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80020ec:	49ae      	ldr	r1, [pc, #696]	; (80023a8 <HAL_RCC_OscConfig+0x2d0>)
 80020ee:	684a      	ldr	r2, [r1, #4]
 80020f0:	f002 020c 	and.w	r2, r2, #12
 80020f4:	2a04      	cmp	r2, #4
 80020f6:	f000 8161 	beq.w	80023bc <HAL_RCC_OscConfig+0x2e4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020fa:	684a      	ldr	r2, [r1, #4]
 80020fc:	f002 020c 	and.w	r2, r2, #12
 8002100:	2a08      	cmp	r2, #8
 8002102:	f000 8157 	beq.w	80023b4 <HAL_RCC_OscConfig+0x2dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002106:	6863      	ldr	r3, [r4, #4]
 8002108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800210c:	d017      	beq.n	800213e <HAL_RCC_OscConfig+0x66>
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 818e 	beq.w	8002430 <HAL_RCC_OscConfig+0x358>
 8002114:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002118:	f000 823c 	beq.w	8002594 <HAL_RCC_OscConfig+0x4bc>
 800211c:	4ba2      	ldr	r3, [pc, #648]	; (80023a8 <HAL_RCC_OscConfig+0x2d0>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800212c:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800212e:	4a9e      	ldr	r2, [pc, #632]	; (80023a8 <HAL_RCC_OscConfig+0x2d0>)
 8002130:	68a1      	ldr	r1, [r4, #8]
 8002132:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002134:	f023 030f 	bic.w	r3, r3, #15
 8002138:	430b      	orrs	r3, r1
 800213a:	62d3      	str	r3, [r2, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800213c:	e00a      	b.n	8002154 <HAL_RCC_OscConfig+0x7c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800213e:	4a9a      	ldr	r2, [pc, #616]	; (80023a8 <HAL_RCC_OscConfig+0x2d0>)
 8002140:	6813      	ldr	r3, [r2, #0]
 8002142:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002146:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002148:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800214a:	68a1      	ldr	r1, [r4, #8]
 800214c:	f023 030f 	bic.w	r3, r3, #15
 8002150:	430b      	orrs	r3, r1
 8002152:	62d3      	str	r3, [r2, #44]	; 0x2c
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002154:	f7ff fa2e 	bl	80015b4 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002158:	4f93      	ldr	r7, [pc, #588]	; (80023a8 <HAL_RCC_OscConfig+0x2d0>)
        tickstart = HAL_GetTick();
 800215a:	4605      	mov	r5, r0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215c:	f44f 3800 	mov.w	r8, #131072	; 0x20000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002160:	2601      	movs	r6, #1
 8002162:	e005      	b.n	8002170 <HAL_RCC_OscConfig+0x98>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002164:	f7ff fa26 	bl	80015b4 <HAL_GetTick>
 8002168:	1b40      	subs	r0, r0, r5
 800216a:	2864      	cmp	r0, #100	; 0x64
 800216c:	f200 815c 	bhi.w	8002428 <HAL_RCC_OscConfig+0x350>
 8002170:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	fa98 f3a8 	rbit	r3, r8
 800217a:	fab3 f383 	clz	r3, r3
 800217e:	fa06 f303 	lsl.w	r3, r6, r3
 8002182:	4213      	tst	r3, r2
 8002184:	d0ee      	beq.n	8002164 <HAL_RCC_OscConfig+0x8c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002186:	6823      	ldr	r3, [r4, #0]
 8002188:	079f      	lsls	r7, r3, #30
 800218a:	d53f      	bpl.n	800220c <HAL_RCC_OscConfig+0x134>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800218c:	4a86      	ldr	r2, [pc, #536]	; (80023a8 <HAL_RCC_OscConfig+0x2d0>)
 800218e:	6851      	ldr	r1, [r2, #4]
 8002190:	f011 0f0c 	tst.w	r1, #12
 8002194:	f000 80c2 	beq.w	800231c <HAL_RCC_OscConfig+0x244>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002198:	6851      	ldr	r1, [r2, #4]
 800219a:	f001 010c 	and.w	r1, r1, #12
 800219e:	2908      	cmp	r1, #8
 80021a0:	f000 80b8 	beq.w	8002314 <HAL_RCC_OscConfig+0x23c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021a4:	6922      	ldr	r2, [r4, #16]
 80021a6:	2a00      	cmp	r2, #0
 80021a8:	f000 8197 	beq.w	80024da <HAL_RCC_OscConfig+0x402>
 80021ac:	2501      	movs	r5, #1
 80021ae:	fa95 f3a5 	rbit	r3, r5
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021b2:	fab3 f383 	clz	r3, r3
 80021b6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021ba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021be:	009b      	lsls	r3, r3, #2
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c0:	4f79      	ldr	r7, [pc, #484]	; (80023a8 <HAL_RCC_OscConfig+0x2d0>)
        __HAL_RCC_HSI_ENABLE();
 80021c2:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 80021c4:	f7ff f9f6 	bl	80015b4 <HAL_GetTick>
 80021c8:	f04f 0802 	mov.w	r8, #2
 80021cc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ce:	e005      	b.n	80021dc <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021d0:	f7ff f9f0 	bl	80015b4 <HAL_GetTick>
 80021d4:	1b80      	subs	r0, r0, r6
 80021d6:	2802      	cmp	r0, #2
 80021d8:	f200 8126 	bhi.w	8002428 <HAL_RCC_OscConfig+0x350>
 80021dc:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	fa98 f3a8 	rbit	r3, r8
 80021e6:	fab3 f383 	clz	r3, r3
 80021ea:	fa05 f303 	lsl.w	r3, r5, r3
 80021ee:	4213      	tst	r3, r2
 80021f0:	d0ee      	beq.n	80021d0 <HAL_RCC_OscConfig+0xf8>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f2:	6839      	ldr	r1, [r7, #0]
 80021f4:	22f8      	movs	r2, #248	; 0xf8
 80021f6:	fa92 f2a2 	rbit	r2, r2
 80021fa:	6963      	ldr	r3, [r4, #20]
 80021fc:	fab2 f282 	clz	r2, r2
 8002200:	4093      	lsls	r3, r2
 8002202:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8002206:	4313      	orrs	r3, r2
 8002208:	603b      	str	r3, [r7, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800220a:	6823      	ldr	r3, [r4, #0]
 800220c:	071d      	lsls	r5, r3, #28
 800220e:	d420      	bmi.n	8002252 <HAL_RCC_OscConfig+0x17a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002210:	0758      	lsls	r0, r3, #29
 8002212:	d54a      	bpl.n	80022aa <HAL_RCC_OscConfig+0x1d2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002214:	4b64      	ldr	r3, [pc, #400]	; (80023a8 <HAL_RCC_OscConfig+0x2d0>)
 8002216:	69da      	ldr	r2, [r3, #28]
 8002218:	00d1      	lsls	r1, r2, #3
 800221a:	f140 80ba 	bpl.w	8002392 <HAL_RCC_OscConfig+0x2ba>
    FlagStatus       pwrclkchanged = RESET;
 800221e:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002220:	4e62      	ldr	r6, [pc, #392]	; (80023ac <HAL_RCC_OscConfig+0x2d4>)
 8002222:	6833      	ldr	r3, [r6, #0]
 8002224:	05da      	lsls	r2, r3, #23
 8002226:	f140 80ef 	bpl.w	8002408 <HAL_RCC_OscConfig+0x330>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800222a:	68e3      	ldr	r3, [r4, #12]
 800222c:	2b01      	cmp	r3, #1
 800222e:	f000 8178 	beq.w	8002522 <HAL_RCC_OscConfig+0x44a>
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 8123 	beq.w	800247e <HAL_RCC_OscConfig+0x3a6>
 8002238:	2b05      	cmp	r3, #5
 800223a:	4b5b      	ldr	r3, [pc, #364]	; (80023a8 <HAL_RCC_OscConfig+0x2d0>)
 800223c:	6a1a      	ldr	r2, [r3, #32]
 800223e:	f000 81b6 	beq.w	80025ae <HAL_RCC_OscConfig+0x4d6>
 8002242:	f022 0201 	bic.w	r2, r2, #1
 8002246:	621a      	str	r2, [r3, #32]
 8002248:	6a1a      	ldr	r2, [r3, #32]
 800224a:	f022 0204 	bic.w	r2, r2, #4
 800224e:	621a      	str	r2, [r3, #32]
 8002250:	e16c      	b.n	800252c <HAL_RCC_OscConfig+0x454>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002252:	69a2      	ldr	r2, [r4, #24]
 8002254:	2a00      	cmp	r2, #0
 8002256:	d076      	beq.n	8002346 <HAL_RCC_OscConfig+0x26e>
 8002258:	2601      	movs	r6, #1
 800225a:	fa96 f2a6 	rbit	r2, r6
      __HAL_RCC_LSI_ENABLE();
 800225e:	4b54      	ldr	r3, [pc, #336]	; (80023b0 <HAL_RCC_OscConfig+0x2d8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002260:	f8df 8144 	ldr.w	r8, [pc, #324]	; 80023a8 <HAL_RCC_OscConfig+0x2d0>
      __HAL_RCC_LSI_ENABLE();
 8002264:	fab2 f282 	clz	r2, r2
 8002268:	4413      	add	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	2502      	movs	r5, #2
 800226e:	601e      	str	r6, [r3, #0]
      tickstart = HAL_GetTick();
 8002270:	f7ff f9a0 	bl	80015b4 <HAL_GetTick>
 8002274:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002276:	e005      	b.n	8002284 <HAL_RCC_OscConfig+0x1ac>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002278:	f7ff f99c 	bl	80015b4 <HAL_GetTick>
 800227c:	1bc0      	subs	r0, r0, r7
 800227e:	2802      	cmp	r0, #2
 8002280:	f200 80d2 	bhi.w	8002428 <HAL_RCC_OscConfig+0x350>
 8002284:	fa95 f3a5 	rbit	r3, r5
 8002288:	fa95 f3a5 	rbit	r3, r5
 800228c:	fa95 f3a5 	rbit	r3, r5
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002290:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8002294:	fa95 f3a5 	rbit	r3, r5
 8002298:	fab3 f383 	clz	r3, r3
 800229c:	fa06 f303 	lsl.w	r3, r6, r3
 80022a0:	4213      	tst	r3, r2
 80022a2:	d0e9      	beq.n	8002278 <HAL_RCC_OscConfig+0x1a0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022a4:	6823      	ldr	r3, [r4, #0]
 80022a6:	0758      	lsls	r0, r3, #29
 80022a8:	d4b4      	bmi.n	8002214 <HAL_RCC_OscConfig+0x13c>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022aa:	69e0      	ldr	r0, [r4, #28]
 80022ac:	b370      	cbz	r0, 800230c <HAL_RCC_OscConfig+0x234>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022ae:	4d3e      	ldr	r5, [pc, #248]	; (80023a8 <HAL_RCC_OscConfig+0x2d0>)
 80022b0:	686b      	ldr	r3, [r5, #4]
 80022b2:	f003 030c 	and.w	r3, r3, #12
 80022b6:	2b08      	cmp	r3, #8
 80022b8:	f000 815b 	beq.w	8002572 <HAL_RCC_OscConfig+0x49a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022bc:	2802      	cmp	r0, #2
 80022be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022c2:	f000 817e 	beq.w	80025c2 <HAL_RCC_OscConfig+0x4ea>
 80022c6:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ca:	fab3 f383 	clz	r3, r3
 80022ce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022d2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022dc:	f7ff f96a 	bl	80015b4 <HAL_GetTick>
 80022e0:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 80022e4:	4604      	mov	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022e6:	2601      	movs	r6, #1
 80022e8:	e005      	b.n	80022f6 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ea:	f7ff f963 	bl	80015b4 <HAL_GetTick>
 80022ee:	1b00      	subs	r0, r0, r4
 80022f0:	2802      	cmp	r0, #2
 80022f2:	f200 8099 	bhi.w	8002428 <HAL_RCC_OscConfig+0x350>
 80022f6:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022fa:	682a      	ldr	r2, [r5, #0]
 80022fc:	fa97 f3a7 	rbit	r3, r7
 8002300:	fab3 f383 	clz	r3, r3
 8002304:	fa06 f303 	lsl.w	r3, r6, r3
 8002308:	4213      	tst	r3, r2
 800230a:	d1ee      	bne.n	80022ea <HAL_RCC_OscConfig+0x212>
        }
      }
    }
  }

  return HAL_OK;
 800230c:	2000      	movs	r0, #0
}
 800230e:	b003      	add	sp, #12
 8002310:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002314:	6852      	ldr	r2, [r2, #4]
 8002316:	03d6      	lsls	r6, r2, #15
 8002318:	f53f af44 	bmi.w	80021a4 <HAL_RCC_OscConfig+0xcc>
 800231c:	2202      	movs	r2, #2
 800231e:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002322:	4921      	ldr	r1, [pc, #132]	; (80023a8 <HAL_RCC_OscConfig+0x2d0>)
 8002324:	6808      	ldr	r0, [r1, #0]
 8002326:	fa92 f2a2 	rbit	r2, r2
 800232a:	2101      	movs	r1, #1
 800232c:	fab2 f282 	clz	r2, r2
 8002330:	fa01 f202 	lsl.w	r2, r1, r2
 8002334:	4202      	tst	r2, r0
 8002336:	d056      	beq.n	80023e6 <HAL_RCC_OscConfig+0x30e>
 8002338:	6922      	ldr	r2, [r4, #16]
 800233a:	428a      	cmp	r2, r1
 800233c:	d053      	beq.n	80023e6 <HAL_RCC_OscConfig+0x30e>
        return HAL_ERROR;
 800233e:	2001      	movs	r0, #1
}
 8002340:	b003      	add	sp, #12
 8002342:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002346:	2701      	movs	r7, #1
 8002348:	fa97 f1a7 	rbit	r1, r7
      __HAL_RCC_LSI_DISABLE();
 800234c:	4b18      	ldr	r3, [pc, #96]	; (80023b0 <HAL_RCC_OscConfig+0x2d8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800234e:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80023a8 <HAL_RCC_OscConfig+0x2d0>
      __HAL_RCC_LSI_DISABLE();
 8002352:	fab1 f181 	clz	r1, r1
 8002356:	440b      	add	r3, r1
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	2502      	movs	r5, #2
 800235c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800235e:	f7ff f929 	bl	80015b4 <HAL_GetTick>
 8002362:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002364:	e004      	b.n	8002370 <HAL_RCC_OscConfig+0x298>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002366:	f7ff f925 	bl	80015b4 <HAL_GetTick>
 800236a:	1b80      	subs	r0, r0, r6
 800236c:	2802      	cmp	r0, #2
 800236e:	d85b      	bhi.n	8002428 <HAL_RCC_OscConfig+0x350>
 8002370:	fa95 f3a5 	rbit	r3, r5
 8002374:	fa95 f3a5 	rbit	r3, r5
 8002378:	fa95 f3a5 	rbit	r3, r5
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800237c:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8002380:	fa95 f3a5 	rbit	r3, r5
 8002384:	fab3 f383 	clz	r3, r3
 8002388:	fa07 f303 	lsl.w	r3, r7, r3
 800238c:	4213      	tst	r3, r2
 800238e:	d1ea      	bne.n	8002366 <HAL_RCC_OscConfig+0x28e>
 8002390:	e788      	b.n	80022a4 <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002392:	69da      	ldr	r2, [r3, #28]
 8002394:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002398:	61da      	str	r2, [r3, #28]
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a0:	9301      	str	r3, [sp, #4]
 80023a2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80023a4:	2501      	movs	r5, #1
 80023a6:	e73b      	b.n	8002220 <HAL_RCC_OscConfig+0x148>
 80023a8:	40021000 	.word	0x40021000
 80023ac:	40007000 	.word	0x40007000
 80023b0:	10908120 	.word	0x10908120
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023b4:	684a      	ldr	r2, [r1, #4]
 80023b6:	03d2      	lsls	r2, r2, #15
 80023b8:	f57f aea5 	bpl.w	8002106 <HAL_RCC_OscConfig+0x2e>
 80023bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023c0:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c4:	49a7      	ldr	r1, [pc, #668]	; (8002664 <HAL_RCC_OscConfig+0x58c>)
 80023c6:	6808      	ldr	r0, [r1, #0]
 80023c8:	fa92 f2a2 	rbit	r2, r2
 80023cc:	2101      	movs	r1, #1
 80023ce:	fab2 f282 	clz	r2, r2
 80023d2:	fa01 f202 	lsl.w	r2, r1, r2
 80023d6:	4202      	tst	r2, r0
 80023d8:	f43f aed6 	beq.w	8002188 <HAL_RCC_OscConfig+0xb0>
 80023dc:	6862      	ldr	r2, [r4, #4]
 80023de:	2a00      	cmp	r2, #0
 80023e0:	f47f aed2 	bne.w	8002188 <HAL_RCC_OscConfig+0xb0>
 80023e4:	e7ab      	b.n	800233e <HAL_RCC_OscConfig+0x266>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e6:	4d9f      	ldr	r5, [pc, #636]	; (8002664 <HAL_RCC_OscConfig+0x58c>)
 80023e8:	21f8      	movs	r1, #248	; 0xf8
 80023ea:	6828      	ldr	r0, [r5, #0]
 80023ec:	fa91 f1a1 	rbit	r1, r1
 80023f0:	6962      	ldr	r2, [r4, #20]
 80023f2:	fab1 f181 	clz	r1, r1
 80023f6:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 80023fa:	408a      	lsls	r2, r1
 80023fc:	4302      	orrs	r2, r0
 80023fe:	602a      	str	r2, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002400:	071d      	lsls	r5, r3, #28
 8002402:	f57f af05 	bpl.w	8002210 <HAL_RCC_OscConfig+0x138>
 8002406:	e724      	b.n	8002252 <HAL_RCC_OscConfig+0x17a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002408:	6833      	ldr	r3, [r6, #0]
 800240a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800240e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002410:	f7ff f8d0 	bl	80015b4 <HAL_GetTick>
 8002414:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002416:	6833      	ldr	r3, [r6, #0]
 8002418:	05db      	lsls	r3, r3, #23
 800241a:	f53f af06 	bmi.w	800222a <HAL_RCC_OscConfig+0x152>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800241e:	f7ff f8c9 	bl	80015b4 <HAL_GetTick>
 8002422:	1bc0      	subs	r0, r0, r7
 8002424:	2864      	cmp	r0, #100	; 0x64
 8002426:	d9f6      	bls.n	8002416 <HAL_RCC_OscConfig+0x33e>
            return HAL_TIMEOUT;
 8002428:	2003      	movs	r0, #3
}
 800242a:	b003      	add	sp, #12
 800242c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002430:	4d8c      	ldr	r5, [pc, #560]	; (8002664 <HAL_RCC_OscConfig+0x58c>)
 8002432:	682b      	ldr	r3, [r5, #0]
 8002434:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002438:	602b      	str	r3, [r5, #0]
 800243a:	682b      	ldr	r3, [r5, #0]
 800243c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002440:	602b      	str	r3, [r5, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002442:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002444:	68a2      	ldr	r2, [r4, #8]
 8002446:	f023 030f 	bic.w	r3, r3, #15
 800244a:	4313      	orrs	r3, r2
 800244c:	62eb      	str	r3, [r5, #44]	; 0x2c
        tickstart = HAL_GetTick();
 800244e:	f7ff f8b1 	bl	80015b4 <HAL_GetTick>
 8002452:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8002456:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002458:	2701      	movs	r7, #1
 800245a:	e004      	b.n	8002466 <HAL_RCC_OscConfig+0x38e>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800245c:	f7ff f8aa 	bl	80015b4 <HAL_GetTick>
 8002460:	1b80      	subs	r0, r0, r6
 8002462:	2864      	cmp	r0, #100	; 0x64
 8002464:	d8e0      	bhi.n	8002428 <HAL_RCC_OscConfig+0x350>
 8002466:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800246a:	682a      	ldr	r2, [r5, #0]
 800246c:	fa98 f3a8 	rbit	r3, r8
 8002470:	fab3 f383 	clz	r3, r3
 8002474:	fa07 f303 	lsl.w	r3, r7, r3
 8002478:	4213      	tst	r3, r2
 800247a:	d1ef      	bne.n	800245c <HAL_RCC_OscConfig+0x384>
 800247c:	e683      	b.n	8002186 <HAL_RCC_OscConfig+0xae>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800247e:	4e79      	ldr	r6, [pc, #484]	; (8002664 <HAL_RCC_OscConfig+0x58c>)
 8002480:	6a33      	ldr	r3, [r6, #32]
 8002482:	f023 0301 	bic.w	r3, r3, #1
 8002486:	6233      	str	r3, [r6, #32]
 8002488:	6a33      	ldr	r3, [r6, #32]
 800248a:	f023 0304 	bic.w	r3, r3, #4
 800248e:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8002490:	f7ff f890 	bl	80015b4 <HAL_GetTick>
 8002494:	f04f 0902 	mov.w	r9, #2
 8002498:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800249a:	f04f 0801 	mov.w	r8, #1
 800249e:	e006      	b.n	80024ae <HAL_RCC_OscConfig+0x3d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024a0:	f7ff f888 	bl	80015b4 <HAL_GetTick>
 80024a4:	f241 3388 	movw	r3, #5000	; 0x1388
 80024a8:	1bc0      	subs	r0, r0, r7
 80024aa:	4298      	cmp	r0, r3
 80024ac:	d8bc      	bhi.n	8002428 <HAL_RCC_OscConfig+0x350>
 80024ae:	fa99 f3a9 	rbit	r3, r9
 80024b2:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b6:	6a32      	ldr	r2, [r6, #32]
 80024b8:	fa99 f3a9 	rbit	r3, r9
 80024bc:	fab3 f383 	clz	r3, r3
 80024c0:	fa08 f303 	lsl.w	r3, r8, r3
 80024c4:	4213      	tst	r3, r2
 80024c6:	d1eb      	bne.n	80024a0 <HAL_RCC_OscConfig+0x3c8>
    if(pwrclkchanged == SET)
 80024c8:	2d00      	cmp	r5, #0
 80024ca:	f43f aeee 	beq.w	80022aa <HAL_RCC_OscConfig+0x1d2>
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ce:	4a65      	ldr	r2, [pc, #404]	; (8002664 <HAL_RCC_OscConfig+0x58c>)
 80024d0:	69d3      	ldr	r3, [r2, #28]
 80024d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024d6:	61d3      	str	r3, [r2, #28]
 80024d8:	e6e7      	b.n	80022aa <HAL_RCC_OscConfig+0x1d2>
 80024da:	2601      	movs	r6, #1
 80024dc:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 80024e0:	fab3 f383 	clz	r3, r3
 80024e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024ec:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ee:	4f5d      	ldr	r7, [pc, #372]	; (8002664 <HAL_RCC_OscConfig+0x58c>)
        __HAL_RCC_HSI_DISABLE();
 80024f0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80024f2:	f7ff f85f 	bl	80015b4 <HAL_GetTick>
 80024f6:	f04f 0802 	mov.w	r8, #2
 80024fa:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024fc:	e004      	b.n	8002508 <HAL_RCC_OscConfig+0x430>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024fe:	f7ff f859 	bl	80015b4 <HAL_GetTick>
 8002502:	1b40      	subs	r0, r0, r5
 8002504:	2802      	cmp	r0, #2
 8002506:	d88f      	bhi.n	8002428 <HAL_RCC_OscConfig+0x350>
 8002508:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	fa98 f3a8 	rbit	r3, r8
 8002512:	fab3 f383 	clz	r3, r3
 8002516:	fa06 f303 	lsl.w	r3, r6, r3
 800251a:	4213      	tst	r3, r2
 800251c:	d1ef      	bne.n	80024fe <HAL_RCC_OscConfig+0x426>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800251e:	6823      	ldr	r3, [r4, #0]
 8002520:	e674      	b.n	800220c <HAL_RCC_OscConfig+0x134>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002522:	4a50      	ldr	r2, [pc, #320]	; (8002664 <HAL_RCC_OscConfig+0x58c>)
 8002524:	6a13      	ldr	r3, [r2, #32]
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 800252c:	f7ff f842 	bl	80015b4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002530:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8002664 <HAL_RCC_OscConfig+0x58c>
      tickstart = HAL_GetTick();
 8002534:	4606      	mov	r6, r0
 8002536:	f04f 0902 	mov.w	r9, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800253a:	2701      	movs	r7, #1
 800253c:	e007      	b.n	800254e <HAL_RCC_OscConfig+0x476>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800253e:	f7ff f839 	bl	80015b4 <HAL_GetTick>
 8002542:	f241 3388 	movw	r3, #5000	; 0x1388
 8002546:	1b80      	subs	r0, r0, r6
 8002548:	4298      	cmp	r0, r3
 800254a:	f63f af6d 	bhi.w	8002428 <HAL_RCC_OscConfig+0x350>
 800254e:	fa99 f3a9 	rbit	r3, r9
 8002552:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002556:	f8d8 2020 	ldr.w	r2, [r8, #32]
 800255a:	fa99 f3a9 	rbit	r3, r9
 800255e:	fab3 f383 	clz	r3, r3
 8002562:	fa07 f303 	lsl.w	r3, r7, r3
 8002566:	4213      	tst	r3, r2
 8002568:	d0e9      	beq.n	800253e <HAL_RCC_OscConfig+0x466>
    if(pwrclkchanged == SET)
 800256a:	2d00      	cmp	r5, #0
 800256c:	f43f ae9d 	beq.w	80022aa <HAL_RCC_OscConfig+0x1d2>
 8002570:	e7ad      	b.n	80024ce <HAL_RCC_OscConfig+0x3f6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002572:	2801      	cmp	r0, #1
 8002574:	f43f aecb 	beq.w	800230e <HAL_RCC_OscConfig+0x236>
        pll_config = RCC->CFGR;
 8002578:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800257a:	6a22      	ldr	r2, [r4, #32]
 800257c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8002580:	4291      	cmp	r1, r2
 8002582:	f47f aedc 	bne.w	800233e <HAL_RCC_OscConfig+0x266>
 8002586:	6a60      	ldr	r0, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002588:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    return HAL_ERROR;
 800258c:	1a18      	subs	r0, r3, r0
 800258e:	bf18      	it	ne
 8002590:	2001      	movne	r0, #1
 8002592:	e6bc      	b.n	800230e <HAL_RCC_OscConfig+0x236>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002594:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002598:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	e5bf      	b.n	800212e <HAL_RCC_OscConfig+0x56>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025ae:	f042 0204 	orr.w	r2, r2, #4
 80025b2:	621a      	str	r2, [r3, #32]
 80025b4:	6a1a      	ldr	r2, [r3, #32]
 80025b6:	f042 0201 	orr.w	r2, r2, #1
 80025ba:	621a      	str	r2, [r3, #32]
 80025bc:	e7b6      	b.n	800252c <HAL_RCC_OscConfig+0x454>
    return HAL_ERROR;
 80025be:	2001      	movs	r0, #1
}
 80025c0:	4770      	bx	lr
 80025c2:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80025c6:	fab3 f383 	clz	r3, r3
 80025ca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025ce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80025d8:	f7fe ffec 	bl	80015b4 <HAL_GetTick>
 80025dc:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 80025e0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025e2:	2701      	movs	r7, #1
 80025e4:	e005      	b.n	80025f2 <HAL_RCC_OscConfig+0x51a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025e6:	f7fe ffe5 	bl	80015b4 <HAL_GetTick>
 80025ea:	1b80      	subs	r0, r0, r6
 80025ec:	2802      	cmp	r0, #2
 80025ee:	f63f af1b 	bhi.w	8002428 <HAL_RCC_OscConfig+0x350>
 80025f2:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025f6:	682a      	ldr	r2, [r5, #0]
 80025f8:	fa98 f3a8 	rbit	r3, r8
 80025fc:	fab3 f383 	clz	r3, r3
 8002600:	fa07 f303 	lsl.w	r3, r7, r3
 8002604:	4213      	tst	r3, r2
 8002606:	d1ee      	bne.n	80025e6 <HAL_RCC_OscConfig+0x50e>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002608:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
 800260c:	686a      	ldr	r2, [r5, #4]
 800260e:	430b      	orrs	r3, r1
 8002610:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8002614:	4313      	orrs	r3, r2
 8002616:	606b      	str	r3, [r5, #4]
 8002618:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800261c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8002620:	fab3 f383 	clz	r3, r3
 8002624:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002628:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800262c:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800262e:	4d0d      	ldr	r5, [pc, #52]	; (8002664 <HAL_RCC_OscConfig+0x58c>)
        __HAL_RCC_PLL_ENABLE();
 8002630:	601f      	str	r7, [r3, #0]
        tickstart = HAL_GetTick();
 8002632:	f7fe ffbf 	bl	80015b4 <HAL_GetTick>
 8002636:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 800263a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800263c:	2601      	movs	r6, #1
 800263e:	e005      	b.n	800264c <HAL_RCC_OscConfig+0x574>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002640:	f7fe ffb8 	bl	80015b4 <HAL_GetTick>
 8002644:	1b00      	subs	r0, r0, r4
 8002646:	2802      	cmp	r0, #2
 8002648:	f63f aeee 	bhi.w	8002428 <HAL_RCC_OscConfig+0x350>
 800264c:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002650:	682a      	ldr	r2, [r5, #0]
 8002652:	fa97 f3a7 	rbit	r3, r7
 8002656:	fab3 f383 	clz	r3, r3
 800265a:	fa06 f303 	lsl.w	r3, r6, r3
 800265e:	4213      	tst	r3, r2
 8002660:	d0ee      	beq.n	8002640 <HAL_RCC_OscConfig+0x568>
 8002662:	e653      	b.n	800230c <HAL_RCC_OscConfig+0x234>
 8002664:	40021000 	.word	0x40021000

08002668 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0U;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002668:	2800      	cmp	r0, #0
 800266a:	f000 80b2 	beq.w	80027d2 <HAL_RCC_ClockConfig+0x16a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800266e:	4a65      	ldr	r2, [pc, #404]	; (8002804 <HAL_RCC_ClockConfig+0x19c>)
 8002670:	6813      	ldr	r3, [r2, #0]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	428b      	cmp	r3, r1
{
 8002678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800267c:	460d      	mov	r5, r1
 800267e:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002680:	d20c      	bcs.n	800269c <HAL_RCC_ClockConfig+0x34>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002682:	6813      	ldr	r3, [r2, #0]
 8002684:	f023 0307 	bic.w	r3, r3, #7
 8002688:	430b      	orrs	r3, r1
 800268a:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800268c:	6813      	ldr	r3, [r2, #0]
 800268e:	f003 0307 	and.w	r3, r3, #7
 8002692:	428b      	cmp	r3, r1
 8002694:	d002      	beq.n	800269c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8002696:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
  
  return HAL_OK;
}
 8002698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800269c:	6823      	ldr	r3, [r4, #0]
 800269e:	079f      	lsls	r7, r3, #30
 80026a0:	d506      	bpl.n	80026b0 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026a2:	4959      	ldr	r1, [pc, #356]	; (8002808 <HAL_RCC_ClockConfig+0x1a0>)
 80026a4:	68a0      	ldr	r0, [r4, #8]
 80026a6:	684a      	ldr	r2, [r1, #4]
 80026a8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80026ac:	4302      	orrs	r2, r0
 80026ae:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026b0:	07de      	lsls	r6, r3, #31
 80026b2:	d52d      	bpl.n	8002710 <HAL_RCC_ClockConfig+0xa8>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026b4:	6862      	ldr	r2, [r4, #4]
 80026b6:	2a01      	cmp	r2, #1
 80026b8:	f000 808d 	beq.w	80027d6 <HAL_RCC_ClockConfig+0x16e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026bc:	2a02      	cmp	r2, #2
 80026be:	bf0c      	ite	eq
 80026c0:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 80026c4:	2302      	movne	r3, #2
 80026c6:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ca:	494f      	ldr	r1, [pc, #316]	; (8002808 <HAL_RCC_ClockConfig+0x1a0>)
 80026cc:	6808      	ldr	r0, [r1, #0]
 80026ce:	fa93 f3a3 	rbit	r3, r3
 80026d2:	2101      	movs	r1, #1
 80026d4:	fab3 f383 	clz	r3, r3
 80026d8:	fa01 f303 	lsl.w	r3, r1, r3
 80026dc:	4203      	tst	r3, r0
 80026de:	d0da      	beq.n	8002696 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026e0:	4e49      	ldr	r6, [pc, #292]	; (8002808 <HAL_RCC_ClockConfig+0x1a0>)
 80026e2:	6873      	ldr	r3, [r6, #4]
 80026e4:	f023 0303 	bic.w	r3, r3, #3
 80026e8:	4313      	orrs	r3, r2
 80026ea:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80026ec:	f7fe ff62 	bl	80015b4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f0:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80026f4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f6:	e004      	b.n	8002702 <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f8:	f7fe ff5c 	bl	80015b4 <HAL_GetTick>
 80026fc:	1bc0      	subs	r0, r0, r7
 80026fe:	4540      	cmp	r0, r8
 8002700:	d879      	bhi.n	80027f6 <HAL_RCC_ClockConfig+0x18e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002702:	6873      	ldr	r3, [r6, #4]
 8002704:	6862      	ldr	r2, [r4, #4]
 8002706:	f003 030c 	and.w	r3, r3, #12
 800270a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800270e:	d1f3      	bne.n	80026f8 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002710:	4a3c      	ldr	r2, [pc, #240]	; (8002804 <HAL_RCC_ClockConfig+0x19c>)
 8002712:	6813      	ldr	r3, [r2, #0]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	42ab      	cmp	r3, r5
 800271a:	d909      	bls.n	8002730 <HAL_RCC_ClockConfig+0xc8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271c:	6813      	ldr	r3, [r2, #0]
 800271e:	f023 0307 	bic.w	r3, r3, #7
 8002722:	432b      	orrs	r3, r5
 8002724:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002726:	6813      	ldr	r3, [r2, #0]
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	42ab      	cmp	r3, r5
 800272e:	d1b2      	bne.n	8002696 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002730:	6823      	ldr	r3, [r4, #0]
 8002732:	0758      	lsls	r0, r3, #29
 8002734:	d506      	bpl.n	8002744 <HAL_RCC_ClockConfig+0xdc>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002736:	4934      	ldr	r1, [pc, #208]	; (8002808 <HAL_RCC_ClockConfig+0x1a0>)
 8002738:	68e0      	ldr	r0, [r4, #12]
 800273a:	684a      	ldr	r2, [r1, #4]
 800273c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002740:	4302      	orrs	r2, r0
 8002742:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002744:	0719      	lsls	r1, r3, #28
 8002746:	d507      	bpl.n	8002758 <HAL_RCC_ClockConfig+0xf0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002748:	4a2f      	ldr	r2, [pc, #188]	; (8002808 <HAL_RCC_ClockConfig+0x1a0>)
 800274a:	6921      	ldr	r1, [r4, #16]
 800274c:	6853      	ldr	r3, [r2, #4]
 800274e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002752:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002756:	6053      	str	r3, [r2, #4]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8002758:	492b      	ldr	r1, [pc, #172]	; (8002808 <HAL_RCC_ClockConfig+0x1a0>)
 800275a:	684a      	ldr	r2, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800275c:	f002 030c 	and.w	r3, r2, #12
 8002760:	2b08      	cmp	r3, #8
 8002762:	d017      	beq.n	8002794 <HAL_RCC_ClockConfig+0x12c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002764:	4929      	ldr	r1, [pc, #164]	; (800280c <HAL_RCC_ClockConfig+0x1a4>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002766:	4b28      	ldr	r3, [pc, #160]	; (8002808 <HAL_RCC_ClockConfig+0x1a0>)
 8002768:	22f0      	movs	r2, #240	; 0xf0
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	fa92 f2a2 	rbit	r2, r2
 8002770:	fab2 f282 	clz	r2, r2
 8002774:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002778:	40d3      	lsrs	r3, r2
 800277a:	4a25      	ldr	r2, [pc, #148]	; (8002810 <HAL_RCC_ClockConfig+0x1a8>)
  HAL_InitTick (uwTickPrio);
 800277c:	4825      	ldr	r0, [pc, #148]	; (8002814 <HAL_RCC_ClockConfig+0x1ac>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800277e:	5cd3      	ldrb	r3, [r2, r3]
 8002780:	4a25      	ldr	r2, [pc, #148]	; (8002818 <HAL_RCC_ClockConfig+0x1b0>)
  HAL_InitTick (uwTickPrio);
 8002782:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002784:	fa21 f303 	lsr.w	r3, r1, r3
 8002788:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 800278a:	f7fe fc43 	bl	8001014 <HAL_InitTick>
  return HAL_OK;
 800278e:	2000      	movs	r0, #0
}
 8002790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002794:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8002798:	fa93 f3a3 	rbit	r3, r3
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800279c:	f402 1070 	and.w	r0, r2, #3932160	; 0x3c0000
 80027a0:	fab3 f383 	clz	r3, r3
 80027a4:	4c1d      	ldr	r4, [pc, #116]	; (800281c <HAL_RCC_ClockConfig+0x1b4>)
 80027a6:	fa20 f303 	lsr.w	r3, r0, r3
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80027aa:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80027ac:	5ce3      	ldrb	r3, [r4, r3]
 80027ae:	210f      	movs	r1, #15
 80027b0:	fa91 f1a1 	rbit	r1, r1
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80027b4:	03d2      	lsls	r2, r2, #15
 80027b6:	d520      	bpl.n	80027fa <HAL_RCC_ClockConfig+0x192>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80027b8:	fab1 f181 	clz	r1, r1
 80027bc:	f000 000f 	and.w	r0, r0, #15
 80027c0:	4c17      	ldr	r4, [pc, #92]	; (8002820 <HAL_RCC_ClockConfig+0x1b8>)
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80027c2:	4a12      	ldr	r2, [pc, #72]	; (800280c <HAL_RCC_ClockConfig+0x1a4>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80027c4:	40c8      	lsrs	r0, r1
 80027c6:	5c21      	ldrb	r1, [r4, r0]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80027c8:	fbb2 f2f1 	udiv	r2, r2, r1
 80027cc:	fb03 f102 	mul.w	r1, r3, r2
 80027d0:	e7c9      	b.n	8002766 <HAL_RCC_ClockConfig+0xfe>
    return HAL_ERROR;
 80027d2:	2001      	movs	r0, #1
}
 80027d4:	4770      	bx	lr
 80027d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027da:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027de:	490a      	ldr	r1, [pc, #40]	; (8002808 <HAL_RCC_ClockConfig+0x1a0>)
 80027e0:	6809      	ldr	r1, [r1, #0]
 80027e2:	fa93 f3a3 	rbit	r3, r3
 80027e6:	fab3 f383 	clz	r3, r3
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	420b      	tst	r3, r1
 80027f0:	f47f af76 	bne.w	80026e0 <HAL_RCC_ClockConfig+0x78>
 80027f4:	e74f      	b.n	8002696 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 80027f6:	2003      	movs	r0, #3
 80027f8:	e74e      	b.n	8002698 <HAL_RCC_ClockConfig+0x30>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80027fa:	490a      	ldr	r1, [pc, #40]	; (8002824 <HAL_RCC_ClockConfig+0x1bc>)
 80027fc:	fb03 f101 	mul.w	r1, r3, r1
 8002800:	e7b1      	b.n	8002766 <HAL_RCC_ClockConfig+0xfe>
 8002802:	bf00      	nop
 8002804:	40022000 	.word	0x40022000
 8002808:	40021000 	.word	0x40021000
 800280c:	007a1200 	.word	0x007a1200
 8002810:	080073a0 	.word	0x080073a0
 8002814:	20000008 	.word	0x20000008
 8002818:	20000000 	.word	0x20000000
 800281c:	080073b8 	.word	0x080073b8
 8002820:	080073c8 	.word	0x080073c8
 8002824:	003d0900 	.word	0x003d0900

08002828 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8002828:	4917      	ldr	r1, [pc, #92]	; (8002888 <HAL_RCC_GetSysClockFreq+0x60>)
 800282a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800282c:	f003 020c 	and.w	r2, r3, #12
 8002830:	2a08      	cmp	r2, #8
 8002832:	d001      	beq.n	8002838 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8002834:	4815      	ldr	r0, [pc, #84]	; (800288c <HAL_RCC_GetSysClockFreq+0x64>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002836:	4770      	bx	lr
{
 8002838:	b410      	push	{r4}
 800283a:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800283e:	fa92 f2a2 	rbit	r2, r2
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002842:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 8002846:	fab2 f282 	clz	r2, r2
 800284a:	4c11      	ldr	r4, [pc, #68]	; (8002890 <HAL_RCC_GetSysClockFreq+0x68>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800284c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800284e:	fa20 f202 	lsr.w	r2, r0, r2
 8002852:	5ca0      	ldrb	r0, [r4, r2]
 8002854:	220f      	movs	r2, #15
 8002856:	fa92 f2a2 	rbit	r2, r2
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800285a:	03db      	lsls	r3, r3, #15
 800285c:	d50e      	bpl.n	800287c <HAL_RCC_GetSysClockFreq+0x54>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800285e:	fab2 f282 	clz	r2, r2
 8002862:	f001 010f 	and.w	r1, r1, #15
 8002866:	4c0b      	ldr	r4, [pc, #44]	; (8002894 <HAL_RCC_GetSysClockFreq+0x6c>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002868:	4b08      	ldr	r3, [pc, #32]	; (800288c <HAL_RCC_GetSysClockFreq+0x64>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800286a:	40d1      	lsrs	r1, r2
 800286c:	5c62      	ldrb	r2, [r4, r1]
}
 800286e:	f85d 4b04 	ldr.w	r4, [sp], #4
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002872:	fbb3 f3f2 	udiv	r3, r3, r2
 8002876:	fb03 f000 	mul.w	r0, r3, r0
}
 800287a:	4770      	bx	lr
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800287c:	4b06      	ldr	r3, [pc, #24]	; (8002898 <HAL_RCC_GetSysClockFreq+0x70>)
}
 800287e:	f85d 4b04 	ldr.w	r4, [sp], #4
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002882:	fb03 f000 	mul.w	r0, r3, r0
}
 8002886:	4770      	bx	lr
 8002888:	40021000 	.word	0x40021000
 800288c:	007a1200 	.word	0x007a1200
 8002890:	080073b8 	.word	0x080073b8
 8002894:	080073c8 	.word	0x080073c8
 8002898:	003d0900 	.word	0x003d0900

0800289c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800289c:	4b08      	ldr	r3, [pc, #32]	; (80028c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800289e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	fa92 f2a2 	rbit	r2, r2
 80028a8:	fab2 f282 	clz	r2, r2
 80028ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80028b0:	4904      	ldr	r1, [pc, #16]	; (80028c4 <HAL_RCC_GetPCLK1Freq+0x28>)
  return SystemCoreClock;
 80028b2:	4805      	ldr	r0, [pc, #20]	; (80028c8 <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80028b4:	40d3      	lsrs	r3, r2
 80028b6:	6800      	ldr	r0, [r0, #0]
 80028b8:	5ccb      	ldrb	r3, [r1, r3]
}    
 80028ba:	40d8      	lsrs	r0, r3
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	40021000 	.word	0x40021000
 80028c4:	080073b0 	.word	0x080073b0
 80028c8:	20000000 	.word	0x20000000

080028cc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80028cc:	4b08      	ldr	r3, [pc, #32]	; (80028f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028ce:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	fa92 f2a2 	rbit	r2, r2
 80028d8:	fab2 f282 	clz	r2, r2
 80028dc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80028e0:	4904      	ldr	r1, [pc, #16]	; (80028f4 <HAL_RCC_GetPCLK2Freq+0x28>)
  return SystemCoreClock;
 80028e2:	4805      	ldr	r0, [pc, #20]	; (80028f8 <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80028e4:	40d3      	lsrs	r3, r2
 80028e6:	6800      	ldr	r0, [r0, #0]
 80028e8:	5ccb      	ldrb	r3, [r1, r3]
} 
 80028ea:	40d8      	lsrs	r0, r3
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	40021000 	.word	0x40021000
 80028f4:	080073b0 	.word	0x080073b0
 80028f8:	20000000 	.word	0x20000000

080028fc <HAL_RCC_GetClockConfig>:

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80028fc:	4b0e      	ldr	r3, [pc, #56]	; (8002938 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80028fe:	220f      	movs	r2, #15
 8002900:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	f002 0203 	and.w	r2, r2, #3
 8002908:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002910:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002918:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	08db      	lsrs	r3, r3, #3
{
 800291e:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002920:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002924:	4c05      	ldr	r4, [pc, #20]	; (800293c <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002926:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002928:	6823      	ldr	r3, [r4, #0]
}
 800292a:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800292e:	f003 0307 	and.w	r3, r3, #7
 8002932:	600b      	str	r3, [r1, #0]
}
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	40021000 	.word	0x40021000
 800293c:	40022000 	.word	0x40022000

08002940 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002940:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002944:	6803      	ldr	r3, [r0, #0]
{
 8002946:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002948:	03d8      	lsls	r0, r3, #15
{
 800294a:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800294c:	d540      	bpl.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x90>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800294e:	4b6d      	ldr	r3, [pc, #436]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002950:	69da      	ldr	r2, [r3, #28]
 8002952:	00d1      	lsls	r1, r2, #3
 8002954:	f140 8096 	bpl.w	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002958:	4d6b      	ldr	r5, [pc, #428]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800295a:	682b      	ldr	r3, [r5, #0]
 800295c:	05da      	lsls	r2, r3, #23
  FlagStatus       pwrclkchanged = RESET;
 800295e:	f04f 0600 	mov.w	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002962:	f140 809f 	bpl.w	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x164>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002966:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8002b04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 800296a:	f8d8 3020 	ldr.w	r3, [r8, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800296e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002972:	d020      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002974:	6861      	ldr	r1, [r4, #4]
 8002976:	f401 7240 	and.w	r2, r1, #768	; 0x300
 800297a:	429a      	cmp	r2, r3
 800297c:	d01c      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800297e:	f8d8 1020 	ldr.w	r1, [r8, #32]
 8002982:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002986:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 800298a:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800298e:	4f5f      	ldr	r7, [pc, #380]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002990:	fab2 f282 	clz	r2, r2
 8002994:	443a      	add	r2, r7
 8002996:	0092      	lsls	r2, r2, #2
 8002998:	2501      	movs	r5, #1
 800299a:	6015      	str	r5, [r2, #0]
 800299c:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029a0:	fab3 f383 	clz	r3, r3
 80029a4:	443b      	add	r3, r7
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80029ac:	f8c8 0020 	str.w	r0, [r8, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80029b0:	07c8      	lsls	r0, r1, #31
 80029b2:	f100 808b 	bmi.w	8002acc <HAL_RCCEx_PeriphCLKConfig+0x18c>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80029b6:	6861      	ldr	r1, [r4, #4]
 80029b8:	4a52      	ldr	r2, [pc, #328]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80029ba:	6a13      	ldr	r3, [r2, #32]
 80029bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029c0:	430b      	orrs	r3, r1
 80029c2:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029c4:	b11e      	cbz	r6, 80029ce <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029c6:	69d3      	ldr	r3, [r2, #28]
 80029c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029cc:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029ce:	6823      	ldr	r3, [r4, #0]
 80029d0:	07d9      	lsls	r1, r3, #31
 80029d2:	d506      	bpl.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029d4:	494b      	ldr	r1, [pc, #300]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80029d6:	68a0      	ldr	r0, [r4, #8]
 80029d8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80029da:	f022 0203 	bic.w	r2, r2, #3
 80029de:	4302      	orrs	r2, r0
 80029e0:	630a      	str	r2, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029e2:	079a      	lsls	r2, r3, #30
 80029e4:	d506      	bpl.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029e6:	4947      	ldr	r1, [pc, #284]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80029e8:	68e0      	ldr	r0, [r4, #12]
 80029ea:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80029ec:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80029f0:	4302      	orrs	r2, r0
 80029f2:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029f4:	075f      	lsls	r7, r3, #29
 80029f6:	d506      	bpl.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029f8:	4942      	ldr	r1, [pc, #264]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80029fa:	6920      	ldr	r0, [r4, #16]
 80029fc:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80029fe:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002a02:	4302      	orrs	r2, r0
 8002a04:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a06:	069e      	lsls	r6, r3, #26
 8002a08:	d506      	bpl.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a0a:	493e      	ldr	r1, [pc, #248]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002a0c:	6960      	ldr	r0, [r4, #20]
 8002a0e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8002a10:	f022 0210 	bic.w	r2, r2, #16
 8002a14:	4302      	orrs	r2, r0
 8002a16:	630a      	str	r2, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a18:	039d      	lsls	r5, r3, #14
 8002a1a:	d506      	bpl.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002a1c:	4939      	ldr	r1, [pc, #228]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002a1e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002a20:	684a      	ldr	r2, [r1, #4]
 8002a22:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8002a26:	4302      	orrs	r2, r0
 8002a28:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a2a:	0658      	lsls	r0, r3, #25
 8002a2c:	d506      	bpl.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a2e:	4935      	ldr	r1, [pc, #212]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002a30:	69a0      	ldr	r0, [r4, #24]
 8002a32:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8002a34:	f022 0220 	bic.w	r2, r2, #32
 8002a38:	4302      	orrs	r2, r0
 8002a3a:	630a      	str	r2, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F373xC) || defined(STM32F378xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002a3c:	0619      	lsls	r1, r3, #24
 8002a3e:	d506      	bpl.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002a40:	4930      	ldr	r1, [pc, #192]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002a42:	69e0      	ldr	r0, [r4, #28]
 8002a44:	684a      	ldr	r2, [r1, #4]
 8002a46:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002a4a:	4302      	orrs	r2, r0
 8002a4c:	604a      	str	r2, [r1, #4]
#endif /* STM32F334x8 */

#if defined(STM32F373xC) || defined(STM32F378xx)
  
  /*------------------------------ SDADC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
 8002a4e:	051a      	lsls	r2, r3, #20
 8002a50:	d506      	bpl.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    
    /* Configure the SDADC clock prescaler */
    __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
 8002a52:	492c      	ldr	r1, [pc, #176]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002a54:	6a20      	ldr	r0, [r4, #32]
 8002a56:	684a      	ldr	r2, [r1, #4]
 8002a58:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 8002a5c:	4302      	orrs	r2, r0
 8002a5e:	604a      	str	r2, [r1, #4]
  }

  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002a60:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8002a64:	d103      	bne.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x12e>
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002a66:	4618      	mov	r0, r3
}
 8002a68:	b003      	add	sp, #12
 8002a6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a6e:	4a25      	ldr	r2, [pc, #148]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002a70:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002a72:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002a74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  return HAL_OK;
 8002a78:	2000      	movs	r0, #0
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a7a:	430b      	orrs	r3, r1
 8002a7c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8002a7e:	b003      	add	sp, #12
 8002a80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a84:	69da      	ldr	r2, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a86:	4d20      	ldr	r5, [pc, #128]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a88:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002a8c:	61da      	str	r2, [r3, #28]
 8002a8e:	69db      	ldr	r3, [r3, #28]
 8002a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a94:	9301      	str	r3, [sp, #4]
 8002a96:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a98:	682b      	ldr	r3, [r5, #0]
 8002a9a:	05da      	lsls	r2, r3, #23
      pwrclkchanged = SET;
 8002a9c:	f04f 0601 	mov.w	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa0:	f53f af61 	bmi.w	8002966 <HAL_RCCEx_PeriphCLKConfig+0x26>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aa4:	682b      	ldr	r3, [r5, #0]
 8002aa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aaa:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002aac:	f7fe fd82 	bl	80015b4 <HAL_GetTick>
 8002ab0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab2:	682b      	ldr	r3, [r5, #0]
 8002ab4:	05db      	lsls	r3, r3, #23
 8002ab6:	f53f af56 	bmi.w	8002966 <HAL_RCCEx_PeriphCLKConfig+0x26>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aba:	f7fe fd7b 	bl	80015b4 <HAL_GetTick>
 8002abe:	1bc0      	subs	r0, r0, r7
 8002ac0:	2864      	cmp	r0, #100	; 0x64
 8002ac2:	d9f6      	bls.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x172>
          return HAL_TIMEOUT;
 8002ac4:	2003      	movs	r0, #3
}
 8002ac6:	b003      	add	sp, #12
 8002ac8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        tickstart = HAL_GetTick();
 8002acc:	f7fe fd72 	bl	80015b4 <HAL_GetTick>
 8002ad0:	f04f 0902 	mov.w	r9, #2
 8002ad4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ad6:	e006      	b.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ad8:	f7fe fd6c 	bl	80015b4 <HAL_GetTick>
 8002adc:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ae0:	1bc0      	subs	r0, r0, r7
 8002ae2:	4298      	cmp	r0, r3
 8002ae4:	d8ee      	bhi.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x184>
 8002ae6:	fa99 f3a9 	rbit	r3, r9
 8002aea:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aee:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8002af2:	fa99 f3a9 	rbit	r3, r9
 8002af6:	fab3 f383 	clz	r3, r3
 8002afa:	fa05 f303 	lsl.w	r3, r5, r3
 8002afe:	4213      	tst	r3, r2
 8002b00:	d0ea      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002b02:	e758      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b04:	40021000 	.word	0x40021000
 8002b08:	40007000 	.word	0x40007000
 8002b0c:	10908100 	.word	0x10908100

08002b10 <HAL_SDADC_Init>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_SDADC_Init(SDADC_HandleTypeDef* hsdadc)
{
  /* Check SDADC handle */
  if(hsdadc == NULL)
 8002b10:	2800      	cmp	r0, #0
 8002b12:	d044      	beq.n	8002b9e <HAL_SDADC_Init+0x8e>
{
 8002b14:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_SDADC_VREF(hsdadc->Init.ReferenceVoltage));
  
  /* Initialize SDADC variables with default values */
  hsdadc->RegularContMode     = SDADC_CONTINUOUS_CONV_OFF;
  hsdadc->InjectedContMode    = SDADC_CONTINUOUS_CONV_OFF;
  hsdadc->InjectedChannelsNbr = 1U;
 8002b16:	2201      	movs	r2, #1
  hsdadc->RegularContMode     = SDADC_CONTINUOUS_CONV_OFF;
 8002b18:	2300      	movs	r3, #0
  hsdadc->InjConvRemaining    = 1U;
  hsdadc->RegularTrigger      = SDADC_SOFTWARE_TRIGGER;
  hsdadc->InjectedTrigger     = SDADC_SOFTWARE_TRIGGER;
  hsdadc->ExtTriggerEdge      = SDADC_EXT_TRIG_RISING_EDGE;
 8002b1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b1e:	4604      	mov	r4, r0
  hsdadc->RegularMultimode    = SDADC_MULTIMODE_SDADC1_SDADC2;
 8002b20:	e9c0 130c 	strd	r1, r3, [r0, #48]	; 0x30
  hsdadc->InjectedContMode    = SDADC_CONTINUOUS_CONV_OFF;
 8002b24:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hsdadc->InjConvRemaining    = 1U;
 8002b28:	e9c0 2208 	strd	r2, r2, [r0, #32]
  hsdadc->InjectedTrigger     = SDADC_SOFTWARE_TRIGGER;
 8002b2c:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  hsdadc->InjectedMultimode   = SDADC_MULTIMODE_SDADC1_SDADC2;
 8002b30:	6383      	str	r3, [r0, #56]	; 0x38
  hsdadc->ErrorCode           = SDADC_ERROR_NONE;
 8002b32:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Init the low level hardware */
  hsdadc->MspInitCallback(hsdadc);
#else
  /* Init the low level hardware */
  HAL_SDADC_MspInit(hsdadc);
 8002b34:	f7fe fa1e 	bl	8000f74 <HAL_SDADC_MspInit>
#endif /* USE_HAL_SDADC_REGISTER_CALLBACKS */
  
  /* Set idle low power and slow clock modes */
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_SBI|SDADC_CR1_PDI|SDADC_CR1_SLOWCK);
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 8002b38:	e9d4 2300 	ldrd	r2, r3, [r4]
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_SBI|SDADC_CR1_PDI|SDADC_CR1_SLOWCK);
 8002b3c:	6811      	ldr	r1, [r2, #0]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 8002b3e:	68e0      	ldr	r0, [r4, #12]
  hsdadc->Instance->CR2 &= ~(SDADC_CR2_FAST);
  hsdadc->Instance->CR2 |= hsdadc->Init.FastConversionMode;

  /* Set reference voltage common to all SDADC instances */
  /* Update this parameter only if needed to avoid unnecessary settling time */
  if((SDADC1->CR1 & SDADC_CR1_REFV) != hsdadc->Init.ReferenceVoltage)
 8002b40:	6925      	ldr	r5, [r4, #16]
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_SBI|SDADC_CR1_PDI|SDADC_CR1_SLOWCK);
 8002b42:	f421 51e0 	bic.w	r1, r1, #7168	; 0x1c00
 8002b46:	6011      	str	r1, [r2, #0]
  hsdadc->Instance->CR1 |= (hsdadc->Init.IdleLowPowerMode | \
 8002b48:	6811      	ldr	r1, [r2, #0]
 8002b4a:	4303      	orrs	r3, r0
 8002b4c:	430b      	orrs	r3, r1
 8002b4e:	6013      	str	r3, [r2, #0]
  hsdadc->Instance->CR2 &= ~(SDADC_CR2_FAST);
 8002b50:	6853      	ldr	r3, [r2, #4]
  hsdadc->Instance->CR2 |= hsdadc->Init.FastConversionMode;
 8002b52:	68a0      	ldr	r0, [r4, #8]
  if((SDADC1->CR1 & SDADC_CR1_REFV) != hsdadc->Init.ReferenceVoltage)
 8002b54:	4913      	ldr	r1, [pc, #76]	; (8002ba4 <HAL_SDADC_Init+0x94>)
  hsdadc->Instance->CR2 &= ~(SDADC_CR2_FAST);
 8002b56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b5a:	6053      	str	r3, [r2, #4]
  hsdadc->Instance->CR2 |= hsdadc->Init.FastConversionMode;
 8002b5c:	6853      	ldr	r3, [r2, #4]
 8002b5e:	4303      	orrs	r3, r0
 8002b60:	6053      	str	r3, [r2, #4]
  if((SDADC1->CR1 & SDADC_CR1_REFV) != hsdadc->Init.ReferenceVoltage)
 8002b62:	680b      	ldr	r3, [r1, #0]
 8002b64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b68:	42ab      	cmp	r3, r5
 8002b6a:	d10c      	bne.n	8002b86 <HAL_SDADC_Init+0x76>
    /* Wait at least 2ms before setting ADON */
    HAL_Delay(2U);
  }
  
  /* Enable SDADC */
  hsdadc->Instance->CR2 |= SDADC_CR2_ADON;
 8002b6c:	6853      	ldr	r3, [r2, #4]
 8002b6e:	f043 0301 	orr.w	r3, r3, #1
 8002b72:	6053      	str	r3, [r2, #4]

  /* Wait end of stabilization */
  while((hsdadc->Instance->ISR & SDADC_ISR_STABIP) != 0UL)
 8002b74:	6893      	ldr	r3, [r2, #8]
 8002b76:	f413 4300 	ands.w	r3, r3, #32768	; 0x8000
 8002b7a:	d1fb      	bne.n	8002b74 <HAL_SDADC_Init+0x64>
  {
  }
  
  /* Set SDADC to ready state */
  hsdadc->State = HAL_SDADC_STATE_READY;
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  
  /* Return HAL status */
  return HAL_OK;
 8002b82:	4618      	mov	r0, r3
}
 8002b84:	bd38      	pop	{r3, r4, r5, pc}
    SDADC1->CR1 &= ~(SDADC_CR1_REFV);
 8002b86:	680b      	ldr	r3, [r1, #0]
 8002b88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b8c:	600b      	str	r3, [r1, #0]
    SDADC1->CR1 |= hsdadc->Init.ReferenceVoltage;
 8002b8e:	680b      	ldr	r3, [r1, #0]
 8002b90:	431d      	orrs	r5, r3
    HAL_Delay(2U);
 8002b92:	2002      	movs	r0, #2
    SDADC1->CR1 |= hsdadc->Init.ReferenceVoltage;
 8002b94:	600d      	str	r5, [r1, #0]
    HAL_Delay(2U);
 8002b96:	f7fe fd13 	bl	80015c0 <HAL_Delay>
  hsdadc->Instance->CR2 |= SDADC_CR2_ADON;
 8002b9a:	6822      	ldr	r2, [r4, #0]
 8002b9c:	e7e6      	b.n	8002b6c <HAL_SDADC_Init+0x5c>
    return HAL_ERROR;
 8002b9e:	2001      	movs	r0, #1
}
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	40016000 	.word	0x40016000

08002ba8 <HAL_SDADC_PrepareChannelConfig>:
  assert_param(IS_SDADC_GAIN(ConfParamStruct->Gain));
  assert_param(IS_SDADC_COMMON_MODE(ConfParamStruct->CommonMode));
  assert_param(IS_SDADC_OFFSET_VALUE(ConfParamStruct->Offset));

  /* Check SDADC state is ready */
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 8002ba8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d001      	beq.n	8002bb4 <HAL_SDADC_PrepareChannelConfig+0xc>
  {
    status = HAL_ERROR;
 8002bb0:	2001      	movs	r0, #1
      SDADC_ExitInitMode(hsdadc);
    }
  }
  /* Return function status */
  return status;
}
 8002bb2:	4770      	bx	lr
{
 8002bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bb8:	4617      	mov	r7, r2
static HAL_StatusTypeDef SDADC_EnterInitMode(SDADC_HandleTypeDef* hsdadc)
{
  uint32_t tickstart;
  
  /* Set INIT bit on SDADC_CR1 register */
  hsdadc->Instance->CR1 |= SDADC_CR1_INIT;
 8002bba:	6802      	ldr	r2, [r0, #0]
 8002bbc:	6813      	ldr	r3, [r2, #0]
 8002bbe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bc2:	6013      	str	r3, [r2, #0]

  /* Wait INITRDY bit on SDADC_ISR */
  tickstart = HAL_GetTick();
 8002bc4:	4604      	mov	r4, r0
 8002bc6:	460e      	mov	r6, r1
 8002bc8:	f7fe fcf4 	bl	80015b4 <HAL_GetTick>
 8002bcc:	4680      	mov	r8, r0
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 8002bce:	e005      	b.n	8002bdc <HAL_SDADC_PrepareChannelConfig+0x34>
  {
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 8002bd0:	f7fe fcf0 	bl	80015b4 <HAL_GetTick>
 8002bd4:	eba0 0308 	sub.w	r3, r0, r8
 8002bd8:	2bc8      	cmp	r3, #200	; 0xc8
 8002bda:	d814      	bhi.n	8002c06 <HAL_SDADC_PrepareChannelConfig+0x5e>
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 8002bdc:	6823      	ldr	r3, [r4, #0]
 8002bde:	689d      	ldr	r5, [r3, #8]
 8002be0:	2d00      	cmp	r5, #0
 8002be2:	daf5      	bge.n	8002bd0 <HAL_SDADC_PrepareChannelConfig+0x28>
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8002be4:	e9d7 2100 	ldrd	r2, r1, [r7]
 8002be8:	430a      	orrs	r2, r1
                                             ConfParamStruct->CommonMode | \
 8002bea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
                       (uint32_t)(ConfIndex << 2UL));
 8002bee:	00b6      	lsls	r6, r6, #2
                                             ConfParamStruct->Gain | \
 8002bf0:	4302      	orrs	r2, r0
      tmp = (uint32_t)((uint32_t)(hsdadc->Instance) + \
 8002bf2:	3620      	adds	r6, #32
                                             ConfParamStruct->CommonMode | \
 8002bf4:	430a      	orrs	r2, r1
      *(__IO uint32_t *) (tmp) = (uint32_t) (ConfParamStruct->InputMode | \
 8002bf6:	519a      	str	r2, [r3, r6]
  * @retval None.
  */
static void SDADC_ExitInitMode(SDADC_HandleTypeDef* hsdadc)
{
  /* Reset INIT bit in SDADC_CR1 register */
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_INIT);
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
  HAL_StatusTypeDef status = HAL_OK;
 8002bfe:	2000      	movs	r0, #0
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_INIT);
 8002c00:	601a      	str	r2, [r3, #0]
}
 8002c02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8002c06:	23ff      	movs	r3, #255	; 0xff
 8002c08:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8002c0c:	2003      	movs	r0, #3
 8002c0e:	e7f8      	b.n	8002c02 <HAL_SDADC_PrepareChannelConfig+0x5a>

08002c10 <HAL_SDADC_AssociateChannelConfig>:
{
 8002c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hsdadc->State != HAL_SDADC_STATE_READY)
 8002c12:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d001      	beq.n	8002c1e <HAL_SDADC_AssociateChannelConfig+0xe>
    status = HAL_ERROR;
 8002c1a:	2001      	movs	r0, #1
}
 8002c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c1e:	4616      	mov	r6, r2
  hsdadc->Instance->CR1 |= SDADC_CR1_INIT;
 8002c20:	6802      	ldr	r2, [r0, #0]
 8002c22:	6813      	ldr	r3, [r2, #0]
 8002c24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c28:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8002c2a:	4604      	mov	r4, r0
 8002c2c:	460d      	mov	r5, r1
 8002c2e:	f7fe fcc1 	bl	80015b4 <HAL_GetTick>
 8002c32:	4607      	mov	r7, r0
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 8002c34:	e004      	b.n	8002c40 <HAL_SDADC_AssociateChannelConfig+0x30>
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 8002c36:	f7fe fcbd 	bl	80015b4 <HAL_GetTick>
 8002c3a:	1bc3      	subs	r3, r0, r7
 8002c3c:	2bc8      	cmp	r3, #200	; 0xc8
 8002c3e:	d81a      	bhi.n	8002c76 <HAL_SDADC_AssociateChannelConfig+0x66>
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 8002c40:	6823      	ldr	r3, [r4, #0]
 8002c42:	6899      	ldr	r1, [r3, #8]
 8002c44:	2900      	cmp	r1, #0
 8002c46:	daf6      	bge.n	8002c36 <HAL_SDADC_AssociateChannelConfig+0x26>
      if(Channel != SDADC_CHANNEL_8)
 8002c48:	4a0e      	ldr	r2, [pc, #56]	; (8002c84 <HAL_SDADC_AssociateChannelConfig+0x74>)
 8002c4a:	4295      	cmp	r5, r2
 8002c4c:	d018      	beq.n	8002c80 <HAL_SDADC_AssociateChannelConfig+0x70>
        hsdadc->Instance->CONFCHR1 &= (uint32_t) ~((uint32_t)SDADC_CONFCHR1_CONFCH0 << ((channelnum << 2UL) & 0x1FUL));
 8002c4e:	0bad      	lsrs	r5, r5, #14
 8002c50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c52:	f005 051c 	and.w	r5, r5, #28
 8002c56:	2103      	movs	r1, #3
 8002c58:	40a9      	lsls	r1, r5
 8002c5a:	ea22 0201 	bic.w	r2, r2, r1
 8002c5e:	641a      	str	r2, [r3, #64]	; 0x40
        hsdadc->Instance->CONFCHR1 |= (uint32_t) (ConfIndex << ((channelnum << 2UL) & 0x1FUL));
 8002c60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c62:	fa06 f505 	lsl.w	r5, r6, r5
 8002c66:	4315      	orrs	r5, r2
 8002c68:	641d      	str	r5, [r3, #64]	; 0x40
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_INIT);
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
  HAL_StatusTypeDef status = HAL_OK;
 8002c70:	2000      	movs	r0, #0
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_INIT);
 8002c72:	601a      	str	r2, [r3, #0]
}
 8002c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8002c76:	23ff      	movs	r3, #255	; 0xff
 8002c78:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8002c7c:	2003      	movs	r0, #3
}
 8002c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hsdadc->Instance->CONFCHR2 = (uint32_t) (ConfIndex);
 8002c80:	645e      	str	r6, [r3, #68]	; 0x44
 8002c82:	e7f2      	b.n	8002c6a <HAL_SDADC_AssociateChannelConfig+0x5a>
 8002c84:	00080100 	.word	0x00080100

08002c88 <HAL_SDADC_ConfigChannel>:
  if((hsdadc->State != HAL_SDADC_STATE_RESET) && (hsdadc->State != HAL_SDADC_STATE_ERROR))
 8002c88:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2bfd      	cmp	r3, #253	; 0xfd
 8002c92:	d810      	bhi.n	8002cb6 <HAL_SDADC_ConfigChannel+0x2e>
    hsdadc->Instance->CR2 &= (uint32_t) ~(SDADC_CR2_RCH | SDADC_CR2_RCONT);
 8002c94:	6803      	ldr	r3, [r0, #0]
{
 8002c96:	b430      	push	{r4, r5}
    hsdadc->Instance->CR2 &= (uint32_t) ~(SDADC_CR2_RCH | SDADC_CR2_RCONT);
 8002c98:	685c      	ldr	r4, [r3, #4]
    if(ContinuousMode == SDADC_CONTINUOUS_CONV_ON)
 8002c9a:	2a01      	cmp	r2, #1
    hsdadc->Instance->CR2 &= (uint32_t) ~(SDADC_CR2_RCH | SDADC_CR2_RCONT);
 8002c9c:	f424 049e 	bic.w	r4, r4, #5177344	; 0x4f0000
 8002ca0:	605c      	str	r4, [r3, #4]
    if(ContinuousMode == SDADC_CONTINUOUS_CONV_ON)
 8002ca2:	d00a      	beq.n	8002cba <HAL_SDADC_ConfigChannel+0x32>
      hsdadc->Instance->CR2 |= (uint32_t) ((Channel & SDADC_MSB_MASK));    
 8002ca4:	685c      	ldr	r4, [r3, #4]
 8002ca6:	0c09      	lsrs	r1, r1, #16
 8002ca8:	0409      	lsls	r1, r1, #16
 8002caa:	4321      	orrs	r1, r4
 8002cac:	6059      	str	r1, [r3, #4]
}
 8002cae:	bc30      	pop	{r4, r5}
    hsdadc->RegularContMode = ContinuousMode;
 8002cb0:	6182      	str	r2, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002cb2:	2000      	movs	r0, #0
}
 8002cb4:	4770      	bx	lr
    status = HAL_ERROR;
 8002cb6:	2001      	movs	r0, #1
}
 8002cb8:	4770      	bx	lr
      hsdadc->Instance->CR2 |= (uint32_t) ((Channel & SDADC_MSB_MASK) | SDADC_CR2_RCONT);    
 8002cba:	4c05      	ldr	r4, [pc, #20]	; (8002cd0 <HAL_SDADC_ConfigChannel+0x48>)
 8002cbc:	685d      	ldr	r5, [r3, #4]
 8002cbe:	400c      	ands	r4, r1
 8002cc0:	432c      	orrs	r4, r5
 8002cc2:	f444 0480 	orr.w	r4, r4, #4194304	; 0x400000
 8002cc6:	605c      	str	r4, [r3, #4]
    hsdadc->RegularContMode = ContinuousMode;
 8002cc8:	6182      	str	r2, [r0, #24]
}
 8002cca:	bc30      	pop	{r4, r5}
  HAL_StatusTypeDef status = HAL_OK;
 8002ccc:	2000      	movs	r0, #0
}
 8002cce:	4770      	bx	lr
 8002cd0:	ffbf0000 	.word	0xffbf0000

08002cd4 <HAL_SDADC_SelectRegularTrigger>:
  if((hsdadc->Instance == SDADC1) && (Trigger == SDADC_SYNCHRONOUS_TRIGGER))
 8002cd4:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <HAL_SDADC_SelectRegularTrigger+0x28>)
 8002cd6:	6802      	ldr	r2, [r0, #0]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d00b      	beq.n	8002cf4 <HAL_SDADC_SelectRegularTrigger+0x20>
  else if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8002cdc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002ce0:	1e5a      	subs	r2, r3, #1
 8002ce2:	2a01      	cmp	r2, #1
 8002ce4:	d903      	bls.n	8002cee <HAL_SDADC_SelectRegularTrigger+0x1a>
          (hsdadc->State == HAL_SDADC_STATE_CALIB) || \
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d001      	beq.n	8002cee <HAL_SDADC_SelectRegularTrigger+0x1a>
    status = HAL_ERROR;
 8002cea:	2001      	movs	r0, #1
}
 8002cec:	4770      	bx	lr
    hsdadc->RegularTrigger = Trigger;
 8002cee:	6281      	str	r1, [r0, #40]	; 0x28
  HAL_StatusTypeDef status = HAL_OK;
 8002cf0:	2000      	movs	r0, #0
    hsdadc->RegularTrigger = Trigger;
 8002cf2:	4770      	bx	lr
  if((hsdadc->Instance == SDADC1) && (Trigger == SDADC_SYNCHRONOUS_TRIGGER))
 8002cf4:	2901      	cmp	r1, #1
 8002cf6:	d1f1      	bne.n	8002cdc <HAL_SDADC_SelectRegularTrigger+0x8>
    status = HAL_ERROR;
 8002cf8:	2001      	movs	r0, #1
}
 8002cfa:	4770      	bx	lr
 8002cfc:	40016000 	.word	0x40016000

08002d00 <HAL_SDADC_Start>:
{
 8002d00:	b538      	push	{r3, r4, r5, lr}
  if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8002d02:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002d06:	2b01      	cmp	r3, #1
{
 8002d08:	4604      	mov	r4, r0
  if((hsdadc->State == HAL_SDADC_STATE_READY) || \
 8002d0a:	d003      	beq.n	8002d14 <HAL_SDADC_Start+0x14>
 8002d0c:	2b04      	cmp	r3, #4
 8002d0e:	d001      	beq.n	8002d14 <HAL_SDADC_Start+0x14>
    status = HAL_ERROR;
 8002d10:	2001      	movs	r0, #1
}
 8002d12:	bd38      	pop	{r3, r4, r5, pc}
static HAL_StatusTypeDef SDADC_RegConvStart(SDADC_HandleTypeDef* hsdadc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check regular trigger */
  if(hsdadc->RegularTrigger == SDADC_SOFTWARE_TRIGGER)
 8002d14:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002d16:	b962      	cbnz	r2, 8002d32 <HAL_SDADC_Start+0x32>
  {
    /* Set RSWSTART bit in SDADC_CR2 register */
    hsdadc->Instance->CR2 |= SDADC_CR2_RSWSTART;
 8002d18:	6821      	ldr	r1, [r4, #0]
 8002d1a:	684a      	ldr	r2, [r1, #4]
 8002d1c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002d20:	604a      	str	r2, [r1, #4]
  }
  /* Update SDADC state only if status is OK */
  if(status == HAL_OK)
  {
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
                    HAL_SDADC_STATE_REG : HAL_SDADC_STATE_REG_INJ;
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	bf0c      	ite	eq
 8002d26:	2303      	moveq	r3, #3
 8002d28:	2305      	movne	r3, #5
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 8002d2a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8002d2e:	2000      	movs	r0, #0
}
 8002d30:	bd38      	pop	{r3, r4, r5, pc}
  hsdadc->Instance->CR1 |= SDADC_CR1_INIT;
 8002d32:	6822      	ldr	r2, [r4, #0]
 8002d34:	6813      	ldr	r3, [r2, #0]
 8002d36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d3a:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8002d3c:	f7fe fc3a 	bl	80015b4 <HAL_GetTick>
 8002d40:	4605      	mov	r5, r0
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 8002d42:	e004      	b.n	8002d4e <HAL_SDADC_Start+0x4e>
    if((HAL_GetTick()-tickstart) > SDADC_TIMEOUT)
 8002d44:	f7fe fc36 	bl	80015b4 <HAL_GetTick>
 8002d48:	1b40      	subs	r0, r0, r5
 8002d4a:	28c8      	cmp	r0, #200	; 0xc8
 8002d4c:	d80e      	bhi.n	8002d6c <HAL_SDADC_Start+0x6c>
  while((hsdadc->Instance->ISR & SDADC_ISR_INITRDY) == (uint32_t)RESET)
 8002d4e:	6823      	ldr	r3, [r4, #0]
 8002d50:	689a      	ldr	r2, [r3, #8]
 8002d52:	2a00      	cmp	r2, #0
 8002d54:	daf6      	bge.n	8002d44 <HAL_SDADC_Start+0x44>
      hsdadc->Instance->CR1 |= SDADC_CR1_RSYNC;
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d5c:	601a      	str	r2, [r3, #0]
  hsdadc->Instance->CR1 &= ~(SDADC_CR1_INIT);
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002d64:	601a      	str	r2, [r3, #0]
    hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_READY) ? \
 8002d66:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002d6a:	e7da      	b.n	8002d22 <HAL_SDADC_Start+0x22>
      hsdadc->State = HAL_SDADC_STATE_ERROR;
 8002d6c:	23ff      	movs	r3, #255	; 0xff
 8002d6e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      status = HAL_TIMEOUT;
 8002d72:	2003      	movs	r0, #3
}
 8002d74:	bd38      	pop	{r3, r4, r5, pc}
 8002d76:	bf00      	nop

08002d78 <HAL_SDADC_GetValue>:
  return hsdadc->Instance->RDATAR;
 8002d78:	6803      	ldr	r3, [r0, #0]
 8002d7a:	6e58      	ldr	r0, [r3, #100]	; 0x64
}
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop

08002d80 <HAL_SDADC_CalibrationCpltCallback>:
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop

08002d84 <HAL_SDADC_ConvCpltCallback>:
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop

08002d88 <HAL_SDADC_InjectedConvCpltCallback>:
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop

08002d8c <HAL_SDADC_ErrorCallback>:
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop

08002d90 <HAL_SDADC_PollForConversion>:
{
 8002d90:	b570      	push	{r4, r5, r6, lr}
  if((hsdadc->State != HAL_SDADC_STATE_REG) && \
 8002d92:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002d96:	2b03      	cmp	r3, #3
{
 8002d98:	4604      	mov	r4, r0
 8002d9a:	460d      	mov	r5, r1
  if((hsdadc->State != HAL_SDADC_STATE_REG) && \
 8002d9c:	d001      	beq.n	8002da2 <HAL_SDADC_PollForConversion+0x12>
 8002d9e:	2b05      	cmp	r3, #5
 8002da0:	d125      	bne.n	8002dee <HAL_SDADC_PollForConversion+0x5e>
    tickstart = HAL_GetTick();  
 8002da2:	f7fe fc07 	bl	80015b4 <HAL_GetTick>
 8002da6:	4606      	mov	r6, r0
    while((hsdadc->Instance->ISR & SDADC_ISR_REOCF) != SDADC_ISR_REOCF)
 8002da8:	1c6b      	adds	r3, r5, #1
 8002daa:	6822      	ldr	r2, [r4, #0]
 8002dac:	d113      	bne.n	8002dd6 <HAL_SDADC_PollForConversion+0x46>
 8002dae:	6893      	ldr	r3, [r2, #8]
 8002db0:	0718      	lsls	r0, r3, #28
 8002db2:	d5fc      	bpl.n	8002dae <HAL_SDADC_PollForConversion+0x1e>
    if((hsdadc->Instance->ISR & SDADC_ISR_ROVRF) == SDADC_ISR_ROVRF)
 8002db4:	6893      	ldr	r3, [r2, #8]
 8002db6:	06db      	lsls	r3, r3, #27
 8002db8:	d41d      	bmi.n	8002df6 <HAL_SDADC_PollForConversion+0x66>
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8002dba:	69a0      	ldr	r0, [r4, #24]
 8002dbc:	b9c8      	cbnz	r0, 8002df2 <HAL_SDADC_PollForConversion+0x62>
 8002dbe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002dc0:	b943      	cbnz	r3, 8002dd4 <HAL_SDADC_PollForConversion+0x44>
                      HAL_SDADC_STATE_READY : HAL_SDADC_STATE_INJ;
 8002dc2:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8002dc6:	2a03      	cmp	r2, #3
    return HAL_OK;
 8002dc8:	4618      	mov	r0, r3
                      HAL_SDADC_STATE_READY : HAL_SDADC_STATE_INJ;
 8002dca:	bf0c      	ite	eq
 8002dcc:	2301      	moveq	r3, #1
 8002dce:	2304      	movne	r3, #4
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_REG) ? \
 8002dd0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002dd4:	bd70      	pop	{r4, r5, r6, pc}
    while((hsdadc->Instance->ISR & SDADC_ISR_REOCF) != SDADC_ISR_REOCF)
 8002dd6:	6893      	ldr	r3, [r2, #8]
 8002dd8:	0719      	lsls	r1, r3, #28
 8002dda:	d4eb      	bmi.n	8002db4 <HAL_SDADC_PollForConversion+0x24>
        if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0UL))
 8002ddc:	f7fe fbea 	bl	80015b4 <HAL_GetTick>
 8002de0:	1b80      	subs	r0, r0, r6
 8002de2:	42a8      	cmp	r0, r5
 8002de4:	d801      	bhi.n	8002dea <HAL_SDADC_PollForConversion+0x5a>
 8002de6:	2d00      	cmp	r5, #0
 8002de8:	d1de      	bne.n	8002da8 <HAL_SDADC_PollForConversion+0x18>
          return HAL_TIMEOUT;
 8002dea:	2003      	movs	r0, #3
}
 8002dec:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002dee:	2001      	movs	r0, #1
}
 8002df0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_OK;
 8002df2:	2000      	movs	r0, #0
}
 8002df4:	bd70      	pop	{r4, r5, r6, pc}
      hsdadc->ErrorCode = SDADC_ERROR_REGULAR_OVERRUN;
 8002df6:	2301      	movs	r3, #1
 8002df8:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_SDADC_ErrorCallback(hsdadc);
 8002dfa:	4620      	mov	r0, r4
 8002dfc:	f7ff ffc6 	bl	8002d8c <HAL_SDADC_ErrorCallback>
      hsdadc->Instance->CLRISR |= SDADC_ISR_CLRROVRF;
 8002e00:	6822      	ldr	r2, [r4, #0]
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8002e02:	69a0      	ldr	r0, [r4, #24]
      hsdadc->Instance->CLRISR |= SDADC_ISR_CLRROVRF;
 8002e04:	68d3      	ldr	r3, [r2, #12]
 8002e06:	f043 0310 	orr.w	r3, r3, #16
 8002e0a:	60d3      	str	r3, [r2, #12]
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8002e0c:	2800      	cmp	r0, #0
 8002e0e:	d1f0      	bne.n	8002df2 <HAL_SDADC_PollForConversion+0x62>
 8002e10:	e7d5      	b.n	8002dbe <HAL_SDADC_PollForConversion+0x2e>
 8002e12:	bf00      	nop

08002e14 <HAL_SDADC_IRQHandler>:
  uint32_t tmp_isr = hsdadc->Instance->ISR;
 8002e14:	6802      	ldr	r2, [r0, #0]
 8002e16:	6891      	ldr	r1, [r2, #8]
  uint32_t tmp_cr1 = hsdadc->Instance->CR1;
 8002e18:	6813      	ldr	r3, [r2, #0]
  if(((tmp_cr1 & SDADC_CR1_REOCIE) == SDADC_CR1_REOCIE) &&
 8002e1a:	f013 0f08 	tst.w	r3, #8
{
 8002e1e:	b510      	push	{r4, lr}
 8002e20:	4604      	mov	r4, r0
  if(((tmp_cr1 & SDADC_CR1_REOCIE) == SDADC_CR1_REOCIE) &&
 8002e22:	d002      	beq.n	8002e2a <HAL_SDADC_IRQHandler+0x16>
 8002e24:	f011 0f08 	tst.w	r1, #8
 8002e28:	d11a      	bne.n	8002e60 <HAL_SDADC_IRQHandler+0x4c>
  else if(((tmp_cr1 & SDADC_CR1_JEOCIE) == SDADC_CR1_JEOCIE) &&
 8002e2a:	0798      	lsls	r0, r3, #30
 8002e2c:	d501      	bpl.n	8002e32 <HAL_SDADC_IRQHandler+0x1e>
 8002e2e:	0788      	lsls	r0, r1, #30
 8002e30:	d42c      	bmi.n	8002e8c <HAL_SDADC_IRQHandler+0x78>
  else if(((tmp_cr1 & SDADC_CR1_EOCALIE) == SDADC_CR1_EOCALIE) &&
 8002e32:	07d8      	lsls	r0, r3, #31
 8002e34:	d501      	bpl.n	8002e3a <HAL_SDADC_IRQHandler+0x26>
 8002e36:	07c8      	lsls	r0, r1, #31
 8002e38:	d448      	bmi.n	8002ecc <HAL_SDADC_IRQHandler+0xb8>
  else if(((tmp_cr1 & SDADC_CR1_ROVRIE) == SDADC_CR1_ROVRIE) &&
 8002e3a:	06d8      	lsls	r0, r3, #27
 8002e3c:	d404      	bmi.n	8002e48 <HAL_SDADC_IRQHandler+0x34>
  else if(((tmp_cr1 & SDADC_CR1_JOVRIE) == SDADC_CR1_JOVRIE) &&
 8002e3e:	0758      	lsls	r0, r3, #29
 8002e40:	d501      	bpl.n	8002e46 <HAL_SDADC_IRQHandler+0x32>
 8002e42:	074b      	lsls	r3, r1, #29
 8002e44:	d451      	bmi.n	8002eea <HAL_SDADC_IRQHandler+0xd6>
}
 8002e46:	bd10      	pop	{r4, pc}
  else if(((tmp_cr1 & SDADC_CR1_ROVRIE) == SDADC_CR1_ROVRIE) &&
 8002e48:	06c8      	lsls	r0, r1, #27
 8002e4a:	d5f8      	bpl.n	8002e3e <HAL_SDADC_IRQHandler+0x2a>
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLRROVRF;
 8002e4c:	68d3      	ldr	r3, [r2, #12]
    hsdadc->ErrorCode = SDADC_ERROR_REGULAR_OVERRUN;
 8002e4e:	2101      	movs	r1, #1
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLRROVRF;
 8002e50:	f043 0310 	orr.w	r3, r3, #16
 8002e54:	60d3      	str	r3, [r2, #12]
    HAL_SDADC_ErrorCallback(hsdadc);
 8002e56:	4620      	mov	r0, r4
    hsdadc->ErrorCode = SDADC_ERROR_REGULAR_OVERRUN;
 8002e58:	6421      	str	r1, [r4, #64]	; 0x40
    HAL_SDADC_ErrorCallback(hsdadc);
 8002e5a:	f7ff ff97 	bl	8002d8c <HAL_SDADC_ErrorCallback>
}
 8002e5e:	bd10      	pop	{r4, pc}
    HAL_SDADC_ConvCpltCallback(hsdadc);
 8002e60:	f7ff ff90 	bl	8002d84 <HAL_SDADC_ConvCpltCallback>
    if((hsdadc->RegularContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8002e64:	69a3      	ldr	r3, [r4, #24]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1ed      	bne.n	8002e46 <HAL_SDADC_IRQHandler+0x32>
 8002e6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1ea      	bne.n	8002e46 <HAL_SDADC_IRQHandler+0x32>
      hsdadc->Instance->CR1 &= ~(SDADC_CR1_REOCIE | SDADC_CR1_ROVRIE);
 8002e70:	6822      	ldr	r2, [r4, #0]
 8002e72:	6813      	ldr	r3, [r2, #0]
 8002e74:	f023 0318 	bic.w	r3, r3, #24
 8002e78:	6013      	str	r3, [r2, #0]
                      HAL_SDADC_STATE_READY : HAL_SDADC_STATE_INJ;
 8002e7a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002e7e:	2b03      	cmp	r3, #3
 8002e80:	bf0c      	ite	eq
 8002e82:	2301      	moveq	r3, #1
 8002e84:	2304      	movne	r3, #4
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_REG) ? \
 8002e86:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002e8a:	bd10      	pop	{r4, pc}
    HAL_SDADC_InjectedConvCpltCallback(hsdadc);
 8002e8c:	4620      	mov	r0, r4
 8002e8e:	f7ff ff7b 	bl	8002d88 <HAL_SDADC_InjectedConvCpltCallback>
    hsdadc->InjConvRemaining--;
 8002e92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e94:	3b01      	subs	r3, #1
 8002e96:	6263      	str	r3, [r4, #36]	; 0x24
    if(hsdadc->InjConvRemaining ==0UL)
 8002e98:	b90b      	cbnz	r3, 8002e9e <HAL_SDADC_IRQHandler+0x8a>
      hsdadc->InjConvRemaining = hsdadc->InjectedChannelsNbr;
 8002e9a:	6a23      	ldr	r3, [r4, #32]
 8002e9c:	6263      	str	r3, [r4, #36]	; 0x24
    if((hsdadc->InjectedContMode == SDADC_CONTINUOUS_CONV_OFF) && \
 8002e9e:	69e2      	ldr	r2, [r4, #28]
 8002ea0:	2a00      	cmp	r2, #0
 8002ea2:	d1d0      	bne.n	8002e46 <HAL_SDADC_IRQHandler+0x32>
 8002ea4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002ea6:	2a00      	cmp	r2, #0
 8002ea8:	d1cd      	bne.n	8002e46 <HAL_SDADC_IRQHandler+0x32>
       (hsdadc->InjectedTrigger == SDADC_SOFTWARE_TRIGGER) && \
 8002eaa:	6a22      	ldr	r2, [r4, #32]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d1ca      	bne.n	8002e46 <HAL_SDADC_IRQHandler+0x32>
      hsdadc->Instance->CR1 &= ~(SDADC_CR1_JEOCIE | SDADC_CR1_JOVRIE);
 8002eb0:	6822      	ldr	r2, [r4, #0]
 8002eb2:	6813      	ldr	r3, [r2, #0]
 8002eb4:	f023 0306 	bic.w	r3, r3, #6
 8002eb8:	6013      	str	r3, [r2, #0]
                      HAL_SDADC_STATE_READY : HAL_SDADC_STATE_REG;
 8002eba:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002ebe:	2b04      	cmp	r3, #4
 8002ec0:	bf0c      	ite	eq
 8002ec2:	2301      	moveq	r3, #1
 8002ec4:	2303      	movne	r3, #3
      hsdadc->State = (hsdadc->State == HAL_SDADC_STATE_INJ) ? \
 8002ec6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002eca:	bd10      	pop	{r4, pc}
    hsdadc->Instance->CR1 &= ~(SDADC_CR1_EOCALIE);
 8002ecc:	6813      	ldr	r3, [r2, #0]
 8002ece:	f023 0301 	bic.w	r3, r3, #1
 8002ed2:	6013      	str	r3, [r2, #0]
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLREOCALF;
 8002ed4:	68d3      	ldr	r3, [r2, #12]
 8002ed6:	f043 0301 	orr.w	r3, r3, #1
 8002eda:	60d3      	str	r3, [r2, #12]
    HAL_SDADC_CalibrationCpltCallback(hsdadc);
 8002edc:	4620      	mov	r0, r4
 8002ede:	f7ff ff4f 	bl	8002d80 <HAL_SDADC_CalibrationCpltCallback>
    hsdadc->State = HAL_SDADC_STATE_READY;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002ee8:	bd10      	pop	{r4, pc}
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLRJOVRF;
 8002eea:	68d3      	ldr	r3, [r2, #12]
    hsdadc->ErrorCode = SDADC_ERROR_INJECTED_OVERRUN;
 8002eec:	2102      	movs	r1, #2
    hsdadc->Instance->CLRISR |= SDADC_ISR_CLRJOVRF;
 8002eee:	f043 0304 	orr.w	r3, r3, #4
 8002ef2:	60d3      	str	r3, [r2, #12]
    HAL_SDADC_ErrorCallback(hsdadc);
 8002ef4:	4620      	mov	r0, r4
    hsdadc->ErrorCode = SDADC_ERROR_INJECTED_OVERRUN;
 8002ef6:	6421      	str	r1, [r4, #64]	; 0x40
    HAL_SDADC_ErrorCallback(hsdadc);
 8002ef8:	f7ff ff48 	bl	8002d8c <HAL_SDADC_ErrorCallback>
}
 8002efc:	bd10      	pop	{r4, pc}
 8002efe:	bf00      	nop

08002f00 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f00:	2800      	cmp	r0, #0
 8002f02:	d071      	beq.n	8002fe8 <HAL_TIM_Base_Init+0xe8>
{
 8002f04:	b510      	push	{r4, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f06:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002f0a:	4604      	mov	r4, r0
 8002f0c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d064      	beq.n	8002fde <HAL_TIM_Base_Init+0xde>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f14:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002f16:	2302      	movs	r3, #2
 8002f18:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f1c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 8002f20:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f22:	d04a      	beq.n	8002fba <HAL_TIM_Base_Init+0xba>
 8002f24:	493c      	ldr	r1, [pc, #240]	; (8003018 <HAL_TIM_Base_Init+0x118>)
 8002f26:	428a      	cmp	r2, r1
 8002f28:	d047      	beq.n	8002fba <HAL_TIM_Base_Init+0xba>
 8002f2a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002f2e:	428a      	cmp	r2, r1
 8002f30:	d043      	beq.n	8002fba <HAL_TIM_Base_Init+0xba>
 8002f32:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002f36:	428a      	cmp	r2, r1
 8002f38:	d03f      	beq.n	8002fba <HAL_TIM_Base_Init+0xba>
 8002f3a:	f501 31a8 	add.w	r1, r1, #86016	; 0x15000
 8002f3e:	428a      	cmp	r2, r1
 8002f40:	d054      	beq.n	8002fec <HAL_TIM_Base_Init+0xec>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f42:	4936      	ldr	r1, [pc, #216]	; (800301c <HAL_TIM_Base_Init+0x11c>)
 8002f44:	428a      	cmp	r2, r1
 8002f46:	d03c      	beq.n	8002fc2 <HAL_TIM_Base_Init+0xc2>
 8002f48:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002f4c:	428a      	cmp	r2, r1
 8002f4e:	d038      	beq.n	8002fc2 <HAL_TIM_Base_Init+0xc2>
 8002f50:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002f54:	428a      	cmp	r2, r1
 8002f56:	d034      	beq.n	8002fc2 <HAL_TIM_Base_Init+0xc2>
 8002f58:	f501 3190 	add.w	r1, r1, #73728	; 0x12000
 8002f5c:	428a      	cmp	r2, r1
 8002f5e:	d04a      	beq.n	8002ff6 <HAL_TIM_Base_Init+0xf6>
 8002f60:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002f64:	428a      	cmp	r2, r1
 8002f66:	d046      	beq.n	8002ff6 <HAL_TIM_Base_Init+0xf6>
 8002f68:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002f6c:	428a      	cmp	r2, r1
 8002f6e:	d042      	beq.n	8002ff6 <HAL_TIM_Base_Init+0xf6>
 8002f70:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
 8002f74:	428a      	cmp	r2, r1
 8002f76:	d024      	beq.n	8002fc2 <HAL_TIM_Base_Init+0xc2>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f78:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f7a:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f80:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8002f82:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f84:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f86:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002f88:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f8e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f92:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002f96:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002f9a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002f9e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fa2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002fa6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002faa:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8002fae:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8002fb2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002fb6:	2000      	movs	r0, #0
}
 8002fb8:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8002fba:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002fc0:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fc2:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fc4:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fca:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fd0:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fd2:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8002fd4:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8002fd6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fd8:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002fda:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fdc:	e7d5      	b.n	8002f8a <HAL_TIM_Base_Init+0x8a>
    htim->Lock = HAL_UNLOCKED;
 8002fde:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002fe2:	f7fe f9cb 	bl	800137c <HAL_TIM_Base_MspInit>
 8002fe6:	e795      	b.n	8002f14 <HAL_TIM_Base_Init+0x14>
    return HAL_ERROR;
 8002fe8:	2001      	movs	r0, #1
}
 8002fea:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8002fec:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002ff2:	430b      	orrs	r3, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ff4:	e7a5      	b.n	8002f42 <HAL_TIM_Base_Init+0x42>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ff6:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ff8:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ffa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ffe:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003000:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003004:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8003006:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003008:	68e3      	ldr	r3, [r4, #12]
 800300a:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800300c:	6863      	ldr	r3, [r4, #4]
 800300e:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003010:	6963      	ldr	r3, [r4, #20]
 8003012:	6313      	str	r3, [r2, #48]	; 0x30
 8003014:	e7b9      	b.n	8002f8a <HAL_TIM_Base_Init+0x8a>
 8003016:	bf00      	nop
 8003018:	40000400 	.word	0x40000400
 800301c:	40001800 	.word	0x40001800

08003020 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003020:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003024:	2b01      	cmp	r3, #1
 8003026:	d12c      	bne.n	8003082 <HAL_TIM_Base_Start_IT+0x62>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003028:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800302a:	2202      	movs	r2, #2
 800302c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003030:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003036:	f042 0201 	orr.w	r2, r2, #1
 800303a:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800303c:	d016      	beq.n	800306c <HAL_TIM_Base_Start_IT+0x4c>
 800303e:	4a13      	ldr	r2, [pc, #76]	; (800308c <HAL_TIM_Base_Start_IT+0x6c>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d013      	beq.n	800306c <HAL_TIM_Base_Start_IT+0x4c>
 8003044:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003048:	4293      	cmp	r3, r2
 800304a:	d00f      	beq.n	800306c <HAL_TIM_Base_Start_IT+0x4c>
 800304c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003050:	4293      	cmp	r3, r2
 8003052:	d00b      	beq.n	800306c <HAL_TIM_Base_Start_IT+0x4c>
 8003054:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8003058:	4293      	cmp	r3, r2
 800305a:	d007      	beq.n	800306c <HAL_TIM_Base_Start_IT+0x4c>
 800305c:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8003060:	4293      	cmp	r3, r2
 8003062:	d003      	beq.n	800306c <HAL_TIM_Base_Start_IT+0x4c>
 8003064:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8003068:	4293      	cmp	r3, r2
 800306a:	d104      	bne.n	8003076 <HAL_TIM_Base_Start_IT+0x56>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800306c:	689a      	ldr	r2, [r3, #8]
 800306e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003072:	2a06      	cmp	r2, #6
 8003074:	d007      	beq.n	8003086 <HAL_TIM_Base_Start_IT+0x66>
    __HAL_TIM_ENABLE(htim);
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 800307c:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	4770      	bx	lr
    return HAL_ERROR;
 8003082:	2001      	movs	r0, #1
 8003084:	4770      	bx	lr
  return HAL_OK;
 8003086:	2000      	movs	r0, #0
}
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	40000400 	.word	0x40000400

08003090 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003090:	2800      	cmp	r0, #0
 8003092:	d071      	beq.n	8003178 <HAL_TIM_PWM_Init+0xe8>
{
 8003094:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8003096:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800309a:	4604      	mov	r4, r0
 800309c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d064      	beq.n	800316e <HAL_TIM_PWM_Init+0xde>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030a4:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80030a6:	2302      	movs	r3, #2
 80030a8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030ac:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 80030b0:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030b2:	d04a      	beq.n	800314a <HAL_TIM_PWM_Init+0xba>
 80030b4:	493c      	ldr	r1, [pc, #240]	; (80031a8 <HAL_TIM_PWM_Init+0x118>)
 80030b6:	428a      	cmp	r2, r1
 80030b8:	d047      	beq.n	800314a <HAL_TIM_PWM_Init+0xba>
 80030ba:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80030be:	428a      	cmp	r2, r1
 80030c0:	d043      	beq.n	800314a <HAL_TIM_PWM_Init+0xba>
 80030c2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80030c6:	428a      	cmp	r2, r1
 80030c8:	d03f      	beq.n	800314a <HAL_TIM_PWM_Init+0xba>
 80030ca:	f501 31a8 	add.w	r1, r1, #86016	; 0x15000
 80030ce:	428a      	cmp	r2, r1
 80030d0:	d054      	beq.n	800317c <HAL_TIM_PWM_Init+0xec>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030d2:	4936      	ldr	r1, [pc, #216]	; (80031ac <HAL_TIM_PWM_Init+0x11c>)
 80030d4:	428a      	cmp	r2, r1
 80030d6:	d03c      	beq.n	8003152 <HAL_TIM_PWM_Init+0xc2>
 80030d8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80030dc:	428a      	cmp	r2, r1
 80030de:	d038      	beq.n	8003152 <HAL_TIM_PWM_Init+0xc2>
 80030e0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80030e4:	428a      	cmp	r2, r1
 80030e6:	d034      	beq.n	8003152 <HAL_TIM_PWM_Init+0xc2>
 80030e8:	f501 3190 	add.w	r1, r1, #73728	; 0x12000
 80030ec:	428a      	cmp	r2, r1
 80030ee:	d04a      	beq.n	8003186 <HAL_TIM_PWM_Init+0xf6>
 80030f0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80030f4:	428a      	cmp	r2, r1
 80030f6:	d046      	beq.n	8003186 <HAL_TIM_PWM_Init+0xf6>
 80030f8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80030fc:	428a      	cmp	r2, r1
 80030fe:	d042      	beq.n	8003186 <HAL_TIM_PWM_Init+0xf6>
 8003100:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
 8003104:	428a      	cmp	r2, r1
 8003106:	d024      	beq.n	8003152 <HAL_TIM_PWM_Init+0xc2>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003108:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800310a:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800310c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003110:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8003112:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8003114:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003116:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003118:	6293      	str	r3, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 800311a:	2301      	movs	r3, #1
 800311c:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800311e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003122:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003126:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800312a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800312e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003132:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003136:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800313a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800313e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003142:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003146:	2000      	movs	r0, #0
}
 8003148:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 800314a:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800314c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003150:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003152:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003154:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800315a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800315c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003160:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003162:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8003164:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8003166:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003168:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800316a:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800316c:	e7d5      	b.n	800311a <HAL_TIM_PWM_Init+0x8a>
    htim->Lock = HAL_UNLOCKED;
 800316e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003172:	f7fe f8ed 	bl	8001350 <HAL_TIM_PWM_MspInit>
 8003176:	e795      	b.n	80030a4 <HAL_TIM_PWM_Init+0x14>
    return HAL_ERROR;
 8003178:	2001      	movs	r0, #1
}
 800317a:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800317c:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800317e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003182:	430b      	orrs	r3, r1
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003184:	e7a5      	b.n	80030d2 <HAL_TIM_PWM_Init+0x42>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003186:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003188:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 800318a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800318e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003190:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003194:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8003196:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003198:	68e3      	ldr	r3, [r4, #12]
 800319a:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800319c:	6863      	ldr	r3, [r4, #4]
 800319e:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80031a0:	6963      	ldr	r3, [r4, #20]
 80031a2:	6313      	str	r3, [r2, #48]	; 0x30
 80031a4:	e7b9      	b.n	800311a <HAL_TIM_PWM_Init+0x8a>
 80031a6:	bf00      	nop
 80031a8:	40000400 	.word	0x40000400
 80031ac:	40001800 	.word	0x40001800

080031b0 <HAL_TIM_PWM_Start>:
 80031b0:	2900      	cmp	r1, #0
 80031b2:	d141      	bne.n	8003238 <HAL_TIM_PWM_Start+0x88>
 80031b4:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d145      	bne.n	8003248 <HAL_TIM_PWM_Start+0x98>
 80031bc:	2302      	movs	r3, #2
 80031be:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 80031c2:	6803      	ldr	r3, [r0, #0]
 80031c4:	f001 011f 	and.w	r1, r1, #31
 80031c8:	6a18      	ldr	r0, [r3, #32]
 80031ca:	2201      	movs	r2, #1
 80031cc:	408a      	lsls	r2, r1
 80031ce:	ea20 0002 	bic.w	r0, r0, r2
 80031d2:	6218      	str	r0, [r3, #32]
 80031d4:	6a18      	ldr	r0, [r3, #32]
 80031d6:	492b      	ldr	r1, [pc, #172]	; (8003284 <HAL_TIM_PWM_Start+0xd4>)
 80031d8:	4302      	orrs	r2, r0
 80031da:	428b      	cmp	r3, r1
 80031dc:	621a      	str	r2, [r3, #32]
 80031de:	d035      	beq.n	800324c <HAL_TIM_PWM_Start+0x9c>
 80031e0:	4a29      	ldr	r2, [pc, #164]	; (8003288 <HAL_TIM_PWM_Start+0xd8>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d032      	beq.n	800324c <HAL_TIM_PWM_Start+0x9c>
 80031e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d02e      	beq.n	800324c <HAL_TIM_PWM_Start+0x9c>
 80031ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031f2:	d016      	beq.n	8003222 <HAL_TIM_PWM_Start+0x72>
 80031f4:	4a25      	ldr	r2, [pc, #148]	; (800328c <HAL_TIM_PWM_Start+0xdc>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d013      	beq.n	8003222 <HAL_TIM_PWM_Start+0x72>
 80031fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80031fe:	4293      	cmp	r3, r2
 8003200:	d00f      	beq.n	8003222 <HAL_TIM_PWM_Start+0x72>
 8003202:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003206:	4293      	cmp	r3, r2
 8003208:	d00b      	beq.n	8003222 <HAL_TIM_PWM_Start+0x72>
 800320a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800320e:	4293      	cmp	r3, r2
 8003210:	d007      	beq.n	8003222 <HAL_TIM_PWM_Start+0x72>
 8003212:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8003216:	4293      	cmp	r3, r2
 8003218:	d003      	beq.n	8003222 <HAL_TIM_PWM_Start+0x72>
 800321a:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 800321e:	4293      	cmp	r3, r2
 8003220:	d104      	bne.n	800322c <HAL_TIM_PWM_Start+0x7c>
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	f002 0207 	and.w	r2, r2, #7
 8003228:	2a06      	cmp	r2, #6
 800322a:	d014      	beq.n	8003256 <HAL_TIM_PWM_Start+0xa6>
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	f042 0201 	orr.w	r2, r2, #1
 8003232:	2000      	movs	r0, #0
 8003234:	601a      	str	r2, [r3, #0]
 8003236:	4770      	bx	lr
 8003238:	2904      	cmp	r1, #4
 800323a:	d012      	beq.n	8003262 <HAL_TIM_PWM_Start+0xb2>
 800323c:	2908      	cmp	r1, #8
 800323e:	d018      	beq.n	8003272 <HAL_TIM_PWM_Start+0xc2>
 8003240:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003244:	2b01      	cmp	r3, #1
 8003246:	d008      	beq.n	800325a <HAL_TIM_PWM_Start+0xaa>
 8003248:	2001      	movs	r0, #1
 800324a:	4770      	bx	lr
 800324c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800324e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003252:	645a      	str	r2, [r3, #68]	; 0x44
 8003254:	e7cb      	b.n	80031ee <HAL_TIM_PWM_Start+0x3e>
 8003256:	2000      	movs	r0, #0
 8003258:	4770      	bx	lr
 800325a:	2302      	movs	r3, #2
 800325c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8003260:	e7af      	b.n	80031c2 <HAL_TIM_PWM_Start+0x12>
 8003262:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8003266:	2b01      	cmp	r3, #1
 8003268:	d1ee      	bne.n	8003248 <HAL_TIM_PWM_Start+0x98>
 800326a:	2302      	movs	r3, #2
 800326c:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8003270:	e7a7      	b.n	80031c2 <HAL_TIM_PWM_Start+0x12>
 8003272:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003276:	2b01      	cmp	r3, #1
 8003278:	d1e6      	bne.n	8003248 <HAL_TIM_PWM_Start+0x98>
 800327a:	2302      	movs	r3, #2
 800327c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8003280:	e79f      	b.n	80031c2 <HAL_TIM_PWM_Start+0x12>
 8003282:	bf00      	nop
 8003284:	40014000 	.word	0x40014000
 8003288:	40014400 	.word	0x40014400
 800328c:	40000400 	.word	0x40000400

08003290 <HAL_TIM_PWM_ConfigChannel>:
{
 8003290:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8003292:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 8003296:	2801      	cmp	r0, #1
 8003298:	f000 80ce 	beq.w	8003438 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 800329c:	2001      	movs	r0, #1
{
 800329e:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 80032a0:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  switch (Channel)
 80032a4:	2a0c      	cmp	r2, #12
 80032a6:	d808      	bhi.n	80032ba <HAL_TIM_PWM_ConfigChannel+0x2a>
 80032a8:	e8df f002 	tbb	[pc, r2]
 80032ac:	07070737 	.word	0x07070737
 80032b0:	07070769 	.word	0x07070769
 80032b4:	0707079e 	.word	0x0707079e
 80032b8:	0d          	.byte	0x0d
 80032b9:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  switch (Channel)
 80032c0:	2001      	movs	r0, #1
}
 80032c2:	bcf0      	pop	{r4, r5, r6, r7}
 80032c4:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032c6:	681a      	ldr	r2, [r3, #0]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032c8:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032ca:	6a10      	ldr	r0, [r2, #32]
 80032cc:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 80032d0:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 80032d2:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 80032d4:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 80032d6:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032d8:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032dc:	ea44 2405 	orr.w	r4, r4, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032e0:	688d      	ldr	r5, [r1, #8]
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032e2:	6056      	str	r6, [r2, #4]
  tmpccer &= ~TIM_CCER_CC4P;
 80032e4:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032e8:	61d4      	str	r4, [r2, #28]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032ea:	ea40 3005 	orr.w	r0, r0, r5, lsl #12

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032ee:	684c      	ldr	r4, [r1, #4]
 80032f0:	6414      	str	r4, [r2, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032f2:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032f4:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032f6:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032f8:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 80032fc:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032fe:	69d1      	ldr	r1, [r2, #28]
 8003300:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003304:	61d1      	str	r1, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003306:	69d1      	ldr	r1, [r2, #28]
 8003308:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 800330c:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(htim);
 800330e:	2200      	movs	r2, #0
 8003310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8003314:	2000      	movs	r0, #0
}
 8003316:	bcf0      	pop	{r4, r5, r6, r7}
 8003318:	4770      	bx	lr
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800331a:	681a      	ldr	r2, [r3, #0]
  tmpccmrx |= OC_Config->OCMode;
 800331c:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800331e:	6a10      	ldr	r0, [r2, #32]
 8003320:	f020 0001 	bic.w	r0, r0, #1
 8003324:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8003326:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8003328:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 800332a:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800332c:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003330:	4334      	orrs	r4, r6
  tmpccer |= OC_Config->OCPolarity;
 8003332:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8003334:	f020 0002 	bic.w	r0, r0, #2
  tmpccer |= OC_Config->OCPolarity;
 8003338:	4330      	orrs	r0, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800333a:	4e4c      	ldr	r6, [pc, #304]	; (800346c <HAL_TIM_PWM_ConfigChannel+0x1dc>)
 800333c:	42b2      	cmp	r2, r6
 800333e:	d07d      	beq.n	800343c <HAL_TIM_PWM_ConfigChannel+0x1ac>
 8003340:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003344:	42b2      	cmp	r2, r6
 8003346:	d079      	beq.n	800343c <HAL_TIM_PWM_ConfigChannel+0x1ac>
 8003348:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800334c:	42b2      	cmp	r2, r6
 800334e:	d075      	beq.n	800343c <HAL_TIM_PWM_ConfigChannel+0x1ac>
  TIMx->CR2 = tmpcr2;
 8003350:	6055      	str	r5, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003352:	6194      	str	r4, [r2, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8003354:	684c      	ldr	r4, [r1, #4]
 8003356:	6354      	str	r4, [r2, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8003358:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800335a:	6990      	ldr	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800335c:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800335e:	f040 0008 	orr.w	r0, r0, #8
 8003362:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003364:	6991      	ldr	r1, [r2, #24]
 8003366:	f021 0104 	bic.w	r1, r1, #4
 800336a:	6191      	str	r1, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800336c:	6991      	ldr	r1, [r2, #24]
 800336e:	4321      	orrs	r1, r4
 8003370:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 8003372:	2200      	movs	r2, #0
 8003374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8003378:	2000      	movs	r0, #0
}
 800337a:	bcf0      	pop	{r4, r5, r6, r7}
 800337c:	4770      	bx	lr
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800337e:	681a      	ldr	r2, [r3, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003380:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003382:	6a10      	ldr	r0, [r2, #32]
 8003384:	f020 0010 	bic.w	r0, r0, #16
 8003388:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 800338a:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 800338c:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 800338e:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003390:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003394:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003398:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800339a:	f020 0020 	bic.w	r0, r0, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800339e:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033a2:	4e32      	ldr	r6, [pc, #200]	; (800346c <HAL_TIM_PWM_ConfigChannel+0x1dc>)
 80033a4:	42b2      	cmp	r2, r6
 80033a6:	d058      	beq.n	800345a <HAL_TIM_PWM_ConfigChannel+0x1ca>
 80033a8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80033ac:	42b2      	cmp	r2, r6
 80033ae:	d054      	beq.n	800345a <HAL_TIM_PWM_ConfigChannel+0x1ca>
 80033b0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80033b4:	42b2      	cmp	r2, r6
 80033b6:	d050      	beq.n	800345a <HAL_TIM_PWM_ConfigChannel+0x1ca>
  TIMx->CR2 = tmpcr2;
 80033b8:	6055      	str	r5, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 80033ba:	6194      	str	r4, [r2, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80033bc:	684c      	ldr	r4, [r1, #4]
 80033be:	6394      	str	r4, [r2, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80033c0:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033c2:	6990      	ldr	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033c4:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033c6:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 80033ca:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033cc:	6991      	ldr	r1, [r2, #24]
 80033ce:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80033d2:	6191      	str	r1, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033d4:	6991      	ldr	r1, [r2, #24]
 80033d6:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 80033da:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80033e2:	2000      	movs	r0, #0
}
 80033e4:	bcf0      	pop	{r4, r5, r6, r7}
 80033e6:	4770      	bx	lr
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033e8:	681a      	ldr	r2, [r3, #0]
  tmpccmrx |= OC_Config->OCMode;
 80033ea:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033ec:	6a10      	ldr	r0, [r2, #32]
 80033ee:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 80033f2:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 80033f4:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 80033f6:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 80033f8:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033fa:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80033fe:	432c      	orrs	r4, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003400:	688d      	ldr	r5, [r1, #8]
  TIMx->CR2 = tmpcr2;
 8003402:	6056      	str	r6, [r2, #4]
  tmpccer &= ~TIM_CCER_CC3P;
 8003404:	f420 7000 	bic.w	r0, r0, #512	; 0x200
  TIMx->CCMR2 = tmpccmrx;
 8003408:	61d4      	str	r4, [r2, #28]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800340a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
  TIMx->CCR3 = OC_Config->Pulse;
 800340e:	684c      	ldr	r4, [r1, #4]
 8003410:	63d4      	str	r4, [r2, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8003412:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003414:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003416:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003418:	f040 0008 	orr.w	r0, r0, #8
 800341c:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800341e:	69d1      	ldr	r1, [r2, #28]
 8003420:	f021 0104 	bic.w	r1, r1, #4
 8003424:	61d1      	str	r1, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003426:	69d1      	ldr	r1, [r2, #28]
 8003428:	4321      	orrs	r1, r4
 800342a:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(htim);
 800342c:	2200      	movs	r2, #0
 800342e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8003432:	2000      	movs	r0, #0
}
 8003434:	bcf0      	pop	{r4, r5, r6, r7}
 8003436:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003438:	2002      	movs	r0, #2
}
 800343a:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 800343c:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800343e:	f020 0008 	bic.w	r0, r0, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003442:	4330      	orrs	r0, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 8003444:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003448:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800344c:	ea47 0c06 	orr.w	ip, r7, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8003450:	f020 0004 	bic.w	r0, r0, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8003454:	ea4c 0505 	orr.w	r5, ip, r5
 8003458:	e77a      	b.n	8003350 <HAL_TIM_PWM_ConfigChannel+0xc0>
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800345a:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2;
 800345e:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003462:	ea47 0c06 	orr.w	ip, r7, r6
 8003466:	ea45 058c 	orr.w	r5, r5, ip, lsl #2
 800346a:	e7a5      	b.n	80033b8 <HAL_TIM_PWM_ConfigChannel+0x128>
 800346c:	40014000 	.word	0x40014000

08003470 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003470:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003474:	2b01      	cmp	r3, #1
 8003476:	d075      	beq.n	8003564 <HAL_TIM_ConfigClockSource+0xf4>
 8003478:	4602      	mov	r2, r0
{
 800347a:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 800347c:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 800347e:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003480:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8003484:	2001      	movs	r0, #1
 8003486:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800348a:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800348c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003490:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003494:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8003496:	680b      	ldr	r3, [r1, #0]
 8003498:	2b60      	cmp	r3, #96	; 0x60
 800349a:	d065      	beq.n	8003568 <HAL_TIM_ConfigClockSource+0xf8>
 800349c:	d824      	bhi.n	80034e8 <HAL_TIM_ConfigClockSource+0x78>
 800349e:	2b40      	cmp	r3, #64	; 0x40
 80034a0:	d07c      	beq.n	800359c <HAL_TIM_ConfigClockSource+0x12c>
 80034a2:	d94b      	bls.n	800353c <HAL_TIM_ConfigClockSource+0xcc>
 80034a4:	2b50      	cmp	r3, #80	; 0x50
 80034a6:	d117      	bne.n	80034d8 <HAL_TIM_ConfigClockSource+0x68>
                               sClockSourceConfig->ClockPolarity,
 80034a8:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80034aa:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034ac:	6a21      	ldr	r1, [r4, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034ae:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80034b2:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034b4:	6a23      	ldr	r3, [r4, #32]
 80034b6:	f023 0301 	bic.w	r3, r3, #1
 80034ba:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034bc:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034c2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034c6:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 80034c8:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034ca:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034d0:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 80034d4:	2000      	movs	r0, #0
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034d6:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 80034d8:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 80034da:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80034dc:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80034e0:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 80034e4:	bc30      	pop	{r4, r5}
 80034e6:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80034e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ec:	d038      	beq.n	8003560 <HAL_TIM_ConfigClockSource+0xf0>
 80034ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034f2:	d110      	bne.n	8003516 <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034f4:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80034f8:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034fa:	432b      	orrs	r3, r5
 80034fc:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034fe:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003502:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8003506:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003508:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800350a:	68a3      	ldr	r3, [r4, #8]
 800350c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 8003510:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003512:	60a3      	str	r3, [r4, #8]
      break;
 8003514:	e7e0      	b.n	80034d8 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8003516:	2b70      	cmp	r3, #112	; 0x70
 8003518:	d1de      	bne.n	80034d8 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800351a:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800351e:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003520:	432b      	orrs	r3, r5
 8003522:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003524:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003528:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800352c:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800352e:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003530:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003532:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 8003536:	2000      	movs	r0, #0
      htim->Instance->SMCR = tmpsmcr;
 8003538:	60a3      	str	r3, [r4, #8]
      break;
 800353a:	e7cd      	b.n	80034d8 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 800353c:	2b20      	cmp	r3, #32
 800353e:	d002      	beq.n	8003546 <HAL_TIM_ConfigClockSource+0xd6>
 8003540:	d90a      	bls.n	8003558 <HAL_TIM_ConfigClockSource+0xe8>
 8003542:	2b30      	cmp	r3, #48	; 0x30
 8003544:	d1c8      	bne.n	80034d8 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 8003546:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003548:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800354c:	430b      	orrs	r3, r1
 800354e:	f043 0307 	orr.w	r3, r3, #7
  HAL_StatusTypeDef status = HAL_OK;
 8003552:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8003554:	60a3      	str	r3, [r4, #8]
}
 8003556:	e7bf      	b.n	80034d8 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8003558:	f033 0110 	bics.w	r1, r3, #16
 800355c:	d1bc      	bne.n	80034d8 <HAL_TIM_ConfigClockSource+0x68>
 800355e:	e7f2      	b.n	8003546 <HAL_TIM_ConfigClockSource+0xd6>
  HAL_StatusTypeDef status = HAL_OK;
 8003560:	2000      	movs	r0, #0
 8003562:	e7b9      	b.n	80034d8 <HAL_TIM_ConfigClockSource+0x68>
  __HAL_LOCK(htim);
 8003564:	2002      	movs	r0, #2
}
 8003566:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003568:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockPolarity,
 800356a:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800356c:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800356e:	f023 0310 	bic.w	r3, r3, #16
 8003572:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003574:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 8003576:	6a23      	ldr	r3, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003578:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800357c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003580:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003584:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003588:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800358a:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800358c:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800358e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003592:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 8003596:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8003598:	60a3      	str	r3, [r4, #8]
}
 800359a:	e79d      	b.n	80034d8 <HAL_TIM_ConfigClockSource+0x68>
                               sClockSourceConfig->ClockPolarity,
 800359c:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800359e:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80035a0:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035a2:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80035a6:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035a8:	6a23      	ldr	r3, [r4, #32]
 80035aa:	f023 0301 	bic.w	r3, r3, #1
 80035ae:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035b0:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035b6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80035ba:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 80035bc:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80035be:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80035c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035c4:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 80035c8:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 80035ca:	60a3      	str	r3, [r4, #8]
}
 80035cc:	e784      	b.n	80034d8 <HAL_TIM_ConfigClockSource+0x68>
 80035ce:	bf00      	nop

080035d0 <HAL_TIM_OC_DelayElapsedCallback>:
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop

080035d4 <HAL_TIM_IC_CaptureCallback>:
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop

080035d8 <HAL_TIM_PWM_PulseFinishedCallback>:
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop

080035dc <HAL_TIM_TriggerCallback>:
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop

080035e0 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035e0:	6803      	ldr	r3, [r0, #0]
 80035e2:	691a      	ldr	r2, [r3, #16]
 80035e4:	0791      	lsls	r1, r2, #30
{
 80035e6:	b510      	push	{r4, lr}
 80035e8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035ea:	d502      	bpl.n	80035f2 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035ec:	68da      	ldr	r2, [r3, #12]
 80035ee:	0792      	lsls	r2, r2, #30
 80035f0:	d45f      	bmi.n	80036b2 <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035f2:	691a      	ldr	r2, [r3, #16]
 80035f4:	0750      	lsls	r0, r2, #29
 80035f6:	d502      	bpl.n	80035fe <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035f8:	68da      	ldr	r2, [r3, #12]
 80035fa:	0751      	lsls	r1, r2, #29
 80035fc:	d446      	bmi.n	800368c <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035fe:	691a      	ldr	r2, [r3, #16]
 8003600:	0712      	lsls	r2, r2, #28
 8003602:	d502      	bpl.n	800360a <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003604:	68da      	ldr	r2, [r3, #12]
 8003606:	0710      	lsls	r0, r2, #28
 8003608:	d42e      	bmi.n	8003668 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800360a:	691a      	ldr	r2, [r3, #16]
 800360c:	06d2      	lsls	r2, r2, #27
 800360e:	d502      	bpl.n	8003616 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003610:	68da      	ldr	r2, [r3, #12]
 8003612:	06d0      	lsls	r0, r2, #27
 8003614:	d418      	bmi.n	8003648 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003616:	691a      	ldr	r2, [r3, #16]
 8003618:	07d1      	lsls	r1, r2, #31
 800361a:	d502      	bpl.n	8003622 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	07d2      	lsls	r2, r2, #31
 8003620:	d45d      	bmi.n	80036de <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003622:	691a      	ldr	r2, [r3, #16]
 8003624:	0610      	lsls	r0, r2, #24
 8003626:	d502      	bpl.n	800362e <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003628:	68da      	ldr	r2, [r3, #12]
 800362a:	0611      	lsls	r1, r2, #24
 800362c:	d45f      	bmi.n	80036ee <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800362e:	691a      	ldr	r2, [r3, #16]
 8003630:	0652      	lsls	r2, r2, #25
 8003632:	d502      	bpl.n	800363a <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003634:	68da      	ldr	r2, [r3, #12]
 8003636:	0650      	lsls	r0, r2, #25
 8003638:	d461      	bmi.n	80036fe <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800363a:	691a      	ldr	r2, [r3, #16]
 800363c:	0691      	lsls	r1, r2, #26
 800363e:	d502      	bpl.n	8003646 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003640:	68da      	ldr	r2, [r3, #12]
 8003642:	0692      	lsls	r2, r2, #26
 8003644:	d443      	bmi.n	80036ce <HAL_TIM_IRQHandler+0xee>
}
 8003646:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003648:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800364c:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800364e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003650:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003652:	69db      	ldr	r3, [r3, #28]
 8003654:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003658:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800365a:	d064      	beq.n	8003726 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800365c:	f7ff ffba 	bl	80035d4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003660:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003662:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003664:	7722      	strb	r2, [r4, #28]
 8003666:	e7d6      	b.n	8003616 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003668:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800366c:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800366e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003670:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003672:	69db      	ldr	r3, [r3, #28]
 8003674:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8003676:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003678:	d152      	bne.n	8003720 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800367a:	f7ff ffa9 	bl	80035d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800367e:	4620      	mov	r0, r4
 8003680:	f7ff ffaa 	bl	80035d8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003684:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003686:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003688:	7722      	strb	r2, [r4, #28]
 800368a:	e7be      	b.n	800360a <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800368c:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003690:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003692:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003694:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800369c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800369e:	d13c      	bne.n	800371a <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036a0:	f7ff ff96 	bl	80035d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a4:	4620      	mov	r0, r4
 80036a6:	f7ff ff97 	bl	80035d8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036aa:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036ac:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ae:	7722      	strb	r2, [r4, #28]
 80036b0:	e7a5      	b.n	80035fe <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036b2:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036b6:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036b8:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036ba:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	079b      	lsls	r3, r3, #30
 80036c0:	d025      	beq.n	800370e <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 80036c2:	f7ff ff87 	bl	80035d4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036c6:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036c8:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ca:	7722      	strb	r2, [r4, #28]
 80036cc:	e791      	b.n	80035f2 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036ce:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80036d2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036d4:	611a      	str	r2, [r3, #16]
}
 80036d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80036da:	f000 b867 	b.w	80037ac <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036de:	f06f 0201 	mvn.w	r2, #1
 80036e2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80036e4:	4620      	mov	r0, r4
 80036e6:	f7fd fbdf 	bl	8000ea8 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036ea:	6823      	ldr	r3, [r4, #0]
 80036ec:	e799      	b.n	8003622 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036ee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036f2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80036f4:	4620      	mov	r0, r4
 80036f6:	f000 f85b 	bl	80037b0 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036fa:	6823      	ldr	r3, [r4, #0]
 80036fc:	e797      	b.n	800362e <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003702:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003704:	4620      	mov	r0, r4
 8003706:	f7ff ff69 	bl	80035dc <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800370a:	6823      	ldr	r3, [r4, #0]
 800370c:	e795      	b.n	800363a <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800370e:	f7ff ff5f 	bl	80035d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003712:	4620      	mov	r0, r4
 8003714:	f7ff ff60 	bl	80035d8 <HAL_TIM_PWM_PulseFinishedCallback>
 8003718:	e7d5      	b.n	80036c6 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 800371a:	f7ff ff5b 	bl	80035d4 <HAL_TIM_IC_CaptureCallback>
 800371e:	e7c4      	b.n	80036aa <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8003720:	f7ff ff58 	bl	80035d4 <HAL_TIM_IC_CaptureCallback>
 8003724:	e7ae      	b.n	8003684 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003726:	f7ff ff53 	bl	80035d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800372a:	4620      	mov	r0, r4
 800372c:	f7ff ff54 	bl	80035d8 <HAL_TIM_PWM_PulseFinishedCallback>
 8003730:	e796      	b.n	8003660 <HAL_TIM_IRQHandler+0x80>
 8003732:	bf00      	nop

08003734 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003734:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003738:	2b01      	cmp	r3, #1
 800373a:	d033      	beq.n	80037a4 <HAL_TIMEx_MasterConfigSynchronization+0x70>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800373c:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800373e:	2202      	movs	r2, #2
{
 8003740:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8003742:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8003746:	685a      	ldr	r2, [r3, #4]
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003748:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 800374a:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800374c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003750:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8003756:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003758:	d016      	beq.n	8003788 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 800375a:	4a13      	ldr	r2, [pc, #76]	; (80037a8 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d013      	beq.n	8003788 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8003760:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003764:	4293      	cmp	r3, r2
 8003766:	d00f      	beq.n	8003788 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8003768:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800376c:	4293      	cmp	r3, r2
 800376e:	d00b      	beq.n	8003788 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8003770:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8003774:	4293      	cmp	r3, r2
 8003776:	d007      	beq.n	8003788 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8003778:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800377c:	4293      	cmp	r3, r2
 800377e:	d003      	beq.n	8003788 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8003780:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8003784:	4293      	cmp	r3, r2
 8003786:	d104      	bne.n	8003792 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003788:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800378a:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800378e:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003790:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8003792:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003794:	2201      	movs	r2, #1
 8003796:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800379a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 800379e:	bc30      	pop	{r4, r5}
  return HAL_OK;
 80037a0:	4618      	mov	r0, r3
}
 80037a2:	4770      	bx	lr
  __HAL_LOCK(htim);
 80037a4:	2002      	movs	r0, #2
}
 80037a6:	4770      	bx	lr
 80037a8:	40000400 	.word	0x40000400

080037ac <HAL_TIMEx_CommutCallback>:
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop

080037b0 <HAL_TIMEx_BreakCallback>:
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop

080037b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037b8:	4604      	mov	r4, r0
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037ba:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 80037bc:	2820      	cmp	r0, #32
 80037be:	f040 8088 	bne.w	80038d2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80037c2:	4688      	mov	r8, r1
 80037c4:	b109      	cbz	r1, 80037ca <HAL_UART_Transmit+0x16>
 80037c6:	4617      	mov	r7, r2
 80037c8:	b912      	cbnz	r2, 80037d0 <HAL_UART_Transmit+0x1c>
    {
      return  HAL_ERROR;
 80037ca:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 80037cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037d0:	461d      	mov	r5, r3
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037d2:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037d6:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037d8:	f8c4 9084 	str.w	r9, [r4, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037dc:	67e3      	str	r3, [r4, #124]	; 0x7c
    tickstart = HAL_GetTick();
 80037de:	f7fd fee9 	bl	80015b4 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037e2:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 80037e4:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 80037ec:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    tickstart = HAL_GetTick();
 80037f0:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037f2:	d071      	beq.n	80038d8 <HAL_UART_Transmit+0x124>
    while (huart->TxXferCount > 0U)
 80037f4:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037f8:	6820      	ldr	r0, [r4, #0]
    while (huart->TxXferCount > 0U)
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	b1ab      	cbz	r3, 800382a <HAL_UART_Transmit+0x76>
 80037fe:	1c6a      	adds	r2, r5, #1
 8003800:	d11c      	bne.n	800383c <HAL_UART_Transmit+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003802:	69c2      	ldr	r2, [r0, #28]
 8003804:	0613      	lsls	r3, r2, #24
 8003806:	d5fc      	bpl.n	8003802 <HAL_UART_Transmit+0x4e>
      if (pdata8bits == NULL)
 8003808:	f1b8 0f00 	cmp.w	r8, #0
 800380c:	d05c      	beq.n	80038c8 <HAL_UART_Transmit+0x114>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800380e:	f818 3b01 	ldrb.w	r3, [r8], #1
 8003812:	8503      	strh	r3, [r0, #40]	; 0x28
      huart->TxXferCount--;
 8003814:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8003818:	3b01      	subs	r3, #1
 800381a:	b29b      	uxth	r3, r3
 800381c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003820:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8003824:	b29b      	uxth	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1e9      	bne.n	80037fe <HAL_UART_Transmit+0x4a>
 800382a:	1c69      	adds	r1, r5, #1
 800382c:	d15a      	bne.n	80038e4 <HAL_UART_Transmit+0x130>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800382e:	69c3      	ldr	r3, [r0, #28]
 8003830:	065a      	lsls	r2, r3, #25
 8003832:	d5fc      	bpl.n	800382e <HAL_UART_Transmit+0x7a>
    huart->gState = HAL_UART_STATE_READY;
 8003834:	2320      	movs	r3, #32
 8003836:	67e3      	str	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 8003838:	2000      	movs	r0, #0
 800383a:	e7c7      	b.n	80037cc <HAL_UART_Transmit+0x18>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800383c:	69c3      	ldr	r3, [r0, #28]
 800383e:	061f      	lsls	r7, r3, #24
 8003840:	d4e2      	bmi.n	8003808 <HAL_UART_Transmit+0x54>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003842:	f7fd feb7 	bl	80015b4 <HAL_GetTick>
 8003846:	1b80      	subs	r0, r0, r6
 8003848:	4285      	cmp	r5, r0
 800384a:	d338      	bcc.n	80038be <HAL_UART_Transmit+0x10a>
 800384c:	2d00      	cmp	r5, #0
 800384e:	d036      	beq.n	80038be <HAL_UART_Transmit+0x10a>
      {

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003850:	6823      	ldr	r3, [r4, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	0752      	lsls	r2, r2, #29
 8003856:	4618      	mov	r0, r3
 8003858:	d5d1      	bpl.n	80037fe <HAL_UART_Transmit+0x4a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800385a:	69da      	ldr	r2, [r3, #28]
 800385c:	0717      	lsls	r7, r2, #28
 800385e:	f100 8089 	bmi.w	8003974 <HAL_UART_Transmit+0x1c0>
           /* Process Unlocked */
           __HAL_UNLOCK(huart);

           return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003862:	69da      	ldr	r2, [r3, #28]
 8003864:	0511      	lsls	r1, r2, #20
 8003866:	d5ca      	bpl.n	80037fe <HAL_UART_Transmit+0x4a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003868:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800386c:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386e:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003872:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003876:	e843 2100 	strex	r1, r2, [r3]
 800387a:	b139      	cbz	r1, 800388c <HAL_UART_Transmit+0xd8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387c:	e853 2f00 	ldrex	r2, [r3]
 8003880:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003884:	e843 2100 	strex	r1, r2, [r3]
 8003888:	2900      	cmp	r1, #0
 800388a:	d1f7      	bne.n	800387c <HAL_UART_Transmit+0xc8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388c:	f103 0208 	add.w	r2, r3, #8
 8003890:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003894:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003898:	f103 0008 	add.w	r0, r3, #8
 800389c:	e840 2100 	strex	r1, r2, [r0]
 80038a0:	2900      	cmp	r1, #0
 80038a2:	d1f3      	bne.n	800388c <HAL_UART_Transmit+0xd8>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038a4:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80038a6:	2a01      	cmp	r2, #1
 80038a8:	d05b      	beq.n	8003962 <HAL_UART_Transmit+0x1ae>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038aa:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 80038ac:	2220      	movs	r2, #32
 80038ae:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80038b2:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038b4:	6623      	str	r3, [r4, #96]	; 0x60
          __HAL_UNLOCK(huart);
 80038b6:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038ba:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      huart->gState = HAL_UART_STATE_READY;
 80038be:	2320      	movs	r3, #32
 80038c0:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 80038c2:	2003      	movs	r0, #3
}
 80038c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038c8:	f839 3b02 	ldrh.w	r3, [r9], #2
 80038cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038d0:	e79f      	b.n	8003812 <HAL_UART_Transmit+0x5e>
    return HAL_BUSY;
 80038d2:	2002      	movs	r0, #2
}
 80038d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038d8:	6923      	ldr	r3, [r4, #16]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d18a      	bne.n	80037f4 <HAL_UART_Transmit+0x40>
 80038de:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 80038e0:	4698      	mov	r8, r3
 80038e2:	e787      	b.n	80037f4 <HAL_UART_Transmit+0x40>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038e4:	69c3      	ldr	r3, [r0, #28]
 80038e6:	065b      	lsls	r3, r3, #25
 80038e8:	d4a4      	bmi.n	8003834 <HAL_UART_Transmit+0x80>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ea:	f7fd fe63 	bl	80015b4 <HAL_GetTick>
 80038ee:	1b80      	subs	r0, r0, r6
 80038f0:	4285      	cmp	r5, r0
 80038f2:	d3e4      	bcc.n	80038be <HAL_UART_Transmit+0x10a>
 80038f4:	2d00      	cmp	r5, #0
 80038f6:	d0e2      	beq.n	80038be <HAL_UART_Transmit+0x10a>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038f8:	6823      	ldr	r3, [r4, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	0751      	lsls	r1, r2, #29
 80038fe:	4618      	mov	r0, r3
 8003900:	d593      	bpl.n	800382a <HAL_UART_Transmit+0x76>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003902:	69da      	ldr	r2, [r3, #28]
 8003904:	0712      	lsls	r2, r2, #28
 8003906:	d463      	bmi.n	80039d0 <HAL_UART_Transmit+0x21c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003908:	69da      	ldr	r2, [r3, #28]
 800390a:	0517      	lsls	r7, r2, #20
 800390c:	d58d      	bpl.n	800382a <HAL_UART_Transmit+0x76>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800390e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003912:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003914:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003918:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391c:	e843 2100 	strex	r1, r2, [r3]
 8003920:	b139      	cbz	r1, 8003932 <HAL_UART_Transmit+0x17e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003922:	e853 2f00 	ldrex	r2, [r3]
 8003926:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392a:	e843 2100 	strex	r1, r2, [r3]
 800392e:	2900      	cmp	r1, #0
 8003930:	d1f7      	bne.n	8003922 <HAL_UART_Transmit+0x16e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003932:	f103 0208 	add.w	r2, r3, #8
 8003936:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800393a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393e:	f103 0008 	add.w	r0, r3, #8
 8003942:	e840 2100 	strex	r1, r2, [r0]
 8003946:	2900      	cmp	r1, #0
 8003948:	d1f3      	bne.n	8003932 <HAL_UART_Transmit+0x17e>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800394a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800394c:	2a01      	cmp	r2, #1
 800394e:	d1ac      	bne.n	80038aa <HAL_UART_Transmit+0xf6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003950:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003954:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003958:	e843 2100 	strex	r1, r2, [r3]
 800395c:	2900      	cmp	r1, #0
 800395e:	d1f7      	bne.n	8003950 <HAL_UART_Transmit+0x19c>
 8003960:	e7a3      	b.n	80038aa <HAL_UART_Transmit+0xf6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003962:	e853 2f00 	ldrex	r2, [r3]
 8003966:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396a:	e843 2100 	strex	r1, r2, [r3]
 800396e:	2900      	cmp	r1, #0
 8003970:	d1f7      	bne.n	8003962 <HAL_UART_Transmit+0x1ae>
 8003972:	e79a      	b.n	80038aa <HAL_UART_Transmit+0xf6>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003974:	2208      	movs	r2, #8
 8003976:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003978:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800397c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003980:	e843 2100 	strex	r1, r2, [r3]
 8003984:	2900      	cmp	r1, #0
 8003986:	d1f7      	bne.n	8003978 <HAL_UART_Transmit+0x1c4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003988:	f103 0208 	add.w	r2, r3, #8
 800398c:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003990:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003994:	f103 0008 	add.w	r0, r3, #8
 8003998:	e840 2100 	strex	r1, r2, [r0]
 800399c:	2900      	cmp	r1, #0
 800399e:	d1f3      	bne.n	8003988 <HAL_UART_Transmit+0x1d4>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039a0:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80039a2:	2a01      	cmp	r2, #1
 80039a4:	d00b      	beq.n	80039be <HAL_UART_Transmit+0x20a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039a6:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 80039a8:	2120      	movs	r1, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80039aa:	2208      	movs	r2, #8
  huart->RxState = HAL_UART_STATE_READY;
 80039ac:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 80039b0:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039b2:	6623      	str	r3, [r4, #96]	; 0x60
           __HAL_UNLOCK(huart);
 80039b4:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80039b8:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
           return HAL_ERROR;
 80039bc:	e77f      	b.n	80038be <HAL_UART_Transmit+0x10a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039be:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039c2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c6:	e843 2100 	strex	r1, r2, [r3]
 80039ca:	2900      	cmp	r1, #0
 80039cc:	d1f7      	bne.n	80039be <HAL_UART_Transmit+0x20a>
 80039ce:	e7ea      	b.n	80039a6 <HAL_UART_Transmit+0x1f2>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039d0:	2208      	movs	r2, #8
 80039d2:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d4:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039d8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039dc:	e843 2100 	strex	r1, r2, [r3]
 80039e0:	2900      	cmp	r1, #0
 80039e2:	d1f7      	bne.n	80039d4 <HAL_UART_Transmit+0x220>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e4:	f103 0208 	add.w	r2, r3, #8
 80039e8:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ec:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f0:	f103 0008 	add.w	r0, r3, #8
 80039f4:	e840 2100 	strex	r1, r2, [r0]
 80039f8:	2900      	cmp	r1, #0
 80039fa:	d1f3      	bne.n	80039e4 <HAL_UART_Transmit+0x230>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039fc:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80039fe:	2a01      	cmp	r2, #1
 8003a00:	d1d1      	bne.n	80039a6 <HAL_UART_Transmit+0x1f2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a02:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a06:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0a:	e843 2100 	strex	r1, r2, [r3]
 8003a0e:	2900      	cmp	r1, #0
 8003a10:	d1f7      	bne.n	8003a02 <HAL_UART_Transmit+0x24e>
 8003a12:	e7c8      	b.n	80039a6 <HAL_UART_Transmit+0x1f2>

08003a14 <HAL_UART_TxCpltCallback>:
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop

08003a18 <HAL_UART_ErrorCallback>:
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop

08003a1c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a1c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003a1e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8003a20:	2300      	movs	r3, #0
 8003a22:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003a26:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a2a:	f7ff fff5 	bl	8003a18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a2e:	bd08      	pop	{r3, pc}

08003a30 <HAL_UARTEx_RxEventCallback>:
}
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop

08003a34 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003a34:	6803      	ldr	r3, [r0, #0]
 8003a36:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a38:	6819      	ldr	r1, [r3, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003a3a:	f640 0c0f 	movw	ip, #2063	; 0x80f
  if (errorflags == 0U)
 8003a3e:	ea12 0f0c 	tst.w	r2, ip
{
 8003a42:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a44:	689d      	ldr	r5, [r3, #8]
{
 8003a46:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8003a48:	d17f      	bne.n	8003b4a <HAL_UART_IRQHandler+0x116>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a4a:	0696      	lsls	r6, r2, #26
 8003a4c:	d502      	bpl.n	8003a54 <HAL_UART_IRQHandler+0x20>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a4e:	068e      	lsls	r6, r1, #26
 8003a50:	f100 8117 	bmi.w	8003c82 <HAL_UART_IRQHandler+0x24e>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a54:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003a56:	2801      	cmp	r0, #1
 8003a58:	d024      	beq.n	8003aa4 <HAL_UART_IRQHandler+0x70>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003a5a:	02d6      	lsls	r6, r2, #11
 8003a5c:	d502      	bpl.n	8003a64 <HAL_UART_IRQHandler+0x30>
 8003a5e:	0268      	lsls	r0, r5, #9
 8003a60:	f100 8114 	bmi.w	8003c8c <HAL_UART_IRQHandler+0x258>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003a64:	0616      	lsls	r6, r2, #24
 8003a66:	d414      	bmi.n	8003a92 <HAL_UART_IRQHandler+0x5e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003a68:	0650      	lsls	r0, r2, #25
 8003a6a:	d501      	bpl.n	8003a70 <HAL_UART_IRQHandler+0x3c>
 8003a6c:	064a      	lsls	r2, r1, #25
 8003a6e:	d400      	bmi.n	8003a72 <HAL_UART_IRQHandler+0x3e>
}
 8003a70:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a72:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7a:	e843 2100 	strex	r1, r2, [r3]
 8003a7e:	2900      	cmp	r1, #0
 8003a80:	d1f7      	bne.n	8003a72 <HAL_UART_IRQHandler+0x3e>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a82:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003a84:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8003a86:	67e2      	str	r2, [r4, #124]	; 0x7c
  huart->TxISR = NULL;
 8003a88:	66e3      	str	r3, [r4, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a8a:	4620      	mov	r0, r4
 8003a8c:	f7ff ffc2 	bl	8003a14 <HAL_UART_TxCpltCallback>
}
 8003a90:	bd70      	pop	{r4, r5, r6, pc}
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003a92:	060d      	lsls	r5, r1, #24
 8003a94:	d5e8      	bpl.n	8003a68 <HAL_UART_IRQHandler+0x34>
    if (huart->TxISR != NULL)
 8003a96:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d0e9      	beq.n	8003a70 <HAL_UART_IRQHandler+0x3c>
      huart->TxISR(huart);
 8003a9c:	4620      	mov	r0, r4
}
 8003a9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8003aa2:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003aa4:	06d6      	lsls	r6, r2, #27
 8003aa6:	d5d8      	bpl.n	8003a5a <HAL_UART_IRQHandler+0x26>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003aa8:	06c8      	lsls	r0, r1, #27
 8003aaa:	d5d6      	bpl.n	8003a5a <HAL_UART_IRQHandler+0x26>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003aac:	2210      	movs	r2, #16
 8003aae:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab0:	689a      	ldr	r2, [r3, #8]
 8003ab2:	0652      	lsls	r2, r2, #25
 8003ab4:	f140 8107 	bpl.w	8003cc6 <HAL_UART_IRQHandler+0x292>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ab8:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003aba:	6802      	ldr	r2, [r0, #0]
 8003abc:	6852      	ldr	r2, [r2, #4]
 8003abe:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8003ac0:	2a00      	cmp	r2, #0
 8003ac2:	d0d5      	beq.n	8003a70 <HAL_UART_IRQHandler+0x3c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ac4:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8003ac8:	4291      	cmp	r1, r2
 8003aca:	d9d1      	bls.n	8003a70 <HAL_UART_IRQHandler+0x3c>
        huart->RxXferCount = nb_remaining_rx_data;
 8003acc:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ad0:	6982      	ldr	r2, [r0, #24]
 8003ad2:	2a20      	cmp	r2, #32
 8003ad4:	d02f      	beq.n	8003b36 <HAL_UART_IRQHandler+0x102>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad6:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ada:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ade:	e843 2100 	strex	r1, r2, [r3]
 8003ae2:	2900      	cmp	r1, #0
 8003ae4:	d1f7      	bne.n	8003ad6 <HAL_UART_IRQHandler+0xa2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae6:	f103 0208 	add.w	r2, r3, #8
 8003aea:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aee:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af2:	f103 0508 	add.w	r5, r3, #8
 8003af6:	e845 2100 	strex	r1, r2, [r5]
 8003afa:	2900      	cmp	r1, #0
 8003afc:	d1f3      	bne.n	8003ae6 <HAL_UART_IRQHandler+0xb2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afe:	f103 0208 	add.w	r2, r3, #8
 8003b02:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0a:	f103 0508 	add.w	r5, r3, #8
 8003b0e:	e845 2100 	strex	r1, r2, [r5]
 8003b12:	2900      	cmp	r1, #0
 8003b14:	d1f3      	bne.n	8003afe <HAL_UART_IRQHandler+0xca>
          huart->RxState = HAL_UART_STATE_READY;
 8003b16:	2220      	movs	r2, #32
 8003b18:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b1c:	6621      	str	r1, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1e:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b22:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b26:	e843 2100 	strex	r1, r2, [r3]
 8003b2a:	2900      	cmp	r1, #0
 8003b2c:	d1f7      	bne.n	8003b1e <HAL_UART_IRQHandler+0xea>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b2e:	f7fe f945 	bl	8001dbc <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b32:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b36:	2302      	movs	r3, #2
 8003b38:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b3a:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8003b3e:	1ac9      	subs	r1, r1, r3
 8003b40:	4620      	mov	r0, r4
 8003b42:	b289      	uxth	r1, r1
 8003b44:	f7ff ff74 	bl	8003a30 <HAL_UARTEx_RxEventCallback>
}
 8003b48:	bd70      	pop	{r4, r5, r6, pc}
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003b4a:	487d      	ldr	r0, [pc, #500]	; (8003d40 <HAL_UART_IRQHandler+0x30c>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003b4c:	f005 0601 	and.w	r6, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003b50:	4008      	ands	r0, r1
 8003b52:	4330      	orrs	r0, r6
 8003b54:	f43f af7e 	beq.w	8003a54 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b58:	07d5      	lsls	r5, r2, #31
 8003b5a:	d509      	bpl.n	8003b70 <HAL_UART_IRQHandler+0x13c>
 8003b5c:	05c8      	lsls	r0, r1, #23
 8003b5e:	d507      	bpl.n	8003b70 <HAL_UART_IRQHandler+0x13c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003b60:	2001      	movs	r0, #1
 8003b62:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b64:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8003b68:	f040 0001 	orr.w	r0, r0, #1
 8003b6c:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b70:	0795      	lsls	r5, r2, #30
 8003b72:	f140 8081 	bpl.w	8003c78 <HAL_UART_IRQHandler+0x244>
 8003b76:	b18e      	cbz	r6, 8003b9c <HAL_UART_IRQHandler+0x168>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003b78:	2002      	movs	r0, #2
 8003b7a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b7c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8003b80:	f040 0004 	orr.w	r0, r0, #4
 8003b84:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b88:	0750      	lsls	r0, r2, #29
 8003b8a:	d507      	bpl.n	8003b9c <HAL_UART_IRQHandler+0x168>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003b8c:	2004      	movs	r0, #4
 8003b8e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b90:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8003b94:	f040 0002 	orr.w	r0, r0, #2
 8003b98:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003b9c:	0710      	lsls	r0, r2, #28
 8003b9e:	d50b      	bpl.n	8003bb8 <HAL_UART_IRQHandler+0x184>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ba0:	f001 0020 	and.w	r0, r1, #32
 8003ba4:	4330      	orrs	r0, r6
 8003ba6:	d007      	beq.n	8003bb8 <HAL_UART_IRQHandler+0x184>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ba8:	2008      	movs	r0, #8
 8003baa:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bac:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8003bb0:	f040 0008 	orr.w	r0, r0, #8
 8003bb4:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003bb8:	0516      	lsls	r6, r2, #20
 8003bba:	d50a      	bpl.n	8003bd2 <HAL_UART_IRQHandler+0x19e>
 8003bbc:	014d      	lsls	r5, r1, #5
 8003bbe:	d508      	bpl.n	8003bd2 <HAL_UART_IRQHandler+0x19e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bc0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003bc4:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003bc6:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8003bca:	f040 0020 	orr.w	r0, r0, #32
 8003bce:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bd2:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8003bd6:	2800      	cmp	r0, #0
 8003bd8:	f43f af4a 	beq.w	8003a70 <HAL_UART_IRQHandler+0x3c>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003bdc:	0690      	lsls	r0, r2, #26
 8003bde:	d506      	bpl.n	8003bee <HAL_UART_IRQHandler+0x1ba>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003be0:	0689      	lsls	r1, r1, #26
 8003be2:	d504      	bpl.n	8003bee <HAL_UART_IRQHandler+0x1ba>
        if (huart->RxISR != NULL)
 8003be4:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8003be6:	b112      	cbz	r2, 8003bee <HAL_UART_IRQHandler+0x1ba>
          huart->RxISR(huart);
 8003be8:	4620      	mov	r0, r4
 8003bea:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003bec:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8003bee:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003bf2:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003bf4:	f001 0128 	and.w	r1, r1, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003bf8:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003bfc:	ea52 0501 	orrs.w	r5, r2, r1
 8003c00:	f000 8098 	beq.w	8003d34 <HAL_UART_IRQHandler+0x300>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c04:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c08:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0c:	e843 2100 	strex	r1, r2, [r3]
 8003c10:	2900      	cmp	r1, #0
 8003c12:	d1f7      	bne.n	8003c04 <HAL_UART_IRQHandler+0x1d0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c14:	f103 0208 	add.w	r2, r3, #8
 8003c18:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c1c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c20:	f103 0008 	add.w	r0, r3, #8
 8003c24:	e840 2100 	strex	r1, r2, [r0]
 8003c28:	2900      	cmp	r1, #0
 8003c2a:	d1f3      	bne.n	8003c14 <HAL_UART_IRQHandler+0x1e0>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c2c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003c2e:	2a01      	cmp	r2, #1
 8003c30:	d034      	beq.n	8003c9c <HAL_UART_IRQHandler+0x268>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c32:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8003c34:	2120      	movs	r1, #32
 8003c36:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c3a:	6622      	str	r2, [r4, #96]	; 0x60
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c3c:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 8003c3e:	66a2      	str	r2, [r4, #104]	; 0x68
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c40:	064a      	lsls	r2, r1, #25
 8003c42:	d53c      	bpl.n	8003cbe <HAL_UART_IRQHandler+0x28a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c44:	f103 0208 	add.w	r2, r3, #8
 8003c48:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c50:	f103 0008 	add.w	r0, r3, #8
 8003c54:	e840 2100 	strex	r1, r2, [r0]
 8003c58:	2900      	cmp	r1, #0
 8003c5a:	d1f3      	bne.n	8003c44 <HAL_UART_IRQHandler+0x210>
          if (huart->hdmarx != NULL)
 8003c5c:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003c5e:	b370      	cbz	r0, 8003cbe <HAL_UART_IRQHandler+0x28a>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c60:	4b38      	ldr	r3, [pc, #224]	; (8003d44 <HAL_UART_IRQHandler+0x310>)
 8003c62:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c64:	f7fe f8ce 	bl	8001e04 <HAL_DMA_Abort_IT>
 8003c68:	2800      	cmp	r0, #0
 8003c6a:	f43f af01 	beq.w	8003a70 <HAL_UART_IRQHandler+0x3c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c6e:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
 8003c70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c74:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003c76:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c78:	0755      	lsls	r5, r2, #29
 8003c7a:	d58f      	bpl.n	8003b9c <HAL_UART_IRQHandler+0x168>
 8003c7c:	2e00      	cmp	r6, #0
 8003c7e:	d185      	bne.n	8003b8c <HAL_UART_IRQHandler+0x158>
 8003c80:	e78c      	b.n	8003b9c <HAL_UART_IRQHandler+0x168>
      if (huart->RxISR != NULL)
 8003c82:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f47f af0a 	bne.w	8003a9e <HAL_UART_IRQHandler+0x6a>
 8003c8a:	e6f1      	b.n	8003a70 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003c8c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8003c90:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003c92:	621a      	str	r2, [r3, #32]
}
 8003c94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8003c98:	f000 baf0 	b.w	800427c <HAL_UARTEx_WakeupCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9c:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ca0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca4:	e843 2100 	strex	r1, r2, [r3]
 8003ca8:	2900      	cmp	r1, #0
 8003caa:	d0c2      	beq.n	8003c32 <HAL_UART_IRQHandler+0x1fe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cac:	e853 2f00 	ldrex	r2, [r3]
 8003cb0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb4:	e843 2100 	strex	r1, r2, [r3]
 8003cb8:	2900      	cmp	r1, #0
 8003cba:	d1ef      	bne.n	8003c9c <HAL_UART_IRQHandler+0x268>
 8003cbc:	e7b9      	b.n	8003c32 <HAL_UART_IRQHandler+0x1fe>
            HAL_UART_ErrorCallback(huart);
 8003cbe:	4620      	mov	r0, r4
 8003cc0:	f7ff feaa 	bl	8003a18 <HAL_UART_ErrorCallback>
}
 8003cc4:	bd70      	pop	{r4, r5, r6, pc}
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cc6:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
      if ((huart->RxXferCount > 0U)
 8003cca:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cce:	f8b4 0058 	ldrh.w	r0, [r4, #88]	; 0x58
      if ((huart->RxXferCount > 0U)
 8003cd2:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cd4:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8003cd6:	2a00      	cmp	r2, #0
 8003cd8:	f43f aeca 	beq.w	8003a70 <HAL_UART_IRQHandler+0x3c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003cdc:	1a41      	subs	r1, r0, r1
 8003cde:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8003ce0:	2900      	cmp	r1, #0
 8003ce2:	f43f aec5 	beq.w	8003a70 <HAL_UART_IRQHandler+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce6:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cee:	e843 2000 	strex	r0, r2, [r3]
 8003cf2:	2800      	cmp	r0, #0
 8003cf4:	d1f7      	bne.n	8003ce6 <HAL_UART_IRQHandler+0x2b2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf6:	f103 0208 	add.w	r2, r3, #8
 8003cfa:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cfe:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d02:	f103 0508 	add.w	r5, r3, #8
 8003d06:	e845 2000 	strex	r0, r2, [r5]
 8003d0a:	2800      	cmp	r0, #0
 8003d0c:	d1f3      	bne.n	8003cf6 <HAL_UART_IRQHandler+0x2c2>
        huart->RxState = HAL_UART_STATE_READY;
 8003d0e:	2220      	movs	r2, #32
 8003d10:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
        huart->RxISR = NULL;
 8003d14:	66a0      	str	r0, [r4, #104]	; 0x68
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d16:	6620      	str	r0, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d18:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d1c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d20:	e843 2000 	strex	r0, r2, [r3]
 8003d24:	2800      	cmp	r0, #0
 8003d26:	d1f7      	bne.n	8003d18 <HAL_UART_IRQHandler+0x2e4>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d28:	2302      	movs	r3, #2
 8003d2a:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d2c:	4620      	mov	r0, r4
 8003d2e:	f7ff fe7f 	bl	8003a30 <HAL_UARTEx_RxEventCallback>
}
 8003d32:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8003d34:	4620      	mov	r0, r4
 8003d36:	f7ff fe6f 	bl	8003a18 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d3a:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 8003d3e:	bd70      	pop	{r4, r5, r6, pc}
 8003d40:	04000120 	.word	0x04000120
 8003d44:	08003a1d 	.word	0x08003a1d

08003d48 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d48:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003d4a:	07da      	lsls	r2, r3, #31
{
 8003d4c:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d4e:	d506      	bpl.n	8003d5e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d50:	6801      	ldr	r1, [r0, #0]
 8003d52:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003d54:	684a      	ldr	r2, [r1, #4]
 8003d56:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003d5a:	4322      	orrs	r2, r4
 8003d5c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d5e:	079c      	lsls	r4, r3, #30
 8003d60:	d506      	bpl.n	8003d70 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d62:	6801      	ldr	r1, [r0, #0]
 8003d64:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003d66:	684a      	ldr	r2, [r1, #4]
 8003d68:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003d6c:	4322      	orrs	r2, r4
 8003d6e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d70:	0759      	lsls	r1, r3, #29
 8003d72:	d506      	bpl.n	8003d82 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d74:	6801      	ldr	r1, [r0, #0]
 8003d76:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003d78:	684a      	ldr	r2, [r1, #4]
 8003d7a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d7e:	4322      	orrs	r2, r4
 8003d80:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d82:	071a      	lsls	r2, r3, #28
 8003d84:	d506      	bpl.n	8003d94 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d86:	6801      	ldr	r1, [r0, #0]
 8003d88:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003d8a:	684a      	ldr	r2, [r1, #4]
 8003d8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d90:	4322      	orrs	r2, r4
 8003d92:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d94:	06dc      	lsls	r4, r3, #27
 8003d96:	d506      	bpl.n	8003da6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d98:	6801      	ldr	r1, [r0, #0]
 8003d9a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003d9c:	688a      	ldr	r2, [r1, #8]
 8003d9e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003da2:	4322      	orrs	r2, r4
 8003da4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003da6:	0699      	lsls	r1, r3, #26
 8003da8:	d506      	bpl.n	8003db8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003daa:	6801      	ldr	r1, [r0, #0]
 8003dac:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003dae:	688a      	ldr	r2, [r1, #8]
 8003db0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003db4:	4322      	orrs	r2, r4
 8003db6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003db8:	065a      	lsls	r2, r3, #25
 8003dba:	d509      	bpl.n	8003dd0 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003dbc:	6801      	ldr	r1, [r0, #0]
 8003dbe:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003dc0:	684a      	ldr	r2, [r1, #4]
 8003dc2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003dc6:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003dc8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003dcc:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003dce:	d00b      	beq.n	8003de8 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003dd0:	061b      	lsls	r3, r3, #24
 8003dd2:	d506      	bpl.n	8003de2 <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003dd4:	6802      	ldr	r2, [r0, #0]
 8003dd6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003dd8:	6853      	ldr	r3, [r2, #4]
 8003dda:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003dde:	430b      	orrs	r3, r1
 8003de0:	6053      	str	r3, [r2, #4]
}
 8003de2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003de6:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003de8:	684a      	ldr	r2, [r1, #4]
 8003dea:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003dec:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003df0:	4322      	orrs	r2, r4
 8003df2:	604a      	str	r2, [r1, #4]
 8003df4:	e7ec      	b.n	8003dd0 <UART_AdvFeatureConfig+0x88>
 8003df6:	bf00      	nop

08003df8 <UART_CheckIdleState>:
{
 8003df8:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dfa:	2300      	movs	r3, #0
{
 8003dfc:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dfe:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 8003e02:	f7fd fbd7 	bl	80015b4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e06:	6822      	ldr	r2, [r4, #0]
 8003e08:	6813      	ldr	r3, [r2, #0]
 8003e0a:	071b      	lsls	r3, r3, #28
  tickstart = HAL_GetTick();
 8003e0c:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e0e:	d40e      	bmi.n	8003e2e <UART_CheckIdleState+0x36>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e10:	6813      	ldr	r3, [r2, #0]
 8003e12:	0759      	lsls	r1, r3, #29
 8003e14:	d42f      	bmi.n	8003e76 <UART_CheckIdleState+0x7e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e16:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8003e18:	2220      	movs	r2, #32
 8003e1a:	67e2      	str	r2, [r4, #124]	; 0x7c
  return HAL_OK;
 8003e1c:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8003e1e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e22:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e24:	6663      	str	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(huart);
 8003e26:	2300      	movs	r3, #0
 8003e28:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
}
 8003e2c:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e2e:	69d3      	ldr	r3, [r2, #28]
 8003e30:	0298      	lsls	r0, r3, #10
 8003e32:	d4ed      	bmi.n	8003e10 <UART_CheckIdleState+0x18>
 8003e34:	e00c      	b.n	8003e50 <UART_CheckIdleState+0x58>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e36:	6819      	ldr	r1, [r3, #0]
 8003e38:	0749      	lsls	r1, r1, #29
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	d505      	bpl.n	8003e4a <UART_CheckIdleState+0x52>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e3e:	69d9      	ldr	r1, [r3, #28]
 8003e40:	0708      	lsls	r0, r1, #28
 8003e42:	d44a      	bmi.n	8003eda <UART_CheckIdleState+0xe2>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e44:	69d9      	ldr	r1, [r3, #28]
 8003e46:	0509      	lsls	r1, r1, #20
 8003e48:	d475      	bmi.n	8003f36 <UART_CheckIdleState+0x13e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e4a:	69db      	ldr	r3, [r3, #28]
 8003e4c:	0298      	lsls	r0, r3, #10
 8003e4e:	d4df      	bmi.n	8003e10 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e50:	f7fd fbb0 	bl	80015b4 <HAL_GetTick>
 8003e54:	1b43      	subs	r3, r0, r5
 8003e56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e5a:	6823      	ldr	r3, [r4, #0]
 8003e5c:	d3eb      	bcc.n	8003e36 <UART_CheckIdleState+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5e:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003e62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e66:	e843 2100 	strex	r1, r2, [r3]
 8003e6a:	2900      	cmp	r1, #0
 8003e6c:	d1f7      	bne.n	8003e5e <UART_CheckIdleState+0x66>
      huart->gState = HAL_UART_STATE_READY;
 8003e6e:	2320      	movs	r3, #32
 8003e70:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 8003e72:	2003      	movs	r0, #3
 8003e74:	e7d7      	b.n	8003e26 <UART_CheckIdleState+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e76:	69d3      	ldr	r3, [r2, #28]
 8003e78:	025b      	lsls	r3, r3, #9
 8003e7a:	d4cc      	bmi.n	8003e16 <UART_CheckIdleState+0x1e>
 8003e7c:	e00d      	b.n	8003e9a <UART_CheckIdleState+0xa2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	0750      	lsls	r0, r2, #29
 8003e82:	d507      	bpl.n	8003e94 <UART_CheckIdleState+0x9c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e84:	69da      	ldr	r2, [r3, #28]
 8003e86:	0711      	lsls	r1, r2, #28
 8003e88:	f100 8083 	bmi.w	8003f92 <UART_CheckIdleState+0x19a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e8c:	69da      	ldr	r2, [r3, #28]
 8003e8e:	0512      	lsls	r2, r2, #20
 8003e90:	f100 80ad 	bmi.w	8003fee <UART_CheckIdleState+0x1f6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	025b      	lsls	r3, r3, #9
 8003e98:	d4bd      	bmi.n	8003e16 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e9a:	f7fd fb8b 	bl	80015b4 <HAL_GetTick>
 8003e9e:	1b43      	subs	r3, r0, r5
 8003ea0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ea4:	6823      	ldr	r3, [r4, #0]
 8003ea6:	d3ea      	bcc.n	8003e7e <UART_CheckIdleState+0x86>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea8:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb0:	e843 2100 	strex	r1, r2, [r3]
 8003eb4:	2900      	cmp	r1, #0
 8003eb6:	d1f7      	bne.n	8003ea8 <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb8:	f103 0208 	add.w	r2, r3, #8
 8003ebc:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ec0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec4:	f103 0008 	add.w	r0, r3, #8
 8003ec8:	e840 2100 	strex	r1, r2, [r0]
 8003ecc:	2900      	cmp	r1, #0
 8003ece:	d1f3      	bne.n	8003eb8 <UART_CheckIdleState+0xc0>
      huart->RxState = HAL_UART_STATE_READY;
 8003ed0:	2320      	movs	r3, #32
 8003ed2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
      return HAL_TIMEOUT;
 8003ed6:	2003      	movs	r0, #3
 8003ed8:	e7a5      	b.n	8003e26 <UART_CheckIdleState+0x2e>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003eda:	2208      	movs	r2, #8
 8003edc:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ede:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ee2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee6:	e843 2100 	strex	r1, r2, [r3]
 8003eea:	2900      	cmp	r1, #0
 8003eec:	d1f7      	bne.n	8003ede <UART_CheckIdleState+0xe6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eee:	f103 0208 	add.w	r2, r3, #8
 8003ef2:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ef6:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efa:	f103 0008 	add.w	r0, r3, #8
 8003efe:	e840 2100 	strex	r1, r2, [r0]
 8003f02:	2900      	cmp	r1, #0
 8003f04:	d1f3      	bne.n	8003eee <UART_CheckIdleState+0xf6>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f06:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003f08:	2a01      	cmp	r2, #1
 8003f0a:	d00b      	beq.n	8003f24 <UART_CheckIdleState+0x12c>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f0c:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8003f0e:	2020      	movs	r0, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f10:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8003f12:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 8003f16:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f18:	6622      	str	r2, [r4, #96]	; 0x60
           __HAL_UNLOCK(huart);
 8003f1a:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f1e:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
           return HAL_ERROR;
 8003f22:	e79c      	b.n	8003e5e <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f24:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f28:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2c:	e843 2100 	strex	r1, r2, [r3]
 8003f30:	2900      	cmp	r1, #0
 8003f32:	d1f7      	bne.n	8003f24 <UART_CheckIdleState+0x12c>
 8003f34:	e7ea      	b.n	8003f0c <UART_CheckIdleState+0x114>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f3a:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3c:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f40:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f44:	e843 2100 	strex	r1, r2, [r3]
 8003f48:	2900      	cmp	r1, #0
 8003f4a:	d1f7      	bne.n	8003f3c <UART_CheckIdleState+0x144>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4c:	f103 0208 	add.w	r2, r3, #8
 8003f50:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f54:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f58:	f103 0008 	add.w	r0, r3, #8
 8003f5c:	e840 2100 	strex	r1, r2, [r0]
 8003f60:	2900      	cmp	r1, #0
 8003f62:	d1f3      	bne.n	8003f4c <UART_CheckIdleState+0x154>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f64:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003f66:	2a01      	cmp	r2, #1
 8003f68:	d00a      	beq.n	8003f80 <UART_CheckIdleState+0x188>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f6a:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8003f6c:	2120      	movs	r1, #32
 8003f6e:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 8003f72:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f74:	6622      	str	r2, [r4, #96]	; 0x60
          __HAL_UNLOCK(huart);
 8003f76:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f7a:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
          return HAL_TIMEOUT;
 8003f7e:	e76e      	b.n	8003e5e <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f80:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f84:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f88:	e843 2100 	strex	r1, r2, [r3]
 8003f8c:	2900      	cmp	r1, #0
 8003f8e:	d1f7      	bne.n	8003f80 <UART_CheckIdleState+0x188>
 8003f90:	e7eb      	b.n	8003f6a <UART_CheckIdleState+0x172>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f92:	2208      	movs	r2, #8
 8003f94:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f96:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f9a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9e:	e843 2100 	strex	r1, r2, [r3]
 8003fa2:	2900      	cmp	r1, #0
 8003fa4:	d1f7      	bne.n	8003f96 <UART_CheckIdleState+0x19e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa6:	f103 0208 	add.w	r2, r3, #8
 8003faa:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fae:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb2:	f103 0008 	add.w	r0, r3, #8
 8003fb6:	e840 2100 	strex	r1, r2, [r0]
 8003fba:	2900      	cmp	r1, #0
 8003fbc:	d1f3      	bne.n	8003fa6 <UART_CheckIdleState+0x1ae>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fbe:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003fc0:	2a01      	cmp	r2, #1
 8003fc2:	d00b      	beq.n	8003fdc <UART_CheckIdleState+0x1e4>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc4:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8003fc6:	2020      	movs	r0, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003fc8:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8003fca:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 8003fce:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fd0:	6622      	str	r2, [r4, #96]	; 0x60
           __HAL_UNLOCK(huart);
 8003fd2:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003fd6:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
           return HAL_ERROR;
 8003fda:	e765      	b.n	8003ea8 <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fdc:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fe0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe4:	e843 2100 	strex	r1, r2, [r3]
 8003fe8:	2900      	cmp	r1, #0
 8003fea:	d1f7      	bne.n	8003fdc <UART_CheckIdleState+0x1e4>
 8003fec:	e7ea      	b.n	8003fc4 <UART_CheckIdleState+0x1cc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ff2:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff4:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ff8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffc:	e843 2100 	strex	r1, r2, [r3]
 8004000:	2900      	cmp	r1, #0
 8004002:	d1f7      	bne.n	8003ff4 <UART_CheckIdleState+0x1fc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004004:	f103 0208 	add.w	r2, r3, #8
 8004008:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800400c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004010:	f103 0008 	add.w	r0, r3, #8
 8004014:	e840 2100 	strex	r1, r2, [r0]
 8004018:	2900      	cmp	r1, #0
 800401a:	d1f3      	bne.n	8004004 <UART_CheckIdleState+0x20c>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800401c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800401e:	2a01      	cmp	r2, #1
 8004020:	d00a      	beq.n	8004038 <UART_CheckIdleState+0x240>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004022:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004024:	2120      	movs	r1, #32
 8004026:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 800402a:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800402c:	6622      	str	r2, [r4, #96]	; 0x60
          __HAL_UNLOCK(huart);
 800402e:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004032:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
          return HAL_TIMEOUT;
 8004036:	e737      	b.n	8003ea8 <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004038:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800403c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004040:	e843 2100 	strex	r1, r2, [r3]
 8004044:	2900      	cmp	r1, #0
 8004046:	d1f7      	bne.n	8004038 <UART_CheckIdleState+0x240>
 8004048:	e7eb      	b.n	8004022 <UART_CheckIdleState+0x22a>
 800404a:	bf00      	nop

0800404c <HAL_UART_Init>:
  if (huart == NULL)
 800404c:	2800      	cmp	r0, #0
 800404e:	f000 80c7 	beq.w	80041e0 <HAL_UART_Init+0x194>
{
 8004052:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8004054:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8004056:	4604      	mov	r4, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d031      	beq.n	80040c0 <HAL_UART_Init+0x74>
  __HAL_UART_DISABLE(huart);
 800405c:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800405e:	6925      	ldr	r5, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 8004060:	2224      	movs	r2, #36	; 0x24
 8004062:	67e2      	str	r2, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8004064:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004066:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8004068:	f021 0101 	bic.w	r1, r1, #1
 800406c:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800406e:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004070:	69e1      	ldr	r1, [r4, #28]
 8004072:	432a      	orrs	r2, r5
 8004074:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004076:	f420 4016 	bic.w	r0, r0, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800407a:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800407c:	f020 000c 	bic.w	r0, r0, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004080:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004082:	4302      	orrs	r2, r0
 8004084:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	68e0      	ldr	r0, [r4, #12]
  tmpreg |= huart->Init.OneBitSampling;
 800408a:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800408c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004090:	4302      	orrs	r2, r0
 8004092:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004094:	6898      	ldr	r0, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004096:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004098:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 800409c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800409e:	4302      	orrs	r2, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040a0:	486f      	ldr	r0, [pc, #444]	; (8004260 <HAL_UART_Init+0x214>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040a2:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040a4:	4283      	cmp	r3, r0
 80040a6:	d010      	beq.n	80040ca <HAL_UART_Init+0x7e>
 80040a8:	4a6e      	ldr	r2, [pc, #440]	; (8004264 <HAL_UART_Init+0x218>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d040      	beq.n	8004130 <HAL_UART_Init+0xe4>
 80040ae:	4a6e      	ldr	r2, [pc, #440]	; (8004268 <HAL_UART_Init+0x21c>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	f000 8083 	beq.w	80041bc <HAL_UART_Init+0x170>
  huart->RxISR = NULL;
 80040b6:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80040b8:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
}
 80040bc:	2001      	movs	r0, #1
 80040be:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 80040c0:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 80040c4:	f7fd f9ac 	bl	8001420 <HAL_UART_MspInit>
 80040c8:	e7c8      	b.n	800405c <HAL_UART_Init+0x10>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040ca:	4b68      	ldr	r3, [pc, #416]	; (800426c <HAL_UART_Init+0x220>)
 80040cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ce:	f003 0303 	and.w	r3, r3, #3
 80040d2:	3b01      	subs	r3, #1
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d93d      	bls.n	8004154 <HAL_UART_Init+0x108>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040d8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80040dc:	f000 80a4 	beq.w	8004228 <HAL_UART_Init+0x1dc>
        pclk = HAL_RCC_GetPCLK2Freq();
 80040e0:	f7fe fbf4 	bl	80028cc <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 80040e4:	b160      	cbz	r0, 8004100 <HAL_UART_Init+0xb4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040e6:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040e8:	f64f 72ef 	movw	r2, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040ec:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80040f0:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040f4:	f1a0 0310 	sub.w	r3, r0, #16
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d8dc      	bhi.n	80040b6 <HAL_UART_Init+0x6a>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040fc:	6823      	ldr	r3, [r4, #0]
 80040fe:	60d8      	str	r0, [r3, #12]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004100:	6a62      	ldr	r2, [r4, #36]	; 0x24
  huart->RxISR = NULL;
 8004102:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8004104:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004108:	2a00      	cmp	r2, #0
 800410a:	d14b      	bne.n	80041a4 <HAL_UART_Init+0x158>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800410c:	6823      	ldr	r3, [r4, #0]
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004114:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800411c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8004124:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8004126:	601a      	str	r2, [r3, #0]
}
 8004128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return (UART_CheckIdleState(huart));
 800412c:	f7ff be64 	b.w	8003df8 <UART_CheckIdleState>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004130:	4b4e      	ldr	r3, [pc, #312]	; (800426c <HAL_UART_Init+0x220>)
 8004132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004134:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004138:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800413c:	d02c      	beq.n	8004198 <HAL_UART_Init+0x14c>
 800413e:	d835      	bhi.n	80041ac <HAL_UART_Init+0x160>
 8004140:	b323      	cbz	r3, 800418c <HAL_UART_Init+0x140>
 8004142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004146:	d1b6      	bne.n	80040b6 <HAL_UART_Init+0x6a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004148:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800414c:	d04a      	beq.n	80041e4 <HAL_UART_Init+0x198>
        pclk = HAL_RCC_GetSysClockFreq();
 800414e:	f7fe fb6b 	bl	8002828 <HAL_RCC_GetSysClockFreq>
        break;
 8004152:	e7c7      	b.n	80040e4 <HAL_UART_Init+0x98>
 8004154:	4a46      	ldr	r2, [pc, #280]	; (8004270 <HAL_UART_Init+0x224>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004156:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800415a:	5cd3      	ldrb	r3, [r2, r3]
 800415c:	d067      	beq.n	800422e <HAL_UART_Init+0x1e2>
    switch (clocksource)
 800415e:	2b08      	cmp	r3, #8
 8004160:	d8a9      	bhi.n	80040b6 <HAL_UART_Init+0x6a>
 8004162:	a201      	add	r2, pc, #4	; (adr r2, 8004168 <HAL_UART_Init+0x11c>)
 8004164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004168:	08004193 	.word	0x08004193
 800416c:	080040e1 	.word	0x080040e1
 8004170:	080041b9 	.word	0x080041b9
 8004174:	080040b7 	.word	0x080040b7
 8004178:	0800414f 	.word	0x0800414f
 800417c:	080040b7 	.word	0x080040b7
 8004180:	080040b7 	.word	0x080040b7
 8004184:	080040b7 	.word	0x080040b7
 8004188:	0800419f 	.word	0x0800419f
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800418c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8004190:	d042      	beq.n	8004218 <HAL_UART_Init+0x1cc>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004192:	f7fe fb83 	bl	800289c <HAL_RCC_GetPCLK1Freq>
        break;
 8004196:	e7a5      	b.n	80040e4 <HAL_UART_Init+0x98>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004198:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800419c:	d03f      	beq.n	800421e <HAL_UART_Init+0x1d2>
        pclk = (uint32_t) LSE_VALUE;
 800419e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80041a2:	e7a0      	b.n	80040e6 <HAL_UART_Init+0x9a>
    UART_AdvFeatureConfig(huart);
 80041a4:	4620      	mov	r0, r4
 80041a6:	f7ff fdcf 	bl	8003d48 <UART_AdvFeatureConfig>
 80041aa:	e7af      	b.n	800410c <HAL_UART_Init+0xc0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80041b0:	d181      	bne.n	80040b6 <HAL_UART_Init+0x6a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041b2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80041b6:	d035      	beq.n	8004224 <HAL_UART_Init+0x1d8>
    switch (clocksource)
 80041b8:	482e      	ldr	r0, [pc, #184]	; (8004274 <HAL_UART_Init+0x228>)
 80041ba:	e794      	b.n	80040e6 <HAL_UART_Init+0x9a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041bc:	4b2b      	ldr	r3, [pc, #172]	; (800426c <HAL_UART_Init+0x220>)
 80041be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80041c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80041c8:	d0e6      	beq.n	8004198 <HAL_UART_Init+0x14c>
 80041ca:	d805      	bhi.n	80041d8 <HAL_UART_Init+0x18c>
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d0dd      	beq.n	800418c <HAL_UART_Init+0x140>
 80041d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041d4:	d0b8      	beq.n	8004148 <HAL_UART_Init+0xfc>
 80041d6:	e76e      	b.n	80040b6 <HAL_UART_Init+0x6a>
 80041d8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80041dc:	d0e9      	beq.n	80041b2 <HAL_UART_Init+0x166>
 80041de:	e76a      	b.n	80040b6 <HAL_UART_Init+0x6a>
}
 80041e0:	2001      	movs	r0, #1
 80041e2:	4770      	bx	lr
        pclk = HAL_RCC_GetSysClockFreq();
 80041e4:	f7fe fb20 	bl	8002828 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 80041e8:	2800      	cmp	r0, #0
 80041ea:	d089      	beq.n	8004100 <HAL_UART_Init+0xb4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041ec:	0043      	lsls	r3, r0, #1
 80041ee:	6862      	ldr	r2, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041f0:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041f4:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80041f8:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041fc:	f1a3 0210 	sub.w	r2, r3, #16
 8004200:	428a      	cmp	r2, r1
 8004202:	f63f af58 	bhi.w	80040b6 <HAL_UART_Init+0x6a>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004206:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 800420a:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800420c:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800420e:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8004212:	4313      	orrs	r3, r2
 8004214:	60cb      	str	r3, [r1, #12]
  return ret;
 8004216:	e773      	b.n	8004100 <HAL_UART_Init+0xb4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004218:	f7fe fb40 	bl	800289c <HAL_RCC_GetPCLK1Freq>
        break;
 800421c:	e7e4      	b.n	80041e8 <HAL_UART_Init+0x19c>
    switch (clocksource)
 800421e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004222:	e7e4      	b.n	80041ee <HAL_UART_Init+0x1a2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004224:	4b14      	ldr	r3, [pc, #80]	; (8004278 <HAL_UART_Init+0x22c>)
 8004226:	e7e2      	b.n	80041ee <HAL_UART_Init+0x1a2>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004228:	f7fe fb50 	bl	80028cc <HAL_RCC_GetPCLK2Freq>
        break;
 800422c:	e7dc      	b.n	80041e8 <HAL_UART_Init+0x19c>
    switch (clocksource)
 800422e:	2b08      	cmp	r3, #8
 8004230:	f63f af41 	bhi.w	80040b6 <HAL_UART_Init+0x6a>
 8004234:	a201      	add	r2, pc, #4	; (adr r2, 800423c <HAL_UART_Init+0x1f0>)
 8004236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423a:	bf00      	nop
 800423c:	08004219 	.word	0x08004219
 8004240:	08004229 	.word	0x08004229
 8004244:	08004225 	.word	0x08004225
 8004248:	080040b7 	.word	0x080040b7
 800424c:	080041e5 	.word	0x080041e5
 8004250:	080040b7 	.word	0x080040b7
 8004254:	080040b7 	.word	0x080040b7
 8004258:	080040b7 	.word	0x080040b7
 800425c:	0800421f 	.word	0x0800421f
 8004260:	40013800 	.word	0x40013800
 8004264:	40004400 	.word	0x40004400
 8004268:	40004800 	.word	0x40004800
 800426c:	40021000 	.word	0x40021000
 8004270:	080073d8 	.word	0x080073d8
 8004274:	007a1200 	.word	0x007a1200
 8004278:	00f42400 	.word	0x00f42400

0800427c <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop

08004280 <_ZN8classLog13colorStringlnEiPKc>:
	print(s);
	print(format);
	print("\33[0m");
}
void classLog::colorStringln(int c, char const *const format)
{
 8004280:	b530      	push	{r4, r5, lr}
 8004282:	460b      	mov	r3, r1
 8004284:	b085      	sub	sp, #20
 8004286:	4604      	mov	r4, r0
 8004288:	4615      	mov	r5, r2
	sprintf(s, "\33[38;05;%dm",color);
 800428a:	4913      	ldr	r1, [pc, #76]	; (80042d8 <_ZN8classLog13colorStringlnEiPKc+0x58>)
 800428c:	461a      	mov	r2, r3
 800428e:	4668      	mov	r0, sp
 8004290:	f000 ff1c 	bl	80050cc <siprintf>
	void setUnderline(void);
	void setRevers(void);
	void setFlash(void);

	void print(char const *format) {
			HAL_UART_Transmit(huart, ( uint8_t*) format, strlen(format), 1000);
 8004294:	4668      	mov	r0, sp
 8004296:	f7fb ffeb 	bl	8000270 <strlen>
 800429a:	4669      	mov	r1, sp
 800429c:	b282      	uxth	r2, r0
 800429e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042a2:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 80042a6:	f7ff fa85 	bl	80037b4 <HAL_UART_Transmit>
 80042aa:	4628      	mov	r0, r5
 80042ac:	f7fb ffe0 	bl	8000270 <strlen>
 80042b0:	4629      	mov	r1, r5
 80042b2:	b282      	uxth	r2, r0
 80042b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042b8:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 80042bc:	f7ff fa7a 	bl	80037b4 <HAL_UART_Transmit>
 80042c0:	4906      	ldr	r1, [pc, #24]	; (80042dc <_ZN8classLog13colorStringlnEiPKc+0x5c>)
 80042c2:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 80042c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042ca:	2205      	movs	r2, #5
	color(c);
	print(format);
	print("\33[0m\n");
}
 80042cc:	b005      	add	sp, #20
 80042ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80042d2:	f7ff ba6f 	b.w	80037b4 <HAL_UART_Transmit>
 80042d6:	bf00      	nop
 80042d8:	080073dc 	.word	0x080073dc
 80042dc:	080073e8 	.word	0x080073e8

080042e0 <_Z11BT_Send_RAWPc>:
            _crc = _crc & 0x80 ? (_crc << 1) ^ 0x31 : _crc << 1;
    }
    return _crc;
}

void BT_Send_RAW(char *str) {
 80042e0:	b538      	push	{r3, r4, r5, lr}
 80042e2:	4605      	mov	r5, r0

	int max = strlen(str);
 80042e4:	f7fb ffc4 	bl	8000270 <strlen>

	if (max < 128) {
 80042e8:	287f      	cmp	r0, #127	; 0x7f
	int max = strlen(str);
 80042ea:	4604      	mov	r4, r0
	if (max < 128) {
 80042ec:	d933      	bls.n	8004356 <_Z11BT_Send_RAWPc+0x76>
	}

	int index = 0;

	//Ждем завершение прошлой пересылки
	while (USART2_DMA_TX_Complete)
 80042ee:	4920      	ldr	r1, [pc, #128]	; (8004370 <_Z11BT_Send_RAWPc+0x90>)
 80042f0:	680b      	ldr	r3, [r1, #0]
 80042f2:	b11b      	cbz	r3, 80042fc <_Z11BT_Send_RAWPc+0x1c>
	{
	   __NOP();
 80042f4:	bf00      	nop
	while (USART2_DMA_TX_Complete)
 80042f6:	680a      	ldr	r2, [r1, #0]
 80042f8:	2a00      	cmp	r2, #0
 80042fa:	d1fb      	bne.n	80042f4 <_Z11BT_Send_RAWPc+0x14>
	}

	DMA1_Channel7->CCR &= ~DMA_CCR_EN;   //Выключаем DMA
 80042fc:	4a1d      	ldr	r2, [pc, #116]	; (8004374 <_Z11BT_Send_RAWPc+0x94>)
	DMA1_Channel7->CCR &= ~DMA_CCR_TEIE; //Выкл прерывание по ошибке
	DMA1_Channel7->CCR |= DMA_CCR_TCIE;  //Вкл  перрывание завершению
	DMA1_Channel7->CPAR = 0x40004428;    //Адресс USART2 TDR
    DMA1_Channel7->CMAR = (uint32_t) str;
    DMA1_Channel7->CNDTR = max;
    USART2->CR3 |= USART_CR3_DMAT;       //Включение DMA передатчик
 80042fe:	481e      	ldr	r0, [pc, #120]	; (8004378 <_Z11BT_Send_RAWPc+0x98>)
	DMA1_Channel7->CCR &= ~DMA_CCR_EN;   //Выключаем DMA
 8004300:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8004304:	f023 0301 	bic.w	r3, r3, #1
 8004308:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	DMA1_Channel7->CCR &= ~DMA_CCR_HTIE; //Выкл перрывание по половине
 800430c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8004310:	f023 0304 	bic.w	r3, r3, #4
 8004314:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	DMA1_Channel7->CCR &= ~DMA_CCR_TEIE; //Выкл прерывание по ошибке
 8004318:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800431c:	f023 0308 	bic.w	r3, r3, #8
 8004320:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	DMA1_Channel7->CCR |= DMA_CCR_TCIE;  //Вкл  перрывание завершению
 8004324:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8004328:	f043 0302 	orr.w	r3, r3, #2
 800432c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	DMA1_Channel7->CPAR = 0x40004428;    //Адресс USART2 TDR
 8004330:	4b12      	ldr	r3, [pc, #72]	; (800437c <_Z11BT_Send_RAWPc+0x9c>)
 8004332:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    DMA1_Channel7->CMAR = (uint32_t) str;
 8004336:	f8c2 508c 	str.w	r5, [r2, #140]	; 0x8c
    DMA1_Channel7->CNDTR = max;
 800433a:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
    USART2->CR3 |= USART_CR3_DMAT;       //Включение DMA передатчик
 800433e:	6883      	ldr	r3, [r0, #8]
    USART2_DMA_TX_Complete = 1;
 8004340:	2401      	movs	r4, #1
    USART2->CR3 |= USART_CR3_DMAT;       //Включение DMA передатчик
 8004342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004346:	6083      	str	r3, [r0, #8]
    USART2_DMA_TX_Complete = 1;
 8004348:	600c      	str	r4, [r1, #0]
    DMA1_Channel7->CCR |= DMA_CCR_EN;   //Включаем DMA
 800434a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800434e:	4323      	orrs	r3, r4
 8004350:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
//
//		if (index >= max)
//			break;
//	}

}
 8004354:	bd38      	pop	{r3, r4, r5, pc}
	void colorStringln(int color, char const *const format);
	void colorStringln(int color, int bgcolor, char const *const format);

	template<typename ... Args>
	void w(char const *const format, Args const &... args) noexcept {
		sprintf(str, format, args ...);
 8004356:	490a      	ldr	r1, [pc, #40]	; (8004380 <_Z11BT_Send_RAWPc+0xa0>)
 8004358:	480a      	ldr	r0, [pc, #40]	; (8004384 <_Z11BT_Send_RAWPc+0xa4>)
 800435a:	2244      	movs	r2, #68	; 0x44
 800435c:	462b      	mov	r3, r5
 800435e:	f000 feb5 	bl	80050cc <siprintf>
		colorStringln(11, str);
 8004362:	4a08      	ldr	r2, [pc, #32]	; (8004384 <_Z11BT_Send_RAWPc+0xa4>)
 8004364:	210b      	movs	r1, #11
 8004366:	4610      	mov	r0, r2
 8004368:	f7ff ff8a 	bl	8004280 <_ZN8classLog13colorStringlnEiPKc>
 800436c:	e7bf      	b.n	80042ee <_Z11BT_Send_RAWPc+0xe>
 800436e:	bf00      	nop
 8004370:	200003ec 	.word	0x200003ec
 8004374:	40020000 	.word	0x40020000
 8004378:	40004400 	.word	0x40004400
 800437c:	40004428 	.word	0x40004428
 8004380:	080073f0 	.word	0x080073f0
 8004384:	20000a48 	.word	0x20000a48

08004388 <_Z14BT_Send_StringPc>:


char str16_1[1024];

void BT_Send_String(char *str) {
 8004388:	b510      	push	{r4, lr}
 800438a:	4604      	mov	r4, r0

	uint8_t crc;

	//sprintf(str16, "98#%s", str);

	crc = CRC8(&str[0], strlen(str));
 800438c:	f7fb ff70 	bl	8000270 <strlen>
    while (len--)
 8004390:	2800      	cmp	r0, #0
 8004392:	d06c      	beq.n	800446e <_Z14BT_Send_StringPc+0xe6>
 8004394:	4420      	add	r0, r4
 8004396:	4621      	mov	r1, r4
    unsigned char _crc = 0xFF;
 8004398:	23ff      	movs	r3, #255	; 0xff
 800439a:	e02c      	b.n	80043f6 <_Z14BT_Send_StringPc+0x6e>
            _crc = _crc & 0x80 ? (_crc << 1) ^ 0x31 : _crc << 1;
 800439c:	b2da      	uxtb	r2, r3
 800439e:	b25b      	sxtb	r3, r3
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	db36      	blt.n	8004412 <_Z14BT_Send_StringPc+0x8a>
 80043a4:	0053      	lsls	r3, r2, #1
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	b25b      	sxtb	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80043b0:	db38      	blt.n	8004424 <_Z14BT_Send_StringPc+0x9c>
 80043b2:	b2d3      	uxtb	r3, r2
 80043b4:	b252      	sxtb	r2, r2
 80043b6:	2a00      	cmp	r2, #0
 80043b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80043bc:	db3a      	blt.n	8004434 <_Z14BT_Send_StringPc+0xac>
 80043be:	b2da      	uxtb	r2, r3
 80043c0:	b25b      	sxtb	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80043c8:	db3c      	blt.n	8004444 <_Z14BT_Send_StringPc+0xbc>
 80043ca:	b2d3      	uxtb	r3, r2
 80043cc:	b252      	sxtb	r2, r2
 80043ce:	2a00      	cmp	r2, #0
 80043d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80043d4:	db3e      	blt.n	8004454 <_Z14BT_Send_StringPc+0xcc>
 80043d6:	b2da      	uxtb	r2, r3
 80043d8:	b25b      	sxtb	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80043e0:	db40      	blt.n	8004464 <_Z14BT_Send_StringPc+0xdc>
 80043e2:	b2d3      	uxtb	r3, r2
 80043e4:	b252      	sxtb	r2, r2
 80043e6:	005b      	lsls	r3, r3, #1
 80043e8:	2a00      	cmp	r2, #0
 80043ea:	bfb8      	it	lt
 80043ec:	f083 0331 	eorlt.w	r3, r3, #49	; 0x31
    while (len--)
 80043f0:	4281      	cmp	r1, r0
            _crc = _crc & 0x80 ? (_crc << 1) ^ 0x31 : _crc << 1;
 80043f2:	b2db      	uxtb	r3, r3
    while (len--)
 80043f4:	d03c      	beq.n	8004470 <_Z14BT_Send_StringPc+0xe8>
        _crc ^= *pcBlock++;
 80043f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043fa:	4053      	eors	r3, r2
            _crc = _crc & 0x80 ? (_crc << 1) ^ 0x31 : _crc << 1;
 80043fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004400:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004404:	d0ca      	beq.n	800439c <_Z14BT_Send_StringPc+0x14>
 8004406:	f083 0231 	eor.w	r2, r3, #49	; 0x31
 800440a:	b253      	sxtb	r3, r2
 800440c:	2b00      	cmp	r3, #0
 800440e:	b2d2      	uxtb	r2, r2
 8004410:	dac8      	bge.n	80043a4 <_Z14BT_Send_StringPc+0x1c>
 8004412:	0052      	lsls	r2, r2, #1
 8004414:	f082 0231 	eor.w	r2, r2, #49	; 0x31
 8004418:	b253      	sxtb	r3, r2
 800441a:	2b00      	cmp	r3, #0
 800441c:	b2d2      	uxtb	r2, r2
 800441e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8004422:	dac6      	bge.n	80043b2 <_Z14BT_Send_StringPc+0x2a>
 8004424:	f082 0331 	eor.w	r3, r2, #49	; 0x31
 8004428:	b25a      	sxtb	r2, r3
 800442a:	2a00      	cmp	r2, #0
 800442c:	b2db      	uxtb	r3, r3
 800442e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004432:	dac4      	bge.n	80043be <_Z14BT_Send_StringPc+0x36>
 8004434:	f083 0231 	eor.w	r2, r3, #49	; 0x31
 8004438:	b253      	sxtb	r3, r2
 800443a:	2b00      	cmp	r3, #0
 800443c:	b2d2      	uxtb	r2, r2
 800443e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8004442:	dac2      	bge.n	80043ca <_Z14BT_Send_StringPc+0x42>
 8004444:	f082 0331 	eor.w	r3, r2, #49	; 0x31
 8004448:	b25a      	sxtb	r2, r3
 800444a:	2a00      	cmp	r2, #0
 800444c:	b2db      	uxtb	r3, r3
 800444e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004452:	dac0      	bge.n	80043d6 <_Z14BT_Send_StringPc+0x4e>
 8004454:	f083 0231 	eor.w	r2, r3, #49	; 0x31
 8004458:	b253      	sxtb	r3, r2
 800445a:	2b00      	cmp	r3, #0
 800445c:	b2d2      	uxtb	r2, r2
 800445e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8004462:	dabe      	bge.n	80043e2 <_Z14BT_Send_StringPc+0x5a>
 8004464:	f082 0331 	eor.w	r3, r2, #49	; 0x31
 8004468:	b25a      	sxtb	r2, r3
 800446a:	b2db      	uxtb	r3, r3
 800446c:	e7bb      	b.n	80043e6 <_Z14BT_Send_StringPc+0x5e>
    while (len--)
 800446e:	23ff      	movs	r3, #255	; 0xff

	sprintf(str16_1, "!%s;%d$\n", str, crc);
 8004470:	4622      	mov	r2, r4
 8004472:	4904      	ldr	r1, [pc, #16]	; (8004484 <_Z14BT_Send_StringPc+0xfc>)
 8004474:	4804      	ldr	r0, [pc, #16]	; (8004488 <_Z14BT_Send_StringPc+0x100>)
 8004476:	f000 fe29 	bl	80050cc <siprintf>

	BT_Send_RAW(&str16_1[0]);

	//HAL_UART_Transmit(&huart3, (uint8_t*) &str16_1[0], strlen(str16_1), 1000);

}
 800447a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	BT_Send_RAW(&str16_1[0]);
 800447e:	4802      	ldr	r0, [pc, #8]	; (8004488 <_Z14BT_Send_StringPc+0x100>)
 8004480:	f7ff bf2e 	b.w	80042e0 <_Z11BT_Send_RAWPc>
 8004484:	080073f4 	.word	0x080073f4
 8004488:	200005e4 	.word	0x200005e4

0800448c <HAL_ADC_ConvCpltCallback>:

	char str[256];

	UART_HandleTypeDef *huart;

	void w(char const *const format) {colorStringln(11, format);}
 800448c:	4a02      	ldr	r2, [pc, #8]	; (8004498 <HAL_ADC_ConvCpltCallback+0xc>)
 800448e:	4803      	ldr	r0, [pc, #12]	; (800449c <HAL_ADC_ConvCpltCallback+0x10>)
 8004490:	210b      	movs	r1, #11
 8004492:	f7ff bef5 	b.w	8004280 <_ZN8classLog13colorStringlnEiPKc>
 8004496:	bf00      	nop
 8004498:	08007400 	.word	0x08007400
 800449c:	20000a48 	.word	0x20000a48

080044a0 <_Z4loopv>:
  /* This is called after the conversion is completed */
	log.w((char*) "HAL_ADC_ConvCpltCallback");

}

void loop() {
 80044a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044a4:	ed2d 8b04 	vpush	{d8-d9}

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80044a8:	2104      	movs	r1, #4
void loop() {
 80044aa:	b0a2      	sub	sp, #136	; 0x88
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80044ac:	485c      	ldr	r0, [pc, #368]	; (8004620 <_Z4loopv+0x180>)
 80044ae:	f8df a194 	ldr.w	sl, [pc, #404]	; 8004644 <_Z4loopv+0x1a4>
	while (1) {

		int16_t adc12Value = HAL_ADC_GetValue(&hadc1);

		int16_t adcValue = HAL_SDADC_GetValue(&hsdadc1);
		float adcFValue = (3.281F) * (adcValue) / 32768 * 3.036 / 3.075;
 80044b2:	eddf 8a5c 	vldr	s17, [pc, #368]	; 8004624 <_Z4loopv+0x184>
	if (volume >= 2.621F)
 80044b6:	ed9f 9a5c 	vldr	s18, [pc, #368]	; 8004628 <_Z4loopv+0x188>
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80044ba:	eddf 9a5c 	vldr	s19, [pc, #368]	; 800462c <_Z4loopv+0x18c>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80044be:	f7fe fe77 	bl	80031b0 <HAL_TIM_PWM_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_buffer, 50);
 80044c2:	495b      	ldr	r1, [pc, #364]	; (8004630 <_Z4loopv+0x190>)
 80044c4:	485b      	ldr	r0, [pc, #364]	; (8004634 <_Z4loopv+0x194>)
 80044c6:	2232      	movs	r2, #50	; 0x32
 80044c8:	f7fd fa9e 	bl	8001a08 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim19);
 80044cc:	485a      	ldr	r0, [pc, #360]	; (8004638 <_Z4loopv+0x198>)
 80044ce:	f7fe fda7 	bl	8003020 <HAL_TIM_Base_Start_IT>
	HAL_Delay(1000);
 80044d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80044d6:	f7fd f873 	bl	80015c0 <HAL_Delay>
	HAL_SDADC_Start(&hsdadc1);
 80044da:	4858      	ldr	r0, [pc, #352]	; (800463c <_Z4loopv+0x19c>)
 80044dc:	f7fe fc10 	bl	8002d00 <HAL_SDADC_Start>
	SDADC1->CR2 |= SDADC_CR2_RSWSTART; // начало преобразования
 80044e0:	4a57      	ldr	r2, [pc, #348]	; (8004640 <_Z4loopv+0x1a0>)
	HAL_SDADC_PollForConversion(&hsdadc1, 1000);
 80044e2:	4856      	ldr	r0, [pc, #344]	; (800463c <_Z4loopv+0x19c>)
	SDADC1->CR2 |= SDADC_CR2_RSWSTART; // начало преобразования
 80044e4:	6853      	ldr	r3, [r2, #4]
 80044e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
	HAL_SDADC_PollForConversion(&hsdadc1, 1000);
 80044ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	SDADC1->CR2 |= SDADC_CR2_RSWSTART; // начало преобразования
 80044ee:	6053      	str	r3, [r2, #4]
	HAL_SDADC_PollForConversion(&hsdadc1, 1000);
 80044f0:	f7fe fc4e 	bl	8002d90 <HAL_SDADC_PollForConversion>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 80044f4:	484f      	ldr	r0, [pc, #316]	; (8004634 <_Z4loopv+0x194>)
 80044f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80044fa:	f7fd f9a9 	bl	8001850 <HAL_ADC_PollForConversion>
		float adcFValue = (3.281F) * (adcValue) / 32768 * 3.036 / 3.075;
 80044fe:	a744      	add	r7, pc, #272	; (adr r7, 8004610 <_Z4loopv+0x170>)
 8004500:	e9d7 6700 	ldrd	r6, r7, [r7]
 8004504:	f04f 0800 	mov.w	r8, #0
 8004508:	f04f 0900 	mov.w	r9, #0
		int16_t adc12Value = HAL_ADC_GetValue(&hadc1);
 800450c:	4849      	ldr	r0, [pc, #292]	; (8004634 <_Z4loopv+0x194>)
 800450e:	f7fd fad9 	bl	8001ac4 <HAL_ADC_GetValue>
 8004512:	4604      	mov	r4, r0
		int16_t adcValue = HAL_SDADC_GetValue(&hsdadc1);
 8004514:	4849      	ldr	r0, [pc, #292]	; (800463c <_Z4loopv+0x19c>)
 8004516:	f7fe fc2f 	bl	8002d78 <HAL_SDADC_GetValue>
		float adcFValue = (3.281F) * (adcValue) / 32768 * 3.036 / 3.075;
 800451a:	b200      	sxth	r0, r0
 800451c:	ee07 0a90 	vmov	s15, r0
 8004520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		int16_t adc12Value = HAL_ADC_GetValue(&hadc1);
 8004524:	b224      	sxth	r4, r4
		float adcFValue = (3.281F) * (adcValue) / 32768 * 3.036 / 3.075;
 8004526:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800452a:	ee17 0a90 	vmov	r0, s15
 800452e:	f7fc f80b 	bl	8000548 <__aeabi_f2d>
 8004532:	4632      	mov	r2, r6
 8004534:	463b      	mov	r3, r7
 8004536:	f7fc f85f 	bl	80005f8 <__aeabi_dmul>
 800453a:	f7fc fb35 	bl	8000ba8 <__aeabi_d2f>
 800453e:	ee07 0a10 	vmov	s14, r0
	if (volume <= 1.0F)
 8004542:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004546:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800454a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800454e:	d951      	bls.n	80045f4 <_Z4loopv+0x154>
	if (volume >= 2.621F)
 8004550:	eeb4 7ac9 	vcmpe.f32	s14, s18
 8004554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004558:	da51      	bge.n	80045fe <_Z4loopv+0x15e>
 800455a:	4a3a      	ldr	r2, [pc, #232]	; (8004644 <_Z4loopv+0x1a4>)
	for (i = 0; i < 31; i++) {
 800455c:	2300      	movs	r3, #0
 800455e:	e002      	b.n	8004566 <_Z4loopv+0xc6>
 8004560:	3301      	adds	r3, #1
 8004562:	2b1f      	cmp	r3, #31
 8004564:	d046      	beq.n	80045f4 <_Z4loopv+0x154>
		if (volume < table[i][1]) {
 8004566:	edd2 7a01 	vldr	s15, [r2, #4]
 800456a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800456e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	for (i = 0; i < 31; i++) {
 8004572:	f102 0208 	add.w	r2, r2, #8
		if (volume < table[i][1]) {
 8004576:	d5f3      	bpl.n	8004560 <_Z4loopv+0xc0>
			x0 = table[i-1][1];
 8004578:	1e5a      	subs	r2, r3, #1
 800457a:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 800457e:	edd2 6a01 	vldr	s13, [r2, #4]
			y0 = table[i-1][0];
 8004582:	ed92 8a00 	vldr	s16, [r2]
			return (volume - x0) / (x1 - x0) * (y1 - y0) + y0;
 8004586:	ee37 7a66 	vsub.f32	s14, s14, s13
 800458a:	ee77 7ae6 	vsub.f32	s15, s15, s13
			y1 = table[i][0];
 800458e:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
			return (volume - x0) / (x1 - x0) * (y1 - y0) + y0;
 8004592:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004596:	edd3 7a00 	vldr	s15, [r3]
 800459a:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800459e:	eea6 8aa7 	vfma.f32	s16, s13, s15
		float pressure = interpolatePressure(adcFValue);

		char s[128];
		//sprintf (s,"v1=%d f=%f p=%f", adcValue, adcFValue, pressure);
		//sprintf (s,"v=%d f=%.3f p=%.1f v12=%d", adcValue, adcFValue, pressure, adc12Value);
		sprintf (s,"p%.0f v%d", pressure, adc12Value/8);
 80045a2:	ee18 0a10 	vmov	r0, s16
 80045a6:	f7fb ffcf 	bl	8000548 <__aeabi_f2d>
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80045aa:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 80045ae:	ee38 8a67 	vsub.f32	s16, s16, s15
 80045b2:	eddf 7a25 	vldr	s15, [pc, #148]	; 8004648 <_Z4loopv+0x1a8>
 80045b6:	eee8 7a29 	vfma.f32	s15, s16, s19
		sprintf (s,"p%.0f v%d", pressure, adc12Value/8);
 80045ba:	4602      	mov	r2, r0
 80045bc:	460b      	mov	r3, r1
		log.i(s);

		HAL_Delay(30);

		float a = maping(pressure, 30, 200,20000,10000);
		TIM3->CCR2 = (int)a;
 80045be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045c2:	ee17 5a90 	vmov	r5, s15
		sprintf (s,"p%.0f v%d", pressure, adc12Value/8);
 80045c6:	2c00      	cmp	r4, #0
 80045c8:	bfb8      	it	lt
 80045ca:	3407      	addlt	r4, #7
 80045cc:	10e4      	asrs	r4, r4, #3
 80045ce:	491f      	ldr	r1, [pc, #124]	; (800464c <_Z4loopv+0x1ac>)
 80045d0:	9400      	str	r4, [sp, #0]
 80045d2:	a802      	add	r0, sp, #8
 80045d4:	f000 fd7a 	bl	80050cc <siprintf>
		BT_Send_String(s);
 80045d8:	a802      	add	r0, sp, #8
 80045da:	f7ff fed5 	bl	8004388 <_Z14BT_Send_StringPc>
	void e(char const *const format) {colorStringln(9, format);}
	void i(char const *const format) {colorStringln(45, format);}
 80045de:	481c      	ldr	r0, [pc, #112]	; (8004650 <_Z4loopv+0x1b0>)
 80045e0:	aa02      	add	r2, sp, #8
 80045e2:	212d      	movs	r1, #45	; 0x2d
 80045e4:	f7ff fe4c 	bl	8004280 <_ZN8classLog13colorStringlnEiPKc>
		HAL_Delay(30);
 80045e8:	201e      	movs	r0, #30
 80045ea:	f7fc ffe9 	bl	80015c0 <HAL_Delay>
		TIM3->CCR2 = (int)a;
 80045ee:	4b19      	ldr	r3, [pc, #100]	; (8004654 <_Z4loopv+0x1b4>)
 80045f0:	639d      	str	r5, [r3, #56]	; 0x38

	}
 80045f2:	e78b      	b.n	800450c <_Z4loopv+0x6c>
 80045f4:	4642      	mov	r2, r8
 80045f6:	464b      	mov	r3, r9
 80045f8:	f245 5504 	movw	r5, #21764	; 0x5504
 80045fc:	e7e3      	b.n	80045c6 <_Z4loopv+0x126>
 80045fe:	a306      	add	r3, pc, #24	; (adr r3, 8004618 <_Z4loopv+0x178>)
 8004600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004604:	f241 0515 	movw	r5, #4117	; 0x1015
 8004608:	e7dd      	b.n	80045c6 <_Z4loopv+0x126>
 800460a:	bf00      	nop
 800460c:	f3af 8000 	nop.w
 8004610:	f9819f98 	.word	0xf9819f98
 8004614:	3fef9819 	.word	0x3fef9819
 8004618:	00000000 	.word	0x00000000
 800461c:	4072c000 	.word	0x4072c000
 8004620:	20000440 	.word	0x20000440
 8004624:	38d1fbe7 	.word	0x38d1fbe7
 8004628:	4027be77 	.word	0x4027be77
 800462c:	c26b4b4c 	.word	0xc26b4b4c
 8004630:	200009e4 	.word	0x200009e4
 8004634:	200002e8 	.word	0x200002e8
 8004638:	200003f4 	.word	0x200003f4
 800463c:	2000035c 	.word	0x2000035c
 8004640:	40016000 	.word	0x40016000
 8004644:	2000000c 	.word	0x2000000c
 8004648:	469c4000 	.word	0x469c4000
 800464c:	0800741c 	.word	0x0800741c
 8004650:	20000a48 	.word	0x20000a48
 8004654:	40000400 	.word	0x40000400

08004658 <setup>:
	void init(UART_HandleTypeDef *_huart) {	huart = _huart; }
 8004658:	4805      	ldr	r0, [pc, #20]	; (8004670 <setup+0x18>)
	void w(char const *const format) {colorStringln(11, format);}
 800465a:	4a06      	ldr	r2, [pc, #24]	; (8004674 <setup+0x1c>)
extern "C" void setup() {
 800465c:	b508      	push	{r3, lr}
 800465e:	210b      	movs	r1, #11
	void init(UART_HandleTypeDef *_huart) {	huart = _huart; }
 8004660:	4b05      	ldr	r3, [pc, #20]	; (8004678 <setup+0x20>)
 8004662:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
	void w(char const *const format) {colorStringln(11, format);}
 8004666:	f7ff fe0b 	bl	8004280 <_ZN8classLog13colorStringlnEiPKc>
	loop();
 800466a:	f7ff ff19 	bl	80044a0 <_Z4loopv>
 800466e:	bf00      	nop
 8004670:	20000a48 	.word	0x20000a48
 8004674:	08007428 	.word	0x08007428
 8004678:	200004d0 	.word	0x200004d0

0800467c <__cvt>:
 800467c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004680:	ec55 4b10 	vmov	r4, r5, d0
 8004684:	2d00      	cmp	r5, #0
 8004686:	460e      	mov	r6, r1
 8004688:	4619      	mov	r1, r3
 800468a:	462b      	mov	r3, r5
 800468c:	bfbb      	ittet	lt
 800468e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004692:	461d      	movlt	r5, r3
 8004694:	2300      	movge	r3, #0
 8004696:	232d      	movlt	r3, #45	; 0x2d
 8004698:	700b      	strb	r3, [r1, #0]
 800469a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800469c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80046a0:	4691      	mov	r9, r2
 80046a2:	f023 0820 	bic.w	r8, r3, #32
 80046a6:	bfbc      	itt	lt
 80046a8:	4622      	movlt	r2, r4
 80046aa:	4614      	movlt	r4, r2
 80046ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80046b0:	d005      	beq.n	80046be <__cvt+0x42>
 80046b2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80046b6:	d100      	bne.n	80046ba <__cvt+0x3e>
 80046b8:	3601      	adds	r6, #1
 80046ba:	2102      	movs	r1, #2
 80046bc:	e000      	b.n	80046c0 <__cvt+0x44>
 80046be:	2103      	movs	r1, #3
 80046c0:	ab03      	add	r3, sp, #12
 80046c2:	9301      	str	r3, [sp, #4]
 80046c4:	ab02      	add	r3, sp, #8
 80046c6:	9300      	str	r3, [sp, #0]
 80046c8:	ec45 4b10 	vmov	d0, r4, r5
 80046cc:	4653      	mov	r3, sl
 80046ce:	4632      	mov	r2, r6
 80046d0:	f000 fe6a 	bl	80053a8 <_dtoa_r>
 80046d4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80046d8:	4607      	mov	r7, r0
 80046da:	d102      	bne.n	80046e2 <__cvt+0x66>
 80046dc:	f019 0f01 	tst.w	r9, #1
 80046e0:	d022      	beq.n	8004728 <__cvt+0xac>
 80046e2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80046e6:	eb07 0906 	add.w	r9, r7, r6
 80046ea:	d110      	bne.n	800470e <__cvt+0x92>
 80046ec:	783b      	ldrb	r3, [r7, #0]
 80046ee:	2b30      	cmp	r3, #48	; 0x30
 80046f0:	d10a      	bne.n	8004708 <__cvt+0x8c>
 80046f2:	2200      	movs	r2, #0
 80046f4:	2300      	movs	r3, #0
 80046f6:	4620      	mov	r0, r4
 80046f8:	4629      	mov	r1, r5
 80046fa:	f7fc f9e5 	bl	8000ac8 <__aeabi_dcmpeq>
 80046fe:	b918      	cbnz	r0, 8004708 <__cvt+0x8c>
 8004700:	f1c6 0601 	rsb	r6, r6, #1
 8004704:	f8ca 6000 	str.w	r6, [sl]
 8004708:	f8da 3000 	ldr.w	r3, [sl]
 800470c:	4499      	add	r9, r3
 800470e:	2200      	movs	r2, #0
 8004710:	2300      	movs	r3, #0
 8004712:	4620      	mov	r0, r4
 8004714:	4629      	mov	r1, r5
 8004716:	f7fc f9d7 	bl	8000ac8 <__aeabi_dcmpeq>
 800471a:	b108      	cbz	r0, 8004720 <__cvt+0xa4>
 800471c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004720:	2230      	movs	r2, #48	; 0x30
 8004722:	9b03      	ldr	r3, [sp, #12]
 8004724:	454b      	cmp	r3, r9
 8004726:	d307      	bcc.n	8004738 <__cvt+0xbc>
 8004728:	9b03      	ldr	r3, [sp, #12]
 800472a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800472c:	1bdb      	subs	r3, r3, r7
 800472e:	4638      	mov	r0, r7
 8004730:	6013      	str	r3, [r2, #0]
 8004732:	b004      	add	sp, #16
 8004734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004738:	1c59      	adds	r1, r3, #1
 800473a:	9103      	str	r1, [sp, #12]
 800473c:	701a      	strb	r2, [r3, #0]
 800473e:	e7f0      	b.n	8004722 <__cvt+0xa6>

08004740 <__exponent>:
 8004740:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004742:	4603      	mov	r3, r0
 8004744:	2900      	cmp	r1, #0
 8004746:	bfb8      	it	lt
 8004748:	4249      	neglt	r1, r1
 800474a:	f803 2b02 	strb.w	r2, [r3], #2
 800474e:	bfb4      	ite	lt
 8004750:	222d      	movlt	r2, #45	; 0x2d
 8004752:	222b      	movge	r2, #43	; 0x2b
 8004754:	2909      	cmp	r1, #9
 8004756:	7042      	strb	r2, [r0, #1]
 8004758:	dd2a      	ble.n	80047b0 <__exponent+0x70>
 800475a:	f10d 0207 	add.w	r2, sp, #7
 800475e:	4617      	mov	r7, r2
 8004760:	260a      	movs	r6, #10
 8004762:	4694      	mov	ip, r2
 8004764:	fb91 f5f6 	sdiv	r5, r1, r6
 8004768:	fb06 1415 	mls	r4, r6, r5, r1
 800476c:	3430      	adds	r4, #48	; 0x30
 800476e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004772:	460c      	mov	r4, r1
 8004774:	2c63      	cmp	r4, #99	; 0x63
 8004776:	f102 32ff 	add.w	r2, r2, #4294967295
 800477a:	4629      	mov	r1, r5
 800477c:	dcf1      	bgt.n	8004762 <__exponent+0x22>
 800477e:	3130      	adds	r1, #48	; 0x30
 8004780:	f1ac 0402 	sub.w	r4, ip, #2
 8004784:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004788:	1c41      	adds	r1, r0, #1
 800478a:	4622      	mov	r2, r4
 800478c:	42ba      	cmp	r2, r7
 800478e:	d30a      	bcc.n	80047a6 <__exponent+0x66>
 8004790:	f10d 0209 	add.w	r2, sp, #9
 8004794:	eba2 020c 	sub.w	r2, r2, ip
 8004798:	42bc      	cmp	r4, r7
 800479a:	bf88      	it	hi
 800479c:	2200      	movhi	r2, #0
 800479e:	4413      	add	r3, r2
 80047a0:	1a18      	subs	r0, r3, r0
 80047a2:	b003      	add	sp, #12
 80047a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047a6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80047aa:	f801 5f01 	strb.w	r5, [r1, #1]!
 80047ae:	e7ed      	b.n	800478c <__exponent+0x4c>
 80047b0:	2330      	movs	r3, #48	; 0x30
 80047b2:	3130      	adds	r1, #48	; 0x30
 80047b4:	7083      	strb	r3, [r0, #2]
 80047b6:	70c1      	strb	r1, [r0, #3]
 80047b8:	1d03      	adds	r3, r0, #4
 80047ba:	e7f1      	b.n	80047a0 <__exponent+0x60>

080047bc <_printf_float>:
 80047bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047c0:	ed2d 8b02 	vpush	{d8}
 80047c4:	b08d      	sub	sp, #52	; 0x34
 80047c6:	460c      	mov	r4, r1
 80047c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80047cc:	4616      	mov	r6, r2
 80047ce:	461f      	mov	r7, r3
 80047d0:	4605      	mov	r5, r0
 80047d2:	f000 fce7 	bl	80051a4 <_localeconv_r>
 80047d6:	f8d0 a000 	ldr.w	sl, [r0]
 80047da:	4650      	mov	r0, sl
 80047dc:	f7fb fd48 	bl	8000270 <strlen>
 80047e0:	2300      	movs	r3, #0
 80047e2:	930a      	str	r3, [sp, #40]	; 0x28
 80047e4:	6823      	ldr	r3, [r4, #0]
 80047e6:	9305      	str	r3, [sp, #20]
 80047e8:	f8d8 3000 	ldr.w	r3, [r8]
 80047ec:	f894 b018 	ldrb.w	fp, [r4, #24]
 80047f0:	3307      	adds	r3, #7
 80047f2:	f023 0307 	bic.w	r3, r3, #7
 80047f6:	f103 0208 	add.w	r2, r3, #8
 80047fa:	f8c8 2000 	str.w	r2, [r8]
 80047fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004802:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004806:	9307      	str	r3, [sp, #28]
 8004808:	f8cd 8018 	str.w	r8, [sp, #24]
 800480c:	ee08 0a10 	vmov	s16, r0
 8004810:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004814:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004818:	4b9e      	ldr	r3, [pc, #632]	; (8004a94 <_printf_float+0x2d8>)
 800481a:	f04f 32ff 	mov.w	r2, #4294967295
 800481e:	f7fc f985 	bl	8000b2c <__aeabi_dcmpun>
 8004822:	bb88      	cbnz	r0, 8004888 <_printf_float+0xcc>
 8004824:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004828:	4b9a      	ldr	r3, [pc, #616]	; (8004a94 <_printf_float+0x2d8>)
 800482a:	f04f 32ff 	mov.w	r2, #4294967295
 800482e:	f7fc f95f 	bl	8000af0 <__aeabi_dcmple>
 8004832:	bb48      	cbnz	r0, 8004888 <_printf_float+0xcc>
 8004834:	2200      	movs	r2, #0
 8004836:	2300      	movs	r3, #0
 8004838:	4640      	mov	r0, r8
 800483a:	4649      	mov	r1, r9
 800483c:	f7fc f94e 	bl	8000adc <__aeabi_dcmplt>
 8004840:	b110      	cbz	r0, 8004848 <_printf_float+0x8c>
 8004842:	232d      	movs	r3, #45	; 0x2d
 8004844:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004848:	4a93      	ldr	r2, [pc, #588]	; (8004a98 <_printf_float+0x2dc>)
 800484a:	4b94      	ldr	r3, [pc, #592]	; (8004a9c <_printf_float+0x2e0>)
 800484c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004850:	bf94      	ite	ls
 8004852:	4690      	movls	r8, r2
 8004854:	4698      	movhi	r8, r3
 8004856:	2303      	movs	r3, #3
 8004858:	6123      	str	r3, [r4, #16]
 800485a:	9b05      	ldr	r3, [sp, #20]
 800485c:	f023 0304 	bic.w	r3, r3, #4
 8004860:	6023      	str	r3, [r4, #0]
 8004862:	f04f 0900 	mov.w	r9, #0
 8004866:	9700      	str	r7, [sp, #0]
 8004868:	4633      	mov	r3, r6
 800486a:	aa0b      	add	r2, sp, #44	; 0x2c
 800486c:	4621      	mov	r1, r4
 800486e:	4628      	mov	r0, r5
 8004870:	f000 f9da 	bl	8004c28 <_printf_common>
 8004874:	3001      	adds	r0, #1
 8004876:	f040 8090 	bne.w	800499a <_printf_float+0x1de>
 800487a:	f04f 30ff 	mov.w	r0, #4294967295
 800487e:	b00d      	add	sp, #52	; 0x34
 8004880:	ecbd 8b02 	vpop	{d8}
 8004884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004888:	4642      	mov	r2, r8
 800488a:	464b      	mov	r3, r9
 800488c:	4640      	mov	r0, r8
 800488e:	4649      	mov	r1, r9
 8004890:	f7fc f94c 	bl	8000b2c <__aeabi_dcmpun>
 8004894:	b140      	cbz	r0, 80048a8 <_printf_float+0xec>
 8004896:	464b      	mov	r3, r9
 8004898:	2b00      	cmp	r3, #0
 800489a:	bfbc      	itt	lt
 800489c:	232d      	movlt	r3, #45	; 0x2d
 800489e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80048a2:	4a7f      	ldr	r2, [pc, #508]	; (8004aa0 <_printf_float+0x2e4>)
 80048a4:	4b7f      	ldr	r3, [pc, #508]	; (8004aa4 <_printf_float+0x2e8>)
 80048a6:	e7d1      	b.n	800484c <_printf_float+0x90>
 80048a8:	6863      	ldr	r3, [r4, #4]
 80048aa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80048ae:	9206      	str	r2, [sp, #24]
 80048b0:	1c5a      	adds	r2, r3, #1
 80048b2:	d13f      	bne.n	8004934 <_printf_float+0x178>
 80048b4:	2306      	movs	r3, #6
 80048b6:	6063      	str	r3, [r4, #4]
 80048b8:	9b05      	ldr	r3, [sp, #20]
 80048ba:	6861      	ldr	r1, [r4, #4]
 80048bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80048c0:	2300      	movs	r3, #0
 80048c2:	9303      	str	r3, [sp, #12]
 80048c4:	ab0a      	add	r3, sp, #40	; 0x28
 80048c6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80048ca:	ab09      	add	r3, sp, #36	; 0x24
 80048cc:	ec49 8b10 	vmov	d0, r8, r9
 80048d0:	9300      	str	r3, [sp, #0]
 80048d2:	6022      	str	r2, [r4, #0]
 80048d4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80048d8:	4628      	mov	r0, r5
 80048da:	f7ff fecf 	bl	800467c <__cvt>
 80048de:	9b06      	ldr	r3, [sp, #24]
 80048e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80048e2:	2b47      	cmp	r3, #71	; 0x47
 80048e4:	4680      	mov	r8, r0
 80048e6:	d108      	bne.n	80048fa <_printf_float+0x13e>
 80048e8:	1cc8      	adds	r0, r1, #3
 80048ea:	db02      	blt.n	80048f2 <_printf_float+0x136>
 80048ec:	6863      	ldr	r3, [r4, #4]
 80048ee:	4299      	cmp	r1, r3
 80048f0:	dd41      	ble.n	8004976 <_printf_float+0x1ba>
 80048f2:	f1ab 0302 	sub.w	r3, fp, #2
 80048f6:	fa5f fb83 	uxtb.w	fp, r3
 80048fa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80048fe:	d820      	bhi.n	8004942 <_printf_float+0x186>
 8004900:	3901      	subs	r1, #1
 8004902:	465a      	mov	r2, fp
 8004904:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004908:	9109      	str	r1, [sp, #36]	; 0x24
 800490a:	f7ff ff19 	bl	8004740 <__exponent>
 800490e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004910:	1813      	adds	r3, r2, r0
 8004912:	2a01      	cmp	r2, #1
 8004914:	4681      	mov	r9, r0
 8004916:	6123      	str	r3, [r4, #16]
 8004918:	dc02      	bgt.n	8004920 <_printf_float+0x164>
 800491a:	6822      	ldr	r2, [r4, #0]
 800491c:	07d2      	lsls	r2, r2, #31
 800491e:	d501      	bpl.n	8004924 <_printf_float+0x168>
 8004920:	3301      	adds	r3, #1
 8004922:	6123      	str	r3, [r4, #16]
 8004924:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004928:	2b00      	cmp	r3, #0
 800492a:	d09c      	beq.n	8004866 <_printf_float+0xaa>
 800492c:	232d      	movs	r3, #45	; 0x2d
 800492e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004932:	e798      	b.n	8004866 <_printf_float+0xaa>
 8004934:	9a06      	ldr	r2, [sp, #24]
 8004936:	2a47      	cmp	r2, #71	; 0x47
 8004938:	d1be      	bne.n	80048b8 <_printf_float+0xfc>
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1bc      	bne.n	80048b8 <_printf_float+0xfc>
 800493e:	2301      	movs	r3, #1
 8004940:	e7b9      	b.n	80048b6 <_printf_float+0xfa>
 8004942:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004946:	d118      	bne.n	800497a <_printf_float+0x1be>
 8004948:	2900      	cmp	r1, #0
 800494a:	6863      	ldr	r3, [r4, #4]
 800494c:	dd0b      	ble.n	8004966 <_printf_float+0x1aa>
 800494e:	6121      	str	r1, [r4, #16]
 8004950:	b913      	cbnz	r3, 8004958 <_printf_float+0x19c>
 8004952:	6822      	ldr	r2, [r4, #0]
 8004954:	07d0      	lsls	r0, r2, #31
 8004956:	d502      	bpl.n	800495e <_printf_float+0x1a2>
 8004958:	3301      	adds	r3, #1
 800495a:	440b      	add	r3, r1
 800495c:	6123      	str	r3, [r4, #16]
 800495e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004960:	f04f 0900 	mov.w	r9, #0
 8004964:	e7de      	b.n	8004924 <_printf_float+0x168>
 8004966:	b913      	cbnz	r3, 800496e <_printf_float+0x1b2>
 8004968:	6822      	ldr	r2, [r4, #0]
 800496a:	07d2      	lsls	r2, r2, #31
 800496c:	d501      	bpl.n	8004972 <_printf_float+0x1b6>
 800496e:	3302      	adds	r3, #2
 8004970:	e7f4      	b.n	800495c <_printf_float+0x1a0>
 8004972:	2301      	movs	r3, #1
 8004974:	e7f2      	b.n	800495c <_printf_float+0x1a0>
 8004976:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800497a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800497c:	4299      	cmp	r1, r3
 800497e:	db05      	blt.n	800498c <_printf_float+0x1d0>
 8004980:	6823      	ldr	r3, [r4, #0]
 8004982:	6121      	str	r1, [r4, #16]
 8004984:	07d8      	lsls	r0, r3, #31
 8004986:	d5ea      	bpl.n	800495e <_printf_float+0x1a2>
 8004988:	1c4b      	adds	r3, r1, #1
 800498a:	e7e7      	b.n	800495c <_printf_float+0x1a0>
 800498c:	2900      	cmp	r1, #0
 800498e:	bfd4      	ite	le
 8004990:	f1c1 0202 	rsble	r2, r1, #2
 8004994:	2201      	movgt	r2, #1
 8004996:	4413      	add	r3, r2
 8004998:	e7e0      	b.n	800495c <_printf_float+0x1a0>
 800499a:	6823      	ldr	r3, [r4, #0]
 800499c:	055a      	lsls	r2, r3, #21
 800499e:	d407      	bmi.n	80049b0 <_printf_float+0x1f4>
 80049a0:	6923      	ldr	r3, [r4, #16]
 80049a2:	4642      	mov	r2, r8
 80049a4:	4631      	mov	r1, r6
 80049a6:	4628      	mov	r0, r5
 80049a8:	47b8      	blx	r7
 80049aa:	3001      	adds	r0, #1
 80049ac:	d12c      	bne.n	8004a08 <_printf_float+0x24c>
 80049ae:	e764      	b.n	800487a <_printf_float+0xbe>
 80049b0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80049b4:	f240 80e0 	bls.w	8004b78 <_printf_float+0x3bc>
 80049b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80049bc:	2200      	movs	r2, #0
 80049be:	2300      	movs	r3, #0
 80049c0:	f7fc f882 	bl	8000ac8 <__aeabi_dcmpeq>
 80049c4:	2800      	cmp	r0, #0
 80049c6:	d034      	beq.n	8004a32 <_printf_float+0x276>
 80049c8:	4a37      	ldr	r2, [pc, #220]	; (8004aa8 <_printf_float+0x2ec>)
 80049ca:	2301      	movs	r3, #1
 80049cc:	4631      	mov	r1, r6
 80049ce:	4628      	mov	r0, r5
 80049d0:	47b8      	blx	r7
 80049d2:	3001      	adds	r0, #1
 80049d4:	f43f af51 	beq.w	800487a <_printf_float+0xbe>
 80049d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049dc:	429a      	cmp	r2, r3
 80049de:	db02      	blt.n	80049e6 <_printf_float+0x22a>
 80049e0:	6823      	ldr	r3, [r4, #0]
 80049e2:	07d8      	lsls	r0, r3, #31
 80049e4:	d510      	bpl.n	8004a08 <_printf_float+0x24c>
 80049e6:	ee18 3a10 	vmov	r3, s16
 80049ea:	4652      	mov	r2, sl
 80049ec:	4631      	mov	r1, r6
 80049ee:	4628      	mov	r0, r5
 80049f0:	47b8      	blx	r7
 80049f2:	3001      	adds	r0, #1
 80049f4:	f43f af41 	beq.w	800487a <_printf_float+0xbe>
 80049f8:	f04f 0800 	mov.w	r8, #0
 80049fc:	f104 091a 	add.w	r9, r4, #26
 8004a00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a02:	3b01      	subs	r3, #1
 8004a04:	4543      	cmp	r3, r8
 8004a06:	dc09      	bgt.n	8004a1c <_printf_float+0x260>
 8004a08:	6823      	ldr	r3, [r4, #0]
 8004a0a:	079b      	lsls	r3, r3, #30
 8004a0c:	f100 8107 	bmi.w	8004c1e <_printf_float+0x462>
 8004a10:	68e0      	ldr	r0, [r4, #12]
 8004a12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a14:	4298      	cmp	r0, r3
 8004a16:	bfb8      	it	lt
 8004a18:	4618      	movlt	r0, r3
 8004a1a:	e730      	b.n	800487e <_printf_float+0xc2>
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	464a      	mov	r2, r9
 8004a20:	4631      	mov	r1, r6
 8004a22:	4628      	mov	r0, r5
 8004a24:	47b8      	blx	r7
 8004a26:	3001      	adds	r0, #1
 8004a28:	f43f af27 	beq.w	800487a <_printf_float+0xbe>
 8004a2c:	f108 0801 	add.w	r8, r8, #1
 8004a30:	e7e6      	b.n	8004a00 <_printf_float+0x244>
 8004a32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	dc39      	bgt.n	8004aac <_printf_float+0x2f0>
 8004a38:	4a1b      	ldr	r2, [pc, #108]	; (8004aa8 <_printf_float+0x2ec>)
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	4631      	mov	r1, r6
 8004a3e:	4628      	mov	r0, r5
 8004a40:	47b8      	blx	r7
 8004a42:	3001      	adds	r0, #1
 8004a44:	f43f af19 	beq.w	800487a <_printf_float+0xbe>
 8004a48:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	d102      	bne.n	8004a56 <_printf_float+0x29a>
 8004a50:	6823      	ldr	r3, [r4, #0]
 8004a52:	07d9      	lsls	r1, r3, #31
 8004a54:	d5d8      	bpl.n	8004a08 <_printf_float+0x24c>
 8004a56:	ee18 3a10 	vmov	r3, s16
 8004a5a:	4652      	mov	r2, sl
 8004a5c:	4631      	mov	r1, r6
 8004a5e:	4628      	mov	r0, r5
 8004a60:	47b8      	blx	r7
 8004a62:	3001      	adds	r0, #1
 8004a64:	f43f af09 	beq.w	800487a <_printf_float+0xbe>
 8004a68:	f04f 0900 	mov.w	r9, #0
 8004a6c:	f104 0a1a 	add.w	sl, r4, #26
 8004a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a72:	425b      	negs	r3, r3
 8004a74:	454b      	cmp	r3, r9
 8004a76:	dc01      	bgt.n	8004a7c <_printf_float+0x2c0>
 8004a78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a7a:	e792      	b.n	80049a2 <_printf_float+0x1e6>
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	4652      	mov	r2, sl
 8004a80:	4631      	mov	r1, r6
 8004a82:	4628      	mov	r0, r5
 8004a84:	47b8      	blx	r7
 8004a86:	3001      	adds	r0, #1
 8004a88:	f43f aef7 	beq.w	800487a <_printf_float+0xbe>
 8004a8c:	f109 0901 	add.w	r9, r9, #1
 8004a90:	e7ee      	b.n	8004a70 <_printf_float+0x2b4>
 8004a92:	bf00      	nop
 8004a94:	7fefffff 	.word	0x7fefffff
 8004a98:	08007433 	.word	0x08007433
 8004a9c:	08007437 	.word	0x08007437
 8004aa0:	0800743b 	.word	0x0800743b
 8004aa4:	0800743f 	.word	0x0800743f
 8004aa8:	08007443 	.word	0x08007443
 8004aac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004aae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	bfa8      	it	ge
 8004ab4:	461a      	movge	r2, r3
 8004ab6:	2a00      	cmp	r2, #0
 8004ab8:	4691      	mov	r9, r2
 8004aba:	dc37      	bgt.n	8004b2c <_printf_float+0x370>
 8004abc:	f04f 0b00 	mov.w	fp, #0
 8004ac0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ac4:	f104 021a 	add.w	r2, r4, #26
 8004ac8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004aca:	9305      	str	r3, [sp, #20]
 8004acc:	eba3 0309 	sub.w	r3, r3, r9
 8004ad0:	455b      	cmp	r3, fp
 8004ad2:	dc33      	bgt.n	8004b3c <_printf_float+0x380>
 8004ad4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	db3b      	blt.n	8004b54 <_printf_float+0x398>
 8004adc:	6823      	ldr	r3, [r4, #0]
 8004ade:	07da      	lsls	r2, r3, #31
 8004ae0:	d438      	bmi.n	8004b54 <_printf_float+0x398>
 8004ae2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004ae6:	eba2 0903 	sub.w	r9, r2, r3
 8004aea:	9b05      	ldr	r3, [sp, #20]
 8004aec:	1ad2      	subs	r2, r2, r3
 8004aee:	4591      	cmp	r9, r2
 8004af0:	bfa8      	it	ge
 8004af2:	4691      	movge	r9, r2
 8004af4:	f1b9 0f00 	cmp.w	r9, #0
 8004af8:	dc35      	bgt.n	8004b66 <_printf_float+0x3aa>
 8004afa:	f04f 0800 	mov.w	r8, #0
 8004afe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b02:	f104 0a1a 	add.w	sl, r4, #26
 8004b06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b0a:	1a9b      	subs	r3, r3, r2
 8004b0c:	eba3 0309 	sub.w	r3, r3, r9
 8004b10:	4543      	cmp	r3, r8
 8004b12:	f77f af79 	ble.w	8004a08 <_printf_float+0x24c>
 8004b16:	2301      	movs	r3, #1
 8004b18:	4652      	mov	r2, sl
 8004b1a:	4631      	mov	r1, r6
 8004b1c:	4628      	mov	r0, r5
 8004b1e:	47b8      	blx	r7
 8004b20:	3001      	adds	r0, #1
 8004b22:	f43f aeaa 	beq.w	800487a <_printf_float+0xbe>
 8004b26:	f108 0801 	add.w	r8, r8, #1
 8004b2a:	e7ec      	b.n	8004b06 <_printf_float+0x34a>
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	4631      	mov	r1, r6
 8004b30:	4642      	mov	r2, r8
 8004b32:	4628      	mov	r0, r5
 8004b34:	47b8      	blx	r7
 8004b36:	3001      	adds	r0, #1
 8004b38:	d1c0      	bne.n	8004abc <_printf_float+0x300>
 8004b3a:	e69e      	b.n	800487a <_printf_float+0xbe>
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	4631      	mov	r1, r6
 8004b40:	4628      	mov	r0, r5
 8004b42:	9205      	str	r2, [sp, #20]
 8004b44:	47b8      	blx	r7
 8004b46:	3001      	adds	r0, #1
 8004b48:	f43f ae97 	beq.w	800487a <_printf_float+0xbe>
 8004b4c:	9a05      	ldr	r2, [sp, #20]
 8004b4e:	f10b 0b01 	add.w	fp, fp, #1
 8004b52:	e7b9      	b.n	8004ac8 <_printf_float+0x30c>
 8004b54:	ee18 3a10 	vmov	r3, s16
 8004b58:	4652      	mov	r2, sl
 8004b5a:	4631      	mov	r1, r6
 8004b5c:	4628      	mov	r0, r5
 8004b5e:	47b8      	blx	r7
 8004b60:	3001      	adds	r0, #1
 8004b62:	d1be      	bne.n	8004ae2 <_printf_float+0x326>
 8004b64:	e689      	b.n	800487a <_printf_float+0xbe>
 8004b66:	9a05      	ldr	r2, [sp, #20]
 8004b68:	464b      	mov	r3, r9
 8004b6a:	4442      	add	r2, r8
 8004b6c:	4631      	mov	r1, r6
 8004b6e:	4628      	mov	r0, r5
 8004b70:	47b8      	blx	r7
 8004b72:	3001      	adds	r0, #1
 8004b74:	d1c1      	bne.n	8004afa <_printf_float+0x33e>
 8004b76:	e680      	b.n	800487a <_printf_float+0xbe>
 8004b78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b7a:	2a01      	cmp	r2, #1
 8004b7c:	dc01      	bgt.n	8004b82 <_printf_float+0x3c6>
 8004b7e:	07db      	lsls	r3, r3, #31
 8004b80:	d53a      	bpl.n	8004bf8 <_printf_float+0x43c>
 8004b82:	2301      	movs	r3, #1
 8004b84:	4642      	mov	r2, r8
 8004b86:	4631      	mov	r1, r6
 8004b88:	4628      	mov	r0, r5
 8004b8a:	47b8      	blx	r7
 8004b8c:	3001      	adds	r0, #1
 8004b8e:	f43f ae74 	beq.w	800487a <_printf_float+0xbe>
 8004b92:	ee18 3a10 	vmov	r3, s16
 8004b96:	4652      	mov	r2, sl
 8004b98:	4631      	mov	r1, r6
 8004b9a:	4628      	mov	r0, r5
 8004b9c:	47b8      	blx	r7
 8004b9e:	3001      	adds	r0, #1
 8004ba0:	f43f ae6b 	beq.w	800487a <_printf_float+0xbe>
 8004ba4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004ba8:	2200      	movs	r2, #0
 8004baa:	2300      	movs	r3, #0
 8004bac:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004bb0:	f7fb ff8a 	bl	8000ac8 <__aeabi_dcmpeq>
 8004bb4:	b9d8      	cbnz	r0, 8004bee <_printf_float+0x432>
 8004bb6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004bba:	f108 0201 	add.w	r2, r8, #1
 8004bbe:	4631      	mov	r1, r6
 8004bc0:	4628      	mov	r0, r5
 8004bc2:	47b8      	blx	r7
 8004bc4:	3001      	adds	r0, #1
 8004bc6:	d10e      	bne.n	8004be6 <_printf_float+0x42a>
 8004bc8:	e657      	b.n	800487a <_printf_float+0xbe>
 8004bca:	2301      	movs	r3, #1
 8004bcc:	4652      	mov	r2, sl
 8004bce:	4631      	mov	r1, r6
 8004bd0:	4628      	mov	r0, r5
 8004bd2:	47b8      	blx	r7
 8004bd4:	3001      	adds	r0, #1
 8004bd6:	f43f ae50 	beq.w	800487a <_printf_float+0xbe>
 8004bda:	f108 0801 	add.w	r8, r8, #1
 8004bde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004be0:	3b01      	subs	r3, #1
 8004be2:	4543      	cmp	r3, r8
 8004be4:	dcf1      	bgt.n	8004bca <_printf_float+0x40e>
 8004be6:	464b      	mov	r3, r9
 8004be8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004bec:	e6da      	b.n	80049a4 <_printf_float+0x1e8>
 8004bee:	f04f 0800 	mov.w	r8, #0
 8004bf2:	f104 0a1a 	add.w	sl, r4, #26
 8004bf6:	e7f2      	b.n	8004bde <_printf_float+0x422>
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	4642      	mov	r2, r8
 8004bfc:	e7df      	b.n	8004bbe <_printf_float+0x402>
 8004bfe:	2301      	movs	r3, #1
 8004c00:	464a      	mov	r2, r9
 8004c02:	4631      	mov	r1, r6
 8004c04:	4628      	mov	r0, r5
 8004c06:	47b8      	blx	r7
 8004c08:	3001      	adds	r0, #1
 8004c0a:	f43f ae36 	beq.w	800487a <_printf_float+0xbe>
 8004c0e:	f108 0801 	add.w	r8, r8, #1
 8004c12:	68e3      	ldr	r3, [r4, #12]
 8004c14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c16:	1a5b      	subs	r3, r3, r1
 8004c18:	4543      	cmp	r3, r8
 8004c1a:	dcf0      	bgt.n	8004bfe <_printf_float+0x442>
 8004c1c:	e6f8      	b.n	8004a10 <_printf_float+0x254>
 8004c1e:	f04f 0800 	mov.w	r8, #0
 8004c22:	f104 0919 	add.w	r9, r4, #25
 8004c26:	e7f4      	b.n	8004c12 <_printf_float+0x456>

08004c28 <_printf_common>:
 8004c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c2c:	4616      	mov	r6, r2
 8004c2e:	4699      	mov	r9, r3
 8004c30:	688a      	ldr	r2, [r1, #8]
 8004c32:	690b      	ldr	r3, [r1, #16]
 8004c34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	bfb8      	it	lt
 8004c3c:	4613      	movlt	r3, r2
 8004c3e:	6033      	str	r3, [r6, #0]
 8004c40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c44:	4607      	mov	r7, r0
 8004c46:	460c      	mov	r4, r1
 8004c48:	b10a      	cbz	r2, 8004c4e <_printf_common+0x26>
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	6033      	str	r3, [r6, #0]
 8004c4e:	6823      	ldr	r3, [r4, #0]
 8004c50:	0699      	lsls	r1, r3, #26
 8004c52:	bf42      	ittt	mi
 8004c54:	6833      	ldrmi	r3, [r6, #0]
 8004c56:	3302      	addmi	r3, #2
 8004c58:	6033      	strmi	r3, [r6, #0]
 8004c5a:	6825      	ldr	r5, [r4, #0]
 8004c5c:	f015 0506 	ands.w	r5, r5, #6
 8004c60:	d106      	bne.n	8004c70 <_printf_common+0x48>
 8004c62:	f104 0a19 	add.w	sl, r4, #25
 8004c66:	68e3      	ldr	r3, [r4, #12]
 8004c68:	6832      	ldr	r2, [r6, #0]
 8004c6a:	1a9b      	subs	r3, r3, r2
 8004c6c:	42ab      	cmp	r3, r5
 8004c6e:	dc26      	bgt.n	8004cbe <_printf_common+0x96>
 8004c70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c74:	1e13      	subs	r3, r2, #0
 8004c76:	6822      	ldr	r2, [r4, #0]
 8004c78:	bf18      	it	ne
 8004c7a:	2301      	movne	r3, #1
 8004c7c:	0692      	lsls	r2, r2, #26
 8004c7e:	d42b      	bmi.n	8004cd8 <_printf_common+0xb0>
 8004c80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c84:	4649      	mov	r1, r9
 8004c86:	4638      	mov	r0, r7
 8004c88:	47c0      	blx	r8
 8004c8a:	3001      	adds	r0, #1
 8004c8c:	d01e      	beq.n	8004ccc <_printf_common+0xa4>
 8004c8e:	6823      	ldr	r3, [r4, #0]
 8004c90:	6922      	ldr	r2, [r4, #16]
 8004c92:	f003 0306 	and.w	r3, r3, #6
 8004c96:	2b04      	cmp	r3, #4
 8004c98:	bf02      	ittt	eq
 8004c9a:	68e5      	ldreq	r5, [r4, #12]
 8004c9c:	6833      	ldreq	r3, [r6, #0]
 8004c9e:	1aed      	subeq	r5, r5, r3
 8004ca0:	68a3      	ldr	r3, [r4, #8]
 8004ca2:	bf0c      	ite	eq
 8004ca4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ca8:	2500      	movne	r5, #0
 8004caa:	4293      	cmp	r3, r2
 8004cac:	bfc4      	itt	gt
 8004cae:	1a9b      	subgt	r3, r3, r2
 8004cb0:	18ed      	addgt	r5, r5, r3
 8004cb2:	2600      	movs	r6, #0
 8004cb4:	341a      	adds	r4, #26
 8004cb6:	42b5      	cmp	r5, r6
 8004cb8:	d11a      	bne.n	8004cf0 <_printf_common+0xc8>
 8004cba:	2000      	movs	r0, #0
 8004cbc:	e008      	b.n	8004cd0 <_printf_common+0xa8>
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	4652      	mov	r2, sl
 8004cc2:	4649      	mov	r1, r9
 8004cc4:	4638      	mov	r0, r7
 8004cc6:	47c0      	blx	r8
 8004cc8:	3001      	adds	r0, #1
 8004cca:	d103      	bne.n	8004cd4 <_printf_common+0xac>
 8004ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cd4:	3501      	adds	r5, #1
 8004cd6:	e7c6      	b.n	8004c66 <_printf_common+0x3e>
 8004cd8:	18e1      	adds	r1, r4, r3
 8004cda:	1c5a      	adds	r2, r3, #1
 8004cdc:	2030      	movs	r0, #48	; 0x30
 8004cde:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ce2:	4422      	add	r2, r4
 8004ce4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ce8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004cec:	3302      	adds	r3, #2
 8004cee:	e7c7      	b.n	8004c80 <_printf_common+0x58>
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	4622      	mov	r2, r4
 8004cf4:	4649      	mov	r1, r9
 8004cf6:	4638      	mov	r0, r7
 8004cf8:	47c0      	blx	r8
 8004cfa:	3001      	adds	r0, #1
 8004cfc:	d0e6      	beq.n	8004ccc <_printf_common+0xa4>
 8004cfe:	3601      	adds	r6, #1
 8004d00:	e7d9      	b.n	8004cb6 <_printf_common+0x8e>
	...

08004d04 <_printf_i>:
 8004d04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d08:	7e0f      	ldrb	r7, [r1, #24]
 8004d0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d0c:	2f78      	cmp	r7, #120	; 0x78
 8004d0e:	4691      	mov	r9, r2
 8004d10:	4680      	mov	r8, r0
 8004d12:	460c      	mov	r4, r1
 8004d14:	469a      	mov	sl, r3
 8004d16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d1a:	d807      	bhi.n	8004d2c <_printf_i+0x28>
 8004d1c:	2f62      	cmp	r7, #98	; 0x62
 8004d1e:	d80a      	bhi.n	8004d36 <_printf_i+0x32>
 8004d20:	2f00      	cmp	r7, #0
 8004d22:	f000 80d4 	beq.w	8004ece <_printf_i+0x1ca>
 8004d26:	2f58      	cmp	r7, #88	; 0x58
 8004d28:	f000 80c0 	beq.w	8004eac <_printf_i+0x1a8>
 8004d2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d34:	e03a      	b.n	8004dac <_printf_i+0xa8>
 8004d36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d3a:	2b15      	cmp	r3, #21
 8004d3c:	d8f6      	bhi.n	8004d2c <_printf_i+0x28>
 8004d3e:	a101      	add	r1, pc, #4	; (adr r1, 8004d44 <_printf_i+0x40>)
 8004d40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d44:	08004d9d 	.word	0x08004d9d
 8004d48:	08004db1 	.word	0x08004db1
 8004d4c:	08004d2d 	.word	0x08004d2d
 8004d50:	08004d2d 	.word	0x08004d2d
 8004d54:	08004d2d 	.word	0x08004d2d
 8004d58:	08004d2d 	.word	0x08004d2d
 8004d5c:	08004db1 	.word	0x08004db1
 8004d60:	08004d2d 	.word	0x08004d2d
 8004d64:	08004d2d 	.word	0x08004d2d
 8004d68:	08004d2d 	.word	0x08004d2d
 8004d6c:	08004d2d 	.word	0x08004d2d
 8004d70:	08004eb5 	.word	0x08004eb5
 8004d74:	08004ddd 	.word	0x08004ddd
 8004d78:	08004e6f 	.word	0x08004e6f
 8004d7c:	08004d2d 	.word	0x08004d2d
 8004d80:	08004d2d 	.word	0x08004d2d
 8004d84:	08004ed7 	.word	0x08004ed7
 8004d88:	08004d2d 	.word	0x08004d2d
 8004d8c:	08004ddd 	.word	0x08004ddd
 8004d90:	08004d2d 	.word	0x08004d2d
 8004d94:	08004d2d 	.word	0x08004d2d
 8004d98:	08004e77 	.word	0x08004e77
 8004d9c:	682b      	ldr	r3, [r5, #0]
 8004d9e:	1d1a      	adds	r2, r3, #4
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	602a      	str	r2, [r5, #0]
 8004da4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004da8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004dac:	2301      	movs	r3, #1
 8004dae:	e09f      	b.n	8004ef0 <_printf_i+0x1ec>
 8004db0:	6820      	ldr	r0, [r4, #0]
 8004db2:	682b      	ldr	r3, [r5, #0]
 8004db4:	0607      	lsls	r7, r0, #24
 8004db6:	f103 0104 	add.w	r1, r3, #4
 8004dba:	6029      	str	r1, [r5, #0]
 8004dbc:	d501      	bpl.n	8004dc2 <_printf_i+0xbe>
 8004dbe:	681e      	ldr	r6, [r3, #0]
 8004dc0:	e003      	b.n	8004dca <_printf_i+0xc6>
 8004dc2:	0646      	lsls	r6, r0, #25
 8004dc4:	d5fb      	bpl.n	8004dbe <_printf_i+0xba>
 8004dc6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004dca:	2e00      	cmp	r6, #0
 8004dcc:	da03      	bge.n	8004dd6 <_printf_i+0xd2>
 8004dce:	232d      	movs	r3, #45	; 0x2d
 8004dd0:	4276      	negs	r6, r6
 8004dd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dd6:	485a      	ldr	r0, [pc, #360]	; (8004f40 <_printf_i+0x23c>)
 8004dd8:	230a      	movs	r3, #10
 8004dda:	e012      	b.n	8004e02 <_printf_i+0xfe>
 8004ddc:	682b      	ldr	r3, [r5, #0]
 8004dde:	6820      	ldr	r0, [r4, #0]
 8004de0:	1d19      	adds	r1, r3, #4
 8004de2:	6029      	str	r1, [r5, #0]
 8004de4:	0605      	lsls	r5, r0, #24
 8004de6:	d501      	bpl.n	8004dec <_printf_i+0xe8>
 8004de8:	681e      	ldr	r6, [r3, #0]
 8004dea:	e002      	b.n	8004df2 <_printf_i+0xee>
 8004dec:	0641      	lsls	r1, r0, #25
 8004dee:	d5fb      	bpl.n	8004de8 <_printf_i+0xe4>
 8004df0:	881e      	ldrh	r6, [r3, #0]
 8004df2:	4853      	ldr	r0, [pc, #332]	; (8004f40 <_printf_i+0x23c>)
 8004df4:	2f6f      	cmp	r7, #111	; 0x6f
 8004df6:	bf0c      	ite	eq
 8004df8:	2308      	moveq	r3, #8
 8004dfa:	230a      	movne	r3, #10
 8004dfc:	2100      	movs	r1, #0
 8004dfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e02:	6865      	ldr	r5, [r4, #4]
 8004e04:	60a5      	str	r5, [r4, #8]
 8004e06:	2d00      	cmp	r5, #0
 8004e08:	bfa2      	ittt	ge
 8004e0a:	6821      	ldrge	r1, [r4, #0]
 8004e0c:	f021 0104 	bicge.w	r1, r1, #4
 8004e10:	6021      	strge	r1, [r4, #0]
 8004e12:	b90e      	cbnz	r6, 8004e18 <_printf_i+0x114>
 8004e14:	2d00      	cmp	r5, #0
 8004e16:	d04b      	beq.n	8004eb0 <_printf_i+0x1ac>
 8004e18:	4615      	mov	r5, r2
 8004e1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e1e:	fb03 6711 	mls	r7, r3, r1, r6
 8004e22:	5dc7      	ldrb	r7, [r0, r7]
 8004e24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e28:	4637      	mov	r7, r6
 8004e2a:	42bb      	cmp	r3, r7
 8004e2c:	460e      	mov	r6, r1
 8004e2e:	d9f4      	bls.n	8004e1a <_printf_i+0x116>
 8004e30:	2b08      	cmp	r3, #8
 8004e32:	d10b      	bne.n	8004e4c <_printf_i+0x148>
 8004e34:	6823      	ldr	r3, [r4, #0]
 8004e36:	07de      	lsls	r6, r3, #31
 8004e38:	d508      	bpl.n	8004e4c <_printf_i+0x148>
 8004e3a:	6923      	ldr	r3, [r4, #16]
 8004e3c:	6861      	ldr	r1, [r4, #4]
 8004e3e:	4299      	cmp	r1, r3
 8004e40:	bfde      	ittt	le
 8004e42:	2330      	movle	r3, #48	; 0x30
 8004e44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e48:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e4c:	1b52      	subs	r2, r2, r5
 8004e4e:	6122      	str	r2, [r4, #16]
 8004e50:	f8cd a000 	str.w	sl, [sp]
 8004e54:	464b      	mov	r3, r9
 8004e56:	aa03      	add	r2, sp, #12
 8004e58:	4621      	mov	r1, r4
 8004e5a:	4640      	mov	r0, r8
 8004e5c:	f7ff fee4 	bl	8004c28 <_printf_common>
 8004e60:	3001      	adds	r0, #1
 8004e62:	d14a      	bne.n	8004efa <_printf_i+0x1f6>
 8004e64:	f04f 30ff 	mov.w	r0, #4294967295
 8004e68:	b004      	add	sp, #16
 8004e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e6e:	6823      	ldr	r3, [r4, #0]
 8004e70:	f043 0320 	orr.w	r3, r3, #32
 8004e74:	6023      	str	r3, [r4, #0]
 8004e76:	4833      	ldr	r0, [pc, #204]	; (8004f44 <_printf_i+0x240>)
 8004e78:	2778      	movs	r7, #120	; 0x78
 8004e7a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004e7e:	6823      	ldr	r3, [r4, #0]
 8004e80:	6829      	ldr	r1, [r5, #0]
 8004e82:	061f      	lsls	r7, r3, #24
 8004e84:	f851 6b04 	ldr.w	r6, [r1], #4
 8004e88:	d402      	bmi.n	8004e90 <_printf_i+0x18c>
 8004e8a:	065f      	lsls	r7, r3, #25
 8004e8c:	bf48      	it	mi
 8004e8e:	b2b6      	uxthmi	r6, r6
 8004e90:	07df      	lsls	r7, r3, #31
 8004e92:	bf48      	it	mi
 8004e94:	f043 0320 	orrmi.w	r3, r3, #32
 8004e98:	6029      	str	r1, [r5, #0]
 8004e9a:	bf48      	it	mi
 8004e9c:	6023      	strmi	r3, [r4, #0]
 8004e9e:	b91e      	cbnz	r6, 8004ea8 <_printf_i+0x1a4>
 8004ea0:	6823      	ldr	r3, [r4, #0]
 8004ea2:	f023 0320 	bic.w	r3, r3, #32
 8004ea6:	6023      	str	r3, [r4, #0]
 8004ea8:	2310      	movs	r3, #16
 8004eaa:	e7a7      	b.n	8004dfc <_printf_i+0xf8>
 8004eac:	4824      	ldr	r0, [pc, #144]	; (8004f40 <_printf_i+0x23c>)
 8004eae:	e7e4      	b.n	8004e7a <_printf_i+0x176>
 8004eb0:	4615      	mov	r5, r2
 8004eb2:	e7bd      	b.n	8004e30 <_printf_i+0x12c>
 8004eb4:	682b      	ldr	r3, [r5, #0]
 8004eb6:	6826      	ldr	r6, [r4, #0]
 8004eb8:	6961      	ldr	r1, [r4, #20]
 8004eba:	1d18      	adds	r0, r3, #4
 8004ebc:	6028      	str	r0, [r5, #0]
 8004ebe:	0635      	lsls	r5, r6, #24
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	d501      	bpl.n	8004ec8 <_printf_i+0x1c4>
 8004ec4:	6019      	str	r1, [r3, #0]
 8004ec6:	e002      	b.n	8004ece <_printf_i+0x1ca>
 8004ec8:	0670      	lsls	r0, r6, #25
 8004eca:	d5fb      	bpl.n	8004ec4 <_printf_i+0x1c0>
 8004ecc:	8019      	strh	r1, [r3, #0]
 8004ece:	2300      	movs	r3, #0
 8004ed0:	6123      	str	r3, [r4, #16]
 8004ed2:	4615      	mov	r5, r2
 8004ed4:	e7bc      	b.n	8004e50 <_printf_i+0x14c>
 8004ed6:	682b      	ldr	r3, [r5, #0]
 8004ed8:	1d1a      	adds	r2, r3, #4
 8004eda:	602a      	str	r2, [r5, #0]
 8004edc:	681d      	ldr	r5, [r3, #0]
 8004ede:	6862      	ldr	r2, [r4, #4]
 8004ee0:	2100      	movs	r1, #0
 8004ee2:	4628      	mov	r0, r5
 8004ee4:	f7fb f974 	bl	80001d0 <memchr>
 8004ee8:	b108      	cbz	r0, 8004eee <_printf_i+0x1ea>
 8004eea:	1b40      	subs	r0, r0, r5
 8004eec:	6060      	str	r0, [r4, #4]
 8004eee:	6863      	ldr	r3, [r4, #4]
 8004ef0:	6123      	str	r3, [r4, #16]
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ef8:	e7aa      	b.n	8004e50 <_printf_i+0x14c>
 8004efa:	6923      	ldr	r3, [r4, #16]
 8004efc:	462a      	mov	r2, r5
 8004efe:	4649      	mov	r1, r9
 8004f00:	4640      	mov	r0, r8
 8004f02:	47d0      	blx	sl
 8004f04:	3001      	adds	r0, #1
 8004f06:	d0ad      	beq.n	8004e64 <_printf_i+0x160>
 8004f08:	6823      	ldr	r3, [r4, #0]
 8004f0a:	079b      	lsls	r3, r3, #30
 8004f0c:	d413      	bmi.n	8004f36 <_printf_i+0x232>
 8004f0e:	68e0      	ldr	r0, [r4, #12]
 8004f10:	9b03      	ldr	r3, [sp, #12]
 8004f12:	4298      	cmp	r0, r3
 8004f14:	bfb8      	it	lt
 8004f16:	4618      	movlt	r0, r3
 8004f18:	e7a6      	b.n	8004e68 <_printf_i+0x164>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	4632      	mov	r2, r6
 8004f1e:	4649      	mov	r1, r9
 8004f20:	4640      	mov	r0, r8
 8004f22:	47d0      	blx	sl
 8004f24:	3001      	adds	r0, #1
 8004f26:	d09d      	beq.n	8004e64 <_printf_i+0x160>
 8004f28:	3501      	adds	r5, #1
 8004f2a:	68e3      	ldr	r3, [r4, #12]
 8004f2c:	9903      	ldr	r1, [sp, #12]
 8004f2e:	1a5b      	subs	r3, r3, r1
 8004f30:	42ab      	cmp	r3, r5
 8004f32:	dcf2      	bgt.n	8004f1a <_printf_i+0x216>
 8004f34:	e7eb      	b.n	8004f0e <_printf_i+0x20a>
 8004f36:	2500      	movs	r5, #0
 8004f38:	f104 0619 	add.w	r6, r4, #25
 8004f3c:	e7f5      	b.n	8004f2a <_printf_i+0x226>
 8004f3e:	bf00      	nop
 8004f40:	08007445 	.word	0x08007445
 8004f44:	08007456 	.word	0x08007456

08004f48 <std>:
 8004f48:	2300      	movs	r3, #0
 8004f4a:	b510      	push	{r4, lr}
 8004f4c:	4604      	mov	r4, r0
 8004f4e:	e9c0 3300 	strd	r3, r3, [r0]
 8004f52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f56:	6083      	str	r3, [r0, #8]
 8004f58:	8181      	strh	r1, [r0, #12]
 8004f5a:	6643      	str	r3, [r0, #100]	; 0x64
 8004f5c:	81c2      	strh	r2, [r0, #14]
 8004f5e:	6183      	str	r3, [r0, #24]
 8004f60:	4619      	mov	r1, r3
 8004f62:	2208      	movs	r2, #8
 8004f64:	305c      	adds	r0, #92	; 0x5c
 8004f66:	f000 f914 	bl	8005192 <memset>
 8004f6a:	4b0d      	ldr	r3, [pc, #52]	; (8004fa0 <std+0x58>)
 8004f6c:	6263      	str	r3, [r4, #36]	; 0x24
 8004f6e:	4b0d      	ldr	r3, [pc, #52]	; (8004fa4 <std+0x5c>)
 8004f70:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f72:	4b0d      	ldr	r3, [pc, #52]	; (8004fa8 <std+0x60>)
 8004f74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f76:	4b0d      	ldr	r3, [pc, #52]	; (8004fac <std+0x64>)
 8004f78:	6323      	str	r3, [r4, #48]	; 0x30
 8004f7a:	4b0d      	ldr	r3, [pc, #52]	; (8004fb0 <std+0x68>)
 8004f7c:	6224      	str	r4, [r4, #32]
 8004f7e:	429c      	cmp	r4, r3
 8004f80:	d006      	beq.n	8004f90 <std+0x48>
 8004f82:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004f86:	4294      	cmp	r4, r2
 8004f88:	d002      	beq.n	8004f90 <std+0x48>
 8004f8a:	33d0      	adds	r3, #208	; 0xd0
 8004f8c:	429c      	cmp	r4, r3
 8004f8e:	d105      	bne.n	8004f9c <std+0x54>
 8004f90:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f98:	f000 b978 	b.w	800528c <__retarget_lock_init_recursive>
 8004f9c:	bd10      	pop	{r4, pc}
 8004f9e:	bf00      	nop
 8004fa0:	0800510d 	.word	0x0800510d
 8004fa4:	0800512f 	.word	0x0800512f
 8004fa8:	08005167 	.word	0x08005167
 8004fac:	0800518b 	.word	0x0800518b
 8004fb0:	20000b4c 	.word	0x20000b4c

08004fb4 <stdio_exit_handler>:
 8004fb4:	4a02      	ldr	r2, [pc, #8]	; (8004fc0 <stdio_exit_handler+0xc>)
 8004fb6:	4903      	ldr	r1, [pc, #12]	; (8004fc4 <stdio_exit_handler+0x10>)
 8004fb8:	4803      	ldr	r0, [pc, #12]	; (8004fc8 <stdio_exit_handler+0x14>)
 8004fba:	f000 b869 	b.w	8005090 <_fwalk_sglue>
 8004fbe:	bf00      	nop
 8004fc0:	20000104 	.word	0x20000104
 8004fc4:	08006c41 	.word	0x08006c41
 8004fc8:	20000110 	.word	0x20000110

08004fcc <cleanup_stdio>:
 8004fcc:	6841      	ldr	r1, [r0, #4]
 8004fce:	4b0c      	ldr	r3, [pc, #48]	; (8005000 <cleanup_stdio+0x34>)
 8004fd0:	4299      	cmp	r1, r3
 8004fd2:	b510      	push	{r4, lr}
 8004fd4:	4604      	mov	r4, r0
 8004fd6:	d001      	beq.n	8004fdc <cleanup_stdio+0x10>
 8004fd8:	f001 fe32 	bl	8006c40 <_fflush_r>
 8004fdc:	68a1      	ldr	r1, [r4, #8]
 8004fde:	4b09      	ldr	r3, [pc, #36]	; (8005004 <cleanup_stdio+0x38>)
 8004fe0:	4299      	cmp	r1, r3
 8004fe2:	d002      	beq.n	8004fea <cleanup_stdio+0x1e>
 8004fe4:	4620      	mov	r0, r4
 8004fe6:	f001 fe2b 	bl	8006c40 <_fflush_r>
 8004fea:	68e1      	ldr	r1, [r4, #12]
 8004fec:	4b06      	ldr	r3, [pc, #24]	; (8005008 <cleanup_stdio+0x3c>)
 8004fee:	4299      	cmp	r1, r3
 8004ff0:	d004      	beq.n	8004ffc <cleanup_stdio+0x30>
 8004ff2:	4620      	mov	r0, r4
 8004ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ff8:	f001 be22 	b.w	8006c40 <_fflush_r>
 8004ffc:	bd10      	pop	{r4, pc}
 8004ffe:	bf00      	nop
 8005000:	20000b4c 	.word	0x20000b4c
 8005004:	20000bb4 	.word	0x20000bb4
 8005008:	20000c1c 	.word	0x20000c1c

0800500c <global_stdio_init.part.0>:
 800500c:	b510      	push	{r4, lr}
 800500e:	4b0b      	ldr	r3, [pc, #44]	; (800503c <global_stdio_init.part.0+0x30>)
 8005010:	4c0b      	ldr	r4, [pc, #44]	; (8005040 <global_stdio_init.part.0+0x34>)
 8005012:	4a0c      	ldr	r2, [pc, #48]	; (8005044 <global_stdio_init.part.0+0x38>)
 8005014:	601a      	str	r2, [r3, #0]
 8005016:	4620      	mov	r0, r4
 8005018:	2200      	movs	r2, #0
 800501a:	2104      	movs	r1, #4
 800501c:	f7ff ff94 	bl	8004f48 <std>
 8005020:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005024:	2201      	movs	r2, #1
 8005026:	2109      	movs	r1, #9
 8005028:	f7ff ff8e 	bl	8004f48 <std>
 800502c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005030:	2202      	movs	r2, #2
 8005032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005036:	2112      	movs	r1, #18
 8005038:	f7ff bf86 	b.w	8004f48 <std>
 800503c:	20000c84 	.word	0x20000c84
 8005040:	20000b4c 	.word	0x20000b4c
 8005044:	08004fb5 	.word	0x08004fb5

08005048 <__sfp_lock_acquire>:
 8005048:	4801      	ldr	r0, [pc, #4]	; (8005050 <__sfp_lock_acquire+0x8>)
 800504a:	f000 b920 	b.w	800528e <__retarget_lock_acquire_recursive>
 800504e:	bf00      	nop
 8005050:	20000c8d 	.word	0x20000c8d

08005054 <__sfp_lock_release>:
 8005054:	4801      	ldr	r0, [pc, #4]	; (800505c <__sfp_lock_release+0x8>)
 8005056:	f000 b91b 	b.w	8005290 <__retarget_lock_release_recursive>
 800505a:	bf00      	nop
 800505c:	20000c8d 	.word	0x20000c8d

08005060 <__sinit>:
 8005060:	b510      	push	{r4, lr}
 8005062:	4604      	mov	r4, r0
 8005064:	f7ff fff0 	bl	8005048 <__sfp_lock_acquire>
 8005068:	6a23      	ldr	r3, [r4, #32]
 800506a:	b11b      	cbz	r3, 8005074 <__sinit+0x14>
 800506c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005070:	f7ff bff0 	b.w	8005054 <__sfp_lock_release>
 8005074:	4b04      	ldr	r3, [pc, #16]	; (8005088 <__sinit+0x28>)
 8005076:	6223      	str	r3, [r4, #32]
 8005078:	4b04      	ldr	r3, [pc, #16]	; (800508c <__sinit+0x2c>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d1f5      	bne.n	800506c <__sinit+0xc>
 8005080:	f7ff ffc4 	bl	800500c <global_stdio_init.part.0>
 8005084:	e7f2      	b.n	800506c <__sinit+0xc>
 8005086:	bf00      	nop
 8005088:	08004fcd 	.word	0x08004fcd
 800508c:	20000c84 	.word	0x20000c84

08005090 <_fwalk_sglue>:
 8005090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005094:	4607      	mov	r7, r0
 8005096:	4688      	mov	r8, r1
 8005098:	4614      	mov	r4, r2
 800509a:	2600      	movs	r6, #0
 800509c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80050a0:	f1b9 0901 	subs.w	r9, r9, #1
 80050a4:	d505      	bpl.n	80050b2 <_fwalk_sglue+0x22>
 80050a6:	6824      	ldr	r4, [r4, #0]
 80050a8:	2c00      	cmp	r4, #0
 80050aa:	d1f7      	bne.n	800509c <_fwalk_sglue+0xc>
 80050ac:	4630      	mov	r0, r6
 80050ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050b2:	89ab      	ldrh	r3, [r5, #12]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d907      	bls.n	80050c8 <_fwalk_sglue+0x38>
 80050b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80050bc:	3301      	adds	r3, #1
 80050be:	d003      	beq.n	80050c8 <_fwalk_sglue+0x38>
 80050c0:	4629      	mov	r1, r5
 80050c2:	4638      	mov	r0, r7
 80050c4:	47c0      	blx	r8
 80050c6:	4306      	orrs	r6, r0
 80050c8:	3568      	adds	r5, #104	; 0x68
 80050ca:	e7e9      	b.n	80050a0 <_fwalk_sglue+0x10>

080050cc <siprintf>:
 80050cc:	b40e      	push	{r1, r2, r3}
 80050ce:	b500      	push	{lr}
 80050d0:	b09c      	sub	sp, #112	; 0x70
 80050d2:	ab1d      	add	r3, sp, #116	; 0x74
 80050d4:	9002      	str	r0, [sp, #8]
 80050d6:	9006      	str	r0, [sp, #24]
 80050d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80050dc:	4809      	ldr	r0, [pc, #36]	; (8005104 <siprintf+0x38>)
 80050de:	9107      	str	r1, [sp, #28]
 80050e0:	9104      	str	r1, [sp, #16]
 80050e2:	4909      	ldr	r1, [pc, #36]	; (8005108 <siprintf+0x3c>)
 80050e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80050e8:	9105      	str	r1, [sp, #20]
 80050ea:	6800      	ldr	r0, [r0, #0]
 80050ec:	9301      	str	r3, [sp, #4]
 80050ee:	a902      	add	r1, sp, #8
 80050f0:	f001 fc22 	bl	8006938 <_svfiprintf_r>
 80050f4:	9b02      	ldr	r3, [sp, #8]
 80050f6:	2200      	movs	r2, #0
 80050f8:	701a      	strb	r2, [r3, #0]
 80050fa:	b01c      	add	sp, #112	; 0x70
 80050fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005100:	b003      	add	sp, #12
 8005102:	4770      	bx	lr
 8005104:	2000015c 	.word	0x2000015c
 8005108:	ffff0208 	.word	0xffff0208

0800510c <__sread>:
 800510c:	b510      	push	{r4, lr}
 800510e:	460c      	mov	r4, r1
 8005110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005114:	f000 f86c 	bl	80051f0 <_read_r>
 8005118:	2800      	cmp	r0, #0
 800511a:	bfab      	itete	ge
 800511c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800511e:	89a3      	ldrhlt	r3, [r4, #12]
 8005120:	181b      	addge	r3, r3, r0
 8005122:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005126:	bfac      	ite	ge
 8005128:	6563      	strge	r3, [r4, #84]	; 0x54
 800512a:	81a3      	strhlt	r3, [r4, #12]
 800512c:	bd10      	pop	{r4, pc}

0800512e <__swrite>:
 800512e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005132:	461f      	mov	r7, r3
 8005134:	898b      	ldrh	r3, [r1, #12]
 8005136:	05db      	lsls	r3, r3, #23
 8005138:	4605      	mov	r5, r0
 800513a:	460c      	mov	r4, r1
 800513c:	4616      	mov	r6, r2
 800513e:	d505      	bpl.n	800514c <__swrite+0x1e>
 8005140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005144:	2302      	movs	r3, #2
 8005146:	2200      	movs	r2, #0
 8005148:	f000 f840 	bl	80051cc <_lseek_r>
 800514c:	89a3      	ldrh	r3, [r4, #12]
 800514e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005152:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005156:	81a3      	strh	r3, [r4, #12]
 8005158:	4632      	mov	r2, r6
 800515a:	463b      	mov	r3, r7
 800515c:	4628      	mov	r0, r5
 800515e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005162:	f000 b857 	b.w	8005214 <_write_r>

08005166 <__sseek>:
 8005166:	b510      	push	{r4, lr}
 8005168:	460c      	mov	r4, r1
 800516a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800516e:	f000 f82d 	bl	80051cc <_lseek_r>
 8005172:	1c43      	adds	r3, r0, #1
 8005174:	89a3      	ldrh	r3, [r4, #12]
 8005176:	bf15      	itete	ne
 8005178:	6560      	strne	r0, [r4, #84]	; 0x54
 800517a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800517e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005182:	81a3      	strheq	r3, [r4, #12]
 8005184:	bf18      	it	ne
 8005186:	81a3      	strhne	r3, [r4, #12]
 8005188:	bd10      	pop	{r4, pc}

0800518a <__sclose>:
 800518a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800518e:	f000 b80d 	b.w	80051ac <_close_r>

08005192 <memset>:
 8005192:	4402      	add	r2, r0
 8005194:	4603      	mov	r3, r0
 8005196:	4293      	cmp	r3, r2
 8005198:	d100      	bne.n	800519c <memset+0xa>
 800519a:	4770      	bx	lr
 800519c:	f803 1b01 	strb.w	r1, [r3], #1
 80051a0:	e7f9      	b.n	8005196 <memset+0x4>
	...

080051a4 <_localeconv_r>:
 80051a4:	4800      	ldr	r0, [pc, #0]	; (80051a8 <_localeconv_r+0x4>)
 80051a6:	4770      	bx	lr
 80051a8:	20000250 	.word	0x20000250

080051ac <_close_r>:
 80051ac:	b538      	push	{r3, r4, r5, lr}
 80051ae:	4d06      	ldr	r5, [pc, #24]	; (80051c8 <_close_r+0x1c>)
 80051b0:	2300      	movs	r3, #0
 80051b2:	4604      	mov	r4, r0
 80051b4:	4608      	mov	r0, r1
 80051b6:	602b      	str	r3, [r5, #0]
 80051b8:	f7fb ffe8 	bl	800118c <_close>
 80051bc:	1c43      	adds	r3, r0, #1
 80051be:	d102      	bne.n	80051c6 <_close_r+0x1a>
 80051c0:	682b      	ldr	r3, [r5, #0]
 80051c2:	b103      	cbz	r3, 80051c6 <_close_r+0x1a>
 80051c4:	6023      	str	r3, [r4, #0]
 80051c6:	bd38      	pop	{r3, r4, r5, pc}
 80051c8:	20000c88 	.word	0x20000c88

080051cc <_lseek_r>:
 80051cc:	b538      	push	{r3, r4, r5, lr}
 80051ce:	4d07      	ldr	r5, [pc, #28]	; (80051ec <_lseek_r+0x20>)
 80051d0:	4604      	mov	r4, r0
 80051d2:	4608      	mov	r0, r1
 80051d4:	4611      	mov	r1, r2
 80051d6:	2200      	movs	r2, #0
 80051d8:	602a      	str	r2, [r5, #0]
 80051da:	461a      	mov	r2, r3
 80051dc:	f7fb ffe2 	bl	80011a4 <_lseek>
 80051e0:	1c43      	adds	r3, r0, #1
 80051e2:	d102      	bne.n	80051ea <_lseek_r+0x1e>
 80051e4:	682b      	ldr	r3, [r5, #0]
 80051e6:	b103      	cbz	r3, 80051ea <_lseek_r+0x1e>
 80051e8:	6023      	str	r3, [r4, #0]
 80051ea:	bd38      	pop	{r3, r4, r5, pc}
 80051ec:	20000c88 	.word	0x20000c88

080051f0 <_read_r>:
 80051f0:	b538      	push	{r3, r4, r5, lr}
 80051f2:	4d07      	ldr	r5, [pc, #28]	; (8005210 <_read_r+0x20>)
 80051f4:	4604      	mov	r4, r0
 80051f6:	4608      	mov	r0, r1
 80051f8:	4611      	mov	r1, r2
 80051fa:	2200      	movs	r2, #0
 80051fc:	602a      	str	r2, [r5, #0]
 80051fe:	461a      	mov	r2, r3
 8005200:	f7fb ffa8 	bl	8001154 <_read>
 8005204:	1c43      	adds	r3, r0, #1
 8005206:	d102      	bne.n	800520e <_read_r+0x1e>
 8005208:	682b      	ldr	r3, [r5, #0]
 800520a:	b103      	cbz	r3, 800520e <_read_r+0x1e>
 800520c:	6023      	str	r3, [r4, #0]
 800520e:	bd38      	pop	{r3, r4, r5, pc}
 8005210:	20000c88 	.word	0x20000c88

08005214 <_write_r>:
 8005214:	b538      	push	{r3, r4, r5, lr}
 8005216:	4d07      	ldr	r5, [pc, #28]	; (8005234 <_write_r+0x20>)
 8005218:	4604      	mov	r4, r0
 800521a:	4608      	mov	r0, r1
 800521c:	4611      	mov	r1, r2
 800521e:	2200      	movs	r2, #0
 8005220:	602a      	str	r2, [r5, #0]
 8005222:	461a      	mov	r2, r3
 8005224:	f7fb ffa4 	bl	8001170 <_write>
 8005228:	1c43      	adds	r3, r0, #1
 800522a:	d102      	bne.n	8005232 <_write_r+0x1e>
 800522c:	682b      	ldr	r3, [r5, #0]
 800522e:	b103      	cbz	r3, 8005232 <_write_r+0x1e>
 8005230:	6023      	str	r3, [r4, #0]
 8005232:	bd38      	pop	{r3, r4, r5, pc}
 8005234:	20000c88 	.word	0x20000c88

08005238 <__errno>:
 8005238:	4b01      	ldr	r3, [pc, #4]	; (8005240 <__errno+0x8>)
 800523a:	6818      	ldr	r0, [r3, #0]
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	2000015c 	.word	0x2000015c

08005244 <__libc_init_array>:
 8005244:	b570      	push	{r4, r5, r6, lr}
 8005246:	4d0d      	ldr	r5, [pc, #52]	; (800527c <__libc_init_array+0x38>)
 8005248:	4c0d      	ldr	r4, [pc, #52]	; (8005280 <__libc_init_array+0x3c>)
 800524a:	1b64      	subs	r4, r4, r5
 800524c:	10a4      	asrs	r4, r4, #2
 800524e:	2600      	movs	r6, #0
 8005250:	42a6      	cmp	r6, r4
 8005252:	d109      	bne.n	8005268 <__libc_init_array+0x24>
 8005254:	4d0b      	ldr	r5, [pc, #44]	; (8005284 <__libc_init_array+0x40>)
 8005256:	4c0c      	ldr	r4, [pc, #48]	; (8005288 <__libc_init_array+0x44>)
 8005258:	f002 f896 	bl	8007388 <_init>
 800525c:	1b64      	subs	r4, r4, r5
 800525e:	10a4      	asrs	r4, r4, #2
 8005260:	2600      	movs	r6, #0
 8005262:	42a6      	cmp	r6, r4
 8005264:	d105      	bne.n	8005272 <__libc_init_array+0x2e>
 8005266:	bd70      	pop	{r4, r5, r6, pc}
 8005268:	f855 3b04 	ldr.w	r3, [r5], #4
 800526c:	4798      	blx	r3
 800526e:	3601      	adds	r6, #1
 8005270:	e7ee      	b.n	8005250 <__libc_init_array+0xc>
 8005272:	f855 3b04 	ldr.w	r3, [r5], #4
 8005276:	4798      	blx	r3
 8005278:	3601      	adds	r6, #1
 800527a:	e7f2      	b.n	8005262 <__libc_init_array+0x1e>
 800527c:	080077a4 	.word	0x080077a4
 8005280:	080077a4 	.word	0x080077a4
 8005284:	080077a4 	.word	0x080077a4
 8005288:	080077a8 	.word	0x080077a8

0800528c <__retarget_lock_init_recursive>:
 800528c:	4770      	bx	lr

0800528e <__retarget_lock_acquire_recursive>:
 800528e:	4770      	bx	lr

08005290 <__retarget_lock_release_recursive>:
 8005290:	4770      	bx	lr

08005292 <quorem>:
 8005292:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005296:	6903      	ldr	r3, [r0, #16]
 8005298:	690c      	ldr	r4, [r1, #16]
 800529a:	42a3      	cmp	r3, r4
 800529c:	4607      	mov	r7, r0
 800529e:	db7e      	blt.n	800539e <quorem+0x10c>
 80052a0:	3c01      	subs	r4, #1
 80052a2:	f101 0814 	add.w	r8, r1, #20
 80052a6:	f100 0514 	add.w	r5, r0, #20
 80052aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80052ae:	9301      	str	r3, [sp, #4]
 80052b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80052b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80052b8:	3301      	adds	r3, #1
 80052ba:	429a      	cmp	r2, r3
 80052bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80052c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80052c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80052c8:	d331      	bcc.n	800532e <quorem+0x9c>
 80052ca:	f04f 0e00 	mov.w	lr, #0
 80052ce:	4640      	mov	r0, r8
 80052d0:	46ac      	mov	ip, r5
 80052d2:	46f2      	mov	sl, lr
 80052d4:	f850 2b04 	ldr.w	r2, [r0], #4
 80052d8:	b293      	uxth	r3, r2
 80052da:	fb06 e303 	mla	r3, r6, r3, lr
 80052de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80052e2:	0c1a      	lsrs	r2, r3, #16
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	ebaa 0303 	sub.w	r3, sl, r3
 80052ea:	f8dc a000 	ldr.w	sl, [ip]
 80052ee:	fa13 f38a 	uxtah	r3, r3, sl
 80052f2:	fb06 220e 	mla	r2, r6, lr, r2
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	9b00      	ldr	r3, [sp, #0]
 80052fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80052fe:	b292      	uxth	r2, r2
 8005300:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005304:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005308:	f8bd 3000 	ldrh.w	r3, [sp]
 800530c:	4581      	cmp	r9, r0
 800530e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005312:	f84c 3b04 	str.w	r3, [ip], #4
 8005316:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800531a:	d2db      	bcs.n	80052d4 <quorem+0x42>
 800531c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005320:	b92b      	cbnz	r3, 800532e <quorem+0x9c>
 8005322:	9b01      	ldr	r3, [sp, #4]
 8005324:	3b04      	subs	r3, #4
 8005326:	429d      	cmp	r5, r3
 8005328:	461a      	mov	r2, r3
 800532a:	d32c      	bcc.n	8005386 <quorem+0xf4>
 800532c:	613c      	str	r4, [r7, #16]
 800532e:	4638      	mov	r0, r7
 8005330:	f001 f9a8 	bl	8006684 <__mcmp>
 8005334:	2800      	cmp	r0, #0
 8005336:	db22      	blt.n	800537e <quorem+0xec>
 8005338:	3601      	adds	r6, #1
 800533a:	4629      	mov	r1, r5
 800533c:	2000      	movs	r0, #0
 800533e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005342:	f8d1 c000 	ldr.w	ip, [r1]
 8005346:	b293      	uxth	r3, r2
 8005348:	1ac3      	subs	r3, r0, r3
 800534a:	0c12      	lsrs	r2, r2, #16
 800534c:	fa13 f38c 	uxtah	r3, r3, ip
 8005350:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005354:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005358:	b29b      	uxth	r3, r3
 800535a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800535e:	45c1      	cmp	r9, r8
 8005360:	f841 3b04 	str.w	r3, [r1], #4
 8005364:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005368:	d2e9      	bcs.n	800533e <quorem+0xac>
 800536a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800536e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005372:	b922      	cbnz	r2, 800537e <quorem+0xec>
 8005374:	3b04      	subs	r3, #4
 8005376:	429d      	cmp	r5, r3
 8005378:	461a      	mov	r2, r3
 800537a:	d30a      	bcc.n	8005392 <quorem+0x100>
 800537c:	613c      	str	r4, [r7, #16]
 800537e:	4630      	mov	r0, r6
 8005380:	b003      	add	sp, #12
 8005382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005386:	6812      	ldr	r2, [r2, #0]
 8005388:	3b04      	subs	r3, #4
 800538a:	2a00      	cmp	r2, #0
 800538c:	d1ce      	bne.n	800532c <quorem+0x9a>
 800538e:	3c01      	subs	r4, #1
 8005390:	e7c9      	b.n	8005326 <quorem+0x94>
 8005392:	6812      	ldr	r2, [r2, #0]
 8005394:	3b04      	subs	r3, #4
 8005396:	2a00      	cmp	r2, #0
 8005398:	d1f0      	bne.n	800537c <quorem+0xea>
 800539a:	3c01      	subs	r4, #1
 800539c:	e7eb      	b.n	8005376 <quorem+0xe4>
 800539e:	2000      	movs	r0, #0
 80053a0:	e7ee      	b.n	8005380 <quorem+0xee>
 80053a2:	0000      	movs	r0, r0
 80053a4:	0000      	movs	r0, r0
	...

080053a8 <_dtoa_r>:
 80053a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ac:	ed2d 8b04 	vpush	{d8-d9}
 80053b0:	69c5      	ldr	r5, [r0, #28]
 80053b2:	b093      	sub	sp, #76	; 0x4c
 80053b4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80053b8:	ec57 6b10 	vmov	r6, r7, d0
 80053bc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80053c0:	9107      	str	r1, [sp, #28]
 80053c2:	4604      	mov	r4, r0
 80053c4:	920a      	str	r2, [sp, #40]	; 0x28
 80053c6:	930d      	str	r3, [sp, #52]	; 0x34
 80053c8:	b975      	cbnz	r5, 80053e8 <_dtoa_r+0x40>
 80053ca:	2010      	movs	r0, #16
 80053cc:	f000 fe2a 	bl	8006024 <malloc>
 80053d0:	4602      	mov	r2, r0
 80053d2:	61e0      	str	r0, [r4, #28]
 80053d4:	b920      	cbnz	r0, 80053e0 <_dtoa_r+0x38>
 80053d6:	4bae      	ldr	r3, [pc, #696]	; (8005690 <_dtoa_r+0x2e8>)
 80053d8:	21ef      	movs	r1, #239	; 0xef
 80053da:	48ae      	ldr	r0, [pc, #696]	; (8005694 <_dtoa_r+0x2ec>)
 80053dc:	f001 fc90 	bl	8006d00 <__assert_func>
 80053e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80053e4:	6005      	str	r5, [r0, #0]
 80053e6:	60c5      	str	r5, [r0, #12]
 80053e8:	69e3      	ldr	r3, [r4, #28]
 80053ea:	6819      	ldr	r1, [r3, #0]
 80053ec:	b151      	cbz	r1, 8005404 <_dtoa_r+0x5c>
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	604a      	str	r2, [r1, #4]
 80053f2:	2301      	movs	r3, #1
 80053f4:	4093      	lsls	r3, r2
 80053f6:	608b      	str	r3, [r1, #8]
 80053f8:	4620      	mov	r0, r4
 80053fa:	f000 ff07 	bl	800620c <_Bfree>
 80053fe:	69e3      	ldr	r3, [r4, #28]
 8005400:	2200      	movs	r2, #0
 8005402:	601a      	str	r2, [r3, #0]
 8005404:	1e3b      	subs	r3, r7, #0
 8005406:	bfbb      	ittet	lt
 8005408:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800540c:	9303      	strlt	r3, [sp, #12]
 800540e:	2300      	movge	r3, #0
 8005410:	2201      	movlt	r2, #1
 8005412:	bfac      	ite	ge
 8005414:	f8c8 3000 	strge.w	r3, [r8]
 8005418:	f8c8 2000 	strlt.w	r2, [r8]
 800541c:	4b9e      	ldr	r3, [pc, #632]	; (8005698 <_dtoa_r+0x2f0>)
 800541e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005422:	ea33 0308 	bics.w	r3, r3, r8
 8005426:	d11b      	bne.n	8005460 <_dtoa_r+0xb8>
 8005428:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800542a:	f242 730f 	movw	r3, #9999	; 0x270f
 800542e:	6013      	str	r3, [r2, #0]
 8005430:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005434:	4333      	orrs	r3, r6
 8005436:	f000 8593 	beq.w	8005f60 <_dtoa_r+0xbb8>
 800543a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800543c:	b963      	cbnz	r3, 8005458 <_dtoa_r+0xb0>
 800543e:	4b97      	ldr	r3, [pc, #604]	; (800569c <_dtoa_r+0x2f4>)
 8005440:	e027      	b.n	8005492 <_dtoa_r+0xea>
 8005442:	4b97      	ldr	r3, [pc, #604]	; (80056a0 <_dtoa_r+0x2f8>)
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	3308      	adds	r3, #8
 8005448:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800544a:	6013      	str	r3, [r2, #0]
 800544c:	9800      	ldr	r0, [sp, #0]
 800544e:	b013      	add	sp, #76	; 0x4c
 8005450:	ecbd 8b04 	vpop	{d8-d9}
 8005454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005458:	4b90      	ldr	r3, [pc, #576]	; (800569c <_dtoa_r+0x2f4>)
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	3303      	adds	r3, #3
 800545e:	e7f3      	b.n	8005448 <_dtoa_r+0xa0>
 8005460:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005464:	2200      	movs	r2, #0
 8005466:	ec51 0b17 	vmov	r0, r1, d7
 800546a:	eeb0 8a47 	vmov.f32	s16, s14
 800546e:	eef0 8a67 	vmov.f32	s17, s15
 8005472:	2300      	movs	r3, #0
 8005474:	f7fb fb28 	bl	8000ac8 <__aeabi_dcmpeq>
 8005478:	4681      	mov	r9, r0
 800547a:	b160      	cbz	r0, 8005496 <_dtoa_r+0xee>
 800547c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800547e:	2301      	movs	r3, #1
 8005480:	6013      	str	r3, [r2, #0]
 8005482:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 8568 	beq.w	8005f5a <_dtoa_r+0xbb2>
 800548a:	4b86      	ldr	r3, [pc, #536]	; (80056a4 <_dtoa_r+0x2fc>)
 800548c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800548e:	6013      	str	r3, [r2, #0]
 8005490:	3b01      	subs	r3, #1
 8005492:	9300      	str	r3, [sp, #0]
 8005494:	e7da      	b.n	800544c <_dtoa_r+0xa4>
 8005496:	aa10      	add	r2, sp, #64	; 0x40
 8005498:	a911      	add	r1, sp, #68	; 0x44
 800549a:	4620      	mov	r0, r4
 800549c:	eeb0 0a48 	vmov.f32	s0, s16
 80054a0:	eef0 0a68 	vmov.f32	s1, s17
 80054a4:	f001 f994 	bl	80067d0 <__d2b>
 80054a8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80054ac:	4682      	mov	sl, r0
 80054ae:	2d00      	cmp	r5, #0
 80054b0:	d07f      	beq.n	80055b2 <_dtoa_r+0x20a>
 80054b2:	ee18 3a90 	vmov	r3, s17
 80054b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054ba:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80054be:	ec51 0b18 	vmov	r0, r1, d8
 80054c2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80054c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80054ca:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80054ce:	4619      	mov	r1, r3
 80054d0:	2200      	movs	r2, #0
 80054d2:	4b75      	ldr	r3, [pc, #468]	; (80056a8 <_dtoa_r+0x300>)
 80054d4:	f7fa fed8 	bl	8000288 <__aeabi_dsub>
 80054d8:	a367      	add	r3, pc, #412	; (adr r3, 8005678 <_dtoa_r+0x2d0>)
 80054da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054de:	f7fb f88b 	bl	80005f8 <__aeabi_dmul>
 80054e2:	a367      	add	r3, pc, #412	; (adr r3, 8005680 <_dtoa_r+0x2d8>)
 80054e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e8:	f7fa fed0 	bl	800028c <__adddf3>
 80054ec:	4606      	mov	r6, r0
 80054ee:	4628      	mov	r0, r5
 80054f0:	460f      	mov	r7, r1
 80054f2:	f7fb f817 	bl	8000524 <__aeabi_i2d>
 80054f6:	a364      	add	r3, pc, #400	; (adr r3, 8005688 <_dtoa_r+0x2e0>)
 80054f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fc:	f7fb f87c 	bl	80005f8 <__aeabi_dmul>
 8005500:	4602      	mov	r2, r0
 8005502:	460b      	mov	r3, r1
 8005504:	4630      	mov	r0, r6
 8005506:	4639      	mov	r1, r7
 8005508:	f7fa fec0 	bl	800028c <__adddf3>
 800550c:	4606      	mov	r6, r0
 800550e:	460f      	mov	r7, r1
 8005510:	f7fb fb22 	bl	8000b58 <__aeabi_d2iz>
 8005514:	2200      	movs	r2, #0
 8005516:	4683      	mov	fp, r0
 8005518:	2300      	movs	r3, #0
 800551a:	4630      	mov	r0, r6
 800551c:	4639      	mov	r1, r7
 800551e:	f7fb fadd 	bl	8000adc <__aeabi_dcmplt>
 8005522:	b148      	cbz	r0, 8005538 <_dtoa_r+0x190>
 8005524:	4658      	mov	r0, fp
 8005526:	f7fa fffd 	bl	8000524 <__aeabi_i2d>
 800552a:	4632      	mov	r2, r6
 800552c:	463b      	mov	r3, r7
 800552e:	f7fb facb 	bl	8000ac8 <__aeabi_dcmpeq>
 8005532:	b908      	cbnz	r0, 8005538 <_dtoa_r+0x190>
 8005534:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005538:	f1bb 0f16 	cmp.w	fp, #22
 800553c:	d857      	bhi.n	80055ee <_dtoa_r+0x246>
 800553e:	4b5b      	ldr	r3, [pc, #364]	; (80056ac <_dtoa_r+0x304>)
 8005540:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005548:	ec51 0b18 	vmov	r0, r1, d8
 800554c:	f7fb fac6 	bl	8000adc <__aeabi_dcmplt>
 8005550:	2800      	cmp	r0, #0
 8005552:	d04e      	beq.n	80055f2 <_dtoa_r+0x24a>
 8005554:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005558:	2300      	movs	r3, #0
 800555a:	930c      	str	r3, [sp, #48]	; 0x30
 800555c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800555e:	1b5b      	subs	r3, r3, r5
 8005560:	1e5a      	subs	r2, r3, #1
 8005562:	bf45      	ittet	mi
 8005564:	f1c3 0301 	rsbmi	r3, r3, #1
 8005568:	9305      	strmi	r3, [sp, #20]
 800556a:	2300      	movpl	r3, #0
 800556c:	2300      	movmi	r3, #0
 800556e:	9206      	str	r2, [sp, #24]
 8005570:	bf54      	ite	pl
 8005572:	9305      	strpl	r3, [sp, #20]
 8005574:	9306      	strmi	r3, [sp, #24]
 8005576:	f1bb 0f00 	cmp.w	fp, #0
 800557a:	db3c      	blt.n	80055f6 <_dtoa_r+0x24e>
 800557c:	9b06      	ldr	r3, [sp, #24]
 800557e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005582:	445b      	add	r3, fp
 8005584:	9306      	str	r3, [sp, #24]
 8005586:	2300      	movs	r3, #0
 8005588:	9308      	str	r3, [sp, #32]
 800558a:	9b07      	ldr	r3, [sp, #28]
 800558c:	2b09      	cmp	r3, #9
 800558e:	d868      	bhi.n	8005662 <_dtoa_r+0x2ba>
 8005590:	2b05      	cmp	r3, #5
 8005592:	bfc4      	itt	gt
 8005594:	3b04      	subgt	r3, #4
 8005596:	9307      	strgt	r3, [sp, #28]
 8005598:	9b07      	ldr	r3, [sp, #28]
 800559a:	f1a3 0302 	sub.w	r3, r3, #2
 800559e:	bfcc      	ite	gt
 80055a0:	2500      	movgt	r5, #0
 80055a2:	2501      	movle	r5, #1
 80055a4:	2b03      	cmp	r3, #3
 80055a6:	f200 8085 	bhi.w	80056b4 <_dtoa_r+0x30c>
 80055aa:	e8df f003 	tbb	[pc, r3]
 80055ae:	3b2e      	.short	0x3b2e
 80055b0:	5839      	.short	0x5839
 80055b2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80055b6:	441d      	add	r5, r3
 80055b8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80055bc:	2b20      	cmp	r3, #32
 80055be:	bfc1      	itttt	gt
 80055c0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80055c4:	fa08 f803 	lslgt.w	r8, r8, r3
 80055c8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80055cc:	fa26 f303 	lsrgt.w	r3, r6, r3
 80055d0:	bfd6      	itet	le
 80055d2:	f1c3 0320 	rsble	r3, r3, #32
 80055d6:	ea48 0003 	orrgt.w	r0, r8, r3
 80055da:	fa06 f003 	lslle.w	r0, r6, r3
 80055de:	f7fa ff91 	bl	8000504 <__aeabi_ui2d>
 80055e2:	2201      	movs	r2, #1
 80055e4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80055e8:	3d01      	subs	r5, #1
 80055ea:	920e      	str	r2, [sp, #56]	; 0x38
 80055ec:	e76f      	b.n	80054ce <_dtoa_r+0x126>
 80055ee:	2301      	movs	r3, #1
 80055f0:	e7b3      	b.n	800555a <_dtoa_r+0x1b2>
 80055f2:	900c      	str	r0, [sp, #48]	; 0x30
 80055f4:	e7b2      	b.n	800555c <_dtoa_r+0x1b4>
 80055f6:	9b05      	ldr	r3, [sp, #20]
 80055f8:	eba3 030b 	sub.w	r3, r3, fp
 80055fc:	9305      	str	r3, [sp, #20]
 80055fe:	f1cb 0300 	rsb	r3, fp, #0
 8005602:	9308      	str	r3, [sp, #32]
 8005604:	2300      	movs	r3, #0
 8005606:	930b      	str	r3, [sp, #44]	; 0x2c
 8005608:	e7bf      	b.n	800558a <_dtoa_r+0x1e2>
 800560a:	2300      	movs	r3, #0
 800560c:	9309      	str	r3, [sp, #36]	; 0x24
 800560e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005610:	2b00      	cmp	r3, #0
 8005612:	dc52      	bgt.n	80056ba <_dtoa_r+0x312>
 8005614:	2301      	movs	r3, #1
 8005616:	9301      	str	r3, [sp, #4]
 8005618:	9304      	str	r3, [sp, #16]
 800561a:	461a      	mov	r2, r3
 800561c:	920a      	str	r2, [sp, #40]	; 0x28
 800561e:	e00b      	b.n	8005638 <_dtoa_r+0x290>
 8005620:	2301      	movs	r3, #1
 8005622:	e7f3      	b.n	800560c <_dtoa_r+0x264>
 8005624:	2300      	movs	r3, #0
 8005626:	9309      	str	r3, [sp, #36]	; 0x24
 8005628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800562a:	445b      	add	r3, fp
 800562c:	9301      	str	r3, [sp, #4]
 800562e:	3301      	adds	r3, #1
 8005630:	2b01      	cmp	r3, #1
 8005632:	9304      	str	r3, [sp, #16]
 8005634:	bfb8      	it	lt
 8005636:	2301      	movlt	r3, #1
 8005638:	69e0      	ldr	r0, [r4, #28]
 800563a:	2100      	movs	r1, #0
 800563c:	2204      	movs	r2, #4
 800563e:	f102 0614 	add.w	r6, r2, #20
 8005642:	429e      	cmp	r6, r3
 8005644:	d93d      	bls.n	80056c2 <_dtoa_r+0x31a>
 8005646:	6041      	str	r1, [r0, #4]
 8005648:	4620      	mov	r0, r4
 800564a:	f000 fd9f 	bl	800618c <_Balloc>
 800564e:	9000      	str	r0, [sp, #0]
 8005650:	2800      	cmp	r0, #0
 8005652:	d139      	bne.n	80056c8 <_dtoa_r+0x320>
 8005654:	4b16      	ldr	r3, [pc, #88]	; (80056b0 <_dtoa_r+0x308>)
 8005656:	4602      	mov	r2, r0
 8005658:	f240 11af 	movw	r1, #431	; 0x1af
 800565c:	e6bd      	b.n	80053da <_dtoa_r+0x32>
 800565e:	2301      	movs	r3, #1
 8005660:	e7e1      	b.n	8005626 <_dtoa_r+0x27e>
 8005662:	2501      	movs	r5, #1
 8005664:	2300      	movs	r3, #0
 8005666:	9307      	str	r3, [sp, #28]
 8005668:	9509      	str	r5, [sp, #36]	; 0x24
 800566a:	f04f 33ff 	mov.w	r3, #4294967295
 800566e:	9301      	str	r3, [sp, #4]
 8005670:	9304      	str	r3, [sp, #16]
 8005672:	2200      	movs	r2, #0
 8005674:	2312      	movs	r3, #18
 8005676:	e7d1      	b.n	800561c <_dtoa_r+0x274>
 8005678:	636f4361 	.word	0x636f4361
 800567c:	3fd287a7 	.word	0x3fd287a7
 8005680:	8b60c8b3 	.word	0x8b60c8b3
 8005684:	3fc68a28 	.word	0x3fc68a28
 8005688:	509f79fb 	.word	0x509f79fb
 800568c:	3fd34413 	.word	0x3fd34413
 8005690:	08007474 	.word	0x08007474
 8005694:	0800748b 	.word	0x0800748b
 8005698:	7ff00000 	.word	0x7ff00000
 800569c:	08007470 	.word	0x08007470
 80056a0:	08007467 	.word	0x08007467
 80056a4:	08007444 	.word	0x08007444
 80056a8:	3ff80000 	.word	0x3ff80000
 80056ac:	08007578 	.word	0x08007578
 80056b0:	080074e3 	.word	0x080074e3
 80056b4:	2301      	movs	r3, #1
 80056b6:	9309      	str	r3, [sp, #36]	; 0x24
 80056b8:	e7d7      	b.n	800566a <_dtoa_r+0x2c2>
 80056ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056bc:	9301      	str	r3, [sp, #4]
 80056be:	9304      	str	r3, [sp, #16]
 80056c0:	e7ba      	b.n	8005638 <_dtoa_r+0x290>
 80056c2:	3101      	adds	r1, #1
 80056c4:	0052      	lsls	r2, r2, #1
 80056c6:	e7ba      	b.n	800563e <_dtoa_r+0x296>
 80056c8:	69e3      	ldr	r3, [r4, #28]
 80056ca:	9a00      	ldr	r2, [sp, #0]
 80056cc:	601a      	str	r2, [r3, #0]
 80056ce:	9b04      	ldr	r3, [sp, #16]
 80056d0:	2b0e      	cmp	r3, #14
 80056d2:	f200 80a8 	bhi.w	8005826 <_dtoa_r+0x47e>
 80056d6:	2d00      	cmp	r5, #0
 80056d8:	f000 80a5 	beq.w	8005826 <_dtoa_r+0x47e>
 80056dc:	f1bb 0f00 	cmp.w	fp, #0
 80056e0:	dd38      	ble.n	8005754 <_dtoa_r+0x3ac>
 80056e2:	4bc0      	ldr	r3, [pc, #768]	; (80059e4 <_dtoa_r+0x63c>)
 80056e4:	f00b 020f 	and.w	r2, fp, #15
 80056e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056ec:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80056f0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80056f4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80056f8:	d019      	beq.n	800572e <_dtoa_r+0x386>
 80056fa:	4bbb      	ldr	r3, [pc, #748]	; (80059e8 <_dtoa_r+0x640>)
 80056fc:	ec51 0b18 	vmov	r0, r1, d8
 8005700:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005704:	f7fb f8a2 	bl	800084c <__aeabi_ddiv>
 8005708:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800570c:	f008 080f 	and.w	r8, r8, #15
 8005710:	2503      	movs	r5, #3
 8005712:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80059e8 <_dtoa_r+0x640>
 8005716:	f1b8 0f00 	cmp.w	r8, #0
 800571a:	d10a      	bne.n	8005732 <_dtoa_r+0x38a>
 800571c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005720:	4632      	mov	r2, r6
 8005722:	463b      	mov	r3, r7
 8005724:	f7fb f892 	bl	800084c <__aeabi_ddiv>
 8005728:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800572c:	e02b      	b.n	8005786 <_dtoa_r+0x3de>
 800572e:	2502      	movs	r5, #2
 8005730:	e7ef      	b.n	8005712 <_dtoa_r+0x36a>
 8005732:	f018 0f01 	tst.w	r8, #1
 8005736:	d008      	beq.n	800574a <_dtoa_r+0x3a2>
 8005738:	4630      	mov	r0, r6
 800573a:	4639      	mov	r1, r7
 800573c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005740:	f7fa ff5a 	bl	80005f8 <__aeabi_dmul>
 8005744:	3501      	adds	r5, #1
 8005746:	4606      	mov	r6, r0
 8005748:	460f      	mov	r7, r1
 800574a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800574e:	f109 0908 	add.w	r9, r9, #8
 8005752:	e7e0      	b.n	8005716 <_dtoa_r+0x36e>
 8005754:	f000 809f 	beq.w	8005896 <_dtoa_r+0x4ee>
 8005758:	f1cb 0600 	rsb	r6, fp, #0
 800575c:	4ba1      	ldr	r3, [pc, #644]	; (80059e4 <_dtoa_r+0x63c>)
 800575e:	4fa2      	ldr	r7, [pc, #648]	; (80059e8 <_dtoa_r+0x640>)
 8005760:	f006 020f 	and.w	r2, r6, #15
 8005764:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576c:	ec51 0b18 	vmov	r0, r1, d8
 8005770:	f7fa ff42 	bl	80005f8 <__aeabi_dmul>
 8005774:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005778:	1136      	asrs	r6, r6, #4
 800577a:	2300      	movs	r3, #0
 800577c:	2502      	movs	r5, #2
 800577e:	2e00      	cmp	r6, #0
 8005780:	d17e      	bne.n	8005880 <_dtoa_r+0x4d8>
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1d0      	bne.n	8005728 <_dtoa_r+0x380>
 8005786:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005788:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800578c:	2b00      	cmp	r3, #0
 800578e:	f000 8084 	beq.w	800589a <_dtoa_r+0x4f2>
 8005792:	4b96      	ldr	r3, [pc, #600]	; (80059ec <_dtoa_r+0x644>)
 8005794:	2200      	movs	r2, #0
 8005796:	4640      	mov	r0, r8
 8005798:	4649      	mov	r1, r9
 800579a:	f7fb f99f 	bl	8000adc <__aeabi_dcmplt>
 800579e:	2800      	cmp	r0, #0
 80057a0:	d07b      	beq.n	800589a <_dtoa_r+0x4f2>
 80057a2:	9b04      	ldr	r3, [sp, #16]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d078      	beq.n	800589a <_dtoa_r+0x4f2>
 80057a8:	9b01      	ldr	r3, [sp, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	dd39      	ble.n	8005822 <_dtoa_r+0x47a>
 80057ae:	4b90      	ldr	r3, [pc, #576]	; (80059f0 <_dtoa_r+0x648>)
 80057b0:	2200      	movs	r2, #0
 80057b2:	4640      	mov	r0, r8
 80057b4:	4649      	mov	r1, r9
 80057b6:	f7fa ff1f 	bl	80005f8 <__aeabi_dmul>
 80057ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057be:	9e01      	ldr	r6, [sp, #4]
 80057c0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80057c4:	3501      	adds	r5, #1
 80057c6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80057ca:	4628      	mov	r0, r5
 80057cc:	f7fa feaa 	bl	8000524 <__aeabi_i2d>
 80057d0:	4642      	mov	r2, r8
 80057d2:	464b      	mov	r3, r9
 80057d4:	f7fa ff10 	bl	80005f8 <__aeabi_dmul>
 80057d8:	4b86      	ldr	r3, [pc, #536]	; (80059f4 <_dtoa_r+0x64c>)
 80057da:	2200      	movs	r2, #0
 80057dc:	f7fa fd56 	bl	800028c <__adddf3>
 80057e0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80057e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057e8:	9303      	str	r3, [sp, #12]
 80057ea:	2e00      	cmp	r6, #0
 80057ec:	d158      	bne.n	80058a0 <_dtoa_r+0x4f8>
 80057ee:	4b82      	ldr	r3, [pc, #520]	; (80059f8 <_dtoa_r+0x650>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	4640      	mov	r0, r8
 80057f4:	4649      	mov	r1, r9
 80057f6:	f7fa fd47 	bl	8000288 <__aeabi_dsub>
 80057fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057fe:	4680      	mov	r8, r0
 8005800:	4689      	mov	r9, r1
 8005802:	f7fb f989 	bl	8000b18 <__aeabi_dcmpgt>
 8005806:	2800      	cmp	r0, #0
 8005808:	f040 8296 	bne.w	8005d38 <_dtoa_r+0x990>
 800580c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005810:	4640      	mov	r0, r8
 8005812:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005816:	4649      	mov	r1, r9
 8005818:	f7fb f960 	bl	8000adc <__aeabi_dcmplt>
 800581c:	2800      	cmp	r0, #0
 800581e:	f040 8289 	bne.w	8005d34 <_dtoa_r+0x98c>
 8005822:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005826:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005828:	2b00      	cmp	r3, #0
 800582a:	f2c0 814e 	blt.w	8005aca <_dtoa_r+0x722>
 800582e:	f1bb 0f0e 	cmp.w	fp, #14
 8005832:	f300 814a 	bgt.w	8005aca <_dtoa_r+0x722>
 8005836:	4b6b      	ldr	r3, [pc, #428]	; (80059e4 <_dtoa_r+0x63c>)
 8005838:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800583c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005842:	2b00      	cmp	r3, #0
 8005844:	f280 80dc 	bge.w	8005a00 <_dtoa_r+0x658>
 8005848:	9b04      	ldr	r3, [sp, #16]
 800584a:	2b00      	cmp	r3, #0
 800584c:	f300 80d8 	bgt.w	8005a00 <_dtoa_r+0x658>
 8005850:	f040 826f 	bne.w	8005d32 <_dtoa_r+0x98a>
 8005854:	4b68      	ldr	r3, [pc, #416]	; (80059f8 <_dtoa_r+0x650>)
 8005856:	2200      	movs	r2, #0
 8005858:	4640      	mov	r0, r8
 800585a:	4649      	mov	r1, r9
 800585c:	f7fa fecc 	bl	80005f8 <__aeabi_dmul>
 8005860:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005864:	f7fb f94e 	bl	8000b04 <__aeabi_dcmpge>
 8005868:	9e04      	ldr	r6, [sp, #16]
 800586a:	4637      	mov	r7, r6
 800586c:	2800      	cmp	r0, #0
 800586e:	f040 8245 	bne.w	8005cfc <_dtoa_r+0x954>
 8005872:	9d00      	ldr	r5, [sp, #0]
 8005874:	2331      	movs	r3, #49	; 0x31
 8005876:	f805 3b01 	strb.w	r3, [r5], #1
 800587a:	f10b 0b01 	add.w	fp, fp, #1
 800587e:	e241      	b.n	8005d04 <_dtoa_r+0x95c>
 8005880:	07f2      	lsls	r2, r6, #31
 8005882:	d505      	bpl.n	8005890 <_dtoa_r+0x4e8>
 8005884:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005888:	f7fa feb6 	bl	80005f8 <__aeabi_dmul>
 800588c:	3501      	adds	r5, #1
 800588e:	2301      	movs	r3, #1
 8005890:	1076      	asrs	r6, r6, #1
 8005892:	3708      	adds	r7, #8
 8005894:	e773      	b.n	800577e <_dtoa_r+0x3d6>
 8005896:	2502      	movs	r5, #2
 8005898:	e775      	b.n	8005786 <_dtoa_r+0x3de>
 800589a:	9e04      	ldr	r6, [sp, #16]
 800589c:	465f      	mov	r7, fp
 800589e:	e792      	b.n	80057c6 <_dtoa_r+0x41e>
 80058a0:	9900      	ldr	r1, [sp, #0]
 80058a2:	4b50      	ldr	r3, [pc, #320]	; (80059e4 <_dtoa_r+0x63c>)
 80058a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80058a8:	4431      	add	r1, r6
 80058aa:	9102      	str	r1, [sp, #8]
 80058ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058ae:	eeb0 9a47 	vmov.f32	s18, s14
 80058b2:	eef0 9a67 	vmov.f32	s19, s15
 80058b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80058ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80058be:	2900      	cmp	r1, #0
 80058c0:	d044      	beq.n	800594c <_dtoa_r+0x5a4>
 80058c2:	494e      	ldr	r1, [pc, #312]	; (80059fc <_dtoa_r+0x654>)
 80058c4:	2000      	movs	r0, #0
 80058c6:	f7fa ffc1 	bl	800084c <__aeabi_ddiv>
 80058ca:	ec53 2b19 	vmov	r2, r3, d9
 80058ce:	f7fa fcdb 	bl	8000288 <__aeabi_dsub>
 80058d2:	9d00      	ldr	r5, [sp, #0]
 80058d4:	ec41 0b19 	vmov	d9, r0, r1
 80058d8:	4649      	mov	r1, r9
 80058da:	4640      	mov	r0, r8
 80058dc:	f7fb f93c 	bl	8000b58 <__aeabi_d2iz>
 80058e0:	4606      	mov	r6, r0
 80058e2:	f7fa fe1f 	bl	8000524 <__aeabi_i2d>
 80058e6:	4602      	mov	r2, r0
 80058e8:	460b      	mov	r3, r1
 80058ea:	4640      	mov	r0, r8
 80058ec:	4649      	mov	r1, r9
 80058ee:	f7fa fccb 	bl	8000288 <__aeabi_dsub>
 80058f2:	3630      	adds	r6, #48	; 0x30
 80058f4:	f805 6b01 	strb.w	r6, [r5], #1
 80058f8:	ec53 2b19 	vmov	r2, r3, d9
 80058fc:	4680      	mov	r8, r0
 80058fe:	4689      	mov	r9, r1
 8005900:	f7fb f8ec 	bl	8000adc <__aeabi_dcmplt>
 8005904:	2800      	cmp	r0, #0
 8005906:	d164      	bne.n	80059d2 <_dtoa_r+0x62a>
 8005908:	4642      	mov	r2, r8
 800590a:	464b      	mov	r3, r9
 800590c:	4937      	ldr	r1, [pc, #220]	; (80059ec <_dtoa_r+0x644>)
 800590e:	2000      	movs	r0, #0
 8005910:	f7fa fcba 	bl	8000288 <__aeabi_dsub>
 8005914:	ec53 2b19 	vmov	r2, r3, d9
 8005918:	f7fb f8e0 	bl	8000adc <__aeabi_dcmplt>
 800591c:	2800      	cmp	r0, #0
 800591e:	f040 80b6 	bne.w	8005a8e <_dtoa_r+0x6e6>
 8005922:	9b02      	ldr	r3, [sp, #8]
 8005924:	429d      	cmp	r5, r3
 8005926:	f43f af7c 	beq.w	8005822 <_dtoa_r+0x47a>
 800592a:	4b31      	ldr	r3, [pc, #196]	; (80059f0 <_dtoa_r+0x648>)
 800592c:	ec51 0b19 	vmov	r0, r1, d9
 8005930:	2200      	movs	r2, #0
 8005932:	f7fa fe61 	bl	80005f8 <__aeabi_dmul>
 8005936:	4b2e      	ldr	r3, [pc, #184]	; (80059f0 <_dtoa_r+0x648>)
 8005938:	ec41 0b19 	vmov	d9, r0, r1
 800593c:	2200      	movs	r2, #0
 800593e:	4640      	mov	r0, r8
 8005940:	4649      	mov	r1, r9
 8005942:	f7fa fe59 	bl	80005f8 <__aeabi_dmul>
 8005946:	4680      	mov	r8, r0
 8005948:	4689      	mov	r9, r1
 800594a:	e7c5      	b.n	80058d8 <_dtoa_r+0x530>
 800594c:	ec51 0b17 	vmov	r0, r1, d7
 8005950:	f7fa fe52 	bl	80005f8 <__aeabi_dmul>
 8005954:	9b02      	ldr	r3, [sp, #8]
 8005956:	9d00      	ldr	r5, [sp, #0]
 8005958:	930f      	str	r3, [sp, #60]	; 0x3c
 800595a:	ec41 0b19 	vmov	d9, r0, r1
 800595e:	4649      	mov	r1, r9
 8005960:	4640      	mov	r0, r8
 8005962:	f7fb f8f9 	bl	8000b58 <__aeabi_d2iz>
 8005966:	4606      	mov	r6, r0
 8005968:	f7fa fddc 	bl	8000524 <__aeabi_i2d>
 800596c:	3630      	adds	r6, #48	; 0x30
 800596e:	4602      	mov	r2, r0
 8005970:	460b      	mov	r3, r1
 8005972:	4640      	mov	r0, r8
 8005974:	4649      	mov	r1, r9
 8005976:	f7fa fc87 	bl	8000288 <__aeabi_dsub>
 800597a:	f805 6b01 	strb.w	r6, [r5], #1
 800597e:	9b02      	ldr	r3, [sp, #8]
 8005980:	429d      	cmp	r5, r3
 8005982:	4680      	mov	r8, r0
 8005984:	4689      	mov	r9, r1
 8005986:	f04f 0200 	mov.w	r2, #0
 800598a:	d124      	bne.n	80059d6 <_dtoa_r+0x62e>
 800598c:	4b1b      	ldr	r3, [pc, #108]	; (80059fc <_dtoa_r+0x654>)
 800598e:	ec51 0b19 	vmov	r0, r1, d9
 8005992:	f7fa fc7b 	bl	800028c <__adddf3>
 8005996:	4602      	mov	r2, r0
 8005998:	460b      	mov	r3, r1
 800599a:	4640      	mov	r0, r8
 800599c:	4649      	mov	r1, r9
 800599e:	f7fb f8bb 	bl	8000b18 <__aeabi_dcmpgt>
 80059a2:	2800      	cmp	r0, #0
 80059a4:	d173      	bne.n	8005a8e <_dtoa_r+0x6e6>
 80059a6:	ec53 2b19 	vmov	r2, r3, d9
 80059aa:	4914      	ldr	r1, [pc, #80]	; (80059fc <_dtoa_r+0x654>)
 80059ac:	2000      	movs	r0, #0
 80059ae:	f7fa fc6b 	bl	8000288 <__aeabi_dsub>
 80059b2:	4602      	mov	r2, r0
 80059b4:	460b      	mov	r3, r1
 80059b6:	4640      	mov	r0, r8
 80059b8:	4649      	mov	r1, r9
 80059ba:	f7fb f88f 	bl	8000adc <__aeabi_dcmplt>
 80059be:	2800      	cmp	r0, #0
 80059c0:	f43f af2f 	beq.w	8005822 <_dtoa_r+0x47a>
 80059c4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80059c6:	1e6b      	subs	r3, r5, #1
 80059c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80059ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80059ce:	2b30      	cmp	r3, #48	; 0x30
 80059d0:	d0f8      	beq.n	80059c4 <_dtoa_r+0x61c>
 80059d2:	46bb      	mov	fp, r7
 80059d4:	e04a      	b.n	8005a6c <_dtoa_r+0x6c4>
 80059d6:	4b06      	ldr	r3, [pc, #24]	; (80059f0 <_dtoa_r+0x648>)
 80059d8:	f7fa fe0e 	bl	80005f8 <__aeabi_dmul>
 80059dc:	4680      	mov	r8, r0
 80059de:	4689      	mov	r9, r1
 80059e0:	e7bd      	b.n	800595e <_dtoa_r+0x5b6>
 80059e2:	bf00      	nop
 80059e4:	08007578 	.word	0x08007578
 80059e8:	08007550 	.word	0x08007550
 80059ec:	3ff00000 	.word	0x3ff00000
 80059f0:	40240000 	.word	0x40240000
 80059f4:	401c0000 	.word	0x401c0000
 80059f8:	40140000 	.word	0x40140000
 80059fc:	3fe00000 	.word	0x3fe00000
 8005a00:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005a04:	9d00      	ldr	r5, [sp, #0]
 8005a06:	4642      	mov	r2, r8
 8005a08:	464b      	mov	r3, r9
 8005a0a:	4630      	mov	r0, r6
 8005a0c:	4639      	mov	r1, r7
 8005a0e:	f7fa ff1d 	bl	800084c <__aeabi_ddiv>
 8005a12:	f7fb f8a1 	bl	8000b58 <__aeabi_d2iz>
 8005a16:	9001      	str	r0, [sp, #4]
 8005a18:	f7fa fd84 	bl	8000524 <__aeabi_i2d>
 8005a1c:	4642      	mov	r2, r8
 8005a1e:	464b      	mov	r3, r9
 8005a20:	f7fa fdea 	bl	80005f8 <__aeabi_dmul>
 8005a24:	4602      	mov	r2, r0
 8005a26:	460b      	mov	r3, r1
 8005a28:	4630      	mov	r0, r6
 8005a2a:	4639      	mov	r1, r7
 8005a2c:	f7fa fc2c 	bl	8000288 <__aeabi_dsub>
 8005a30:	9e01      	ldr	r6, [sp, #4]
 8005a32:	9f04      	ldr	r7, [sp, #16]
 8005a34:	3630      	adds	r6, #48	; 0x30
 8005a36:	f805 6b01 	strb.w	r6, [r5], #1
 8005a3a:	9e00      	ldr	r6, [sp, #0]
 8005a3c:	1bae      	subs	r6, r5, r6
 8005a3e:	42b7      	cmp	r7, r6
 8005a40:	4602      	mov	r2, r0
 8005a42:	460b      	mov	r3, r1
 8005a44:	d134      	bne.n	8005ab0 <_dtoa_r+0x708>
 8005a46:	f7fa fc21 	bl	800028c <__adddf3>
 8005a4a:	4642      	mov	r2, r8
 8005a4c:	464b      	mov	r3, r9
 8005a4e:	4606      	mov	r6, r0
 8005a50:	460f      	mov	r7, r1
 8005a52:	f7fb f861 	bl	8000b18 <__aeabi_dcmpgt>
 8005a56:	b9c8      	cbnz	r0, 8005a8c <_dtoa_r+0x6e4>
 8005a58:	4642      	mov	r2, r8
 8005a5a:	464b      	mov	r3, r9
 8005a5c:	4630      	mov	r0, r6
 8005a5e:	4639      	mov	r1, r7
 8005a60:	f7fb f832 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a64:	b110      	cbz	r0, 8005a6c <_dtoa_r+0x6c4>
 8005a66:	9b01      	ldr	r3, [sp, #4]
 8005a68:	07db      	lsls	r3, r3, #31
 8005a6a:	d40f      	bmi.n	8005a8c <_dtoa_r+0x6e4>
 8005a6c:	4651      	mov	r1, sl
 8005a6e:	4620      	mov	r0, r4
 8005a70:	f000 fbcc 	bl	800620c <_Bfree>
 8005a74:	2300      	movs	r3, #0
 8005a76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005a78:	702b      	strb	r3, [r5, #0]
 8005a7a:	f10b 0301 	add.w	r3, fp, #1
 8005a7e:	6013      	str	r3, [r2, #0]
 8005a80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f43f ace2 	beq.w	800544c <_dtoa_r+0xa4>
 8005a88:	601d      	str	r5, [r3, #0]
 8005a8a:	e4df      	b.n	800544c <_dtoa_r+0xa4>
 8005a8c:	465f      	mov	r7, fp
 8005a8e:	462b      	mov	r3, r5
 8005a90:	461d      	mov	r5, r3
 8005a92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a96:	2a39      	cmp	r2, #57	; 0x39
 8005a98:	d106      	bne.n	8005aa8 <_dtoa_r+0x700>
 8005a9a:	9a00      	ldr	r2, [sp, #0]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d1f7      	bne.n	8005a90 <_dtoa_r+0x6e8>
 8005aa0:	9900      	ldr	r1, [sp, #0]
 8005aa2:	2230      	movs	r2, #48	; 0x30
 8005aa4:	3701      	adds	r7, #1
 8005aa6:	700a      	strb	r2, [r1, #0]
 8005aa8:	781a      	ldrb	r2, [r3, #0]
 8005aaa:	3201      	adds	r2, #1
 8005aac:	701a      	strb	r2, [r3, #0]
 8005aae:	e790      	b.n	80059d2 <_dtoa_r+0x62a>
 8005ab0:	4ba3      	ldr	r3, [pc, #652]	; (8005d40 <_dtoa_r+0x998>)
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f7fa fda0 	bl	80005f8 <__aeabi_dmul>
 8005ab8:	2200      	movs	r2, #0
 8005aba:	2300      	movs	r3, #0
 8005abc:	4606      	mov	r6, r0
 8005abe:	460f      	mov	r7, r1
 8005ac0:	f7fb f802 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ac4:	2800      	cmp	r0, #0
 8005ac6:	d09e      	beq.n	8005a06 <_dtoa_r+0x65e>
 8005ac8:	e7d0      	b.n	8005a6c <_dtoa_r+0x6c4>
 8005aca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005acc:	2a00      	cmp	r2, #0
 8005ace:	f000 80ca 	beq.w	8005c66 <_dtoa_r+0x8be>
 8005ad2:	9a07      	ldr	r2, [sp, #28]
 8005ad4:	2a01      	cmp	r2, #1
 8005ad6:	f300 80ad 	bgt.w	8005c34 <_dtoa_r+0x88c>
 8005ada:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005adc:	2a00      	cmp	r2, #0
 8005ade:	f000 80a5 	beq.w	8005c2c <_dtoa_r+0x884>
 8005ae2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005ae6:	9e08      	ldr	r6, [sp, #32]
 8005ae8:	9d05      	ldr	r5, [sp, #20]
 8005aea:	9a05      	ldr	r2, [sp, #20]
 8005aec:	441a      	add	r2, r3
 8005aee:	9205      	str	r2, [sp, #20]
 8005af0:	9a06      	ldr	r2, [sp, #24]
 8005af2:	2101      	movs	r1, #1
 8005af4:	441a      	add	r2, r3
 8005af6:	4620      	mov	r0, r4
 8005af8:	9206      	str	r2, [sp, #24]
 8005afa:	f000 fc3d 	bl	8006378 <__i2b>
 8005afe:	4607      	mov	r7, r0
 8005b00:	b165      	cbz	r5, 8005b1c <_dtoa_r+0x774>
 8005b02:	9b06      	ldr	r3, [sp, #24]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	dd09      	ble.n	8005b1c <_dtoa_r+0x774>
 8005b08:	42ab      	cmp	r3, r5
 8005b0a:	9a05      	ldr	r2, [sp, #20]
 8005b0c:	bfa8      	it	ge
 8005b0e:	462b      	movge	r3, r5
 8005b10:	1ad2      	subs	r2, r2, r3
 8005b12:	9205      	str	r2, [sp, #20]
 8005b14:	9a06      	ldr	r2, [sp, #24]
 8005b16:	1aed      	subs	r5, r5, r3
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	9306      	str	r3, [sp, #24]
 8005b1c:	9b08      	ldr	r3, [sp, #32]
 8005b1e:	b1f3      	cbz	r3, 8005b5e <_dtoa_r+0x7b6>
 8005b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f000 80a3 	beq.w	8005c6e <_dtoa_r+0x8c6>
 8005b28:	2e00      	cmp	r6, #0
 8005b2a:	dd10      	ble.n	8005b4e <_dtoa_r+0x7a6>
 8005b2c:	4639      	mov	r1, r7
 8005b2e:	4632      	mov	r2, r6
 8005b30:	4620      	mov	r0, r4
 8005b32:	f000 fce1 	bl	80064f8 <__pow5mult>
 8005b36:	4652      	mov	r2, sl
 8005b38:	4601      	mov	r1, r0
 8005b3a:	4607      	mov	r7, r0
 8005b3c:	4620      	mov	r0, r4
 8005b3e:	f000 fc31 	bl	80063a4 <__multiply>
 8005b42:	4651      	mov	r1, sl
 8005b44:	4680      	mov	r8, r0
 8005b46:	4620      	mov	r0, r4
 8005b48:	f000 fb60 	bl	800620c <_Bfree>
 8005b4c:	46c2      	mov	sl, r8
 8005b4e:	9b08      	ldr	r3, [sp, #32]
 8005b50:	1b9a      	subs	r2, r3, r6
 8005b52:	d004      	beq.n	8005b5e <_dtoa_r+0x7b6>
 8005b54:	4651      	mov	r1, sl
 8005b56:	4620      	mov	r0, r4
 8005b58:	f000 fcce 	bl	80064f8 <__pow5mult>
 8005b5c:	4682      	mov	sl, r0
 8005b5e:	2101      	movs	r1, #1
 8005b60:	4620      	mov	r0, r4
 8005b62:	f000 fc09 	bl	8006378 <__i2b>
 8005b66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	4606      	mov	r6, r0
 8005b6c:	f340 8081 	ble.w	8005c72 <_dtoa_r+0x8ca>
 8005b70:	461a      	mov	r2, r3
 8005b72:	4601      	mov	r1, r0
 8005b74:	4620      	mov	r0, r4
 8005b76:	f000 fcbf 	bl	80064f8 <__pow5mult>
 8005b7a:	9b07      	ldr	r3, [sp, #28]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	4606      	mov	r6, r0
 8005b80:	dd7a      	ble.n	8005c78 <_dtoa_r+0x8d0>
 8005b82:	f04f 0800 	mov.w	r8, #0
 8005b86:	6933      	ldr	r3, [r6, #16]
 8005b88:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005b8c:	6918      	ldr	r0, [r3, #16]
 8005b8e:	f000 fba5 	bl	80062dc <__hi0bits>
 8005b92:	f1c0 0020 	rsb	r0, r0, #32
 8005b96:	9b06      	ldr	r3, [sp, #24]
 8005b98:	4418      	add	r0, r3
 8005b9a:	f010 001f 	ands.w	r0, r0, #31
 8005b9e:	f000 8094 	beq.w	8005cca <_dtoa_r+0x922>
 8005ba2:	f1c0 0320 	rsb	r3, r0, #32
 8005ba6:	2b04      	cmp	r3, #4
 8005ba8:	f340 8085 	ble.w	8005cb6 <_dtoa_r+0x90e>
 8005bac:	9b05      	ldr	r3, [sp, #20]
 8005bae:	f1c0 001c 	rsb	r0, r0, #28
 8005bb2:	4403      	add	r3, r0
 8005bb4:	9305      	str	r3, [sp, #20]
 8005bb6:	9b06      	ldr	r3, [sp, #24]
 8005bb8:	4403      	add	r3, r0
 8005bba:	4405      	add	r5, r0
 8005bbc:	9306      	str	r3, [sp, #24]
 8005bbe:	9b05      	ldr	r3, [sp, #20]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	dd05      	ble.n	8005bd0 <_dtoa_r+0x828>
 8005bc4:	4651      	mov	r1, sl
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	4620      	mov	r0, r4
 8005bca:	f000 fcef 	bl	80065ac <__lshift>
 8005bce:	4682      	mov	sl, r0
 8005bd0:	9b06      	ldr	r3, [sp, #24]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	dd05      	ble.n	8005be2 <_dtoa_r+0x83a>
 8005bd6:	4631      	mov	r1, r6
 8005bd8:	461a      	mov	r2, r3
 8005bda:	4620      	mov	r0, r4
 8005bdc:	f000 fce6 	bl	80065ac <__lshift>
 8005be0:	4606      	mov	r6, r0
 8005be2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d072      	beq.n	8005cce <_dtoa_r+0x926>
 8005be8:	4631      	mov	r1, r6
 8005bea:	4650      	mov	r0, sl
 8005bec:	f000 fd4a 	bl	8006684 <__mcmp>
 8005bf0:	2800      	cmp	r0, #0
 8005bf2:	da6c      	bge.n	8005cce <_dtoa_r+0x926>
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	4651      	mov	r1, sl
 8005bf8:	220a      	movs	r2, #10
 8005bfa:	4620      	mov	r0, r4
 8005bfc:	f000 fb28 	bl	8006250 <__multadd>
 8005c00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c02:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005c06:	4682      	mov	sl, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f000 81b0 	beq.w	8005f6e <_dtoa_r+0xbc6>
 8005c0e:	2300      	movs	r3, #0
 8005c10:	4639      	mov	r1, r7
 8005c12:	220a      	movs	r2, #10
 8005c14:	4620      	mov	r0, r4
 8005c16:	f000 fb1b 	bl	8006250 <__multadd>
 8005c1a:	9b01      	ldr	r3, [sp, #4]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	4607      	mov	r7, r0
 8005c20:	f300 8096 	bgt.w	8005d50 <_dtoa_r+0x9a8>
 8005c24:	9b07      	ldr	r3, [sp, #28]
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	dc59      	bgt.n	8005cde <_dtoa_r+0x936>
 8005c2a:	e091      	b.n	8005d50 <_dtoa_r+0x9a8>
 8005c2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005c2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005c32:	e758      	b.n	8005ae6 <_dtoa_r+0x73e>
 8005c34:	9b04      	ldr	r3, [sp, #16]
 8005c36:	1e5e      	subs	r6, r3, #1
 8005c38:	9b08      	ldr	r3, [sp, #32]
 8005c3a:	42b3      	cmp	r3, r6
 8005c3c:	bfbf      	itttt	lt
 8005c3e:	9b08      	ldrlt	r3, [sp, #32]
 8005c40:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8005c42:	9608      	strlt	r6, [sp, #32]
 8005c44:	1af3      	sublt	r3, r6, r3
 8005c46:	bfb4      	ite	lt
 8005c48:	18d2      	addlt	r2, r2, r3
 8005c4a:	1b9e      	subge	r6, r3, r6
 8005c4c:	9b04      	ldr	r3, [sp, #16]
 8005c4e:	bfbc      	itt	lt
 8005c50:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8005c52:	2600      	movlt	r6, #0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	bfb7      	itett	lt
 8005c58:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8005c5c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005c60:	1a9d      	sublt	r5, r3, r2
 8005c62:	2300      	movlt	r3, #0
 8005c64:	e741      	b.n	8005aea <_dtoa_r+0x742>
 8005c66:	9e08      	ldr	r6, [sp, #32]
 8005c68:	9d05      	ldr	r5, [sp, #20]
 8005c6a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005c6c:	e748      	b.n	8005b00 <_dtoa_r+0x758>
 8005c6e:	9a08      	ldr	r2, [sp, #32]
 8005c70:	e770      	b.n	8005b54 <_dtoa_r+0x7ac>
 8005c72:	9b07      	ldr	r3, [sp, #28]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	dc19      	bgt.n	8005cac <_dtoa_r+0x904>
 8005c78:	9b02      	ldr	r3, [sp, #8]
 8005c7a:	b9bb      	cbnz	r3, 8005cac <_dtoa_r+0x904>
 8005c7c:	9b03      	ldr	r3, [sp, #12]
 8005c7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c82:	b99b      	cbnz	r3, 8005cac <_dtoa_r+0x904>
 8005c84:	9b03      	ldr	r3, [sp, #12]
 8005c86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c8a:	0d1b      	lsrs	r3, r3, #20
 8005c8c:	051b      	lsls	r3, r3, #20
 8005c8e:	b183      	cbz	r3, 8005cb2 <_dtoa_r+0x90a>
 8005c90:	9b05      	ldr	r3, [sp, #20]
 8005c92:	3301      	adds	r3, #1
 8005c94:	9305      	str	r3, [sp, #20]
 8005c96:	9b06      	ldr	r3, [sp, #24]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	9306      	str	r3, [sp, #24]
 8005c9c:	f04f 0801 	mov.w	r8, #1
 8005ca0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	f47f af6f 	bne.w	8005b86 <_dtoa_r+0x7de>
 8005ca8:	2001      	movs	r0, #1
 8005caa:	e774      	b.n	8005b96 <_dtoa_r+0x7ee>
 8005cac:	f04f 0800 	mov.w	r8, #0
 8005cb0:	e7f6      	b.n	8005ca0 <_dtoa_r+0x8f8>
 8005cb2:	4698      	mov	r8, r3
 8005cb4:	e7f4      	b.n	8005ca0 <_dtoa_r+0x8f8>
 8005cb6:	d082      	beq.n	8005bbe <_dtoa_r+0x816>
 8005cb8:	9a05      	ldr	r2, [sp, #20]
 8005cba:	331c      	adds	r3, #28
 8005cbc:	441a      	add	r2, r3
 8005cbe:	9205      	str	r2, [sp, #20]
 8005cc0:	9a06      	ldr	r2, [sp, #24]
 8005cc2:	441a      	add	r2, r3
 8005cc4:	441d      	add	r5, r3
 8005cc6:	9206      	str	r2, [sp, #24]
 8005cc8:	e779      	b.n	8005bbe <_dtoa_r+0x816>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	e7f4      	b.n	8005cb8 <_dtoa_r+0x910>
 8005cce:	9b04      	ldr	r3, [sp, #16]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	dc37      	bgt.n	8005d44 <_dtoa_r+0x99c>
 8005cd4:	9b07      	ldr	r3, [sp, #28]
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	dd34      	ble.n	8005d44 <_dtoa_r+0x99c>
 8005cda:	9b04      	ldr	r3, [sp, #16]
 8005cdc:	9301      	str	r3, [sp, #4]
 8005cde:	9b01      	ldr	r3, [sp, #4]
 8005ce0:	b963      	cbnz	r3, 8005cfc <_dtoa_r+0x954>
 8005ce2:	4631      	mov	r1, r6
 8005ce4:	2205      	movs	r2, #5
 8005ce6:	4620      	mov	r0, r4
 8005ce8:	f000 fab2 	bl	8006250 <__multadd>
 8005cec:	4601      	mov	r1, r0
 8005cee:	4606      	mov	r6, r0
 8005cf0:	4650      	mov	r0, sl
 8005cf2:	f000 fcc7 	bl	8006684 <__mcmp>
 8005cf6:	2800      	cmp	r0, #0
 8005cf8:	f73f adbb 	bgt.w	8005872 <_dtoa_r+0x4ca>
 8005cfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cfe:	9d00      	ldr	r5, [sp, #0]
 8005d00:	ea6f 0b03 	mvn.w	fp, r3
 8005d04:	f04f 0800 	mov.w	r8, #0
 8005d08:	4631      	mov	r1, r6
 8005d0a:	4620      	mov	r0, r4
 8005d0c:	f000 fa7e 	bl	800620c <_Bfree>
 8005d10:	2f00      	cmp	r7, #0
 8005d12:	f43f aeab 	beq.w	8005a6c <_dtoa_r+0x6c4>
 8005d16:	f1b8 0f00 	cmp.w	r8, #0
 8005d1a:	d005      	beq.n	8005d28 <_dtoa_r+0x980>
 8005d1c:	45b8      	cmp	r8, r7
 8005d1e:	d003      	beq.n	8005d28 <_dtoa_r+0x980>
 8005d20:	4641      	mov	r1, r8
 8005d22:	4620      	mov	r0, r4
 8005d24:	f000 fa72 	bl	800620c <_Bfree>
 8005d28:	4639      	mov	r1, r7
 8005d2a:	4620      	mov	r0, r4
 8005d2c:	f000 fa6e 	bl	800620c <_Bfree>
 8005d30:	e69c      	b.n	8005a6c <_dtoa_r+0x6c4>
 8005d32:	2600      	movs	r6, #0
 8005d34:	4637      	mov	r7, r6
 8005d36:	e7e1      	b.n	8005cfc <_dtoa_r+0x954>
 8005d38:	46bb      	mov	fp, r7
 8005d3a:	4637      	mov	r7, r6
 8005d3c:	e599      	b.n	8005872 <_dtoa_r+0x4ca>
 8005d3e:	bf00      	nop
 8005d40:	40240000 	.word	0x40240000
 8005d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	f000 80c8 	beq.w	8005edc <_dtoa_r+0xb34>
 8005d4c:	9b04      	ldr	r3, [sp, #16]
 8005d4e:	9301      	str	r3, [sp, #4]
 8005d50:	2d00      	cmp	r5, #0
 8005d52:	dd05      	ble.n	8005d60 <_dtoa_r+0x9b8>
 8005d54:	4639      	mov	r1, r7
 8005d56:	462a      	mov	r2, r5
 8005d58:	4620      	mov	r0, r4
 8005d5a:	f000 fc27 	bl	80065ac <__lshift>
 8005d5e:	4607      	mov	r7, r0
 8005d60:	f1b8 0f00 	cmp.w	r8, #0
 8005d64:	d05b      	beq.n	8005e1e <_dtoa_r+0xa76>
 8005d66:	6879      	ldr	r1, [r7, #4]
 8005d68:	4620      	mov	r0, r4
 8005d6a:	f000 fa0f 	bl	800618c <_Balloc>
 8005d6e:	4605      	mov	r5, r0
 8005d70:	b928      	cbnz	r0, 8005d7e <_dtoa_r+0x9d6>
 8005d72:	4b83      	ldr	r3, [pc, #524]	; (8005f80 <_dtoa_r+0xbd8>)
 8005d74:	4602      	mov	r2, r0
 8005d76:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005d7a:	f7ff bb2e 	b.w	80053da <_dtoa_r+0x32>
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	3202      	adds	r2, #2
 8005d82:	0092      	lsls	r2, r2, #2
 8005d84:	f107 010c 	add.w	r1, r7, #12
 8005d88:	300c      	adds	r0, #12
 8005d8a:	f000 ffab 	bl	8006ce4 <memcpy>
 8005d8e:	2201      	movs	r2, #1
 8005d90:	4629      	mov	r1, r5
 8005d92:	4620      	mov	r0, r4
 8005d94:	f000 fc0a 	bl	80065ac <__lshift>
 8005d98:	9b00      	ldr	r3, [sp, #0]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	9304      	str	r3, [sp, #16]
 8005d9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005da2:	4413      	add	r3, r2
 8005da4:	9308      	str	r3, [sp, #32]
 8005da6:	9b02      	ldr	r3, [sp, #8]
 8005da8:	f003 0301 	and.w	r3, r3, #1
 8005dac:	46b8      	mov	r8, r7
 8005dae:	9306      	str	r3, [sp, #24]
 8005db0:	4607      	mov	r7, r0
 8005db2:	9b04      	ldr	r3, [sp, #16]
 8005db4:	4631      	mov	r1, r6
 8005db6:	3b01      	subs	r3, #1
 8005db8:	4650      	mov	r0, sl
 8005dba:	9301      	str	r3, [sp, #4]
 8005dbc:	f7ff fa69 	bl	8005292 <quorem>
 8005dc0:	4641      	mov	r1, r8
 8005dc2:	9002      	str	r0, [sp, #8]
 8005dc4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005dc8:	4650      	mov	r0, sl
 8005dca:	f000 fc5b 	bl	8006684 <__mcmp>
 8005dce:	463a      	mov	r2, r7
 8005dd0:	9005      	str	r0, [sp, #20]
 8005dd2:	4631      	mov	r1, r6
 8005dd4:	4620      	mov	r0, r4
 8005dd6:	f000 fc71 	bl	80066bc <__mdiff>
 8005dda:	68c2      	ldr	r2, [r0, #12]
 8005ddc:	4605      	mov	r5, r0
 8005dde:	bb02      	cbnz	r2, 8005e22 <_dtoa_r+0xa7a>
 8005de0:	4601      	mov	r1, r0
 8005de2:	4650      	mov	r0, sl
 8005de4:	f000 fc4e 	bl	8006684 <__mcmp>
 8005de8:	4602      	mov	r2, r0
 8005dea:	4629      	mov	r1, r5
 8005dec:	4620      	mov	r0, r4
 8005dee:	9209      	str	r2, [sp, #36]	; 0x24
 8005df0:	f000 fa0c 	bl	800620c <_Bfree>
 8005df4:	9b07      	ldr	r3, [sp, #28]
 8005df6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005df8:	9d04      	ldr	r5, [sp, #16]
 8005dfa:	ea43 0102 	orr.w	r1, r3, r2
 8005dfe:	9b06      	ldr	r3, [sp, #24]
 8005e00:	4319      	orrs	r1, r3
 8005e02:	d110      	bne.n	8005e26 <_dtoa_r+0xa7e>
 8005e04:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005e08:	d029      	beq.n	8005e5e <_dtoa_r+0xab6>
 8005e0a:	9b05      	ldr	r3, [sp, #20]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	dd02      	ble.n	8005e16 <_dtoa_r+0xa6e>
 8005e10:	9b02      	ldr	r3, [sp, #8]
 8005e12:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005e16:	9b01      	ldr	r3, [sp, #4]
 8005e18:	f883 9000 	strb.w	r9, [r3]
 8005e1c:	e774      	b.n	8005d08 <_dtoa_r+0x960>
 8005e1e:	4638      	mov	r0, r7
 8005e20:	e7ba      	b.n	8005d98 <_dtoa_r+0x9f0>
 8005e22:	2201      	movs	r2, #1
 8005e24:	e7e1      	b.n	8005dea <_dtoa_r+0xa42>
 8005e26:	9b05      	ldr	r3, [sp, #20]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	db04      	blt.n	8005e36 <_dtoa_r+0xa8e>
 8005e2c:	9907      	ldr	r1, [sp, #28]
 8005e2e:	430b      	orrs	r3, r1
 8005e30:	9906      	ldr	r1, [sp, #24]
 8005e32:	430b      	orrs	r3, r1
 8005e34:	d120      	bne.n	8005e78 <_dtoa_r+0xad0>
 8005e36:	2a00      	cmp	r2, #0
 8005e38:	dded      	ble.n	8005e16 <_dtoa_r+0xa6e>
 8005e3a:	4651      	mov	r1, sl
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	4620      	mov	r0, r4
 8005e40:	f000 fbb4 	bl	80065ac <__lshift>
 8005e44:	4631      	mov	r1, r6
 8005e46:	4682      	mov	sl, r0
 8005e48:	f000 fc1c 	bl	8006684 <__mcmp>
 8005e4c:	2800      	cmp	r0, #0
 8005e4e:	dc03      	bgt.n	8005e58 <_dtoa_r+0xab0>
 8005e50:	d1e1      	bne.n	8005e16 <_dtoa_r+0xa6e>
 8005e52:	f019 0f01 	tst.w	r9, #1
 8005e56:	d0de      	beq.n	8005e16 <_dtoa_r+0xa6e>
 8005e58:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005e5c:	d1d8      	bne.n	8005e10 <_dtoa_r+0xa68>
 8005e5e:	9a01      	ldr	r2, [sp, #4]
 8005e60:	2339      	movs	r3, #57	; 0x39
 8005e62:	7013      	strb	r3, [r2, #0]
 8005e64:	462b      	mov	r3, r5
 8005e66:	461d      	mov	r5, r3
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005e6e:	2a39      	cmp	r2, #57	; 0x39
 8005e70:	d06c      	beq.n	8005f4c <_dtoa_r+0xba4>
 8005e72:	3201      	adds	r2, #1
 8005e74:	701a      	strb	r2, [r3, #0]
 8005e76:	e747      	b.n	8005d08 <_dtoa_r+0x960>
 8005e78:	2a00      	cmp	r2, #0
 8005e7a:	dd07      	ble.n	8005e8c <_dtoa_r+0xae4>
 8005e7c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005e80:	d0ed      	beq.n	8005e5e <_dtoa_r+0xab6>
 8005e82:	9a01      	ldr	r2, [sp, #4]
 8005e84:	f109 0301 	add.w	r3, r9, #1
 8005e88:	7013      	strb	r3, [r2, #0]
 8005e8a:	e73d      	b.n	8005d08 <_dtoa_r+0x960>
 8005e8c:	9b04      	ldr	r3, [sp, #16]
 8005e8e:	9a08      	ldr	r2, [sp, #32]
 8005e90:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d043      	beq.n	8005f20 <_dtoa_r+0xb78>
 8005e98:	4651      	mov	r1, sl
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	220a      	movs	r2, #10
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	f000 f9d6 	bl	8006250 <__multadd>
 8005ea4:	45b8      	cmp	r8, r7
 8005ea6:	4682      	mov	sl, r0
 8005ea8:	f04f 0300 	mov.w	r3, #0
 8005eac:	f04f 020a 	mov.w	r2, #10
 8005eb0:	4641      	mov	r1, r8
 8005eb2:	4620      	mov	r0, r4
 8005eb4:	d107      	bne.n	8005ec6 <_dtoa_r+0xb1e>
 8005eb6:	f000 f9cb 	bl	8006250 <__multadd>
 8005eba:	4680      	mov	r8, r0
 8005ebc:	4607      	mov	r7, r0
 8005ebe:	9b04      	ldr	r3, [sp, #16]
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	9304      	str	r3, [sp, #16]
 8005ec4:	e775      	b.n	8005db2 <_dtoa_r+0xa0a>
 8005ec6:	f000 f9c3 	bl	8006250 <__multadd>
 8005eca:	4639      	mov	r1, r7
 8005ecc:	4680      	mov	r8, r0
 8005ece:	2300      	movs	r3, #0
 8005ed0:	220a      	movs	r2, #10
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	f000 f9bc 	bl	8006250 <__multadd>
 8005ed8:	4607      	mov	r7, r0
 8005eda:	e7f0      	b.n	8005ebe <_dtoa_r+0xb16>
 8005edc:	9b04      	ldr	r3, [sp, #16]
 8005ede:	9301      	str	r3, [sp, #4]
 8005ee0:	9d00      	ldr	r5, [sp, #0]
 8005ee2:	4631      	mov	r1, r6
 8005ee4:	4650      	mov	r0, sl
 8005ee6:	f7ff f9d4 	bl	8005292 <quorem>
 8005eea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005eee:	9b00      	ldr	r3, [sp, #0]
 8005ef0:	f805 9b01 	strb.w	r9, [r5], #1
 8005ef4:	1aea      	subs	r2, r5, r3
 8005ef6:	9b01      	ldr	r3, [sp, #4]
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	dd07      	ble.n	8005f0c <_dtoa_r+0xb64>
 8005efc:	4651      	mov	r1, sl
 8005efe:	2300      	movs	r3, #0
 8005f00:	220a      	movs	r2, #10
 8005f02:	4620      	mov	r0, r4
 8005f04:	f000 f9a4 	bl	8006250 <__multadd>
 8005f08:	4682      	mov	sl, r0
 8005f0a:	e7ea      	b.n	8005ee2 <_dtoa_r+0xb3a>
 8005f0c:	9b01      	ldr	r3, [sp, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	bfc8      	it	gt
 8005f12:	461d      	movgt	r5, r3
 8005f14:	9b00      	ldr	r3, [sp, #0]
 8005f16:	bfd8      	it	le
 8005f18:	2501      	movle	r5, #1
 8005f1a:	441d      	add	r5, r3
 8005f1c:	f04f 0800 	mov.w	r8, #0
 8005f20:	4651      	mov	r1, sl
 8005f22:	2201      	movs	r2, #1
 8005f24:	4620      	mov	r0, r4
 8005f26:	f000 fb41 	bl	80065ac <__lshift>
 8005f2a:	4631      	mov	r1, r6
 8005f2c:	4682      	mov	sl, r0
 8005f2e:	f000 fba9 	bl	8006684 <__mcmp>
 8005f32:	2800      	cmp	r0, #0
 8005f34:	dc96      	bgt.n	8005e64 <_dtoa_r+0xabc>
 8005f36:	d102      	bne.n	8005f3e <_dtoa_r+0xb96>
 8005f38:	f019 0f01 	tst.w	r9, #1
 8005f3c:	d192      	bne.n	8005e64 <_dtoa_r+0xabc>
 8005f3e:	462b      	mov	r3, r5
 8005f40:	461d      	mov	r5, r3
 8005f42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f46:	2a30      	cmp	r2, #48	; 0x30
 8005f48:	d0fa      	beq.n	8005f40 <_dtoa_r+0xb98>
 8005f4a:	e6dd      	b.n	8005d08 <_dtoa_r+0x960>
 8005f4c:	9a00      	ldr	r2, [sp, #0]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d189      	bne.n	8005e66 <_dtoa_r+0xabe>
 8005f52:	f10b 0b01 	add.w	fp, fp, #1
 8005f56:	2331      	movs	r3, #49	; 0x31
 8005f58:	e796      	b.n	8005e88 <_dtoa_r+0xae0>
 8005f5a:	4b0a      	ldr	r3, [pc, #40]	; (8005f84 <_dtoa_r+0xbdc>)
 8005f5c:	f7ff ba99 	b.w	8005492 <_dtoa_r+0xea>
 8005f60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	f47f aa6d 	bne.w	8005442 <_dtoa_r+0x9a>
 8005f68:	4b07      	ldr	r3, [pc, #28]	; (8005f88 <_dtoa_r+0xbe0>)
 8005f6a:	f7ff ba92 	b.w	8005492 <_dtoa_r+0xea>
 8005f6e:	9b01      	ldr	r3, [sp, #4]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	dcb5      	bgt.n	8005ee0 <_dtoa_r+0xb38>
 8005f74:	9b07      	ldr	r3, [sp, #28]
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	f73f aeb1 	bgt.w	8005cde <_dtoa_r+0x936>
 8005f7c:	e7b0      	b.n	8005ee0 <_dtoa_r+0xb38>
 8005f7e:	bf00      	nop
 8005f80:	080074e3 	.word	0x080074e3
 8005f84:	08007443 	.word	0x08007443
 8005f88:	08007467 	.word	0x08007467

08005f8c <_free_r>:
 8005f8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f8e:	2900      	cmp	r1, #0
 8005f90:	d044      	beq.n	800601c <_free_r+0x90>
 8005f92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f96:	9001      	str	r0, [sp, #4]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f1a1 0404 	sub.w	r4, r1, #4
 8005f9e:	bfb8      	it	lt
 8005fa0:	18e4      	addlt	r4, r4, r3
 8005fa2:	f000 f8e7 	bl	8006174 <__malloc_lock>
 8005fa6:	4a1e      	ldr	r2, [pc, #120]	; (8006020 <_free_r+0x94>)
 8005fa8:	9801      	ldr	r0, [sp, #4]
 8005faa:	6813      	ldr	r3, [r2, #0]
 8005fac:	b933      	cbnz	r3, 8005fbc <_free_r+0x30>
 8005fae:	6063      	str	r3, [r4, #4]
 8005fb0:	6014      	str	r4, [r2, #0]
 8005fb2:	b003      	add	sp, #12
 8005fb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005fb8:	f000 b8e2 	b.w	8006180 <__malloc_unlock>
 8005fbc:	42a3      	cmp	r3, r4
 8005fbe:	d908      	bls.n	8005fd2 <_free_r+0x46>
 8005fc0:	6825      	ldr	r5, [r4, #0]
 8005fc2:	1961      	adds	r1, r4, r5
 8005fc4:	428b      	cmp	r3, r1
 8005fc6:	bf01      	itttt	eq
 8005fc8:	6819      	ldreq	r1, [r3, #0]
 8005fca:	685b      	ldreq	r3, [r3, #4]
 8005fcc:	1949      	addeq	r1, r1, r5
 8005fce:	6021      	streq	r1, [r4, #0]
 8005fd0:	e7ed      	b.n	8005fae <_free_r+0x22>
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	b10b      	cbz	r3, 8005fdc <_free_r+0x50>
 8005fd8:	42a3      	cmp	r3, r4
 8005fda:	d9fa      	bls.n	8005fd2 <_free_r+0x46>
 8005fdc:	6811      	ldr	r1, [r2, #0]
 8005fde:	1855      	adds	r5, r2, r1
 8005fe0:	42a5      	cmp	r5, r4
 8005fe2:	d10b      	bne.n	8005ffc <_free_r+0x70>
 8005fe4:	6824      	ldr	r4, [r4, #0]
 8005fe6:	4421      	add	r1, r4
 8005fe8:	1854      	adds	r4, r2, r1
 8005fea:	42a3      	cmp	r3, r4
 8005fec:	6011      	str	r1, [r2, #0]
 8005fee:	d1e0      	bne.n	8005fb2 <_free_r+0x26>
 8005ff0:	681c      	ldr	r4, [r3, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	6053      	str	r3, [r2, #4]
 8005ff6:	440c      	add	r4, r1
 8005ff8:	6014      	str	r4, [r2, #0]
 8005ffa:	e7da      	b.n	8005fb2 <_free_r+0x26>
 8005ffc:	d902      	bls.n	8006004 <_free_r+0x78>
 8005ffe:	230c      	movs	r3, #12
 8006000:	6003      	str	r3, [r0, #0]
 8006002:	e7d6      	b.n	8005fb2 <_free_r+0x26>
 8006004:	6825      	ldr	r5, [r4, #0]
 8006006:	1961      	adds	r1, r4, r5
 8006008:	428b      	cmp	r3, r1
 800600a:	bf04      	itt	eq
 800600c:	6819      	ldreq	r1, [r3, #0]
 800600e:	685b      	ldreq	r3, [r3, #4]
 8006010:	6063      	str	r3, [r4, #4]
 8006012:	bf04      	itt	eq
 8006014:	1949      	addeq	r1, r1, r5
 8006016:	6021      	streq	r1, [r4, #0]
 8006018:	6054      	str	r4, [r2, #4]
 800601a:	e7ca      	b.n	8005fb2 <_free_r+0x26>
 800601c:	b003      	add	sp, #12
 800601e:	bd30      	pop	{r4, r5, pc}
 8006020:	20000c90 	.word	0x20000c90

08006024 <malloc>:
 8006024:	4b02      	ldr	r3, [pc, #8]	; (8006030 <malloc+0xc>)
 8006026:	4601      	mov	r1, r0
 8006028:	6818      	ldr	r0, [r3, #0]
 800602a:	f000 b823 	b.w	8006074 <_malloc_r>
 800602e:	bf00      	nop
 8006030:	2000015c 	.word	0x2000015c

08006034 <sbrk_aligned>:
 8006034:	b570      	push	{r4, r5, r6, lr}
 8006036:	4e0e      	ldr	r6, [pc, #56]	; (8006070 <sbrk_aligned+0x3c>)
 8006038:	460c      	mov	r4, r1
 800603a:	6831      	ldr	r1, [r6, #0]
 800603c:	4605      	mov	r5, r0
 800603e:	b911      	cbnz	r1, 8006046 <sbrk_aligned+0x12>
 8006040:	f000 fe40 	bl	8006cc4 <_sbrk_r>
 8006044:	6030      	str	r0, [r6, #0]
 8006046:	4621      	mov	r1, r4
 8006048:	4628      	mov	r0, r5
 800604a:	f000 fe3b 	bl	8006cc4 <_sbrk_r>
 800604e:	1c43      	adds	r3, r0, #1
 8006050:	d00a      	beq.n	8006068 <sbrk_aligned+0x34>
 8006052:	1cc4      	adds	r4, r0, #3
 8006054:	f024 0403 	bic.w	r4, r4, #3
 8006058:	42a0      	cmp	r0, r4
 800605a:	d007      	beq.n	800606c <sbrk_aligned+0x38>
 800605c:	1a21      	subs	r1, r4, r0
 800605e:	4628      	mov	r0, r5
 8006060:	f000 fe30 	bl	8006cc4 <_sbrk_r>
 8006064:	3001      	adds	r0, #1
 8006066:	d101      	bne.n	800606c <sbrk_aligned+0x38>
 8006068:	f04f 34ff 	mov.w	r4, #4294967295
 800606c:	4620      	mov	r0, r4
 800606e:	bd70      	pop	{r4, r5, r6, pc}
 8006070:	20000c94 	.word	0x20000c94

08006074 <_malloc_r>:
 8006074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006078:	1ccd      	adds	r5, r1, #3
 800607a:	f025 0503 	bic.w	r5, r5, #3
 800607e:	3508      	adds	r5, #8
 8006080:	2d0c      	cmp	r5, #12
 8006082:	bf38      	it	cc
 8006084:	250c      	movcc	r5, #12
 8006086:	2d00      	cmp	r5, #0
 8006088:	4607      	mov	r7, r0
 800608a:	db01      	blt.n	8006090 <_malloc_r+0x1c>
 800608c:	42a9      	cmp	r1, r5
 800608e:	d905      	bls.n	800609c <_malloc_r+0x28>
 8006090:	230c      	movs	r3, #12
 8006092:	603b      	str	r3, [r7, #0]
 8006094:	2600      	movs	r6, #0
 8006096:	4630      	mov	r0, r6
 8006098:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800609c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006170 <_malloc_r+0xfc>
 80060a0:	f000 f868 	bl	8006174 <__malloc_lock>
 80060a4:	f8d8 3000 	ldr.w	r3, [r8]
 80060a8:	461c      	mov	r4, r3
 80060aa:	bb5c      	cbnz	r4, 8006104 <_malloc_r+0x90>
 80060ac:	4629      	mov	r1, r5
 80060ae:	4638      	mov	r0, r7
 80060b0:	f7ff ffc0 	bl	8006034 <sbrk_aligned>
 80060b4:	1c43      	adds	r3, r0, #1
 80060b6:	4604      	mov	r4, r0
 80060b8:	d155      	bne.n	8006166 <_malloc_r+0xf2>
 80060ba:	f8d8 4000 	ldr.w	r4, [r8]
 80060be:	4626      	mov	r6, r4
 80060c0:	2e00      	cmp	r6, #0
 80060c2:	d145      	bne.n	8006150 <_malloc_r+0xdc>
 80060c4:	2c00      	cmp	r4, #0
 80060c6:	d048      	beq.n	800615a <_malloc_r+0xe6>
 80060c8:	6823      	ldr	r3, [r4, #0]
 80060ca:	4631      	mov	r1, r6
 80060cc:	4638      	mov	r0, r7
 80060ce:	eb04 0903 	add.w	r9, r4, r3
 80060d2:	f000 fdf7 	bl	8006cc4 <_sbrk_r>
 80060d6:	4581      	cmp	r9, r0
 80060d8:	d13f      	bne.n	800615a <_malloc_r+0xe6>
 80060da:	6821      	ldr	r1, [r4, #0]
 80060dc:	1a6d      	subs	r5, r5, r1
 80060de:	4629      	mov	r1, r5
 80060e0:	4638      	mov	r0, r7
 80060e2:	f7ff ffa7 	bl	8006034 <sbrk_aligned>
 80060e6:	3001      	adds	r0, #1
 80060e8:	d037      	beq.n	800615a <_malloc_r+0xe6>
 80060ea:	6823      	ldr	r3, [r4, #0]
 80060ec:	442b      	add	r3, r5
 80060ee:	6023      	str	r3, [r4, #0]
 80060f0:	f8d8 3000 	ldr.w	r3, [r8]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d038      	beq.n	800616a <_malloc_r+0xf6>
 80060f8:	685a      	ldr	r2, [r3, #4]
 80060fa:	42a2      	cmp	r2, r4
 80060fc:	d12b      	bne.n	8006156 <_malloc_r+0xe2>
 80060fe:	2200      	movs	r2, #0
 8006100:	605a      	str	r2, [r3, #4]
 8006102:	e00f      	b.n	8006124 <_malloc_r+0xb0>
 8006104:	6822      	ldr	r2, [r4, #0]
 8006106:	1b52      	subs	r2, r2, r5
 8006108:	d41f      	bmi.n	800614a <_malloc_r+0xd6>
 800610a:	2a0b      	cmp	r2, #11
 800610c:	d917      	bls.n	800613e <_malloc_r+0xca>
 800610e:	1961      	adds	r1, r4, r5
 8006110:	42a3      	cmp	r3, r4
 8006112:	6025      	str	r5, [r4, #0]
 8006114:	bf18      	it	ne
 8006116:	6059      	strne	r1, [r3, #4]
 8006118:	6863      	ldr	r3, [r4, #4]
 800611a:	bf08      	it	eq
 800611c:	f8c8 1000 	streq.w	r1, [r8]
 8006120:	5162      	str	r2, [r4, r5]
 8006122:	604b      	str	r3, [r1, #4]
 8006124:	4638      	mov	r0, r7
 8006126:	f104 060b 	add.w	r6, r4, #11
 800612a:	f000 f829 	bl	8006180 <__malloc_unlock>
 800612e:	f026 0607 	bic.w	r6, r6, #7
 8006132:	1d23      	adds	r3, r4, #4
 8006134:	1af2      	subs	r2, r6, r3
 8006136:	d0ae      	beq.n	8006096 <_malloc_r+0x22>
 8006138:	1b9b      	subs	r3, r3, r6
 800613a:	50a3      	str	r3, [r4, r2]
 800613c:	e7ab      	b.n	8006096 <_malloc_r+0x22>
 800613e:	42a3      	cmp	r3, r4
 8006140:	6862      	ldr	r2, [r4, #4]
 8006142:	d1dd      	bne.n	8006100 <_malloc_r+0x8c>
 8006144:	f8c8 2000 	str.w	r2, [r8]
 8006148:	e7ec      	b.n	8006124 <_malloc_r+0xb0>
 800614a:	4623      	mov	r3, r4
 800614c:	6864      	ldr	r4, [r4, #4]
 800614e:	e7ac      	b.n	80060aa <_malloc_r+0x36>
 8006150:	4634      	mov	r4, r6
 8006152:	6876      	ldr	r6, [r6, #4]
 8006154:	e7b4      	b.n	80060c0 <_malloc_r+0x4c>
 8006156:	4613      	mov	r3, r2
 8006158:	e7cc      	b.n	80060f4 <_malloc_r+0x80>
 800615a:	230c      	movs	r3, #12
 800615c:	603b      	str	r3, [r7, #0]
 800615e:	4638      	mov	r0, r7
 8006160:	f000 f80e 	bl	8006180 <__malloc_unlock>
 8006164:	e797      	b.n	8006096 <_malloc_r+0x22>
 8006166:	6025      	str	r5, [r4, #0]
 8006168:	e7dc      	b.n	8006124 <_malloc_r+0xb0>
 800616a:	605b      	str	r3, [r3, #4]
 800616c:	deff      	udf	#255	; 0xff
 800616e:	bf00      	nop
 8006170:	20000c90 	.word	0x20000c90

08006174 <__malloc_lock>:
 8006174:	4801      	ldr	r0, [pc, #4]	; (800617c <__malloc_lock+0x8>)
 8006176:	f7ff b88a 	b.w	800528e <__retarget_lock_acquire_recursive>
 800617a:	bf00      	nop
 800617c:	20000c8c 	.word	0x20000c8c

08006180 <__malloc_unlock>:
 8006180:	4801      	ldr	r0, [pc, #4]	; (8006188 <__malloc_unlock+0x8>)
 8006182:	f7ff b885 	b.w	8005290 <__retarget_lock_release_recursive>
 8006186:	bf00      	nop
 8006188:	20000c8c 	.word	0x20000c8c

0800618c <_Balloc>:
 800618c:	b570      	push	{r4, r5, r6, lr}
 800618e:	69c6      	ldr	r6, [r0, #28]
 8006190:	4604      	mov	r4, r0
 8006192:	460d      	mov	r5, r1
 8006194:	b976      	cbnz	r6, 80061b4 <_Balloc+0x28>
 8006196:	2010      	movs	r0, #16
 8006198:	f7ff ff44 	bl	8006024 <malloc>
 800619c:	4602      	mov	r2, r0
 800619e:	61e0      	str	r0, [r4, #28]
 80061a0:	b920      	cbnz	r0, 80061ac <_Balloc+0x20>
 80061a2:	4b18      	ldr	r3, [pc, #96]	; (8006204 <_Balloc+0x78>)
 80061a4:	4818      	ldr	r0, [pc, #96]	; (8006208 <_Balloc+0x7c>)
 80061a6:	216b      	movs	r1, #107	; 0x6b
 80061a8:	f000 fdaa 	bl	8006d00 <__assert_func>
 80061ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80061b0:	6006      	str	r6, [r0, #0]
 80061b2:	60c6      	str	r6, [r0, #12]
 80061b4:	69e6      	ldr	r6, [r4, #28]
 80061b6:	68f3      	ldr	r3, [r6, #12]
 80061b8:	b183      	cbz	r3, 80061dc <_Balloc+0x50>
 80061ba:	69e3      	ldr	r3, [r4, #28]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80061c2:	b9b8      	cbnz	r0, 80061f4 <_Balloc+0x68>
 80061c4:	2101      	movs	r1, #1
 80061c6:	fa01 f605 	lsl.w	r6, r1, r5
 80061ca:	1d72      	adds	r2, r6, #5
 80061cc:	0092      	lsls	r2, r2, #2
 80061ce:	4620      	mov	r0, r4
 80061d0:	f000 fdb4 	bl	8006d3c <_calloc_r>
 80061d4:	b160      	cbz	r0, 80061f0 <_Balloc+0x64>
 80061d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80061da:	e00e      	b.n	80061fa <_Balloc+0x6e>
 80061dc:	2221      	movs	r2, #33	; 0x21
 80061de:	2104      	movs	r1, #4
 80061e0:	4620      	mov	r0, r4
 80061e2:	f000 fdab 	bl	8006d3c <_calloc_r>
 80061e6:	69e3      	ldr	r3, [r4, #28]
 80061e8:	60f0      	str	r0, [r6, #12]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d1e4      	bne.n	80061ba <_Balloc+0x2e>
 80061f0:	2000      	movs	r0, #0
 80061f2:	bd70      	pop	{r4, r5, r6, pc}
 80061f4:	6802      	ldr	r2, [r0, #0]
 80061f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80061fa:	2300      	movs	r3, #0
 80061fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006200:	e7f7      	b.n	80061f2 <_Balloc+0x66>
 8006202:	bf00      	nop
 8006204:	08007474 	.word	0x08007474
 8006208:	080074f4 	.word	0x080074f4

0800620c <_Bfree>:
 800620c:	b570      	push	{r4, r5, r6, lr}
 800620e:	69c6      	ldr	r6, [r0, #28]
 8006210:	4605      	mov	r5, r0
 8006212:	460c      	mov	r4, r1
 8006214:	b976      	cbnz	r6, 8006234 <_Bfree+0x28>
 8006216:	2010      	movs	r0, #16
 8006218:	f7ff ff04 	bl	8006024 <malloc>
 800621c:	4602      	mov	r2, r0
 800621e:	61e8      	str	r0, [r5, #28]
 8006220:	b920      	cbnz	r0, 800622c <_Bfree+0x20>
 8006222:	4b09      	ldr	r3, [pc, #36]	; (8006248 <_Bfree+0x3c>)
 8006224:	4809      	ldr	r0, [pc, #36]	; (800624c <_Bfree+0x40>)
 8006226:	218f      	movs	r1, #143	; 0x8f
 8006228:	f000 fd6a 	bl	8006d00 <__assert_func>
 800622c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006230:	6006      	str	r6, [r0, #0]
 8006232:	60c6      	str	r6, [r0, #12]
 8006234:	b13c      	cbz	r4, 8006246 <_Bfree+0x3a>
 8006236:	69eb      	ldr	r3, [r5, #28]
 8006238:	6862      	ldr	r2, [r4, #4]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006240:	6021      	str	r1, [r4, #0]
 8006242:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006246:	bd70      	pop	{r4, r5, r6, pc}
 8006248:	08007474 	.word	0x08007474
 800624c:	080074f4 	.word	0x080074f4

08006250 <__multadd>:
 8006250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006254:	690d      	ldr	r5, [r1, #16]
 8006256:	4607      	mov	r7, r0
 8006258:	460c      	mov	r4, r1
 800625a:	461e      	mov	r6, r3
 800625c:	f101 0c14 	add.w	ip, r1, #20
 8006260:	2000      	movs	r0, #0
 8006262:	f8dc 3000 	ldr.w	r3, [ip]
 8006266:	b299      	uxth	r1, r3
 8006268:	fb02 6101 	mla	r1, r2, r1, r6
 800626c:	0c1e      	lsrs	r6, r3, #16
 800626e:	0c0b      	lsrs	r3, r1, #16
 8006270:	fb02 3306 	mla	r3, r2, r6, r3
 8006274:	b289      	uxth	r1, r1
 8006276:	3001      	adds	r0, #1
 8006278:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800627c:	4285      	cmp	r5, r0
 800627e:	f84c 1b04 	str.w	r1, [ip], #4
 8006282:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006286:	dcec      	bgt.n	8006262 <__multadd+0x12>
 8006288:	b30e      	cbz	r6, 80062ce <__multadd+0x7e>
 800628a:	68a3      	ldr	r3, [r4, #8]
 800628c:	42ab      	cmp	r3, r5
 800628e:	dc19      	bgt.n	80062c4 <__multadd+0x74>
 8006290:	6861      	ldr	r1, [r4, #4]
 8006292:	4638      	mov	r0, r7
 8006294:	3101      	adds	r1, #1
 8006296:	f7ff ff79 	bl	800618c <_Balloc>
 800629a:	4680      	mov	r8, r0
 800629c:	b928      	cbnz	r0, 80062aa <__multadd+0x5a>
 800629e:	4602      	mov	r2, r0
 80062a0:	4b0c      	ldr	r3, [pc, #48]	; (80062d4 <__multadd+0x84>)
 80062a2:	480d      	ldr	r0, [pc, #52]	; (80062d8 <__multadd+0x88>)
 80062a4:	21ba      	movs	r1, #186	; 0xba
 80062a6:	f000 fd2b 	bl	8006d00 <__assert_func>
 80062aa:	6922      	ldr	r2, [r4, #16]
 80062ac:	3202      	adds	r2, #2
 80062ae:	f104 010c 	add.w	r1, r4, #12
 80062b2:	0092      	lsls	r2, r2, #2
 80062b4:	300c      	adds	r0, #12
 80062b6:	f000 fd15 	bl	8006ce4 <memcpy>
 80062ba:	4621      	mov	r1, r4
 80062bc:	4638      	mov	r0, r7
 80062be:	f7ff ffa5 	bl	800620c <_Bfree>
 80062c2:	4644      	mov	r4, r8
 80062c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80062c8:	3501      	adds	r5, #1
 80062ca:	615e      	str	r6, [r3, #20]
 80062cc:	6125      	str	r5, [r4, #16]
 80062ce:	4620      	mov	r0, r4
 80062d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062d4:	080074e3 	.word	0x080074e3
 80062d8:	080074f4 	.word	0x080074f4

080062dc <__hi0bits>:
 80062dc:	0c03      	lsrs	r3, r0, #16
 80062de:	041b      	lsls	r3, r3, #16
 80062e0:	b9d3      	cbnz	r3, 8006318 <__hi0bits+0x3c>
 80062e2:	0400      	lsls	r0, r0, #16
 80062e4:	2310      	movs	r3, #16
 80062e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80062ea:	bf04      	itt	eq
 80062ec:	0200      	lsleq	r0, r0, #8
 80062ee:	3308      	addeq	r3, #8
 80062f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80062f4:	bf04      	itt	eq
 80062f6:	0100      	lsleq	r0, r0, #4
 80062f8:	3304      	addeq	r3, #4
 80062fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80062fe:	bf04      	itt	eq
 8006300:	0080      	lsleq	r0, r0, #2
 8006302:	3302      	addeq	r3, #2
 8006304:	2800      	cmp	r0, #0
 8006306:	db05      	blt.n	8006314 <__hi0bits+0x38>
 8006308:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800630c:	f103 0301 	add.w	r3, r3, #1
 8006310:	bf08      	it	eq
 8006312:	2320      	moveq	r3, #32
 8006314:	4618      	mov	r0, r3
 8006316:	4770      	bx	lr
 8006318:	2300      	movs	r3, #0
 800631a:	e7e4      	b.n	80062e6 <__hi0bits+0xa>

0800631c <__lo0bits>:
 800631c:	6803      	ldr	r3, [r0, #0]
 800631e:	f013 0207 	ands.w	r2, r3, #7
 8006322:	d00c      	beq.n	800633e <__lo0bits+0x22>
 8006324:	07d9      	lsls	r1, r3, #31
 8006326:	d422      	bmi.n	800636e <__lo0bits+0x52>
 8006328:	079a      	lsls	r2, r3, #30
 800632a:	bf49      	itett	mi
 800632c:	085b      	lsrmi	r3, r3, #1
 800632e:	089b      	lsrpl	r3, r3, #2
 8006330:	6003      	strmi	r3, [r0, #0]
 8006332:	2201      	movmi	r2, #1
 8006334:	bf5c      	itt	pl
 8006336:	6003      	strpl	r3, [r0, #0]
 8006338:	2202      	movpl	r2, #2
 800633a:	4610      	mov	r0, r2
 800633c:	4770      	bx	lr
 800633e:	b299      	uxth	r1, r3
 8006340:	b909      	cbnz	r1, 8006346 <__lo0bits+0x2a>
 8006342:	0c1b      	lsrs	r3, r3, #16
 8006344:	2210      	movs	r2, #16
 8006346:	b2d9      	uxtb	r1, r3
 8006348:	b909      	cbnz	r1, 800634e <__lo0bits+0x32>
 800634a:	3208      	adds	r2, #8
 800634c:	0a1b      	lsrs	r3, r3, #8
 800634e:	0719      	lsls	r1, r3, #28
 8006350:	bf04      	itt	eq
 8006352:	091b      	lsreq	r3, r3, #4
 8006354:	3204      	addeq	r2, #4
 8006356:	0799      	lsls	r1, r3, #30
 8006358:	bf04      	itt	eq
 800635a:	089b      	lsreq	r3, r3, #2
 800635c:	3202      	addeq	r2, #2
 800635e:	07d9      	lsls	r1, r3, #31
 8006360:	d403      	bmi.n	800636a <__lo0bits+0x4e>
 8006362:	085b      	lsrs	r3, r3, #1
 8006364:	f102 0201 	add.w	r2, r2, #1
 8006368:	d003      	beq.n	8006372 <__lo0bits+0x56>
 800636a:	6003      	str	r3, [r0, #0]
 800636c:	e7e5      	b.n	800633a <__lo0bits+0x1e>
 800636e:	2200      	movs	r2, #0
 8006370:	e7e3      	b.n	800633a <__lo0bits+0x1e>
 8006372:	2220      	movs	r2, #32
 8006374:	e7e1      	b.n	800633a <__lo0bits+0x1e>
	...

08006378 <__i2b>:
 8006378:	b510      	push	{r4, lr}
 800637a:	460c      	mov	r4, r1
 800637c:	2101      	movs	r1, #1
 800637e:	f7ff ff05 	bl	800618c <_Balloc>
 8006382:	4602      	mov	r2, r0
 8006384:	b928      	cbnz	r0, 8006392 <__i2b+0x1a>
 8006386:	4b05      	ldr	r3, [pc, #20]	; (800639c <__i2b+0x24>)
 8006388:	4805      	ldr	r0, [pc, #20]	; (80063a0 <__i2b+0x28>)
 800638a:	f240 1145 	movw	r1, #325	; 0x145
 800638e:	f000 fcb7 	bl	8006d00 <__assert_func>
 8006392:	2301      	movs	r3, #1
 8006394:	6144      	str	r4, [r0, #20]
 8006396:	6103      	str	r3, [r0, #16]
 8006398:	bd10      	pop	{r4, pc}
 800639a:	bf00      	nop
 800639c:	080074e3 	.word	0x080074e3
 80063a0:	080074f4 	.word	0x080074f4

080063a4 <__multiply>:
 80063a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063a8:	4691      	mov	r9, r2
 80063aa:	690a      	ldr	r2, [r1, #16]
 80063ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	bfb8      	it	lt
 80063b4:	460b      	movlt	r3, r1
 80063b6:	460c      	mov	r4, r1
 80063b8:	bfbc      	itt	lt
 80063ba:	464c      	movlt	r4, r9
 80063bc:	4699      	movlt	r9, r3
 80063be:	6927      	ldr	r7, [r4, #16]
 80063c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80063c4:	68a3      	ldr	r3, [r4, #8]
 80063c6:	6861      	ldr	r1, [r4, #4]
 80063c8:	eb07 060a 	add.w	r6, r7, sl
 80063cc:	42b3      	cmp	r3, r6
 80063ce:	b085      	sub	sp, #20
 80063d0:	bfb8      	it	lt
 80063d2:	3101      	addlt	r1, #1
 80063d4:	f7ff feda 	bl	800618c <_Balloc>
 80063d8:	b930      	cbnz	r0, 80063e8 <__multiply+0x44>
 80063da:	4602      	mov	r2, r0
 80063dc:	4b44      	ldr	r3, [pc, #272]	; (80064f0 <__multiply+0x14c>)
 80063de:	4845      	ldr	r0, [pc, #276]	; (80064f4 <__multiply+0x150>)
 80063e0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80063e4:	f000 fc8c 	bl	8006d00 <__assert_func>
 80063e8:	f100 0514 	add.w	r5, r0, #20
 80063ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80063f0:	462b      	mov	r3, r5
 80063f2:	2200      	movs	r2, #0
 80063f4:	4543      	cmp	r3, r8
 80063f6:	d321      	bcc.n	800643c <__multiply+0x98>
 80063f8:	f104 0314 	add.w	r3, r4, #20
 80063fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006400:	f109 0314 	add.w	r3, r9, #20
 8006404:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006408:	9202      	str	r2, [sp, #8]
 800640a:	1b3a      	subs	r2, r7, r4
 800640c:	3a15      	subs	r2, #21
 800640e:	f022 0203 	bic.w	r2, r2, #3
 8006412:	3204      	adds	r2, #4
 8006414:	f104 0115 	add.w	r1, r4, #21
 8006418:	428f      	cmp	r7, r1
 800641a:	bf38      	it	cc
 800641c:	2204      	movcc	r2, #4
 800641e:	9201      	str	r2, [sp, #4]
 8006420:	9a02      	ldr	r2, [sp, #8]
 8006422:	9303      	str	r3, [sp, #12]
 8006424:	429a      	cmp	r2, r3
 8006426:	d80c      	bhi.n	8006442 <__multiply+0x9e>
 8006428:	2e00      	cmp	r6, #0
 800642a:	dd03      	ble.n	8006434 <__multiply+0x90>
 800642c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006430:	2b00      	cmp	r3, #0
 8006432:	d05b      	beq.n	80064ec <__multiply+0x148>
 8006434:	6106      	str	r6, [r0, #16]
 8006436:	b005      	add	sp, #20
 8006438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800643c:	f843 2b04 	str.w	r2, [r3], #4
 8006440:	e7d8      	b.n	80063f4 <__multiply+0x50>
 8006442:	f8b3 a000 	ldrh.w	sl, [r3]
 8006446:	f1ba 0f00 	cmp.w	sl, #0
 800644a:	d024      	beq.n	8006496 <__multiply+0xf2>
 800644c:	f104 0e14 	add.w	lr, r4, #20
 8006450:	46a9      	mov	r9, r5
 8006452:	f04f 0c00 	mov.w	ip, #0
 8006456:	f85e 2b04 	ldr.w	r2, [lr], #4
 800645a:	f8d9 1000 	ldr.w	r1, [r9]
 800645e:	fa1f fb82 	uxth.w	fp, r2
 8006462:	b289      	uxth	r1, r1
 8006464:	fb0a 110b 	mla	r1, sl, fp, r1
 8006468:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800646c:	f8d9 2000 	ldr.w	r2, [r9]
 8006470:	4461      	add	r1, ip
 8006472:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006476:	fb0a c20b 	mla	r2, sl, fp, ip
 800647a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800647e:	b289      	uxth	r1, r1
 8006480:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006484:	4577      	cmp	r7, lr
 8006486:	f849 1b04 	str.w	r1, [r9], #4
 800648a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800648e:	d8e2      	bhi.n	8006456 <__multiply+0xb2>
 8006490:	9a01      	ldr	r2, [sp, #4]
 8006492:	f845 c002 	str.w	ip, [r5, r2]
 8006496:	9a03      	ldr	r2, [sp, #12]
 8006498:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800649c:	3304      	adds	r3, #4
 800649e:	f1b9 0f00 	cmp.w	r9, #0
 80064a2:	d021      	beq.n	80064e8 <__multiply+0x144>
 80064a4:	6829      	ldr	r1, [r5, #0]
 80064a6:	f104 0c14 	add.w	ip, r4, #20
 80064aa:	46ae      	mov	lr, r5
 80064ac:	f04f 0a00 	mov.w	sl, #0
 80064b0:	f8bc b000 	ldrh.w	fp, [ip]
 80064b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80064b8:	fb09 220b 	mla	r2, r9, fp, r2
 80064bc:	4452      	add	r2, sl
 80064be:	b289      	uxth	r1, r1
 80064c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80064c4:	f84e 1b04 	str.w	r1, [lr], #4
 80064c8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80064cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80064d0:	f8be 1000 	ldrh.w	r1, [lr]
 80064d4:	fb09 110a 	mla	r1, r9, sl, r1
 80064d8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80064dc:	4567      	cmp	r7, ip
 80064de:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80064e2:	d8e5      	bhi.n	80064b0 <__multiply+0x10c>
 80064e4:	9a01      	ldr	r2, [sp, #4]
 80064e6:	50a9      	str	r1, [r5, r2]
 80064e8:	3504      	adds	r5, #4
 80064ea:	e799      	b.n	8006420 <__multiply+0x7c>
 80064ec:	3e01      	subs	r6, #1
 80064ee:	e79b      	b.n	8006428 <__multiply+0x84>
 80064f0:	080074e3 	.word	0x080074e3
 80064f4:	080074f4 	.word	0x080074f4

080064f8 <__pow5mult>:
 80064f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064fc:	4615      	mov	r5, r2
 80064fe:	f012 0203 	ands.w	r2, r2, #3
 8006502:	4606      	mov	r6, r0
 8006504:	460f      	mov	r7, r1
 8006506:	d007      	beq.n	8006518 <__pow5mult+0x20>
 8006508:	4c25      	ldr	r4, [pc, #148]	; (80065a0 <__pow5mult+0xa8>)
 800650a:	3a01      	subs	r2, #1
 800650c:	2300      	movs	r3, #0
 800650e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006512:	f7ff fe9d 	bl	8006250 <__multadd>
 8006516:	4607      	mov	r7, r0
 8006518:	10ad      	asrs	r5, r5, #2
 800651a:	d03d      	beq.n	8006598 <__pow5mult+0xa0>
 800651c:	69f4      	ldr	r4, [r6, #28]
 800651e:	b97c      	cbnz	r4, 8006540 <__pow5mult+0x48>
 8006520:	2010      	movs	r0, #16
 8006522:	f7ff fd7f 	bl	8006024 <malloc>
 8006526:	4602      	mov	r2, r0
 8006528:	61f0      	str	r0, [r6, #28]
 800652a:	b928      	cbnz	r0, 8006538 <__pow5mult+0x40>
 800652c:	4b1d      	ldr	r3, [pc, #116]	; (80065a4 <__pow5mult+0xac>)
 800652e:	481e      	ldr	r0, [pc, #120]	; (80065a8 <__pow5mult+0xb0>)
 8006530:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006534:	f000 fbe4 	bl	8006d00 <__assert_func>
 8006538:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800653c:	6004      	str	r4, [r0, #0]
 800653e:	60c4      	str	r4, [r0, #12]
 8006540:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006544:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006548:	b94c      	cbnz	r4, 800655e <__pow5mult+0x66>
 800654a:	f240 2171 	movw	r1, #625	; 0x271
 800654e:	4630      	mov	r0, r6
 8006550:	f7ff ff12 	bl	8006378 <__i2b>
 8006554:	2300      	movs	r3, #0
 8006556:	f8c8 0008 	str.w	r0, [r8, #8]
 800655a:	4604      	mov	r4, r0
 800655c:	6003      	str	r3, [r0, #0]
 800655e:	f04f 0900 	mov.w	r9, #0
 8006562:	07eb      	lsls	r3, r5, #31
 8006564:	d50a      	bpl.n	800657c <__pow5mult+0x84>
 8006566:	4639      	mov	r1, r7
 8006568:	4622      	mov	r2, r4
 800656a:	4630      	mov	r0, r6
 800656c:	f7ff ff1a 	bl	80063a4 <__multiply>
 8006570:	4639      	mov	r1, r7
 8006572:	4680      	mov	r8, r0
 8006574:	4630      	mov	r0, r6
 8006576:	f7ff fe49 	bl	800620c <_Bfree>
 800657a:	4647      	mov	r7, r8
 800657c:	106d      	asrs	r5, r5, #1
 800657e:	d00b      	beq.n	8006598 <__pow5mult+0xa0>
 8006580:	6820      	ldr	r0, [r4, #0]
 8006582:	b938      	cbnz	r0, 8006594 <__pow5mult+0x9c>
 8006584:	4622      	mov	r2, r4
 8006586:	4621      	mov	r1, r4
 8006588:	4630      	mov	r0, r6
 800658a:	f7ff ff0b 	bl	80063a4 <__multiply>
 800658e:	6020      	str	r0, [r4, #0]
 8006590:	f8c0 9000 	str.w	r9, [r0]
 8006594:	4604      	mov	r4, r0
 8006596:	e7e4      	b.n	8006562 <__pow5mult+0x6a>
 8006598:	4638      	mov	r0, r7
 800659a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800659e:	bf00      	nop
 80065a0:	08007640 	.word	0x08007640
 80065a4:	08007474 	.word	0x08007474
 80065a8:	080074f4 	.word	0x080074f4

080065ac <__lshift>:
 80065ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065b0:	460c      	mov	r4, r1
 80065b2:	6849      	ldr	r1, [r1, #4]
 80065b4:	6923      	ldr	r3, [r4, #16]
 80065b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80065ba:	68a3      	ldr	r3, [r4, #8]
 80065bc:	4607      	mov	r7, r0
 80065be:	4691      	mov	r9, r2
 80065c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80065c4:	f108 0601 	add.w	r6, r8, #1
 80065c8:	42b3      	cmp	r3, r6
 80065ca:	db0b      	blt.n	80065e4 <__lshift+0x38>
 80065cc:	4638      	mov	r0, r7
 80065ce:	f7ff fddd 	bl	800618c <_Balloc>
 80065d2:	4605      	mov	r5, r0
 80065d4:	b948      	cbnz	r0, 80065ea <__lshift+0x3e>
 80065d6:	4602      	mov	r2, r0
 80065d8:	4b28      	ldr	r3, [pc, #160]	; (800667c <__lshift+0xd0>)
 80065da:	4829      	ldr	r0, [pc, #164]	; (8006680 <__lshift+0xd4>)
 80065dc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80065e0:	f000 fb8e 	bl	8006d00 <__assert_func>
 80065e4:	3101      	adds	r1, #1
 80065e6:	005b      	lsls	r3, r3, #1
 80065e8:	e7ee      	b.n	80065c8 <__lshift+0x1c>
 80065ea:	2300      	movs	r3, #0
 80065ec:	f100 0114 	add.w	r1, r0, #20
 80065f0:	f100 0210 	add.w	r2, r0, #16
 80065f4:	4618      	mov	r0, r3
 80065f6:	4553      	cmp	r3, sl
 80065f8:	db33      	blt.n	8006662 <__lshift+0xb6>
 80065fa:	6920      	ldr	r0, [r4, #16]
 80065fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006600:	f104 0314 	add.w	r3, r4, #20
 8006604:	f019 091f 	ands.w	r9, r9, #31
 8006608:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800660c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006610:	d02b      	beq.n	800666a <__lshift+0xbe>
 8006612:	f1c9 0e20 	rsb	lr, r9, #32
 8006616:	468a      	mov	sl, r1
 8006618:	2200      	movs	r2, #0
 800661a:	6818      	ldr	r0, [r3, #0]
 800661c:	fa00 f009 	lsl.w	r0, r0, r9
 8006620:	4310      	orrs	r0, r2
 8006622:	f84a 0b04 	str.w	r0, [sl], #4
 8006626:	f853 2b04 	ldr.w	r2, [r3], #4
 800662a:	459c      	cmp	ip, r3
 800662c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006630:	d8f3      	bhi.n	800661a <__lshift+0x6e>
 8006632:	ebac 0304 	sub.w	r3, ip, r4
 8006636:	3b15      	subs	r3, #21
 8006638:	f023 0303 	bic.w	r3, r3, #3
 800663c:	3304      	adds	r3, #4
 800663e:	f104 0015 	add.w	r0, r4, #21
 8006642:	4584      	cmp	ip, r0
 8006644:	bf38      	it	cc
 8006646:	2304      	movcc	r3, #4
 8006648:	50ca      	str	r2, [r1, r3]
 800664a:	b10a      	cbz	r2, 8006650 <__lshift+0xa4>
 800664c:	f108 0602 	add.w	r6, r8, #2
 8006650:	3e01      	subs	r6, #1
 8006652:	4638      	mov	r0, r7
 8006654:	612e      	str	r6, [r5, #16]
 8006656:	4621      	mov	r1, r4
 8006658:	f7ff fdd8 	bl	800620c <_Bfree>
 800665c:	4628      	mov	r0, r5
 800665e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006662:	f842 0f04 	str.w	r0, [r2, #4]!
 8006666:	3301      	adds	r3, #1
 8006668:	e7c5      	b.n	80065f6 <__lshift+0x4a>
 800666a:	3904      	subs	r1, #4
 800666c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006670:	f841 2f04 	str.w	r2, [r1, #4]!
 8006674:	459c      	cmp	ip, r3
 8006676:	d8f9      	bhi.n	800666c <__lshift+0xc0>
 8006678:	e7ea      	b.n	8006650 <__lshift+0xa4>
 800667a:	bf00      	nop
 800667c:	080074e3 	.word	0x080074e3
 8006680:	080074f4 	.word	0x080074f4

08006684 <__mcmp>:
 8006684:	b530      	push	{r4, r5, lr}
 8006686:	6902      	ldr	r2, [r0, #16]
 8006688:	690c      	ldr	r4, [r1, #16]
 800668a:	1b12      	subs	r2, r2, r4
 800668c:	d10e      	bne.n	80066ac <__mcmp+0x28>
 800668e:	f100 0314 	add.w	r3, r0, #20
 8006692:	3114      	adds	r1, #20
 8006694:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006698:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800669c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80066a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80066a4:	42a5      	cmp	r5, r4
 80066a6:	d003      	beq.n	80066b0 <__mcmp+0x2c>
 80066a8:	d305      	bcc.n	80066b6 <__mcmp+0x32>
 80066aa:	2201      	movs	r2, #1
 80066ac:	4610      	mov	r0, r2
 80066ae:	bd30      	pop	{r4, r5, pc}
 80066b0:	4283      	cmp	r3, r0
 80066b2:	d3f3      	bcc.n	800669c <__mcmp+0x18>
 80066b4:	e7fa      	b.n	80066ac <__mcmp+0x28>
 80066b6:	f04f 32ff 	mov.w	r2, #4294967295
 80066ba:	e7f7      	b.n	80066ac <__mcmp+0x28>

080066bc <__mdiff>:
 80066bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066c0:	460c      	mov	r4, r1
 80066c2:	4606      	mov	r6, r0
 80066c4:	4611      	mov	r1, r2
 80066c6:	4620      	mov	r0, r4
 80066c8:	4690      	mov	r8, r2
 80066ca:	f7ff ffdb 	bl	8006684 <__mcmp>
 80066ce:	1e05      	subs	r5, r0, #0
 80066d0:	d110      	bne.n	80066f4 <__mdiff+0x38>
 80066d2:	4629      	mov	r1, r5
 80066d4:	4630      	mov	r0, r6
 80066d6:	f7ff fd59 	bl	800618c <_Balloc>
 80066da:	b930      	cbnz	r0, 80066ea <__mdiff+0x2e>
 80066dc:	4b3a      	ldr	r3, [pc, #232]	; (80067c8 <__mdiff+0x10c>)
 80066de:	4602      	mov	r2, r0
 80066e0:	f240 2137 	movw	r1, #567	; 0x237
 80066e4:	4839      	ldr	r0, [pc, #228]	; (80067cc <__mdiff+0x110>)
 80066e6:	f000 fb0b 	bl	8006d00 <__assert_func>
 80066ea:	2301      	movs	r3, #1
 80066ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80066f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066f4:	bfa4      	itt	ge
 80066f6:	4643      	movge	r3, r8
 80066f8:	46a0      	movge	r8, r4
 80066fa:	4630      	mov	r0, r6
 80066fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006700:	bfa6      	itte	ge
 8006702:	461c      	movge	r4, r3
 8006704:	2500      	movge	r5, #0
 8006706:	2501      	movlt	r5, #1
 8006708:	f7ff fd40 	bl	800618c <_Balloc>
 800670c:	b920      	cbnz	r0, 8006718 <__mdiff+0x5c>
 800670e:	4b2e      	ldr	r3, [pc, #184]	; (80067c8 <__mdiff+0x10c>)
 8006710:	4602      	mov	r2, r0
 8006712:	f240 2145 	movw	r1, #581	; 0x245
 8006716:	e7e5      	b.n	80066e4 <__mdiff+0x28>
 8006718:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800671c:	6926      	ldr	r6, [r4, #16]
 800671e:	60c5      	str	r5, [r0, #12]
 8006720:	f104 0914 	add.w	r9, r4, #20
 8006724:	f108 0514 	add.w	r5, r8, #20
 8006728:	f100 0e14 	add.w	lr, r0, #20
 800672c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006730:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006734:	f108 0210 	add.w	r2, r8, #16
 8006738:	46f2      	mov	sl, lr
 800673a:	2100      	movs	r1, #0
 800673c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006740:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006744:	fa11 f88b 	uxtah	r8, r1, fp
 8006748:	b299      	uxth	r1, r3
 800674a:	0c1b      	lsrs	r3, r3, #16
 800674c:	eba8 0801 	sub.w	r8, r8, r1
 8006750:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006754:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006758:	fa1f f888 	uxth.w	r8, r8
 800675c:	1419      	asrs	r1, r3, #16
 800675e:	454e      	cmp	r6, r9
 8006760:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006764:	f84a 3b04 	str.w	r3, [sl], #4
 8006768:	d8e8      	bhi.n	800673c <__mdiff+0x80>
 800676a:	1b33      	subs	r3, r6, r4
 800676c:	3b15      	subs	r3, #21
 800676e:	f023 0303 	bic.w	r3, r3, #3
 8006772:	3304      	adds	r3, #4
 8006774:	3415      	adds	r4, #21
 8006776:	42a6      	cmp	r6, r4
 8006778:	bf38      	it	cc
 800677a:	2304      	movcc	r3, #4
 800677c:	441d      	add	r5, r3
 800677e:	4473      	add	r3, lr
 8006780:	469e      	mov	lr, r3
 8006782:	462e      	mov	r6, r5
 8006784:	4566      	cmp	r6, ip
 8006786:	d30e      	bcc.n	80067a6 <__mdiff+0xea>
 8006788:	f10c 0203 	add.w	r2, ip, #3
 800678c:	1b52      	subs	r2, r2, r5
 800678e:	f022 0203 	bic.w	r2, r2, #3
 8006792:	3d03      	subs	r5, #3
 8006794:	45ac      	cmp	ip, r5
 8006796:	bf38      	it	cc
 8006798:	2200      	movcc	r2, #0
 800679a:	4413      	add	r3, r2
 800679c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80067a0:	b17a      	cbz	r2, 80067c2 <__mdiff+0x106>
 80067a2:	6107      	str	r7, [r0, #16]
 80067a4:	e7a4      	b.n	80066f0 <__mdiff+0x34>
 80067a6:	f856 8b04 	ldr.w	r8, [r6], #4
 80067aa:	fa11 f288 	uxtah	r2, r1, r8
 80067ae:	1414      	asrs	r4, r2, #16
 80067b0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80067b4:	b292      	uxth	r2, r2
 80067b6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80067ba:	f84e 2b04 	str.w	r2, [lr], #4
 80067be:	1421      	asrs	r1, r4, #16
 80067c0:	e7e0      	b.n	8006784 <__mdiff+0xc8>
 80067c2:	3f01      	subs	r7, #1
 80067c4:	e7ea      	b.n	800679c <__mdiff+0xe0>
 80067c6:	bf00      	nop
 80067c8:	080074e3 	.word	0x080074e3
 80067cc:	080074f4 	.word	0x080074f4

080067d0 <__d2b>:
 80067d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80067d4:	460f      	mov	r7, r1
 80067d6:	2101      	movs	r1, #1
 80067d8:	ec59 8b10 	vmov	r8, r9, d0
 80067dc:	4616      	mov	r6, r2
 80067de:	f7ff fcd5 	bl	800618c <_Balloc>
 80067e2:	4604      	mov	r4, r0
 80067e4:	b930      	cbnz	r0, 80067f4 <__d2b+0x24>
 80067e6:	4602      	mov	r2, r0
 80067e8:	4b24      	ldr	r3, [pc, #144]	; (800687c <__d2b+0xac>)
 80067ea:	4825      	ldr	r0, [pc, #148]	; (8006880 <__d2b+0xb0>)
 80067ec:	f240 310f 	movw	r1, #783	; 0x30f
 80067f0:	f000 fa86 	bl	8006d00 <__assert_func>
 80067f4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80067f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80067fc:	bb2d      	cbnz	r5, 800684a <__d2b+0x7a>
 80067fe:	9301      	str	r3, [sp, #4]
 8006800:	f1b8 0300 	subs.w	r3, r8, #0
 8006804:	d026      	beq.n	8006854 <__d2b+0x84>
 8006806:	4668      	mov	r0, sp
 8006808:	9300      	str	r3, [sp, #0]
 800680a:	f7ff fd87 	bl	800631c <__lo0bits>
 800680e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006812:	b1e8      	cbz	r0, 8006850 <__d2b+0x80>
 8006814:	f1c0 0320 	rsb	r3, r0, #32
 8006818:	fa02 f303 	lsl.w	r3, r2, r3
 800681c:	430b      	orrs	r3, r1
 800681e:	40c2      	lsrs	r2, r0
 8006820:	6163      	str	r3, [r4, #20]
 8006822:	9201      	str	r2, [sp, #4]
 8006824:	9b01      	ldr	r3, [sp, #4]
 8006826:	61a3      	str	r3, [r4, #24]
 8006828:	2b00      	cmp	r3, #0
 800682a:	bf14      	ite	ne
 800682c:	2202      	movne	r2, #2
 800682e:	2201      	moveq	r2, #1
 8006830:	6122      	str	r2, [r4, #16]
 8006832:	b1bd      	cbz	r5, 8006864 <__d2b+0x94>
 8006834:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006838:	4405      	add	r5, r0
 800683a:	603d      	str	r5, [r7, #0]
 800683c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006840:	6030      	str	r0, [r6, #0]
 8006842:	4620      	mov	r0, r4
 8006844:	b003      	add	sp, #12
 8006846:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800684a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800684e:	e7d6      	b.n	80067fe <__d2b+0x2e>
 8006850:	6161      	str	r1, [r4, #20]
 8006852:	e7e7      	b.n	8006824 <__d2b+0x54>
 8006854:	a801      	add	r0, sp, #4
 8006856:	f7ff fd61 	bl	800631c <__lo0bits>
 800685a:	9b01      	ldr	r3, [sp, #4]
 800685c:	6163      	str	r3, [r4, #20]
 800685e:	3020      	adds	r0, #32
 8006860:	2201      	movs	r2, #1
 8006862:	e7e5      	b.n	8006830 <__d2b+0x60>
 8006864:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006868:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800686c:	6038      	str	r0, [r7, #0]
 800686e:	6918      	ldr	r0, [r3, #16]
 8006870:	f7ff fd34 	bl	80062dc <__hi0bits>
 8006874:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006878:	e7e2      	b.n	8006840 <__d2b+0x70>
 800687a:	bf00      	nop
 800687c:	080074e3 	.word	0x080074e3
 8006880:	080074f4 	.word	0x080074f4

08006884 <__ssputs_r>:
 8006884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006888:	688e      	ldr	r6, [r1, #8]
 800688a:	461f      	mov	r7, r3
 800688c:	42be      	cmp	r6, r7
 800688e:	680b      	ldr	r3, [r1, #0]
 8006890:	4682      	mov	sl, r0
 8006892:	460c      	mov	r4, r1
 8006894:	4690      	mov	r8, r2
 8006896:	d82c      	bhi.n	80068f2 <__ssputs_r+0x6e>
 8006898:	898a      	ldrh	r2, [r1, #12]
 800689a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800689e:	d026      	beq.n	80068ee <__ssputs_r+0x6a>
 80068a0:	6965      	ldr	r5, [r4, #20]
 80068a2:	6909      	ldr	r1, [r1, #16]
 80068a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80068a8:	eba3 0901 	sub.w	r9, r3, r1
 80068ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80068b0:	1c7b      	adds	r3, r7, #1
 80068b2:	444b      	add	r3, r9
 80068b4:	106d      	asrs	r5, r5, #1
 80068b6:	429d      	cmp	r5, r3
 80068b8:	bf38      	it	cc
 80068ba:	461d      	movcc	r5, r3
 80068bc:	0553      	lsls	r3, r2, #21
 80068be:	d527      	bpl.n	8006910 <__ssputs_r+0x8c>
 80068c0:	4629      	mov	r1, r5
 80068c2:	f7ff fbd7 	bl	8006074 <_malloc_r>
 80068c6:	4606      	mov	r6, r0
 80068c8:	b360      	cbz	r0, 8006924 <__ssputs_r+0xa0>
 80068ca:	6921      	ldr	r1, [r4, #16]
 80068cc:	464a      	mov	r2, r9
 80068ce:	f000 fa09 	bl	8006ce4 <memcpy>
 80068d2:	89a3      	ldrh	r3, [r4, #12]
 80068d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80068d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068dc:	81a3      	strh	r3, [r4, #12]
 80068de:	6126      	str	r6, [r4, #16]
 80068e0:	6165      	str	r5, [r4, #20]
 80068e2:	444e      	add	r6, r9
 80068e4:	eba5 0509 	sub.w	r5, r5, r9
 80068e8:	6026      	str	r6, [r4, #0]
 80068ea:	60a5      	str	r5, [r4, #8]
 80068ec:	463e      	mov	r6, r7
 80068ee:	42be      	cmp	r6, r7
 80068f0:	d900      	bls.n	80068f4 <__ssputs_r+0x70>
 80068f2:	463e      	mov	r6, r7
 80068f4:	6820      	ldr	r0, [r4, #0]
 80068f6:	4632      	mov	r2, r6
 80068f8:	4641      	mov	r1, r8
 80068fa:	f000 f9c9 	bl	8006c90 <memmove>
 80068fe:	68a3      	ldr	r3, [r4, #8]
 8006900:	1b9b      	subs	r3, r3, r6
 8006902:	60a3      	str	r3, [r4, #8]
 8006904:	6823      	ldr	r3, [r4, #0]
 8006906:	4433      	add	r3, r6
 8006908:	6023      	str	r3, [r4, #0]
 800690a:	2000      	movs	r0, #0
 800690c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006910:	462a      	mov	r2, r5
 8006912:	f000 fa3b 	bl	8006d8c <_realloc_r>
 8006916:	4606      	mov	r6, r0
 8006918:	2800      	cmp	r0, #0
 800691a:	d1e0      	bne.n	80068de <__ssputs_r+0x5a>
 800691c:	6921      	ldr	r1, [r4, #16]
 800691e:	4650      	mov	r0, sl
 8006920:	f7ff fb34 	bl	8005f8c <_free_r>
 8006924:	230c      	movs	r3, #12
 8006926:	f8ca 3000 	str.w	r3, [sl]
 800692a:	89a3      	ldrh	r3, [r4, #12]
 800692c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006930:	81a3      	strh	r3, [r4, #12]
 8006932:	f04f 30ff 	mov.w	r0, #4294967295
 8006936:	e7e9      	b.n	800690c <__ssputs_r+0x88>

08006938 <_svfiprintf_r>:
 8006938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800693c:	4698      	mov	r8, r3
 800693e:	898b      	ldrh	r3, [r1, #12]
 8006940:	061b      	lsls	r3, r3, #24
 8006942:	b09d      	sub	sp, #116	; 0x74
 8006944:	4607      	mov	r7, r0
 8006946:	460d      	mov	r5, r1
 8006948:	4614      	mov	r4, r2
 800694a:	d50e      	bpl.n	800696a <_svfiprintf_r+0x32>
 800694c:	690b      	ldr	r3, [r1, #16]
 800694e:	b963      	cbnz	r3, 800696a <_svfiprintf_r+0x32>
 8006950:	2140      	movs	r1, #64	; 0x40
 8006952:	f7ff fb8f 	bl	8006074 <_malloc_r>
 8006956:	6028      	str	r0, [r5, #0]
 8006958:	6128      	str	r0, [r5, #16]
 800695a:	b920      	cbnz	r0, 8006966 <_svfiprintf_r+0x2e>
 800695c:	230c      	movs	r3, #12
 800695e:	603b      	str	r3, [r7, #0]
 8006960:	f04f 30ff 	mov.w	r0, #4294967295
 8006964:	e0d0      	b.n	8006b08 <_svfiprintf_r+0x1d0>
 8006966:	2340      	movs	r3, #64	; 0x40
 8006968:	616b      	str	r3, [r5, #20]
 800696a:	2300      	movs	r3, #0
 800696c:	9309      	str	r3, [sp, #36]	; 0x24
 800696e:	2320      	movs	r3, #32
 8006970:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006974:	f8cd 800c 	str.w	r8, [sp, #12]
 8006978:	2330      	movs	r3, #48	; 0x30
 800697a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006b20 <_svfiprintf_r+0x1e8>
 800697e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006982:	f04f 0901 	mov.w	r9, #1
 8006986:	4623      	mov	r3, r4
 8006988:	469a      	mov	sl, r3
 800698a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800698e:	b10a      	cbz	r2, 8006994 <_svfiprintf_r+0x5c>
 8006990:	2a25      	cmp	r2, #37	; 0x25
 8006992:	d1f9      	bne.n	8006988 <_svfiprintf_r+0x50>
 8006994:	ebba 0b04 	subs.w	fp, sl, r4
 8006998:	d00b      	beq.n	80069b2 <_svfiprintf_r+0x7a>
 800699a:	465b      	mov	r3, fp
 800699c:	4622      	mov	r2, r4
 800699e:	4629      	mov	r1, r5
 80069a0:	4638      	mov	r0, r7
 80069a2:	f7ff ff6f 	bl	8006884 <__ssputs_r>
 80069a6:	3001      	adds	r0, #1
 80069a8:	f000 80a9 	beq.w	8006afe <_svfiprintf_r+0x1c6>
 80069ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069ae:	445a      	add	r2, fp
 80069b0:	9209      	str	r2, [sp, #36]	; 0x24
 80069b2:	f89a 3000 	ldrb.w	r3, [sl]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f000 80a1 	beq.w	8006afe <_svfiprintf_r+0x1c6>
 80069bc:	2300      	movs	r3, #0
 80069be:	f04f 32ff 	mov.w	r2, #4294967295
 80069c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069c6:	f10a 0a01 	add.w	sl, sl, #1
 80069ca:	9304      	str	r3, [sp, #16]
 80069cc:	9307      	str	r3, [sp, #28]
 80069ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80069d2:	931a      	str	r3, [sp, #104]	; 0x68
 80069d4:	4654      	mov	r4, sl
 80069d6:	2205      	movs	r2, #5
 80069d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069dc:	4850      	ldr	r0, [pc, #320]	; (8006b20 <_svfiprintf_r+0x1e8>)
 80069de:	f7f9 fbf7 	bl	80001d0 <memchr>
 80069e2:	9a04      	ldr	r2, [sp, #16]
 80069e4:	b9d8      	cbnz	r0, 8006a1e <_svfiprintf_r+0xe6>
 80069e6:	06d0      	lsls	r0, r2, #27
 80069e8:	bf44      	itt	mi
 80069ea:	2320      	movmi	r3, #32
 80069ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069f0:	0711      	lsls	r1, r2, #28
 80069f2:	bf44      	itt	mi
 80069f4:	232b      	movmi	r3, #43	; 0x2b
 80069f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069fa:	f89a 3000 	ldrb.w	r3, [sl]
 80069fe:	2b2a      	cmp	r3, #42	; 0x2a
 8006a00:	d015      	beq.n	8006a2e <_svfiprintf_r+0xf6>
 8006a02:	9a07      	ldr	r2, [sp, #28]
 8006a04:	4654      	mov	r4, sl
 8006a06:	2000      	movs	r0, #0
 8006a08:	f04f 0c0a 	mov.w	ip, #10
 8006a0c:	4621      	mov	r1, r4
 8006a0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a12:	3b30      	subs	r3, #48	; 0x30
 8006a14:	2b09      	cmp	r3, #9
 8006a16:	d94d      	bls.n	8006ab4 <_svfiprintf_r+0x17c>
 8006a18:	b1b0      	cbz	r0, 8006a48 <_svfiprintf_r+0x110>
 8006a1a:	9207      	str	r2, [sp, #28]
 8006a1c:	e014      	b.n	8006a48 <_svfiprintf_r+0x110>
 8006a1e:	eba0 0308 	sub.w	r3, r0, r8
 8006a22:	fa09 f303 	lsl.w	r3, r9, r3
 8006a26:	4313      	orrs	r3, r2
 8006a28:	9304      	str	r3, [sp, #16]
 8006a2a:	46a2      	mov	sl, r4
 8006a2c:	e7d2      	b.n	80069d4 <_svfiprintf_r+0x9c>
 8006a2e:	9b03      	ldr	r3, [sp, #12]
 8006a30:	1d19      	adds	r1, r3, #4
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	9103      	str	r1, [sp, #12]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	bfbb      	ittet	lt
 8006a3a:	425b      	neglt	r3, r3
 8006a3c:	f042 0202 	orrlt.w	r2, r2, #2
 8006a40:	9307      	strge	r3, [sp, #28]
 8006a42:	9307      	strlt	r3, [sp, #28]
 8006a44:	bfb8      	it	lt
 8006a46:	9204      	strlt	r2, [sp, #16]
 8006a48:	7823      	ldrb	r3, [r4, #0]
 8006a4a:	2b2e      	cmp	r3, #46	; 0x2e
 8006a4c:	d10c      	bne.n	8006a68 <_svfiprintf_r+0x130>
 8006a4e:	7863      	ldrb	r3, [r4, #1]
 8006a50:	2b2a      	cmp	r3, #42	; 0x2a
 8006a52:	d134      	bne.n	8006abe <_svfiprintf_r+0x186>
 8006a54:	9b03      	ldr	r3, [sp, #12]
 8006a56:	1d1a      	adds	r2, r3, #4
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	9203      	str	r2, [sp, #12]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	bfb8      	it	lt
 8006a60:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a64:	3402      	adds	r4, #2
 8006a66:	9305      	str	r3, [sp, #20]
 8006a68:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006b30 <_svfiprintf_r+0x1f8>
 8006a6c:	7821      	ldrb	r1, [r4, #0]
 8006a6e:	2203      	movs	r2, #3
 8006a70:	4650      	mov	r0, sl
 8006a72:	f7f9 fbad 	bl	80001d0 <memchr>
 8006a76:	b138      	cbz	r0, 8006a88 <_svfiprintf_r+0x150>
 8006a78:	9b04      	ldr	r3, [sp, #16]
 8006a7a:	eba0 000a 	sub.w	r0, r0, sl
 8006a7e:	2240      	movs	r2, #64	; 0x40
 8006a80:	4082      	lsls	r2, r0
 8006a82:	4313      	orrs	r3, r2
 8006a84:	3401      	adds	r4, #1
 8006a86:	9304      	str	r3, [sp, #16]
 8006a88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a8c:	4825      	ldr	r0, [pc, #148]	; (8006b24 <_svfiprintf_r+0x1ec>)
 8006a8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a92:	2206      	movs	r2, #6
 8006a94:	f7f9 fb9c 	bl	80001d0 <memchr>
 8006a98:	2800      	cmp	r0, #0
 8006a9a:	d038      	beq.n	8006b0e <_svfiprintf_r+0x1d6>
 8006a9c:	4b22      	ldr	r3, [pc, #136]	; (8006b28 <_svfiprintf_r+0x1f0>)
 8006a9e:	bb1b      	cbnz	r3, 8006ae8 <_svfiprintf_r+0x1b0>
 8006aa0:	9b03      	ldr	r3, [sp, #12]
 8006aa2:	3307      	adds	r3, #7
 8006aa4:	f023 0307 	bic.w	r3, r3, #7
 8006aa8:	3308      	adds	r3, #8
 8006aaa:	9303      	str	r3, [sp, #12]
 8006aac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aae:	4433      	add	r3, r6
 8006ab0:	9309      	str	r3, [sp, #36]	; 0x24
 8006ab2:	e768      	b.n	8006986 <_svfiprintf_r+0x4e>
 8006ab4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ab8:	460c      	mov	r4, r1
 8006aba:	2001      	movs	r0, #1
 8006abc:	e7a6      	b.n	8006a0c <_svfiprintf_r+0xd4>
 8006abe:	2300      	movs	r3, #0
 8006ac0:	3401      	adds	r4, #1
 8006ac2:	9305      	str	r3, [sp, #20]
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	f04f 0c0a 	mov.w	ip, #10
 8006aca:	4620      	mov	r0, r4
 8006acc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ad0:	3a30      	subs	r2, #48	; 0x30
 8006ad2:	2a09      	cmp	r2, #9
 8006ad4:	d903      	bls.n	8006ade <_svfiprintf_r+0x1a6>
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d0c6      	beq.n	8006a68 <_svfiprintf_r+0x130>
 8006ada:	9105      	str	r1, [sp, #20]
 8006adc:	e7c4      	b.n	8006a68 <_svfiprintf_r+0x130>
 8006ade:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ae2:	4604      	mov	r4, r0
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e7f0      	b.n	8006aca <_svfiprintf_r+0x192>
 8006ae8:	ab03      	add	r3, sp, #12
 8006aea:	9300      	str	r3, [sp, #0]
 8006aec:	462a      	mov	r2, r5
 8006aee:	4b0f      	ldr	r3, [pc, #60]	; (8006b2c <_svfiprintf_r+0x1f4>)
 8006af0:	a904      	add	r1, sp, #16
 8006af2:	4638      	mov	r0, r7
 8006af4:	f7fd fe62 	bl	80047bc <_printf_float>
 8006af8:	1c42      	adds	r2, r0, #1
 8006afa:	4606      	mov	r6, r0
 8006afc:	d1d6      	bne.n	8006aac <_svfiprintf_r+0x174>
 8006afe:	89ab      	ldrh	r3, [r5, #12]
 8006b00:	065b      	lsls	r3, r3, #25
 8006b02:	f53f af2d 	bmi.w	8006960 <_svfiprintf_r+0x28>
 8006b06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b08:	b01d      	add	sp, #116	; 0x74
 8006b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b0e:	ab03      	add	r3, sp, #12
 8006b10:	9300      	str	r3, [sp, #0]
 8006b12:	462a      	mov	r2, r5
 8006b14:	4b05      	ldr	r3, [pc, #20]	; (8006b2c <_svfiprintf_r+0x1f4>)
 8006b16:	a904      	add	r1, sp, #16
 8006b18:	4638      	mov	r0, r7
 8006b1a:	f7fe f8f3 	bl	8004d04 <_printf_i>
 8006b1e:	e7eb      	b.n	8006af8 <_svfiprintf_r+0x1c0>
 8006b20:	0800764c 	.word	0x0800764c
 8006b24:	08007656 	.word	0x08007656
 8006b28:	080047bd 	.word	0x080047bd
 8006b2c:	08006885 	.word	0x08006885
 8006b30:	08007652 	.word	0x08007652

08006b34 <__sflush_r>:
 8006b34:	898a      	ldrh	r2, [r1, #12]
 8006b36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b3a:	4605      	mov	r5, r0
 8006b3c:	0710      	lsls	r0, r2, #28
 8006b3e:	460c      	mov	r4, r1
 8006b40:	d458      	bmi.n	8006bf4 <__sflush_r+0xc0>
 8006b42:	684b      	ldr	r3, [r1, #4]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	dc05      	bgt.n	8006b54 <__sflush_r+0x20>
 8006b48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	dc02      	bgt.n	8006b54 <__sflush_r+0x20>
 8006b4e:	2000      	movs	r0, #0
 8006b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b56:	2e00      	cmp	r6, #0
 8006b58:	d0f9      	beq.n	8006b4e <__sflush_r+0x1a>
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b60:	682f      	ldr	r7, [r5, #0]
 8006b62:	6a21      	ldr	r1, [r4, #32]
 8006b64:	602b      	str	r3, [r5, #0]
 8006b66:	d032      	beq.n	8006bce <__sflush_r+0x9a>
 8006b68:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b6a:	89a3      	ldrh	r3, [r4, #12]
 8006b6c:	075a      	lsls	r2, r3, #29
 8006b6e:	d505      	bpl.n	8006b7c <__sflush_r+0x48>
 8006b70:	6863      	ldr	r3, [r4, #4]
 8006b72:	1ac0      	subs	r0, r0, r3
 8006b74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b76:	b10b      	cbz	r3, 8006b7c <__sflush_r+0x48>
 8006b78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b7a:	1ac0      	subs	r0, r0, r3
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	4602      	mov	r2, r0
 8006b80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b82:	6a21      	ldr	r1, [r4, #32]
 8006b84:	4628      	mov	r0, r5
 8006b86:	47b0      	blx	r6
 8006b88:	1c43      	adds	r3, r0, #1
 8006b8a:	89a3      	ldrh	r3, [r4, #12]
 8006b8c:	d106      	bne.n	8006b9c <__sflush_r+0x68>
 8006b8e:	6829      	ldr	r1, [r5, #0]
 8006b90:	291d      	cmp	r1, #29
 8006b92:	d82b      	bhi.n	8006bec <__sflush_r+0xb8>
 8006b94:	4a29      	ldr	r2, [pc, #164]	; (8006c3c <__sflush_r+0x108>)
 8006b96:	410a      	asrs	r2, r1
 8006b98:	07d6      	lsls	r6, r2, #31
 8006b9a:	d427      	bmi.n	8006bec <__sflush_r+0xb8>
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	6062      	str	r2, [r4, #4]
 8006ba0:	04d9      	lsls	r1, r3, #19
 8006ba2:	6922      	ldr	r2, [r4, #16]
 8006ba4:	6022      	str	r2, [r4, #0]
 8006ba6:	d504      	bpl.n	8006bb2 <__sflush_r+0x7e>
 8006ba8:	1c42      	adds	r2, r0, #1
 8006baa:	d101      	bne.n	8006bb0 <__sflush_r+0x7c>
 8006bac:	682b      	ldr	r3, [r5, #0]
 8006bae:	b903      	cbnz	r3, 8006bb2 <__sflush_r+0x7e>
 8006bb0:	6560      	str	r0, [r4, #84]	; 0x54
 8006bb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bb4:	602f      	str	r7, [r5, #0]
 8006bb6:	2900      	cmp	r1, #0
 8006bb8:	d0c9      	beq.n	8006b4e <__sflush_r+0x1a>
 8006bba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bbe:	4299      	cmp	r1, r3
 8006bc0:	d002      	beq.n	8006bc8 <__sflush_r+0x94>
 8006bc2:	4628      	mov	r0, r5
 8006bc4:	f7ff f9e2 	bl	8005f8c <_free_r>
 8006bc8:	2000      	movs	r0, #0
 8006bca:	6360      	str	r0, [r4, #52]	; 0x34
 8006bcc:	e7c0      	b.n	8006b50 <__sflush_r+0x1c>
 8006bce:	2301      	movs	r3, #1
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	47b0      	blx	r6
 8006bd4:	1c41      	adds	r1, r0, #1
 8006bd6:	d1c8      	bne.n	8006b6a <__sflush_r+0x36>
 8006bd8:	682b      	ldr	r3, [r5, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d0c5      	beq.n	8006b6a <__sflush_r+0x36>
 8006bde:	2b1d      	cmp	r3, #29
 8006be0:	d001      	beq.n	8006be6 <__sflush_r+0xb2>
 8006be2:	2b16      	cmp	r3, #22
 8006be4:	d101      	bne.n	8006bea <__sflush_r+0xb6>
 8006be6:	602f      	str	r7, [r5, #0]
 8006be8:	e7b1      	b.n	8006b4e <__sflush_r+0x1a>
 8006bea:	89a3      	ldrh	r3, [r4, #12]
 8006bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bf0:	81a3      	strh	r3, [r4, #12]
 8006bf2:	e7ad      	b.n	8006b50 <__sflush_r+0x1c>
 8006bf4:	690f      	ldr	r7, [r1, #16]
 8006bf6:	2f00      	cmp	r7, #0
 8006bf8:	d0a9      	beq.n	8006b4e <__sflush_r+0x1a>
 8006bfa:	0793      	lsls	r3, r2, #30
 8006bfc:	680e      	ldr	r6, [r1, #0]
 8006bfe:	bf08      	it	eq
 8006c00:	694b      	ldreq	r3, [r1, #20]
 8006c02:	600f      	str	r7, [r1, #0]
 8006c04:	bf18      	it	ne
 8006c06:	2300      	movne	r3, #0
 8006c08:	eba6 0807 	sub.w	r8, r6, r7
 8006c0c:	608b      	str	r3, [r1, #8]
 8006c0e:	f1b8 0f00 	cmp.w	r8, #0
 8006c12:	dd9c      	ble.n	8006b4e <__sflush_r+0x1a>
 8006c14:	6a21      	ldr	r1, [r4, #32]
 8006c16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006c18:	4643      	mov	r3, r8
 8006c1a:	463a      	mov	r2, r7
 8006c1c:	4628      	mov	r0, r5
 8006c1e:	47b0      	blx	r6
 8006c20:	2800      	cmp	r0, #0
 8006c22:	dc06      	bgt.n	8006c32 <__sflush_r+0xfe>
 8006c24:	89a3      	ldrh	r3, [r4, #12]
 8006c26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c2a:	81a3      	strh	r3, [r4, #12]
 8006c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c30:	e78e      	b.n	8006b50 <__sflush_r+0x1c>
 8006c32:	4407      	add	r7, r0
 8006c34:	eba8 0800 	sub.w	r8, r8, r0
 8006c38:	e7e9      	b.n	8006c0e <__sflush_r+0xda>
 8006c3a:	bf00      	nop
 8006c3c:	dfbffffe 	.word	0xdfbffffe

08006c40 <_fflush_r>:
 8006c40:	b538      	push	{r3, r4, r5, lr}
 8006c42:	690b      	ldr	r3, [r1, #16]
 8006c44:	4605      	mov	r5, r0
 8006c46:	460c      	mov	r4, r1
 8006c48:	b913      	cbnz	r3, 8006c50 <_fflush_r+0x10>
 8006c4a:	2500      	movs	r5, #0
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	bd38      	pop	{r3, r4, r5, pc}
 8006c50:	b118      	cbz	r0, 8006c5a <_fflush_r+0x1a>
 8006c52:	6a03      	ldr	r3, [r0, #32]
 8006c54:	b90b      	cbnz	r3, 8006c5a <_fflush_r+0x1a>
 8006c56:	f7fe fa03 	bl	8005060 <__sinit>
 8006c5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d0f3      	beq.n	8006c4a <_fflush_r+0xa>
 8006c62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c64:	07d0      	lsls	r0, r2, #31
 8006c66:	d404      	bmi.n	8006c72 <_fflush_r+0x32>
 8006c68:	0599      	lsls	r1, r3, #22
 8006c6a:	d402      	bmi.n	8006c72 <_fflush_r+0x32>
 8006c6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c6e:	f7fe fb0e 	bl	800528e <__retarget_lock_acquire_recursive>
 8006c72:	4628      	mov	r0, r5
 8006c74:	4621      	mov	r1, r4
 8006c76:	f7ff ff5d 	bl	8006b34 <__sflush_r>
 8006c7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c7c:	07da      	lsls	r2, r3, #31
 8006c7e:	4605      	mov	r5, r0
 8006c80:	d4e4      	bmi.n	8006c4c <_fflush_r+0xc>
 8006c82:	89a3      	ldrh	r3, [r4, #12]
 8006c84:	059b      	lsls	r3, r3, #22
 8006c86:	d4e1      	bmi.n	8006c4c <_fflush_r+0xc>
 8006c88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c8a:	f7fe fb01 	bl	8005290 <__retarget_lock_release_recursive>
 8006c8e:	e7dd      	b.n	8006c4c <_fflush_r+0xc>

08006c90 <memmove>:
 8006c90:	4288      	cmp	r0, r1
 8006c92:	b510      	push	{r4, lr}
 8006c94:	eb01 0402 	add.w	r4, r1, r2
 8006c98:	d902      	bls.n	8006ca0 <memmove+0x10>
 8006c9a:	4284      	cmp	r4, r0
 8006c9c:	4623      	mov	r3, r4
 8006c9e:	d807      	bhi.n	8006cb0 <memmove+0x20>
 8006ca0:	1e43      	subs	r3, r0, #1
 8006ca2:	42a1      	cmp	r1, r4
 8006ca4:	d008      	beq.n	8006cb8 <memmove+0x28>
 8006ca6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006caa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006cae:	e7f8      	b.n	8006ca2 <memmove+0x12>
 8006cb0:	4402      	add	r2, r0
 8006cb2:	4601      	mov	r1, r0
 8006cb4:	428a      	cmp	r2, r1
 8006cb6:	d100      	bne.n	8006cba <memmove+0x2a>
 8006cb8:	bd10      	pop	{r4, pc}
 8006cba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006cbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006cc2:	e7f7      	b.n	8006cb4 <memmove+0x24>

08006cc4 <_sbrk_r>:
 8006cc4:	b538      	push	{r3, r4, r5, lr}
 8006cc6:	4d06      	ldr	r5, [pc, #24]	; (8006ce0 <_sbrk_r+0x1c>)
 8006cc8:	2300      	movs	r3, #0
 8006cca:	4604      	mov	r4, r0
 8006ccc:	4608      	mov	r0, r1
 8006cce:	602b      	str	r3, [r5, #0]
 8006cd0:	f7fa fa6a 	bl	80011a8 <_sbrk>
 8006cd4:	1c43      	adds	r3, r0, #1
 8006cd6:	d102      	bne.n	8006cde <_sbrk_r+0x1a>
 8006cd8:	682b      	ldr	r3, [r5, #0]
 8006cda:	b103      	cbz	r3, 8006cde <_sbrk_r+0x1a>
 8006cdc:	6023      	str	r3, [r4, #0]
 8006cde:	bd38      	pop	{r3, r4, r5, pc}
 8006ce0:	20000c88 	.word	0x20000c88

08006ce4 <memcpy>:
 8006ce4:	440a      	add	r2, r1
 8006ce6:	4291      	cmp	r1, r2
 8006ce8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006cec:	d100      	bne.n	8006cf0 <memcpy+0xc>
 8006cee:	4770      	bx	lr
 8006cf0:	b510      	push	{r4, lr}
 8006cf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cfa:	4291      	cmp	r1, r2
 8006cfc:	d1f9      	bne.n	8006cf2 <memcpy+0xe>
 8006cfe:	bd10      	pop	{r4, pc}

08006d00 <__assert_func>:
 8006d00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006d02:	4614      	mov	r4, r2
 8006d04:	461a      	mov	r2, r3
 8006d06:	4b09      	ldr	r3, [pc, #36]	; (8006d2c <__assert_func+0x2c>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4605      	mov	r5, r0
 8006d0c:	68d8      	ldr	r0, [r3, #12]
 8006d0e:	b14c      	cbz	r4, 8006d24 <__assert_func+0x24>
 8006d10:	4b07      	ldr	r3, [pc, #28]	; (8006d30 <__assert_func+0x30>)
 8006d12:	9100      	str	r1, [sp, #0]
 8006d14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006d18:	4906      	ldr	r1, [pc, #24]	; (8006d34 <__assert_func+0x34>)
 8006d1a:	462b      	mov	r3, r5
 8006d1c:	f000 f872 	bl	8006e04 <fiprintf>
 8006d20:	f000 f882 	bl	8006e28 <abort>
 8006d24:	4b04      	ldr	r3, [pc, #16]	; (8006d38 <__assert_func+0x38>)
 8006d26:	461c      	mov	r4, r3
 8006d28:	e7f3      	b.n	8006d12 <__assert_func+0x12>
 8006d2a:	bf00      	nop
 8006d2c:	2000015c 	.word	0x2000015c
 8006d30:	08007667 	.word	0x08007667
 8006d34:	08007674 	.word	0x08007674
 8006d38:	080076a2 	.word	0x080076a2

08006d3c <_calloc_r>:
 8006d3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d3e:	fba1 2402 	umull	r2, r4, r1, r2
 8006d42:	b94c      	cbnz	r4, 8006d58 <_calloc_r+0x1c>
 8006d44:	4611      	mov	r1, r2
 8006d46:	9201      	str	r2, [sp, #4]
 8006d48:	f7ff f994 	bl	8006074 <_malloc_r>
 8006d4c:	9a01      	ldr	r2, [sp, #4]
 8006d4e:	4605      	mov	r5, r0
 8006d50:	b930      	cbnz	r0, 8006d60 <_calloc_r+0x24>
 8006d52:	4628      	mov	r0, r5
 8006d54:	b003      	add	sp, #12
 8006d56:	bd30      	pop	{r4, r5, pc}
 8006d58:	220c      	movs	r2, #12
 8006d5a:	6002      	str	r2, [r0, #0]
 8006d5c:	2500      	movs	r5, #0
 8006d5e:	e7f8      	b.n	8006d52 <_calloc_r+0x16>
 8006d60:	4621      	mov	r1, r4
 8006d62:	f7fe fa16 	bl	8005192 <memset>
 8006d66:	e7f4      	b.n	8006d52 <_calloc_r+0x16>

08006d68 <__ascii_mbtowc>:
 8006d68:	b082      	sub	sp, #8
 8006d6a:	b901      	cbnz	r1, 8006d6e <__ascii_mbtowc+0x6>
 8006d6c:	a901      	add	r1, sp, #4
 8006d6e:	b142      	cbz	r2, 8006d82 <__ascii_mbtowc+0x1a>
 8006d70:	b14b      	cbz	r3, 8006d86 <__ascii_mbtowc+0x1e>
 8006d72:	7813      	ldrb	r3, [r2, #0]
 8006d74:	600b      	str	r3, [r1, #0]
 8006d76:	7812      	ldrb	r2, [r2, #0]
 8006d78:	1e10      	subs	r0, r2, #0
 8006d7a:	bf18      	it	ne
 8006d7c:	2001      	movne	r0, #1
 8006d7e:	b002      	add	sp, #8
 8006d80:	4770      	bx	lr
 8006d82:	4610      	mov	r0, r2
 8006d84:	e7fb      	b.n	8006d7e <__ascii_mbtowc+0x16>
 8006d86:	f06f 0001 	mvn.w	r0, #1
 8006d8a:	e7f8      	b.n	8006d7e <__ascii_mbtowc+0x16>

08006d8c <_realloc_r>:
 8006d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d90:	4680      	mov	r8, r0
 8006d92:	4614      	mov	r4, r2
 8006d94:	460e      	mov	r6, r1
 8006d96:	b921      	cbnz	r1, 8006da2 <_realloc_r+0x16>
 8006d98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d9c:	4611      	mov	r1, r2
 8006d9e:	f7ff b969 	b.w	8006074 <_malloc_r>
 8006da2:	b92a      	cbnz	r2, 8006db0 <_realloc_r+0x24>
 8006da4:	f7ff f8f2 	bl	8005f8c <_free_r>
 8006da8:	4625      	mov	r5, r4
 8006daa:	4628      	mov	r0, r5
 8006dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006db0:	f000 f841 	bl	8006e36 <_malloc_usable_size_r>
 8006db4:	4284      	cmp	r4, r0
 8006db6:	4607      	mov	r7, r0
 8006db8:	d802      	bhi.n	8006dc0 <_realloc_r+0x34>
 8006dba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006dbe:	d812      	bhi.n	8006de6 <_realloc_r+0x5a>
 8006dc0:	4621      	mov	r1, r4
 8006dc2:	4640      	mov	r0, r8
 8006dc4:	f7ff f956 	bl	8006074 <_malloc_r>
 8006dc8:	4605      	mov	r5, r0
 8006dca:	2800      	cmp	r0, #0
 8006dcc:	d0ed      	beq.n	8006daa <_realloc_r+0x1e>
 8006dce:	42bc      	cmp	r4, r7
 8006dd0:	4622      	mov	r2, r4
 8006dd2:	4631      	mov	r1, r6
 8006dd4:	bf28      	it	cs
 8006dd6:	463a      	movcs	r2, r7
 8006dd8:	f7ff ff84 	bl	8006ce4 <memcpy>
 8006ddc:	4631      	mov	r1, r6
 8006dde:	4640      	mov	r0, r8
 8006de0:	f7ff f8d4 	bl	8005f8c <_free_r>
 8006de4:	e7e1      	b.n	8006daa <_realloc_r+0x1e>
 8006de6:	4635      	mov	r5, r6
 8006de8:	e7df      	b.n	8006daa <_realloc_r+0x1e>

08006dea <__ascii_wctomb>:
 8006dea:	b149      	cbz	r1, 8006e00 <__ascii_wctomb+0x16>
 8006dec:	2aff      	cmp	r2, #255	; 0xff
 8006dee:	bf85      	ittet	hi
 8006df0:	238a      	movhi	r3, #138	; 0x8a
 8006df2:	6003      	strhi	r3, [r0, #0]
 8006df4:	700a      	strbls	r2, [r1, #0]
 8006df6:	f04f 30ff 	movhi.w	r0, #4294967295
 8006dfa:	bf98      	it	ls
 8006dfc:	2001      	movls	r0, #1
 8006dfe:	4770      	bx	lr
 8006e00:	4608      	mov	r0, r1
 8006e02:	4770      	bx	lr

08006e04 <fiprintf>:
 8006e04:	b40e      	push	{r1, r2, r3}
 8006e06:	b503      	push	{r0, r1, lr}
 8006e08:	4601      	mov	r1, r0
 8006e0a:	ab03      	add	r3, sp, #12
 8006e0c:	4805      	ldr	r0, [pc, #20]	; (8006e24 <fiprintf+0x20>)
 8006e0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e12:	6800      	ldr	r0, [r0, #0]
 8006e14:	9301      	str	r3, [sp, #4]
 8006e16:	f000 f83f 	bl	8006e98 <_vfiprintf_r>
 8006e1a:	b002      	add	sp, #8
 8006e1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e20:	b003      	add	sp, #12
 8006e22:	4770      	bx	lr
 8006e24:	2000015c 	.word	0x2000015c

08006e28 <abort>:
 8006e28:	b508      	push	{r3, lr}
 8006e2a:	2006      	movs	r0, #6
 8006e2c:	f000 fa0c 	bl	8007248 <raise>
 8006e30:	2001      	movs	r0, #1
 8006e32:	f7fa f989 	bl	8001148 <_exit>

08006e36 <_malloc_usable_size_r>:
 8006e36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e3a:	1f18      	subs	r0, r3, #4
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	bfbc      	itt	lt
 8006e40:	580b      	ldrlt	r3, [r1, r0]
 8006e42:	18c0      	addlt	r0, r0, r3
 8006e44:	4770      	bx	lr

08006e46 <__sfputc_r>:
 8006e46:	6893      	ldr	r3, [r2, #8]
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	b410      	push	{r4}
 8006e4e:	6093      	str	r3, [r2, #8]
 8006e50:	da08      	bge.n	8006e64 <__sfputc_r+0x1e>
 8006e52:	6994      	ldr	r4, [r2, #24]
 8006e54:	42a3      	cmp	r3, r4
 8006e56:	db01      	blt.n	8006e5c <__sfputc_r+0x16>
 8006e58:	290a      	cmp	r1, #10
 8006e5a:	d103      	bne.n	8006e64 <__sfputc_r+0x1e>
 8006e5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e60:	f000 b934 	b.w	80070cc <__swbuf_r>
 8006e64:	6813      	ldr	r3, [r2, #0]
 8006e66:	1c58      	adds	r0, r3, #1
 8006e68:	6010      	str	r0, [r2, #0]
 8006e6a:	7019      	strb	r1, [r3, #0]
 8006e6c:	4608      	mov	r0, r1
 8006e6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <__sfputs_r>:
 8006e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e76:	4606      	mov	r6, r0
 8006e78:	460f      	mov	r7, r1
 8006e7a:	4614      	mov	r4, r2
 8006e7c:	18d5      	adds	r5, r2, r3
 8006e7e:	42ac      	cmp	r4, r5
 8006e80:	d101      	bne.n	8006e86 <__sfputs_r+0x12>
 8006e82:	2000      	movs	r0, #0
 8006e84:	e007      	b.n	8006e96 <__sfputs_r+0x22>
 8006e86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e8a:	463a      	mov	r2, r7
 8006e8c:	4630      	mov	r0, r6
 8006e8e:	f7ff ffda 	bl	8006e46 <__sfputc_r>
 8006e92:	1c43      	adds	r3, r0, #1
 8006e94:	d1f3      	bne.n	8006e7e <__sfputs_r+0xa>
 8006e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006e98 <_vfiprintf_r>:
 8006e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e9c:	460d      	mov	r5, r1
 8006e9e:	b09d      	sub	sp, #116	; 0x74
 8006ea0:	4614      	mov	r4, r2
 8006ea2:	4698      	mov	r8, r3
 8006ea4:	4606      	mov	r6, r0
 8006ea6:	b118      	cbz	r0, 8006eb0 <_vfiprintf_r+0x18>
 8006ea8:	6a03      	ldr	r3, [r0, #32]
 8006eaa:	b90b      	cbnz	r3, 8006eb0 <_vfiprintf_r+0x18>
 8006eac:	f7fe f8d8 	bl	8005060 <__sinit>
 8006eb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006eb2:	07d9      	lsls	r1, r3, #31
 8006eb4:	d405      	bmi.n	8006ec2 <_vfiprintf_r+0x2a>
 8006eb6:	89ab      	ldrh	r3, [r5, #12]
 8006eb8:	059a      	lsls	r2, r3, #22
 8006eba:	d402      	bmi.n	8006ec2 <_vfiprintf_r+0x2a>
 8006ebc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ebe:	f7fe f9e6 	bl	800528e <__retarget_lock_acquire_recursive>
 8006ec2:	89ab      	ldrh	r3, [r5, #12]
 8006ec4:	071b      	lsls	r3, r3, #28
 8006ec6:	d501      	bpl.n	8006ecc <_vfiprintf_r+0x34>
 8006ec8:	692b      	ldr	r3, [r5, #16]
 8006eca:	b99b      	cbnz	r3, 8006ef4 <_vfiprintf_r+0x5c>
 8006ecc:	4629      	mov	r1, r5
 8006ece:	4630      	mov	r0, r6
 8006ed0:	f000 f93a 	bl	8007148 <__swsetup_r>
 8006ed4:	b170      	cbz	r0, 8006ef4 <_vfiprintf_r+0x5c>
 8006ed6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ed8:	07dc      	lsls	r4, r3, #31
 8006eda:	d504      	bpl.n	8006ee6 <_vfiprintf_r+0x4e>
 8006edc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ee0:	b01d      	add	sp, #116	; 0x74
 8006ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ee6:	89ab      	ldrh	r3, [r5, #12]
 8006ee8:	0598      	lsls	r0, r3, #22
 8006eea:	d4f7      	bmi.n	8006edc <_vfiprintf_r+0x44>
 8006eec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006eee:	f7fe f9cf 	bl	8005290 <__retarget_lock_release_recursive>
 8006ef2:	e7f3      	b.n	8006edc <_vfiprintf_r+0x44>
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	9309      	str	r3, [sp, #36]	; 0x24
 8006ef8:	2320      	movs	r3, #32
 8006efa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006efe:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f02:	2330      	movs	r3, #48	; 0x30
 8006f04:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80070b8 <_vfiprintf_r+0x220>
 8006f08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f0c:	f04f 0901 	mov.w	r9, #1
 8006f10:	4623      	mov	r3, r4
 8006f12:	469a      	mov	sl, r3
 8006f14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f18:	b10a      	cbz	r2, 8006f1e <_vfiprintf_r+0x86>
 8006f1a:	2a25      	cmp	r2, #37	; 0x25
 8006f1c:	d1f9      	bne.n	8006f12 <_vfiprintf_r+0x7a>
 8006f1e:	ebba 0b04 	subs.w	fp, sl, r4
 8006f22:	d00b      	beq.n	8006f3c <_vfiprintf_r+0xa4>
 8006f24:	465b      	mov	r3, fp
 8006f26:	4622      	mov	r2, r4
 8006f28:	4629      	mov	r1, r5
 8006f2a:	4630      	mov	r0, r6
 8006f2c:	f7ff ffa2 	bl	8006e74 <__sfputs_r>
 8006f30:	3001      	adds	r0, #1
 8006f32:	f000 80a9 	beq.w	8007088 <_vfiprintf_r+0x1f0>
 8006f36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f38:	445a      	add	r2, fp
 8006f3a:	9209      	str	r2, [sp, #36]	; 0x24
 8006f3c:	f89a 3000 	ldrb.w	r3, [sl]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	f000 80a1 	beq.w	8007088 <_vfiprintf_r+0x1f0>
 8006f46:	2300      	movs	r3, #0
 8006f48:	f04f 32ff 	mov.w	r2, #4294967295
 8006f4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f50:	f10a 0a01 	add.w	sl, sl, #1
 8006f54:	9304      	str	r3, [sp, #16]
 8006f56:	9307      	str	r3, [sp, #28]
 8006f58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f5c:	931a      	str	r3, [sp, #104]	; 0x68
 8006f5e:	4654      	mov	r4, sl
 8006f60:	2205      	movs	r2, #5
 8006f62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f66:	4854      	ldr	r0, [pc, #336]	; (80070b8 <_vfiprintf_r+0x220>)
 8006f68:	f7f9 f932 	bl	80001d0 <memchr>
 8006f6c:	9a04      	ldr	r2, [sp, #16]
 8006f6e:	b9d8      	cbnz	r0, 8006fa8 <_vfiprintf_r+0x110>
 8006f70:	06d1      	lsls	r1, r2, #27
 8006f72:	bf44      	itt	mi
 8006f74:	2320      	movmi	r3, #32
 8006f76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f7a:	0713      	lsls	r3, r2, #28
 8006f7c:	bf44      	itt	mi
 8006f7e:	232b      	movmi	r3, #43	; 0x2b
 8006f80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f84:	f89a 3000 	ldrb.w	r3, [sl]
 8006f88:	2b2a      	cmp	r3, #42	; 0x2a
 8006f8a:	d015      	beq.n	8006fb8 <_vfiprintf_r+0x120>
 8006f8c:	9a07      	ldr	r2, [sp, #28]
 8006f8e:	4654      	mov	r4, sl
 8006f90:	2000      	movs	r0, #0
 8006f92:	f04f 0c0a 	mov.w	ip, #10
 8006f96:	4621      	mov	r1, r4
 8006f98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f9c:	3b30      	subs	r3, #48	; 0x30
 8006f9e:	2b09      	cmp	r3, #9
 8006fa0:	d94d      	bls.n	800703e <_vfiprintf_r+0x1a6>
 8006fa2:	b1b0      	cbz	r0, 8006fd2 <_vfiprintf_r+0x13a>
 8006fa4:	9207      	str	r2, [sp, #28]
 8006fa6:	e014      	b.n	8006fd2 <_vfiprintf_r+0x13a>
 8006fa8:	eba0 0308 	sub.w	r3, r0, r8
 8006fac:	fa09 f303 	lsl.w	r3, r9, r3
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	9304      	str	r3, [sp, #16]
 8006fb4:	46a2      	mov	sl, r4
 8006fb6:	e7d2      	b.n	8006f5e <_vfiprintf_r+0xc6>
 8006fb8:	9b03      	ldr	r3, [sp, #12]
 8006fba:	1d19      	adds	r1, r3, #4
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	9103      	str	r1, [sp, #12]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	bfbb      	ittet	lt
 8006fc4:	425b      	neglt	r3, r3
 8006fc6:	f042 0202 	orrlt.w	r2, r2, #2
 8006fca:	9307      	strge	r3, [sp, #28]
 8006fcc:	9307      	strlt	r3, [sp, #28]
 8006fce:	bfb8      	it	lt
 8006fd0:	9204      	strlt	r2, [sp, #16]
 8006fd2:	7823      	ldrb	r3, [r4, #0]
 8006fd4:	2b2e      	cmp	r3, #46	; 0x2e
 8006fd6:	d10c      	bne.n	8006ff2 <_vfiprintf_r+0x15a>
 8006fd8:	7863      	ldrb	r3, [r4, #1]
 8006fda:	2b2a      	cmp	r3, #42	; 0x2a
 8006fdc:	d134      	bne.n	8007048 <_vfiprintf_r+0x1b0>
 8006fde:	9b03      	ldr	r3, [sp, #12]
 8006fe0:	1d1a      	adds	r2, r3, #4
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	9203      	str	r2, [sp, #12]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	bfb8      	it	lt
 8006fea:	f04f 33ff 	movlt.w	r3, #4294967295
 8006fee:	3402      	adds	r4, #2
 8006ff0:	9305      	str	r3, [sp, #20]
 8006ff2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80070c8 <_vfiprintf_r+0x230>
 8006ff6:	7821      	ldrb	r1, [r4, #0]
 8006ff8:	2203      	movs	r2, #3
 8006ffa:	4650      	mov	r0, sl
 8006ffc:	f7f9 f8e8 	bl	80001d0 <memchr>
 8007000:	b138      	cbz	r0, 8007012 <_vfiprintf_r+0x17a>
 8007002:	9b04      	ldr	r3, [sp, #16]
 8007004:	eba0 000a 	sub.w	r0, r0, sl
 8007008:	2240      	movs	r2, #64	; 0x40
 800700a:	4082      	lsls	r2, r0
 800700c:	4313      	orrs	r3, r2
 800700e:	3401      	adds	r4, #1
 8007010:	9304      	str	r3, [sp, #16]
 8007012:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007016:	4829      	ldr	r0, [pc, #164]	; (80070bc <_vfiprintf_r+0x224>)
 8007018:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800701c:	2206      	movs	r2, #6
 800701e:	f7f9 f8d7 	bl	80001d0 <memchr>
 8007022:	2800      	cmp	r0, #0
 8007024:	d03f      	beq.n	80070a6 <_vfiprintf_r+0x20e>
 8007026:	4b26      	ldr	r3, [pc, #152]	; (80070c0 <_vfiprintf_r+0x228>)
 8007028:	bb1b      	cbnz	r3, 8007072 <_vfiprintf_r+0x1da>
 800702a:	9b03      	ldr	r3, [sp, #12]
 800702c:	3307      	adds	r3, #7
 800702e:	f023 0307 	bic.w	r3, r3, #7
 8007032:	3308      	adds	r3, #8
 8007034:	9303      	str	r3, [sp, #12]
 8007036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007038:	443b      	add	r3, r7
 800703a:	9309      	str	r3, [sp, #36]	; 0x24
 800703c:	e768      	b.n	8006f10 <_vfiprintf_r+0x78>
 800703e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007042:	460c      	mov	r4, r1
 8007044:	2001      	movs	r0, #1
 8007046:	e7a6      	b.n	8006f96 <_vfiprintf_r+0xfe>
 8007048:	2300      	movs	r3, #0
 800704a:	3401      	adds	r4, #1
 800704c:	9305      	str	r3, [sp, #20]
 800704e:	4619      	mov	r1, r3
 8007050:	f04f 0c0a 	mov.w	ip, #10
 8007054:	4620      	mov	r0, r4
 8007056:	f810 2b01 	ldrb.w	r2, [r0], #1
 800705a:	3a30      	subs	r2, #48	; 0x30
 800705c:	2a09      	cmp	r2, #9
 800705e:	d903      	bls.n	8007068 <_vfiprintf_r+0x1d0>
 8007060:	2b00      	cmp	r3, #0
 8007062:	d0c6      	beq.n	8006ff2 <_vfiprintf_r+0x15a>
 8007064:	9105      	str	r1, [sp, #20]
 8007066:	e7c4      	b.n	8006ff2 <_vfiprintf_r+0x15a>
 8007068:	fb0c 2101 	mla	r1, ip, r1, r2
 800706c:	4604      	mov	r4, r0
 800706e:	2301      	movs	r3, #1
 8007070:	e7f0      	b.n	8007054 <_vfiprintf_r+0x1bc>
 8007072:	ab03      	add	r3, sp, #12
 8007074:	9300      	str	r3, [sp, #0]
 8007076:	462a      	mov	r2, r5
 8007078:	4b12      	ldr	r3, [pc, #72]	; (80070c4 <_vfiprintf_r+0x22c>)
 800707a:	a904      	add	r1, sp, #16
 800707c:	4630      	mov	r0, r6
 800707e:	f7fd fb9d 	bl	80047bc <_printf_float>
 8007082:	4607      	mov	r7, r0
 8007084:	1c78      	adds	r0, r7, #1
 8007086:	d1d6      	bne.n	8007036 <_vfiprintf_r+0x19e>
 8007088:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800708a:	07d9      	lsls	r1, r3, #31
 800708c:	d405      	bmi.n	800709a <_vfiprintf_r+0x202>
 800708e:	89ab      	ldrh	r3, [r5, #12]
 8007090:	059a      	lsls	r2, r3, #22
 8007092:	d402      	bmi.n	800709a <_vfiprintf_r+0x202>
 8007094:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007096:	f7fe f8fb 	bl	8005290 <__retarget_lock_release_recursive>
 800709a:	89ab      	ldrh	r3, [r5, #12]
 800709c:	065b      	lsls	r3, r3, #25
 800709e:	f53f af1d 	bmi.w	8006edc <_vfiprintf_r+0x44>
 80070a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070a4:	e71c      	b.n	8006ee0 <_vfiprintf_r+0x48>
 80070a6:	ab03      	add	r3, sp, #12
 80070a8:	9300      	str	r3, [sp, #0]
 80070aa:	462a      	mov	r2, r5
 80070ac:	4b05      	ldr	r3, [pc, #20]	; (80070c4 <_vfiprintf_r+0x22c>)
 80070ae:	a904      	add	r1, sp, #16
 80070b0:	4630      	mov	r0, r6
 80070b2:	f7fd fe27 	bl	8004d04 <_printf_i>
 80070b6:	e7e4      	b.n	8007082 <_vfiprintf_r+0x1ea>
 80070b8:	0800764c 	.word	0x0800764c
 80070bc:	08007656 	.word	0x08007656
 80070c0:	080047bd 	.word	0x080047bd
 80070c4:	08006e75 	.word	0x08006e75
 80070c8:	08007652 	.word	0x08007652

080070cc <__swbuf_r>:
 80070cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ce:	460e      	mov	r6, r1
 80070d0:	4614      	mov	r4, r2
 80070d2:	4605      	mov	r5, r0
 80070d4:	b118      	cbz	r0, 80070de <__swbuf_r+0x12>
 80070d6:	6a03      	ldr	r3, [r0, #32]
 80070d8:	b90b      	cbnz	r3, 80070de <__swbuf_r+0x12>
 80070da:	f7fd ffc1 	bl	8005060 <__sinit>
 80070de:	69a3      	ldr	r3, [r4, #24]
 80070e0:	60a3      	str	r3, [r4, #8]
 80070e2:	89a3      	ldrh	r3, [r4, #12]
 80070e4:	071a      	lsls	r2, r3, #28
 80070e6:	d525      	bpl.n	8007134 <__swbuf_r+0x68>
 80070e8:	6923      	ldr	r3, [r4, #16]
 80070ea:	b31b      	cbz	r3, 8007134 <__swbuf_r+0x68>
 80070ec:	6823      	ldr	r3, [r4, #0]
 80070ee:	6922      	ldr	r2, [r4, #16]
 80070f0:	1a98      	subs	r0, r3, r2
 80070f2:	6963      	ldr	r3, [r4, #20]
 80070f4:	b2f6      	uxtb	r6, r6
 80070f6:	4283      	cmp	r3, r0
 80070f8:	4637      	mov	r7, r6
 80070fa:	dc04      	bgt.n	8007106 <__swbuf_r+0x3a>
 80070fc:	4621      	mov	r1, r4
 80070fe:	4628      	mov	r0, r5
 8007100:	f7ff fd9e 	bl	8006c40 <_fflush_r>
 8007104:	b9e0      	cbnz	r0, 8007140 <__swbuf_r+0x74>
 8007106:	68a3      	ldr	r3, [r4, #8]
 8007108:	3b01      	subs	r3, #1
 800710a:	60a3      	str	r3, [r4, #8]
 800710c:	6823      	ldr	r3, [r4, #0]
 800710e:	1c5a      	adds	r2, r3, #1
 8007110:	6022      	str	r2, [r4, #0]
 8007112:	701e      	strb	r6, [r3, #0]
 8007114:	6962      	ldr	r2, [r4, #20]
 8007116:	1c43      	adds	r3, r0, #1
 8007118:	429a      	cmp	r2, r3
 800711a:	d004      	beq.n	8007126 <__swbuf_r+0x5a>
 800711c:	89a3      	ldrh	r3, [r4, #12]
 800711e:	07db      	lsls	r3, r3, #31
 8007120:	d506      	bpl.n	8007130 <__swbuf_r+0x64>
 8007122:	2e0a      	cmp	r6, #10
 8007124:	d104      	bne.n	8007130 <__swbuf_r+0x64>
 8007126:	4621      	mov	r1, r4
 8007128:	4628      	mov	r0, r5
 800712a:	f7ff fd89 	bl	8006c40 <_fflush_r>
 800712e:	b938      	cbnz	r0, 8007140 <__swbuf_r+0x74>
 8007130:	4638      	mov	r0, r7
 8007132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007134:	4621      	mov	r1, r4
 8007136:	4628      	mov	r0, r5
 8007138:	f000 f806 	bl	8007148 <__swsetup_r>
 800713c:	2800      	cmp	r0, #0
 800713e:	d0d5      	beq.n	80070ec <__swbuf_r+0x20>
 8007140:	f04f 37ff 	mov.w	r7, #4294967295
 8007144:	e7f4      	b.n	8007130 <__swbuf_r+0x64>
	...

08007148 <__swsetup_r>:
 8007148:	b538      	push	{r3, r4, r5, lr}
 800714a:	4b2a      	ldr	r3, [pc, #168]	; (80071f4 <__swsetup_r+0xac>)
 800714c:	4605      	mov	r5, r0
 800714e:	6818      	ldr	r0, [r3, #0]
 8007150:	460c      	mov	r4, r1
 8007152:	b118      	cbz	r0, 800715c <__swsetup_r+0x14>
 8007154:	6a03      	ldr	r3, [r0, #32]
 8007156:	b90b      	cbnz	r3, 800715c <__swsetup_r+0x14>
 8007158:	f7fd ff82 	bl	8005060 <__sinit>
 800715c:	89a3      	ldrh	r3, [r4, #12]
 800715e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007162:	0718      	lsls	r0, r3, #28
 8007164:	d422      	bmi.n	80071ac <__swsetup_r+0x64>
 8007166:	06d9      	lsls	r1, r3, #27
 8007168:	d407      	bmi.n	800717a <__swsetup_r+0x32>
 800716a:	2309      	movs	r3, #9
 800716c:	602b      	str	r3, [r5, #0]
 800716e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007172:	81a3      	strh	r3, [r4, #12]
 8007174:	f04f 30ff 	mov.w	r0, #4294967295
 8007178:	e034      	b.n	80071e4 <__swsetup_r+0x9c>
 800717a:	0758      	lsls	r0, r3, #29
 800717c:	d512      	bpl.n	80071a4 <__swsetup_r+0x5c>
 800717e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007180:	b141      	cbz	r1, 8007194 <__swsetup_r+0x4c>
 8007182:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007186:	4299      	cmp	r1, r3
 8007188:	d002      	beq.n	8007190 <__swsetup_r+0x48>
 800718a:	4628      	mov	r0, r5
 800718c:	f7fe fefe 	bl	8005f8c <_free_r>
 8007190:	2300      	movs	r3, #0
 8007192:	6363      	str	r3, [r4, #52]	; 0x34
 8007194:	89a3      	ldrh	r3, [r4, #12]
 8007196:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800719a:	81a3      	strh	r3, [r4, #12]
 800719c:	2300      	movs	r3, #0
 800719e:	6063      	str	r3, [r4, #4]
 80071a0:	6923      	ldr	r3, [r4, #16]
 80071a2:	6023      	str	r3, [r4, #0]
 80071a4:	89a3      	ldrh	r3, [r4, #12]
 80071a6:	f043 0308 	orr.w	r3, r3, #8
 80071aa:	81a3      	strh	r3, [r4, #12]
 80071ac:	6923      	ldr	r3, [r4, #16]
 80071ae:	b94b      	cbnz	r3, 80071c4 <__swsetup_r+0x7c>
 80071b0:	89a3      	ldrh	r3, [r4, #12]
 80071b2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80071b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071ba:	d003      	beq.n	80071c4 <__swsetup_r+0x7c>
 80071bc:	4621      	mov	r1, r4
 80071be:	4628      	mov	r0, r5
 80071c0:	f000 f884 	bl	80072cc <__smakebuf_r>
 80071c4:	89a0      	ldrh	r0, [r4, #12]
 80071c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80071ca:	f010 0301 	ands.w	r3, r0, #1
 80071ce:	d00a      	beq.n	80071e6 <__swsetup_r+0x9e>
 80071d0:	2300      	movs	r3, #0
 80071d2:	60a3      	str	r3, [r4, #8]
 80071d4:	6963      	ldr	r3, [r4, #20]
 80071d6:	425b      	negs	r3, r3
 80071d8:	61a3      	str	r3, [r4, #24]
 80071da:	6923      	ldr	r3, [r4, #16]
 80071dc:	b943      	cbnz	r3, 80071f0 <__swsetup_r+0xa8>
 80071de:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80071e2:	d1c4      	bne.n	800716e <__swsetup_r+0x26>
 80071e4:	bd38      	pop	{r3, r4, r5, pc}
 80071e6:	0781      	lsls	r1, r0, #30
 80071e8:	bf58      	it	pl
 80071ea:	6963      	ldrpl	r3, [r4, #20]
 80071ec:	60a3      	str	r3, [r4, #8]
 80071ee:	e7f4      	b.n	80071da <__swsetup_r+0x92>
 80071f0:	2000      	movs	r0, #0
 80071f2:	e7f7      	b.n	80071e4 <__swsetup_r+0x9c>
 80071f4:	2000015c 	.word	0x2000015c

080071f8 <_raise_r>:
 80071f8:	291f      	cmp	r1, #31
 80071fa:	b538      	push	{r3, r4, r5, lr}
 80071fc:	4604      	mov	r4, r0
 80071fe:	460d      	mov	r5, r1
 8007200:	d904      	bls.n	800720c <_raise_r+0x14>
 8007202:	2316      	movs	r3, #22
 8007204:	6003      	str	r3, [r0, #0]
 8007206:	f04f 30ff 	mov.w	r0, #4294967295
 800720a:	bd38      	pop	{r3, r4, r5, pc}
 800720c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800720e:	b112      	cbz	r2, 8007216 <_raise_r+0x1e>
 8007210:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007214:	b94b      	cbnz	r3, 800722a <_raise_r+0x32>
 8007216:	4620      	mov	r0, r4
 8007218:	f000 f830 	bl	800727c <_getpid_r>
 800721c:	462a      	mov	r2, r5
 800721e:	4601      	mov	r1, r0
 8007220:	4620      	mov	r0, r4
 8007222:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007226:	f000 b817 	b.w	8007258 <_kill_r>
 800722a:	2b01      	cmp	r3, #1
 800722c:	d00a      	beq.n	8007244 <_raise_r+0x4c>
 800722e:	1c59      	adds	r1, r3, #1
 8007230:	d103      	bne.n	800723a <_raise_r+0x42>
 8007232:	2316      	movs	r3, #22
 8007234:	6003      	str	r3, [r0, #0]
 8007236:	2001      	movs	r0, #1
 8007238:	e7e7      	b.n	800720a <_raise_r+0x12>
 800723a:	2400      	movs	r4, #0
 800723c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007240:	4628      	mov	r0, r5
 8007242:	4798      	blx	r3
 8007244:	2000      	movs	r0, #0
 8007246:	e7e0      	b.n	800720a <_raise_r+0x12>

08007248 <raise>:
 8007248:	4b02      	ldr	r3, [pc, #8]	; (8007254 <raise+0xc>)
 800724a:	4601      	mov	r1, r0
 800724c:	6818      	ldr	r0, [r3, #0]
 800724e:	f7ff bfd3 	b.w	80071f8 <_raise_r>
 8007252:	bf00      	nop
 8007254:	2000015c 	.word	0x2000015c

08007258 <_kill_r>:
 8007258:	b538      	push	{r3, r4, r5, lr}
 800725a:	4d07      	ldr	r5, [pc, #28]	; (8007278 <_kill_r+0x20>)
 800725c:	2300      	movs	r3, #0
 800725e:	4604      	mov	r4, r0
 8007260:	4608      	mov	r0, r1
 8007262:	4611      	mov	r1, r2
 8007264:	602b      	str	r3, [r5, #0]
 8007266:	f7f9 ff67 	bl	8001138 <_kill>
 800726a:	1c43      	adds	r3, r0, #1
 800726c:	d102      	bne.n	8007274 <_kill_r+0x1c>
 800726e:	682b      	ldr	r3, [r5, #0]
 8007270:	b103      	cbz	r3, 8007274 <_kill_r+0x1c>
 8007272:	6023      	str	r3, [r4, #0]
 8007274:	bd38      	pop	{r3, r4, r5, pc}
 8007276:	bf00      	nop
 8007278:	20000c88 	.word	0x20000c88

0800727c <_getpid_r>:
 800727c:	f7f9 bf5a 	b.w	8001134 <_getpid>

08007280 <__swhatbuf_r>:
 8007280:	b570      	push	{r4, r5, r6, lr}
 8007282:	460c      	mov	r4, r1
 8007284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007288:	2900      	cmp	r1, #0
 800728a:	b096      	sub	sp, #88	; 0x58
 800728c:	4615      	mov	r5, r2
 800728e:	461e      	mov	r6, r3
 8007290:	da0d      	bge.n	80072ae <__swhatbuf_r+0x2e>
 8007292:	89a3      	ldrh	r3, [r4, #12]
 8007294:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007298:	f04f 0100 	mov.w	r1, #0
 800729c:	bf0c      	ite	eq
 800729e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80072a2:	2340      	movne	r3, #64	; 0x40
 80072a4:	2000      	movs	r0, #0
 80072a6:	6031      	str	r1, [r6, #0]
 80072a8:	602b      	str	r3, [r5, #0]
 80072aa:	b016      	add	sp, #88	; 0x58
 80072ac:	bd70      	pop	{r4, r5, r6, pc}
 80072ae:	466a      	mov	r2, sp
 80072b0:	f000 f848 	bl	8007344 <_fstat_r>
 80072b4:	2800      	cmp	r0, #0
 80072b6:	dbec      	blt.n	8007292 <__swhatbuf_r+0x12>
 80072b8:	9901      	ldr	r1, [sp, #4]
 80072ba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80072be:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80072c2:	4259      	negs	r1, r3
 80072c4:	4159      	adcs	r1, r3
 80072c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072ca:	e7eb      	b.n	80072a4 <__swhatbuf_r+0x24>

080072cc <__smakebuf_r>:
 80072cc:	898b      	ldrh	r3, [r1, #12]
 80072ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80072d0:	079d      	lsls	r5, r3, #30
 80072d2:	4606      	mov	r6, r0
 80072d4:	460c      	mov	r4, r1
 80072d6:	d507      	bpl.n	80072e8 <__smakebuf_r+0x1c>
 80072d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80072dc:	6023      	str	r3, [r4, #0]
 80072de:	6123      	str	r3, [r4, #16]
 80072e0:	2301      	movs	r3, #1
 80072e2:	6163      	str	r3, [r4, #20]
 80072e4:	b002      	add	sp, #8
 80072e6:	bd70      	pop	{r4, r5, r6, pc}
 80072e8:	ab01      	add	r3, sp, #4
 80072ea:	466a      	mov	r2, sp
 80072ec:	f7ff ffc8 	bl	8007280 <__swhatbuf_r>
 80072f0:	9900      	ldr	r1, [sp, #0]
 80072f2:	4605      	mov	r5, r0
 80072f4:	4630      	mov	r0, r6
 80072f6:	f7fe febd 	bl	8006074 <_malloc_r>
 80072fa:	b948      	cbnz	r0, 8007310 <__smakebuf_r+0x44>
 80072fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007300:	059a      	lsls	r2, r3, #22
 8007302:	d4ef      	bmi.n	80072e4 <__smakebuf_r+0x18>
 8007304:	f023 0303 	bic.w	r3, r3, #3
 8007308:	f043 0302 	orr.w	r3, r3, #2
 800730c:	81a3      	strh	r3, [r4, #12]
 800730e:	e7e3      	b.n	80072d8 <__smakebuf_r+0xc>
 8007310:	89a3      	ldrh	r3, [r4, #12]
 8007312:	6020      	str	r0, [r4, #0]
 8007314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007318:	81a3      	strh	r3, [r4, #12]
 800731a:	9b00      	ldr	r3, [sp, #0]
 800731c:	6163      	str	r3, [r4, #20]
 800731e:	9b01      	ldr	r3, [sp, #4]
 8007320:	6120      	str	r0, [r4, #16]
 8007322:	b15b      	cbz	r3, 800733c <__smakebuf_r+0x70>
 8007324:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007328:	4630      	mov	r0, r6
 800732a:	f000 f81d 	bl	8007368 <_isatty_r>
 800732e:	b128      	cbz	r0, 800733c <__smakebuf_r+0x70>
 8007330:	89a3      	ldrh	r3, [r4, #12]
 8007332:	f023 0303 	bic.w	r3, r3, #3
 8007336:	f043 0301 	orr.w	r3, r3, #1
 800733a:	81a3      	strh	r3, [r4, #12]
 800733c:	89a3      	ldrh	r3, [r4, #12]
 800733e:	431d      	orrs	r5, r3
 8007340:	81a5      	strh	r5, [r4, #12]
 8007342:	e7cf      	b.n	80072e4 <__smakebuf_r+0x18>

08007344 <_fstat_r>:
 8007344:	b538      	push	{r3, r4, r5, lr}
 8007346:	4d07      	ldr	r5, [pc, #28]	; (8007364 <_fstat_r+0x20>)
 8007348:	2300      	movs	r3, #0
 800734a:	4604      	mov	r4, r0
 800734c:	4608      	mov	r0, r1
 800734e:	4611      	mov	r1, r2
 8007350:	602b      	str	r3, [r5, #0]
 8007352:	f7f9 ff1f 	bl	8001194 <_fstat>
 8007356:	1c43      	adds	r3, r0, #1
 8007358:	d102      	bne.n	8007360 <_fstat_r+0x1c>
 800735a:	682b      	ldr	r3, [r5, #0]
 800735c:	b103      	cbz	r3, 8007360 <_fstat_r+0x1c>
 800735e:	6023      	str	r3, [r4, #0]
 8007360:	bd38      	pop	{r3, r4, r5, pc}
 8007362:	bf00      	nop
 8007364:	20000c88 	.word	0x20000c88

08007368 <_isatty_r>:
 8007368:	b538      	push	{r3, r4, r5, lr}
 800736a:	4d06      	ldr	r5, [pc, #24]	; (8007384 <_isatty_r+0x1c>)
 800736c:	2300      	movs	r3, #0
 800736e:	4604      	mov	r4, r0
 8007370:	4608      	mov	r0, r1
 8007372:	602b      	str	r3, [r5, #0]
 8007374:	f7f9 ff14 	bl	80011a0 <_isatty>
 8007378:	1c43      	adds	r3, r0, #1
 800737a:	d102      	bne.n	8007382 <_isatty_r+0x1a>
 800737c:	682b      	ldr	r3, [r5, #0]
 800737e:	b103      	cbz	r3, 8007382 <_isatty_r+0x1a>
 8007380:	6023      	str	r3, [r4, #0]
 8007382:	bd38      	pop	{r3, r4, r5, pc}
 8007384:	20000c88 	.word	0x20000c88

08007388 <_init>:
 8007388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800738a:	bf00      	nop
 800738c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800738e:	bc08      	pop	{r3}
 8007390:	469e      	mov	lr, r3
 8007392:	4770      	bx	lr

08007394 <_fini>:
 8007394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007396:	bf00      	nop
 8007398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800739a:	bc08      	pop	{r3}
 800739c:	469e      	mov	lr, r3
 800739e:	4770      	bx	lr
